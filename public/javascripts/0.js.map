{"version":3,"sources":["webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","PI","create","out","clone","a","copy","identity","fromValues","b","c","d","tx","ty","set","invert","aa","ab","ac","ad","atx","aty","det","determinant","multiply","a0","a1","a2","a3","a4","a5","b0","b1","b2","b3","b4","b5","rotate","rad","s","sin","cos","mat2d_scale","v","v0","v1","translate","fromRotation","fromScaling","fromTranslation","str","frob","sqrt","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat2d_equals","abs","max","mul","sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","mat4_set","mat4_identity","transpose","a01","a02","a03","a12","a13","a23","mat4_invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","adjoint","mat4_determinant","mat4_multiply","mat4_translate","x","y","z","mat4_scale","mat4_rotate","axis","t","b12","b20","b21","b22","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a6","a7","a8","a9","a14","a15","b6","b7","b8","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_fromValues","normalize","vec3_dot","cross","vec3_len","vec","vec4_length","vec4_squaredLength","vec4_create","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","acos","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","m","fRoot","fTrace","i","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","mat3_create","view","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","ceil","vec2_floor","floor","vec2_min","min","vec2_max","vec2_round","round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","r","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","cosine","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","stride","offset","count","fn","arg","l","length"],"mappings":"y/LAMA,MAAAA,EAAA,KACA,IAAAC,EAAA,oBAAAC,0BAAAC,MACA,MAAAC,EAAAC,KAAAC,OAWAD,KAAAE,GCOA,SAAAC,IACA,IAAAC,EAAA,IAAAR,EAAA,GASA,OARAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,KACAA,EAAA,KACAA,EASA,SAAAC,EAAAC,GACA,IAAAF,EAAA,IAAAR,EAAA,GAOA,OANAQ,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAUA,SAAAG,EAAAH,EAAAE,GAOA,OANAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EASA,SAAAI,EAAAJ,GAOA,OANAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAcA,SAAAK,EAAAH,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAV,EAAA,IAAAR,EAAA,GAOA,OANAQ,EAAA,GAAAE,EACAF,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAeA,SAAAW,EAAAX,EAAAE,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,GAOA,OANAV,EAAA,GAAAE,EACAF,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAUA,SAAAY,EAAAZ,EAAAE,GACA,IAAAW,EAAAX,EAAA,GAAAY,EAAAZ,EAAA,GAAAa,EAAAb,EAAA,GAAAc,EAAAd,EAAA,GACAe,EAAAf,EAAA,GAAAgB,EAAAhB,EAAA,GAEAiB,EAAAN,EAAAG,EAAAF,EAAAC,EACA,OAAAI,GAGAA,EAAA,EAAAA,EAEAnB,EAAA,GAAAgB,EAAAG,EACAnB,EAAA,IAAAc,EAAAK,EACAnB,EAAA,IAAAe,EAAAI,EACAnB,EAAA,GAAAa,EAAAM,EACAnB,EAAA,IAAAe,EAAAG,EAAAF,EAAAC,GAAAE,EACAnB,EAAA,IAAAc,EAAAG,EAAAJ,EAAAK,GAAAC,EACAnB,GAVA,KAmBA,SAAAoB,EAAAlB,GACA,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAWA,SAAAmB,EAAArB,EAAAE,EAAAI,GACA,IAAAgB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,GAOA,OANAN,EAAA,GAAAsB,EAAAM,EAAAJ,EAAAK,EACA7B,EAAA,GAAAuB,EAAAK,EAAAH,EAAAI,EACA7B,EAAA,GAAAsB,EAAAQ,EAAAN,EAAAO,EACA/B,EAAA,GAAAuB,EAAAO,EAAAL,EAAAM,EACA/B,EAAA,GAAAsB,EAAAU,EAAAR,EAAAS,EAAAP,EACA1B,EAAA,GAAAuB,EAAAS,EAAAP,EAAAQ,EAAAN,EACA3B,EAWA,SAAAkC,EAAAlC,EAAAE,EAAAiC,GACA,IAAAb,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACAkC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GAOA,OANAnC,EAAA,GAAAsB,EAAAf,EAAAiB,EAAAY,EACApC,EAAA,GAAAuB,EAAAhB,EAAAkB,EAAAW,EACApC,EAAA,GAAAsB,GAAAc,EAAAZ,EAAAjB,EACAP,EAAA,GAAAuB,GAAAa,EAAAX,EAAAlB,EACAP,EAAA,GAAA0B,EACA1B,EAAA,GAAA2B,EACA3B,EAWA,SAAAuC,EAAAvC,EAAAE,EAAAsC,GACA,IAAAlB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACAuC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAOA,OANAxC,EAAA,GAAAsB,EAAAmB,EACAzC,EAAA,GAAAuB,EAAAkB,EACAzC,EAAA,GAAAwB,EAAAkB,EACA1C,EAAA,GAAAyB,EAAAiB,EACA1C,EAAA,GAAA0B,EACA1B,EAAA,GAAA2B,EACA3B,EAWA,SAAA2C,EAAA3C,EAAAE,EAAAsC,GACA,IAAAlB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACAuC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAOA,OANAxC,EAAA,GAAAsB,EACAtB,EAAA,GAAAuB,EACAvB,EAAA,GAAAwB,EACAxB,EAAA,GAAAyB,EACAzB,EAAA,GAAAsB,EAAAmB,EAAAjB,EAAAkB,EAAAhB,EACA1B,EAAA,GAAAuB,EAAAkB,EAAAhB,EAAAiB,EAAAf,EACA3B,EAcA,SAAA4C,EAAA5C,EAAAmC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GAAA5B,EAAAX,KAAA0C,IAAAH,GAOA,OANAnC,EAAA,GAAAO,EACAP,EAAA,GAAAoC,EACApC,EAAA,IAAAoC,EACApC,EAAA,GAAAO,EACAP,EAAA,KACAA,EAAA,KACAA,EAcA,SAAA6C,EAAA7C,EAAAwC,GAOA,OANAxC,EAAA,GAAAwC,EAAA,GACAxC,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAwC,EAAA,GACAxC,EAAA,KACAA,EAAA,KACAA,EAcA,SAAA8C,EAAA9C,EAAAwC,GAOA,OANAxC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAwC,EAAA,GACAxC,EAAA,GAAAwC,EAAA,GACAxC,EASA,SAAA+C,EAAA7C,GACA,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OASA,SAAA8C,EAAA9C,GACA,OAAAN,KAAAqD,KAAArD,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,SAWA,SAAAiD,EAAAnD,EAAAE,EAAAI,GAOA,OANAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAWA,SAAAoD,EAAApD,EAAAE,EAAAI,GAOA,OANAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAWA,SAAAqD,EAAArD,EAAAE,EAAAI,GAOA,OANAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAYA,SAAAsD,EAAAtD,EAAAE,EAAAI,EAAAiD,GAOA,OANAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAUA,SAAAwD,EAAAtD,EAAAI,GACA,OAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,GAUA,SAAAmD,EAAAvD,EAAAI,GACA,IAAAgB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,GACA,OAAAV,KAAA8D,IAAApC,EAAAM,IAAArC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAApC,GAAA1B,KAAA8D,IAAA9B,KACAhC,KAAA8D,IAAAnC,EAAAM,IAAAtC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAnC,GAAA3B,KAAA8D,IAAA7B,KACAjC,KAAA8D,IAAAlC,EAAAM,IAAAvC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAlC,GAAA5B,KAAA8D,IAAA5B,KACAlC,KAAA8D,IAAAjC,EAAAM,IAAAxC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAjC,GAAA7B,KAAA8D,IAAA3B,KACAnC,KAAA8D,IAAAhC,EAAAM,IAAAzC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAhC,GAAA9B,KAAA8D,IAAA1B,KACApC,KAAA8D,IAAA/B,EAAAM,IAAA1C,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAA/B,GAAA/B,KAAA8D,IAAAzB,IAOA,MAAA2B,EAAAvC,EAMAwC,EAAAT,ECnbA,SAAAU,IACA,IAAA9D,EAAA,IAAAR,EAAA,IAmBA,OAlBAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,OAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EASA,SAAA+D,EAAA7D,GACA,IAAAF,EAAA,IAAAR,EAAA,IAiBA,OAhBAQ,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAUA,SAAAgE,EAAAhE,EAAAE,GAiBA,OAhBAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAwBA,SAAAiE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAjF,EAAA,IAAAR,EAAA,IAiBA,OAhBAQ,EAAA,GAAAkE,EACAlE,EAAA,GAAAmE,EACAnE,EAAA,GAAAoE,EACApE,EAAA,GAAAqE,EACArE,EAAA,GAAAsE,EACAtE,EAAA,GAAAuE,EACAvE,EAAA,GAAAwE,EACAxE,EAAA,GAAAyE,EACAzE,EAAA,GAAA0E,EACA1E,EAAA,GAAA2E,EACA3E,EAAA,IAAA4E,EACA5E,EAAA,IAAA6E,EACA7E,EAAA,IAAA8E,EACA9E,EAAA,IAAA+E,EACA/E,EAAA,IAAAgF,EACAhF,EAAA,IAAAiF,EACAjF,EAyBA,SAAAkF,EAAAlF,EAAAkE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAiBA,OAhBAjF,EAAA,GAAAkE,EACAlE,EAAA,GAAAmE,EACAnE,EAAA,GAAAoE,EACApE,EAAA,GAAAqE,EACArE,EAAA,GAAAsE,EACAtE,EAAA,GAAAuE,EACAvE,EAAA,GAAAwE,EACAxE,EAAA,GAAAyE,EACAzE,EAAA,GAAA0E,EACA1E,EAAA,GAAA2E,EACA3E,EAAA,IAAA4E,EACA5E,EAAA,IAAA6E,EACA7E,EAAA,IAAA8E,EACA9E,EAAA,IAAA+E,EACA/E,EAAA,IAAAgF,EACAhF,EAAA,IAAAiF,EACAjF,EAUA,SAAAmF,EAAAnF,GAiBA,OAhBAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAUA,SAAAoF,EAAApF,EAAAE,GAEA,GAAAF,IAAAE,EAAA,CACA,IAAAmF,EAAAnF,EAAA,GAAAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GACAsF,EAAAtF,EAAA,GAAAuF,EAAAvF,EAAA,GACAwF,EAAAxF,EAAA,IAEAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,IACAF,EAAA,GAAAqF,EACArF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,IACAF,EAAA,GAAAsF,EACAtF,EAAA,GAAAwF,EACAxF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAuF,EACAvF,EAAA,IAAAyF,EACAzF,EAAA,IAAA0F,OAEA1F,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,IACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,IACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IAGA,OAAAF,EAUA,SAAA2F,EAAA3F,EAAAE,GACA,IAAA0F,EAAA1F,EAAA,GAAAmF,EAAAnF,EAAA,GAAAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GACA2F,EAAA3F,EAAA,GAAA4F,EAAA5F,EAAA,GAAAsF,EAAAtF,EAAA,GAAAuF,EAAAvF,EAAA,GACA6F,EAAA7F,EAAA,GAAA8F,EAAA9F,EAAA,GAAA+F,EAAA/F,EAAA,IAAAwF,EAAAxF,EAAA,IACAgG,EAAAhG,EAAA,IAAAiG,EAAAjG,EAAA,IAAAkG,EAAAlG,EAAA,IAAAmG,EAAAnG,EAAA,IAEAoG,EAAAV,EAAAE,EAAAT,EAAAQ,EACAU,EAAAX,EAAAJ,EAAAF,EAAAO,EACAW,EAAAZ,EAAAH,EAAAF,EAAAM,EACAY,EAAApB,EAAAG,EAAAF,EAAAQ,EACAY,EAAArB,EAAAI,EAAAF,EAAAO,EACAa,EAAArB,EAAAG,EAAAF,EAAAC,EACAoB,EAAAb,EAAAI,EAAAH,EAAAE,EACAW,EAAAd,EAAAK,EAAAH,EAAAC,EACAY,EAAAf,EAAAM,EAAAX,EAAAQ,EACAa,EAAAf,EAAAI,EAAAH,EAAAE,EACAa,EAAAhB,EAAAK,EAAAX,EAAAS,EACAc,EAAAhB,EAAAI,EAAAX,EAAAU,EAGAjF,EAAAmF,EAAAW,EAAAV,EAAAS,EAAAR,EAAAO,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA,OAAAzF,GAGAA,EAAA,EAAAA,EAEAnB,EAAA,IAAA8F,EAAAmB,EAAAzB,EAAAwB,EAAAvB,EAAAsB,GAAA5F,EACAnB,EAAA,IAAAsF,EAAA0B,EAAA3B,EAAA4B,EAAA1B,EAAAwB,GAAA5F,EACAnB,EAAA,IAAAmG,EAAAQ,EAAAP,EAAAM,EAAAL,EAAAI,GAAAtF,EACAnB,EAAA,IAAAiG,EAAAS,EAAAV,EAAAW,EAAAjB,EAAAe,GAAAtF,EACAnB,EAAA,IAAAwF,EAAAsB,EAAAjB,EAAAoB,EAAAxB,EAAAoB,GAAA1F,EACAnB,EAAA,IAAA4F,EAAAqB,EAAA3B,EAAAwB,EAAAvB,EAAAsB,GAAA1F,EACAnB,EAAA,IAAAoG,EAAAI,EAAAN,EAAAS,EAAAN,EAAAE,GAAApF,EACAnB,EAAA,IAAA+F,EAAAY,EAAAV,EAAAO,EAAAd,EAAAa,GAAApF,EACAnB,EAAA,IAAA6F,EAAAmB,EAAAlB,EAAAgB,EAAArB,EAAAmB,GAAAzF,EACAnB,EAAA,IAAAqF,EAAAyB,EAAAlB,EAAAoB,EAAAzB,EAAAqB,GAAAzF,EACAnB,EAAA,KAAAkG,EAAAQ,EAAAP,EAAAK,EAAAH,EAAAC,GAAAnF,EACAnB,EAAA,KAAAgG,EAAAQ,EAAAT,EAAAW,EAAAhB,EAAAY,GAAAnF,EACAnB,EAAA,KAAA8F,EAAAe,EAAAhB,EAAAkB,EAAAvB,EAAAoB,GAAAzF,EACAnB,EAAA,KAAA4F,EAAAmB,EAAA1B,EAAAwB,EAAAvB,EAAAsB,GAAAzF,EACAnB,EAAA,KAAAmG,EAAAI,EAAAL,EAAAO,EAAAL,EAAAE,GAAAnF,EACAnB,EAAA,KAAA+F,EAAAU,EAAAT,EAAAO,EAAAN,EAAAK,GAAAnF,EAEAnB,GArBA,KA+BA,SAAAkH,EAAAlH,EAAAE,GACA,IAAA0F,EAAA1F,EAAA,GAAAmF,EAAAnF,EAAA,GAAAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GACA2F,EAAA3F,EAAA,GAAA4F,EAAA5F,EAAA,GAAAsF,EAAAtF,EAAA,GAAAuF,EAAAvF,EAAA,GACA6F,EAAA7F,EAAA,GAAA8F,EAAA9F,EAAA,GAAA+F,EAAA/F,EAAA,IAAAwF,EAAAxF,EAAA,IACAgG,EAAAhG,EAAA,IAAAiG,EAAAjG,EAAA,IAAAkG,EAAAlG,EAAA,IAAAmG,EAAAnG,EAAA,IAkBA,OAhBAF,EAAA,GAAA8F,GAAAG,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAR,EAAAa,EAAAZ,EAAAW,GAAAD,GAAAX,EAAAE,EAAAD,EAAAQ,GACAjG,EAAA,KAAAqF,GAAAY,EAAAI,EAAAX,EAAAU,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAI,EAAAH,EAAAU,IACAjG,EAAA,GAAAqF,GAAAG,EAAAa,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAC,GACAxF,EAAA,KAAAqF,GAAAG,EAAAE,EAAAD,EAAAQ,GAAAH,GAAAR,EAAAI,EAAAH,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAC,IACAxF,EAAA,KAAA6F,GAAAI,EAAAI,EAAAX,EAAAU,GAAAL,GAAAP,EAAAa,EAAAZ,EAAAW,GAAAF,GAAAV,EAAAE,EAAAD,EAAAQ,IACAjG,EAAA,GAAA4F,GAAAK,EAAAI,EAAAX,EAAAU,GAAAL,GAAAT,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAI,EAAAH,EAAAU,GACAjG,EAAA,KAAA4F,GAAAJ,EAAAa,EAAAZ,EAAAW,GAAAP,GAAAP,EAAAe,EAAAd,EAAAa,GAAAF,GAAAZ,EAAAG,EAAAF,EAAAC,IACAxF,EAAA,GAAA4F,GAAAJ,EAAAE,EAAAD,EAAAQ,GAAAJ,GAAAP,EAAAI,EAAAH,EAAAU,GAAAF,GAAAT,EAAAG,EAAAF,EAAAC,GACAxF,EAAA,GAAA6F,GAAAG,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAD,EAAAO,EAAAZ,EAAAU,GAAAD,GAAAJ,EAAAJ,EAAAD,EAAAO,GACAhG,EAAA,KAAA4F,GAAAI,EAAAK,EAAAX,EAAAS,GAAAJ,GAAAV,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAK,EAAAH,EAAAS,IACAhG,EAAA,IAAA4F,GAAAE,EAAAO,EAAAZ,EAAAU,GAAAN,GAAAR,EAAAgB,EAAAd,EAAAY,GAAAD,GAAAb,EAAAI,EAAAF,EAAAO,GACA9F,EAAA,MAAA4F,GAAAE,EAAAJ,EAAAD,EAAAO,GAAAH,GAAAR,EAAAK,EAAAH,EAAAS,GAAAD,GAAAV,EAAAI,EAAAF,EAAAO,IACA9F,EAAA,MAAA6F,GAAAG,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAD,EAAAM,EAAAZ,EAAAW,GAAAD,GAAAJ,EAAAG,EAAAT,EAAAQ,IACAhG,EAAA,IAAA4F,GAAAI,EAAAI,EAAAH,EAAAE,GAAAJ,GAAAV,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAY,EAAAX,EAAAU,GACAhG,EAAA,MAAA4F,GAAAE,EAAAM,EAAAZ,EAAAW,GAAAN,GAAAR,EAAAe,EAAAd,EAAAa,GAAAD,GAAAb,EAAAG,EAAAF,EAAAQ,IACA9F,EAAA,IAAA4F,GAAAE,EAAAG,EAAAT,EAAAQ,GAAAH,GAAAR,EAAAY,EAAAX,EAAAU,GAAAD,GAAAV,EAAAG,EAAAF,EAAAQ,GACA9F,EASA,SAAAmH,EAAAjH,GACA,IAAA0F,EAAA1F,EAAA,GAAAmF,EAAAnF,EAAA,GAAAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GACA2F,EAAA3F,EAAA,GAAA4F,EAAA5F,EAAA,GAAAsF,EAAAtF,EAAA,GAAAuF,EAAAvF,EAAA,GACA6F,EAAA7F,EAAA,GAAA8F,EAAA9F,EAAA,GAAA+F,EAAA/F,EAAA,IAAAwF,EAAAxF,EAAA,IACAgG,EAAAhG,EAAA,IAAAiG,EAAAjG,EAAA,IAAAkG,EAAAlG,EAAA,IAAAmG,EAAAnG,EAAA,IAgBA,OAdA0F,EAAAE,EAAAT,EAAAQ,IAWAI,EAAAI,EAAAX,EAAAU,IAVAR,EAAAJ,EAAAF,EAAAO,IASAG,EAAAK,EAAAX,EAAAS,IARAP,EAAAH,EAAAF,EAAAM,IAOAG,EAAAI,EAAAH,EAAAE,IANAd,EAAAG,EAAAF,EAAAQ,IAKAC,EAAAM,EAAAX,EAAAQ,IAJAb,EAAAI,EAAAF,EAAAO,IAGAC,EAAAK,EAAAH,EAAAC,IAFAZ,EAAAG,EAAAF,EAAAC,IACAO,EAAAI,EAAAH,EAAAE,GAmBA,SAAAkB,EAAApH,EAAAE,EAAAI,GACA,IAAAsF,EAAA1F,EAAA,GAAAmF,EAAAnF,EAAA,GAAAoF,EAAApF,EAAA,GAAAqF,EAAArF,EAAA,GACA2F,EAAA3F,EAAA,GAAA4F,EAAA5F,EAAA,GAAAsF,EAAAtF,EAAA,GAAAuF,EAAAvF,EAAA,GACA6F,EAAA7F,EAAA,GAAA8F,EAAA9F,EAAA,GAAA+F,EAAA/F,EAAA,IAAAwF,EAAAxF,EAAA,IACAgG,EAAAhG,EAAA,IAAAiG,EAAAjG,EAAA,IAAAkG,EAAAlG,EAAA,IAAAmG,EAAAnG,EAAA,IAGA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAuBA,OAtBAN,EAAA,GAAA4B,EAAAgE,EAAA/D,EAAAgE,EAAA/D,EAAAiE,EAAAhE,EAAAmE,EACAlG,EAAA,GAAA4B,EAAAyD,EAAAxD,EAAAiE,EAAAhE,EAAAkE,EAAAjE,EAAAoE,EACAnG,EAAA,GAAA4B,EAAA0D,EAAAzD,EAAA2D,EAAA1D,EAAAmE,EAAAlE,EAAAqE,EACApG,EAAA,GAAA4B,EAAA2D,EAAA1D,EAAA4D,EAAA3D,EAAA4D,EAAA3D,EAAAsE,EAEAzE,EAAAtB,EAAA,GAAYuB,EAAAvB,EAAA,GAAWwB,EAAAxB,EAAA,GAAWyB,EAAAzB,EAAA,GAClCN,EAAA,GAAA4B,EAAAgE,EAAA/D,EAAAgE,EAAA/D,EAAAiE,EAAAhE,EAAAmE,EACAlG,EAAA,GAAA4B,EAAAyD,EAAAxD,EAAAiE,EAAAhE,EAAAkE,EAAAjE,EAAAoE,EACAnG,EAAA,GAAA4B,EAAA0D,EAAAzD,EAAA2D,EAAA1D,EAAAmE,EAAAlE,EAAAqE,EACApG,EAAA,GAAA4B,EAAA2D,EAAA1D,EAAA4D,EAAA3D,EAAA4D,EAAA3D,EAAAsE,EAEAzE,EAAAtB,EAAA,GAAYuB,EAAAvB,EAAA,GAAWwB,EAAAxB,EAAA,IAAYyB,EAAAzB,EAAA,IACnCN,EAAA,GAAA4B,EAAAgE,EAAA/D,EAAAgE,EAAA/D,EAAAiE,EAAAhE,EAAAmE,EACAlG,EAAA,GAAA4B,EAAAyD,EAAAxD,EAAAiE,EAAAhE,EAAAkE,EAAAjE,EAAAoE,EACAnG,EAAA,IAAA4B,EAAA0D,EAAAzD,EAAA2D,EAAA1D,EAAAmE,EAAAlE,EAAAqE,EACApG,EAAA,IAAA4B,EAAA2D,EAAA1D,EAAA4D,EAAA3D,EAAA4D,EAAA3D,EAAAsE,EAEAzE,EAAAtB,EAAA,IAAauB,EAAAvB,EAAA,IAAYwB,EAAAxB,EAAA,IAAYyB,EAAAzB,EAAA,IACrCN,EAAA,IAAA4B,EAAAgE,EAAA/D,EAAAgE,EAAA/D,EAAAiE,EAAAhE,EAAAmE,EACAlG,EAAA,IAAA4B,EAAAyD,EAAAxD,EAAAiE,EAAAhE,EAAAkE,EAAAjE,EAAAoE,EACAnG,EAAA,IAAA4B,EAAA0D,EAAAzD,EAAA2D,EAAA1D,EAAAmE,EAAAlE,EAAAqE,EACApG,EAAA,IAAA4B,EAAA2D,EAAA1D,EAAA4D,EAAA3D,EAAA4D,EAAA3D,EAAAsE,EACArG,EAWA,SAAAqH,EAAArH,EAAAE,EAAAsC,GACA,IACAoD,EAAAP,EAAAC,EAAAC,EACAM,EAAAC,EAAAN,EAAAC,EACAM,EAAAC,EAAAC,EAAAP,EAHA4B,EAAA9E,EAAA,GAAA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAyBA,OApBAtC,IAAAF,GACAA,EAAA,IAAAE,EAAA,GAAAoH,EAAApH,EAAA,GAAAqH,EAAArH,EAAA,GAAAsH,EAAAtH,EAAA,IACAF,EAAA,IAAAE,EAAA,GAAAoH,EAAApH,EAAA,GAAAqH,EAAArH,EAAA,GAAAsH,EAAAtH,EAAA,IACAF,EAAA,IAAAE,EAAA,GAAAoH,EAAApH,EAAA,GAAAqH,EAAArH,EAAA,IAAAsH,EAAAtH,EAAA,IACAF,EAAA,IAAAE,EAAA,GAAAoH,EAAApH,EAAA,GAAAqH,EAAArH,EAAA,IAAAsH,EAAAtH,EAAA,MAEA0F,EAAA1F,EAAA,GAAemF,EAAAnF,EAAA,GAAYoF,EAAApF,EAAA,GAAYqF,EAAArF,EAAA,GACvC2F,EAAA3F,EAAA,GAAe4F,EAAA5F,EAAA,GAAYsF,EAAAtF,EAAA,GAAYuF,EAAAvF,EAAA,GACvC6F,EAAA7F,EAAA,GAAe8F,EAAA9F,EAAA,GAAY+F,EAAA/F,EAAA,IAAawF,EAAAxF,EAAA,IAExCF,EAAA,GAAA4F,EAAiB5F,EAAA,GAAAqF,EAAcrF,EAAA,GAAAsF,EAActF,EAAA,GAAAuF,EAC7CvF,EAAA,GAAA6F,EAAiB7F,EAAA,GAAA8F,EAAc9F,EAAA,GAAAwF,EAAcxF,EAAA,GAAAyF,EAC7CzF,EAAA,GAAA+F,EAAiB/F,EAAA,GAAAgG,EAAchG,EAAA,IAAAiG,EAAejG,EAAA,IAAA0F,EAE9C1F,EAAA,IAAA4F,EAAA0B,EAAAzB,EAAA0B,EAAAxB,EAAAyB,EAAAtH,EAAA,IACAF,EAAA,IAAAqF,EAAAiC,EAAAxB,EAAAyB,EAAAvB,EAAAwB,EAAAtH,EAAA,IACAF,EAAA,IAAAsF,EAAAgC,EAAA9B,EAAA+B,EAAAtB,EAAAuB,EAAAtH,EAAA,IACAF,EAAA,IAAAuF,EAAA+B,EAAA7B,EAAA8B,EAAA7B,EAAA8B,EAAAtH,EAAA,KAGAF,EAWA,SAAAyH,EAAAzH,EAAAE,EAAAsC,GACA,IAAA8E,EAAA9E,EAAA,GAAA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAkBA,OAhBAxC,EAAA,GAAAE,EAAA,GAAAoH,EACAtH,EAAA,GAAAE,EAAA,GAAAoH,EACAtH,EAAA,GAAAE,EAAA,GAAAoH,EACAtH,EAAA,GAAAE,EAAA,GAAAoH,EACAtH,EAAA,GAAAE,EAAA,GAAAqH,EACAvH,EAAA,GAAAE,EAAA,GAAAqH,EACAvH,EAAA,GAAAE,EAAA,GAAAqH,EACAvH,EAAA,GAAAE,EAAA,GAAAqH,EACAvH,EAAA,GAAAE,EAAA,GAAAsH,EACAxH,EAAA,GAAAE,EAAA,GAAAsH,EACAxH,EAAA,IAAAE,EAAA,IAAAsH,EACAxH,EAAA,IAAAE,EAAA,IAAAsH,EACAxH,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAYA,SAAA0H,EAAA1H,EAAAE,EAAAiC,EAAAwF,GACA,IAEAvF,EAAA7B,EAAAqH,EACAhC,EAAAP,EAAAC,EAAAC,EACAM,EAAAC,EAAAN,EAAAC,EACAM,EAAAC,EAAAC,EAAAP,EACAY,EAAAC,EAAAC,EACAQ,EAAAC,EAAAY,EACAC,EAAAC,EAAAC,EARAV,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,GAAAH,EAAAG,EAAA,GACAM,EAAArI,KAAAqD,KAAAqE,IAAAC,IAAAC,KASA,OAAAS,EAAA1I,EAA+B,MAG/B+H,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA7F,EAAAxC,KAAAyC,IAAAF,GAEAyF,EAAA,GADArH,EAAAX,KAAA0C,IAAAH,IAGAyD,EAAA1F,EAAA,GAAamF,EAAAnF,EAAA,GAAYoF,EAAApF,EAAA,GAAYqF,EAAArF,EAAA,GACrC2F,EAAA3F,EAAA,GAAa4F,EAAA5F,EAAA,GAAYsF,EAAAtF,EAAA,GAAYuF,EAAAvF,EAAA,GACrC6F,EAAA7F,EAAA,GAAa8F,EAAA9F,EAAA,GAAY+F,EAAA/F,EAAA,IAAawF,EAAAxF,EAAA,IAGtCoG,EAAAgB,IAAAM,EAAArH,EAAsBgG,EAAAgB,EAAAD,EAAAM,EAAAJ,EAAApF,EAAyBoE,EAAAgB,EAAAF,EAAAM,EAAAL,EAAAnF,EAC/C4E,EAAAM,EAAAC,EAAAK,EAAAJ,EAAApF,EAA0B6E,EAAAM,IAAAK,EAAArH,EAAqBsH,EAAAL,EAAAD,EAAAK,EAAAN,EAAAlF,EAC/C0F,EAAAR,EAAAE,EAAAI,EAAAL,EAAAnF,EAA0B2F,EAAAR,EAAAC,EAAAI,EAAAN,EAAAlF,EAAyB4F,EAAAR,IAAAI,EAAArH,EAGnDP,EAAA,GAAA4F,EAAAU,EAAAT,EAAAU,EAAAR,EAAAS,EACAxG,EAAA,GAAAqF,EAAAiB,EAAAR,EAAAS,EAAAP,EAAAQ,EACAxG,EAAA,GAAAsF,EAAAgB,EAAAd,EAAAe,EAAAN,EAAAO,EACAxG,EAAA,GAAAuF,EAAAe,EAAAb,EAAAc,EAAAb,EAAAc,EACAxG,EAAA,GAAA4F,EAAAoB,EAAAnB,EAAAoB,EAAAlB,EAAA8B,EACA7H,EAAA,GAAAqF,EAAA2B,EAAAlB,EAAAmB,EAAAjB,EAAA6B,EACA7H,EAAA,GAAAsF,EAAA0B,EAAAxB,EAAAyB,EAAAhB,EAAA4B,EACA7H,EAAA,GAAAuF,EAAAyB,EAAAvB,EAAAwB,EAAAvB,EAAAmC,EACA7H,EAAA,GAAA4F,EAAAkC,EAAAjC,EAAAkC,EAAAhC,EAAAiC,EACAhI,EAAA,GAAAqF,EAAAyC,EAAAhC,EAAAiC,EAAA/B,EAAAgC,EACAhI,EAAA,IAAAsF,EAAAwC,EAAAtC,EAAAuC,EAAA9B,EAAA+B,EACAhI,EAAA,IAAAuF,EAAAuC,EAAArC,EAAAsC,EAAArC,EAAAsC,EAEA9H,IAAAF,IACAA,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,KAEAF,GAWA,SAAAkI,EAAAlI,EAAAE,EAAAiC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GACA0D,EAAA3F,EAAA,GACA4F,EAAA5F,EAAA,GACAsF,EAAAtF,EAAA,GACAuF,EAAAvF,EAAA,GACA6F,EAAA7F,EAAA,GACA8F,EAAA9F,EAAA,GACA+F,EAAA/F,EAAA,IACAwF,EAAAxF,EAAA,IAsBA,OApBAA,IAAAF,IACAA,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,KAIAF,EAAA,GAAA6F,EAAAtF,EAAAwF,EAAA3D,EACApC,EAAA,GAAA8F,EAAAvF,EAAAyF,EAAA5D,EACApC,EAAA,GAAAwF,EAAAjF,EAAA0F,EAAA7D,EACApC,EAAA,GAAAyF,EAAAlF,EAAAmF,EAAAtD,EACApC,EAAA,GAAA+F,EAAAxF,EAAAsF,EAAAzD,EACApC,EAAA,GAAAgG,EAAAzF,EAAAuF,EAAA1D,EACApC,EAAA,IAAAiG,EAAA1F,EAAAiF,EAAApD,EACApC,EAAA,IAAA0F,EAAAnF,EAAAkF,EAAArD,EACApC,EAWA,SAAAmI,EAAAnI,EAAAE,EAAAiC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GACAyD,EAAA1F,EAAA,GACAmF,EAAAnF,EAAA,GACAoF,EAAApF,EAAA,GACAqF,EAAArF,EAAA,GACA6F,EAAA7F,EAAA,GACA8F,EAAA9F,EAAA,GACA+F,EAAA/F,EAAA,IACAwF,EAAAxF,EAAA,IAsBA,OApBAA,IAAAF,IACAA,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,KAIAF,EAAA,GAAA4F,EAAArF,EAAAwF,EAAA3D,EACApC,EAAA,GAAAqF,EAAA9E,EAAAyF,EAAA5D,EACApC,EAAA,GAAAsF,EAAA/E,EAAA0F,EAAA7D,EACApC,EAAA,GAAAuF,EAAAhF,EAAAmF,EAAAtD,EACApC,EAAA,GAAA4F,EAAAxD,EAAA2D,EAAAxF,EACAP,EAAA,GAAAqF,EAAAjD,EAAA4D,EAAAzF,EACAP,EAAA,IAAAsF,EAAAlD,EAAA6D,EAAA1F,EACAP,EAAA,IAAAuF,EAAAnD,EAAAsD,EAAAnF,EACAP,EAWA,SAAAoI,EAAApI,EAAAE,EAAAiC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GACAyD,EAAA1F,EAAA,GACAmF,EAAAnF,EAAA,GACAoF,EAAApF,EAAA,GACAqF,EAAArF,EAAA,GACA2F,EAAA3F,EAAA,GACA4F,EAAA5F,EAAA,GACAsF,EAAAtF,EAAA,GACAuF,EAAAvF,EAAA,GAsBA,OApBAA,IAAAF,IACAA,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,IACAF,EAAA,IAAAE,EAAA,KAIAF,EAAA,GAAA4F,EAAArF,EAAAsF,EAAAzD,EACApC,EAAA,GAAAqF,EAAA9E,EAAAuF,EAAA1D,EACApC,EAAA,GAAAsF,EAAA/E,EAAAiF,EAAApD,EACApC,EAAA,GAAAuF,EAAAhF,EAAAkF,EAAArD,EACApC,EAAA,GAAA6F,EAAAtF,EAAAqF,EAAAxD,EACApC,EAAA,GAAA8F,EAAAvF,EAAA8E,EAAAjD,EACApC,EAAA,GAAAwF,EAAAjF,EAAA+E,EAAAlD,EACApC,EAAA,GAAAyF,EAAAlF,EAAAgF,EAAAnD,EACApC,EAcA,SAAAqI,EAAArI,EAAAwC,GAiBA,OAhBAxC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,MACAA,EAcA,SAAAsI,EAAAtI,EAAAwC,GAiBA,OAhBAxC,EAAA,GAAAwC,EAAA,GACAxC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAwC,EAAA,GACAxC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAwC,EAAA,GACAxC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAeA,SAAAuI,GAAAvI,EAAAmC,EAAAwF,GACA,IAEAvF,EAAA7B,EAAAqH,EAFAN,EAAAK,EAAA,GAAAJ,EAAAI,EAAA,GAAAH,EAAAG,EAAA,GACAM,EAAArI,KAAAqD,KAAAqE,IAAAC,IAAAC,KAGA,OAAAS,EAAA1I,EAA+B,MAG/B+H,GADAW,EAAA,EAAAA,EAEAV,GAAAU,EACAT,GAAAS,EAEA7F,EAAAxC,KAAAyC,IAAAF,GAEAyF,EAAA,GADArH,EAAAX,KAAA0C,IAAAH,IAIAnC,EAAA,GAAAsH,IAAAM,EAAArH,EACAP,EAAA,GAAAuH,EAAAD,EAAAM,EAAAJ,EAAApF,EACApC,EAAA,GAAAwH,EAAAF,EAAAM,EAAAL,EAAAnF,EACApC,EAAA,KACAA,EAAA,GAAAsH,EAAAC,EAAAK,EAAAJ,EAAApF,EACApC,EAAA,GAAAuH,IAAAK,EAAArH,EACAP,EAAA,GAAAwH,EAAAD,EAAAK,EAAAN,EAAAlF,EACApC,EAAA,KACAA,EAAA,GAAAsH,EAAAE,EAAAI,EAAAL,EAAAnF,EACApC,EAAA,GAAAuH,EAAAC,EAAAI,EAAAN,EAAAlF,EACApC,EAAA,IAAAwH,IAAAI,EAAArH,EACAP,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA,SAAAwI,GAAAxI,EAAAmC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GAmBA,OAhBAnC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAO,EACAP,EAAA,GAAAoC,EACApC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAoC,EACApC,EAAA,IAAAO,EACAP,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcA,SAAAyI,GAAAzI,EAAAmC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GAmBA,OAhBAnC,EAAA,GAAAO,EACAP,EAAA,KACAA,EAAA,IAAAoC,EACApC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAoC,EACApC,EAAA,KACAA,EAAA,IAAAO,EACAP,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAcA,SAAA0I,GAAA1I,EAAAmC,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GACA5B,EAAAX,KAAA0C,IAAAH,GAmBA,OAhBAnC,EAAA,GAAAO,EACAP,EAAA,GAAAoC,EACApC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAoC,EACApC,EAAA,GAAAO,EACAP,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAkBA,SAAA2I,GAAA3I,EAAA4I,EAAApG,GAEA,IAAA8E,EAAAsB,EAAA,GAAArB,EAAAqB,EAAA,GAAApB,EAAAoB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAAxB,IACAyB,EAAAxB,IACAyB,EAAAxB,IAEAyB,EAAA3B,EAAAwB,EACAI,EAAA5B,EAAAyB,EACAI,EAAA7B,EAAA0B,EACAI,EAAA7B,EAAAwB,EACAM,EAAA9B,EAAAyB,EACAM,EAAA9B,EAAAwB,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAmBA,OAjBAhJ,EAAA,MAAAoJ,EAAAE,GACAtJ,EAAA,GAAAkJ,EAAAO,EACAzJ,EAAA,GAAAmJ,EAAAK,EACAxJ,EAAA,KACAA,EAAA,GAAAkJ,EAAAO,EACAzJ,EAAA,MAAAiJ,EAAAK,GACAtJ,EAAA,GAAAqJ,EAAAE,EACAvJ,EAAA,KACAA,EAAA,GAAAmJ,EAAAK,EACAxJ,EAAA,GAAAqJ,EAAAE,EACAvJ,EAAA,OAAAiJ,EAAAG,GACApJ,EAAA,MACAA,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,MAEAA,EAUA,SAAA0J,GAAA1J,EAAAE,GACA,IAAAyJ,EAAA,IAAAnK,EAAA,GACAoK,GAAA1J,EAAA,GAAA2J,GAAA3J,EAAA,GAAA4J,GAAA5J,EAAA,GAAA6J,EAAA7J,EAAA,GACA8J,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GAEAkK,EAAAR,IAAAC,IAAAC,IAAAC,IAYA,OAVAK,EAAA,GACAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GAAAO,EACAT,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GAAAM,EACAT,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,GAAAQ,IAEAT,EAAA,MAAAK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,GACAF,EAAA,MAAAM,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,GACAH,EAAA,MAAAO,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,IAEAjB,GAAA3I,EAAAE,EAAAyJ,GACA3J,EAYA,SAAAqK,GAAArK,EAAAsK,GAKA,OAJAtK,EAAA,GAAAsK,EAAA,IACAtK,EAAA,GAAAsK,EAAA,IACAtK,EAAA,GAAAsK,EAAA,IAEAtK,EAaA,SAAAuK,GAAAvK,EAAAsK,GACA,IAAA/F,EAAA+F,EAAA,GACA9F,EAAA8F,EAAA,GACA7F,EAAA6F,EAAA,GACA3F,EAAA2F,EAAA,GACA1F,EAAA0F,EAAA,GACAzF,EAAAyF,EAAA,GACAvF,EAAAuF,EAAA,GACAtF,EAAAsF,EAAA,GACArF,EAAAqF,EAAA,IAMA,OAJAtK,EAAA,GAAAJ,KAAAqD,KAAAsB,IAAAC,IAAAC,KACAzE,EAAA,GAAAJ,KAAAqD,KAAA0B,IAAAC,IAAAC,KACA7E,EAAA,GAAAJ,KAAAqD,KAAA8B,IAAAC,IAAAC,KAEAjF,EAYA,SAAAwK,GAAAxK,EAAAsK,GAEA,IAAAG,EAAAH,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAI,EAAA,EA4BA,OA1BAD,EAAA,GACAC,EAAA,EAAA9K,KAAAqD,KAAAwH,EAAA,GACAzK,EAAA,OAAA0K,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAA9K,KAAAqD,KAAA,EAAAqH,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAtK,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,OAAA0K,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,GACGJ,EAAA,GAAAA,EAAA,KACHI,EAAA,EAAA9K,KAAAqD,KAAA,EAAAqH,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAtK,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,OAAA0K,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,IAEAA,EAAA,EAAA9K,KAAAqD,KAAA,EAAAqH,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAtK,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,IAAAsK,EAAA,GAAAA,EAAA,IAAAI,EACA1K,EAAA,OAAA0K,GAGA1K,EAoBA,SAAA2K,GAAA3K,EAAA4I,EAAApG,EAAAJ,GAEA,IAAAkF,EAAAsB,EAAA,GAAArB,EAAAqB,EAAA,GAAApB,EAAAoB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAAxB,IACAyB,EAAAxB,IACAyB,EAAAxB,IAEAyB,EAAA3B,EAAAwB,EACAI,EAAA5B,EAAAyB,EACAI,EAAA7B,EAAA0B,EACAI,EAAA7B,EAAAwB,EACAM,EAAA9B,EAAAyB,EACAM,EAAA9B,EAAAwB,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EACA4B,EAAAxI,EAAA,GACAyI,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GAmBA,OAjBApC,EAAA,OAAAoJ,EAAAE,IAAAsB,EACA5K,EAAA,IAAAkJ,EAAAO,GAAAmB,EACA5K,EAAA,IAAAmJ,EAAAK,GAAAoB,EACA5K,EAAA,KACAA,EAAA,IAAAkJ,EAAAO,GAAAoB,EACA7K,EAAA,OAAAiJ,EAAAK,IAAAuB,EACA7K,EAAA,IAAAqJ,EAAAE,GAAAsB,EACA7K,EAAA,KACAA,EAAA,IAAAmJ,EAAAK,GAAAsB,EACA9K,EAAA,IAAAqJ,EAAAE,GAAAuB,EACA9K,EAAA,QAAAiJ,EAAAG,IAAA0B,EACA9K,EAAA,MACAA,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,IAAAwC,EAAA,GACAxC,EAAA,MAEAA,EAuBA,SAAA+K,GAAA/K,EAAA4I,EAAApG,EAAAJ,EAAA4I,GAEA,IAAA1D,EAAAsB,EAAA,GAAArB,EAAAqB,EAAA,GAAApB,EAAAoB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAAxB,IACAyB,EAAAxB,IACAyB,EAAAxB,IAEAyB,EAAA3B,EAAAwB,EACAI,EAAA5B,EAAAyB,EACAI,EAAA7B,EAAA0B,EACAI,EAAA7B,EAAAwB,EACAM,EAAA9B,EAAAyB,EACAM,EAAA9B,EAAAwB,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAEA4B,EAAAxI,EAAA,GACAyI,EAAAzI,EAAA,GACA0I,EAAA1I,EAAA,GAEA6I,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAEAI,GAAA,GAAAhC,EAAAE,IAAAsB,EACAS,GAAAnC,EAAAO,GAAAmB,EACAU,GAAAnC,EAAAK,GAAAoB,EACAW,GAAArC,EAAAO,GAAAoB,EACAW,GAAA,GAAAvC,EAAAK,IAAAuB,EACAY,GAAApC,EAAAE,GAAAsB,EACAa,GAAAvC,EAAAK,GAAAsB,EACAa,GAAAtC,EAAAE,GAAAuB,EACAc,GAAA,GAAA3C,EAAAG,IAAA0B,EAmBA,OAjBA9K,EAAA,GAAAoL,EACApL,EAAA,GAAAqL,EACArL,EAAA,GAAAsL,EACAtL,EAAA,KACAA,EAAA,GAAAuL,EACAvL,EAAA,GAAAwL,EACAxL,EAAA,GAAAyL,EACAzL,EAAA,KACAA,EAAA,GAAA0L,EACA1L,EAAA,GAAA2L,EACA3L,EAAA,IAAA4L,EACA5L,EAAA,MACAA,EAAA,IAAAwC,EAAA,GAAAyI,GAAAG,EAAAH,EAAAM,EAAAL,EAAAQ,EAAAP,GACAnL,EAAA,IAAAwC,EAAA,GAAA0I,GAAAG,EAAAJ,EAAAO,EAAAN,EAAAS,EAAAR,GACAnL,EAAA,IAAAwC,EAAA,GAAA2I,GAAAG,EAAAL,EAAAQ,EAAAP,EAAAU,EAAAT,GACAnL,EAAA,MAEAA,EAWA,SAAA6L,GAAA7L,EAAA4I,GACA,IAAAtB,EAAAsB,EAAA,GAAArB,EAAAqB,EAAA,GAAApB,EAAAoB,EAAA,GAAAC,EAAAD,EAAA,GACAE,EAAAxB,IACAyB,EAAAxB,IACAyB,EAAAxB,IAEAyB,EAAA3B,EAAAwB,EACAgD,EAAAvE,EAAAuB,EACAM,EAAA7B,EAAAwB,EACAgD,EAAAvE,EAAAsB,EACAkD,EAAAxE,EAAAuB,EACAO,EAAA9B,EAAAwB,EACAO,EAAAV,EAAAC,EACAU,EAAAX,EAAAE,EACAU,EAAAZ,EAAAG,EAsBA,OApBAhJ,EAAA,KAAAoJ,EAAAE,EACAtJ,EAAA,GAAA8L,EAAArC,EACAzJ,EAAA,GAAA+L,EAAAvC,EACAxJ,EAAA,KAEAA,EAAA,GAAA8L,EAAArC,EACAzJ,EAAA,KAAAiJ,EAAAK,EACAtJ,EAAA,GAAAgM,EAAAzC,EACAvJ,EAAA,KAEAA,EAAA,GAAA+L,EAAAvC,EACAxJ,EAAA,GAAAgM,EAAAzC,EACAvJ,EAAA,MAAAiJ,EAAAG,EACApJ,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,EAeA,SAAAiM,GAAAjM,EAAAkM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,GAAAL,EAAAD,GACAO,EAAA,GAAAJ,EAAAD,GACAM,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAvM,EAAA,KAAAsM,EAAAE,EACAxM,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAsM,EAAAG,EACAzM,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAmM,EAAAD,GAAAM,EACAxM,EAAA,IAAAqM,EAAAD,GAAAK,EACAzM,EAAA,KAAAuM,EAAAD,GAAAI,EACA1M,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAuM,EAAAD,EAAA,EAAAI,EACA1M,EAAA,MACAA,EAcA,SAAA2M,GAAA3M,EAAA4M,EAAAC,EAAAP,EAAAC,GACA,IAAAG,EAAAI,EAAA,EAAAlN,KAAAmN,IAAAH,EAAA,GAuBA,OAtBA5M,EAAA,GAAA8M,EAAAD,EACA7M,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA8M,EACA9M,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACA,MAAAuM,OAAAS,KACAN,EAAA,GAAAJ,EAAAC,GACAvM,EAAA,KAAAuM,EAAAD,GAAAI,EACA1M,EAAA,MAAAuM,EAAAD,EAAAI,IAEA1M,EAAA,OACAA,EAAA,OAAAsM,GAEAtM,EAcA,SAAAiN,GAAAjN,EAAAkN,EAAAZ,EAAAC,GACA,IAAAY,EAAAvN,KAAAmN,IAAAG,EAAAE,UAAAxN,KAAAE,GAAA,KACAuN,EAAAzN,KAAAmN,IAAAG,EAAAI,YAAA1N,KAAAE,GAAA,KACAyN,EAAA3N,KAAAmN,IAAAG,EAAAM,YAAA5N,KAAAE,GAAA,KACA2N,EAAA7N,KAAAmN,IAAAG,EAAAQ,aAAA9N,KAAAE,GAAA,KACA6N,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,GAkBA,OAhBArN,EAAA,GAAA2N,EACA3N,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA4N,EACA5N,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAuN,EAAAE,GAAAE,EAAA,GACA3N,EAAA,IAAAmN,EAAAE,GAAAO,EAAA,GACA5N,EAAA,IAAAuM,GAAAD,EAAAC,GACAvM,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAuM,EAAAD,KAAAC,GACAvM,EAAA,MACAA,EAeA,SAAA6N,GAAA7N,EAAAkM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAuB,EAAA,GAAA5B,EAAAC,GACA4B,EAAA,GAAA3B,EAAAC,GACAK,EAAA,GAAAJ,EAAAC,GAiBA,OAhBAvM,EAAA,MAAA8N,EACA9N,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA+N,EACA/N,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA0M,EACA1M,EAAA,MACAA,EAAA,KAAAkM,EAAAC,GAAA2B,EACA9N,EAAA,KAAAqM,EAAAD,GAAA2B,EACA/N,EAAA,KAAAuM,EAAAD,GAAAI,EACA1M,EAAA,MACAA,EAaA,SAAAgO,GAAAhO,EAAAiO,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAvF,EAAAwF,EAAAC,EAAAxF,EAAAyF,EAAAC,EAAAzF,EAAAf,EACAyG,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GAEA,OAAAtO,KAAA8D,IAAAgL,EAAAM,GAAAzP,GACAK,KAAA8D,IAAAiL,EAAAM,GAAA1P,GACAK,KAAA8D,IAAAkL,EAAAM,GAAA3P,EACA4F,EAAAnF,IAGAwO,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACAjG,EAAA4F,EAAAM,EAOAd,EAAAU,GAFA9F,GAHAf,EAAA,EAAArI,KAAAqD,KAAAuL,IAAAC,IAAAzF,MAKA+F,GAHAN,GAAAxG,GAIAoG,EAAAU,GALAP,GAAAvG,GAKA4G,EAAA7F,EACAF,EAAA+F,EAAAJ,EAAAK,EAAAN,GACAvG,EAAArI,KAAAqD,KAAAmL,IAAAC,IAAAvF,OAOAsF,GADAnG,EAAA,EAAAA,EAEAoG,GAAApG,EACAa,GAAAb,IAPAmG,EAAA,EACAC,EAAA,EACAvF,EAAA,GAQAwF,EAAAG,EAAA3F,EAAAE,EAAAqF,EACAE,EAAAvF,EAAAoF,EAAAI,EAAA1F,EACAC,EAAAyF,EAAAH,EAAAI,EAAAL,GAEAnG,EAAArI,KAAAqD,KAAAqL,IAAAC,IAAAxF,OAOAuF,GADArG,EAAA,EAAAA,EAEAsG,GAAAtG,EACAc,GAAAd,IAPAqG,EAAA,EACAC,EAAA,EACAxF,EAAA,GAQA/I,EAAA,GAAAoO,EACApO,EAAA,GAAAsO,EACAtO,EAAA,GAAAwO,EACAxO,EAAA,KACAA,EAAA,GAAAqO,EACArO,EAAA,GAAAuO,EACAvO,EAAA,GAAAyO,EACAzO,EAAA,KACAA,EAAA,GAAA8I,EACA9I,EAAA,GAAA+I,EACA/I,EAAA,IAAAgJ,EACAhJ,EAAA,MACAA,EAAA,MAAAoO,EAAAM,EAAAL,EAAAM,EAAA7F,EAAA8F,GACA5O,EAAA,MAAAsO,EAAAI,EAAAH,EAAAI,EAAA5F,EAAA6F,GACA5O,EAAA,MAAAwO,EAAAE,EAAAD,EAAAE,EAAA3F,EAAA4F,GACA5O,EAAA,MAEAA,GAYA,SAAAmP,GAAAnP,EAAAiO,EAAAmB,EAAAjB,GACA,IAAAO,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GAEAK,EAAAE,EAAAU,EAAA,GACAX,EAAAE,EAAAS,EAAA,GACApG,EAAA4F,EAAAQ,EAAA,GAEAnH,EAAAuG,IAAAC,IAAAzF,IACAf,EAAA,IAEAuG,GADAvG,EAAA,EAAArI,KAAAqD,KAAAgF,GAEAwG,GAAAxG,EACAe,GAAAf,GAGA,IAAAmG,EAAAU,EAAA9F,EAAA+F,EAAAN,EACAJ,EAAAU,EAAAP,EAAAK,EAAA7F,EACAF,EAAA+F,EAAAJ,EAAAK,EAAAN,EA0BA,OAxBAvG,EAAAmG,IAAAC,IAAAvF,KACA,IAEAsF,GADAnG,EAAA,EAAArI,KAAAqD,KAAAgF,GAEAoG,GAAApG,EACAa,GAAAb,GAGAjI,EAAA,GAAAoO,EACApO,EAAA,GAAAqO,EACArO,EAAA,GAAA8I,EACA9I,EAAA,KACAA,EAAA,GAAAyO,EAAA3F,EAAAE,EAAAqF,EACArO,EAAA,GAAAgJ,EAAAoF,EAAAI,EAAA1F,EACA9I,EAAA,GAAAwO,EAAAH,EAAAI,EAAAL,EACApO,EAAA,KACAA,EAAA,GAAAwO,EACAxO,EAAA,GAAAyO,EACAzO,EAAA,IAAAgJ,EACAhJ,EAAA,MACAA,EAAA,IAAA0O,EACA1O,EAAA,IAAA2O,EACA3O,EAAA,IAAA4O,EACA5O,EAAA,MACAA,EASA,SAAAqP,GAAAnP,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QASA,SAAAoP,GAAApP,GACA,OAAAN,KAAAqD,KAAArD,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,MAAAN,KAAAsD,IAAAhD,EAAA,OAAAN,KAAAsD,IAAAhD,EAAA,OAAAN,KAAAsD,IAAAhD,EAAA,OAAAN,KAAAsD,IAAAhD,EAAA,OAAAN,KAAAsD,IAAAhD,EAAA,OAAAN,KAAAsD,IAAAhD,EAAA,QAWA,SAAAqP,GAAAvP,EAAAE,EAAAI,GAiBA,OAhBAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAWA,SAAAwP,GAAAxP,EAAAE,EAAAI,GAiBA,OAhBAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAAA,IAAAE,EAAA,IAAAI,EAAA,IACAN,EAWA,SAAAyP,GAAAzP,EAAAE,EAAAI,GAiBA,OAhBAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAAA,IAAAE,EAAA,IAAAI,EACAN,EAYA,SAAA0P,GAAA1P,EAAAE,EAAAI,EAAAiD,GAiBA,OAhBAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAAA,IAAAE,EAAA,IAAAI,EAAA,IAAAiD,EACAvD,EAUA,SAAA2P,GAAAzP,EAAAI,GACA,OAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IACAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IACAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,MAAAI,EAAA,KAAAJ,EAAA,MAAAI,EAAA,KACAJ,EAAA,MAAAI,EAAA,KAAAJ,EAAA,MAAAI,EAAA,KAAAJ,EAAA,MAAAI,EAAA,KAAAJ,EAAA,MAAAI,EAAA,IAUA,SAAAsP,GAAA1P,EAAAI,GACA,IAAAgB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GACAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GAAA2P,EAAA3P,EAAA,GAAA4P,EAAA5P,EAAA,GACA6P,EAAA7P,EAAA,GAAA8P,EAAA9P,EAAA,GAAA2F,EAAA3F,EAAA,IAAA4F,EAAA5F,EAAA,IACAsF,EAAAtF,EAAA,IAAAuF,EAAAvF,EAAA,IAAA+P,EAAA/P,EAAA,IAAAgQ,EAAAhQ,EAAA,IAEA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACA0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAA,GAAA6P,EAAA7P,EAAA,GAAA8P,EAAA9P,EAAA,GACA+P,EAAA/P,EAAA,GAAAgQ,EAAAhQ,EAAA,GAAA0G,EAAA1G,EAAA,IAAA2G,EAAA3G,EAAA,IACAuH,EAAAvH,EAAA,IAAAiQ,EAAAjQ,EAAA,IAAAkQ,EAAAlQ,EAAA,IAAAmQ,EAAAnQ,EAAA,IAEA,OAAAV,KAAA8D,IAAApC,EAAAM,IAAArC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAApC,GAAA1B,KAAA8D,IAAA9B,KACAhC,KAAA8D,IAAAnC,EAAAM,IAAAtC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAnC,GAAA3B,KAAA8D,IAAA7B,KACAjC,KAAA8D,IAAAlC,EAAAM,IAAAvC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAlC,GAAA5B,KAAA8D,IAAA5B,KACAlC,KAAA8D,IAAAjC,EAAAM,IAAAxC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAjC,GAAA7B,KAAA8D,IAAA3B,KACAnC,KAAA8D,IAAAhC,EAAAM,IAAAzC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAhC,GAAA9B,KAAA8D,IAAA1B,KACApC,KAAA8D,IAAA/B,EAAAM,IAAA1C,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAA/B,GAAA/B,KAAA8D,IAAAzB,KACArC,KAAA8D,IAAAmM,EAAAM,IAAA5Q,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAmM,GAAAjQ,KAAA8D,IAAAyM,KACAvQ,KAAA8D,IAAAoM,EAAAM,IAAA7Q,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAoM,GAAAlQ,KAAA8D,IAAA0M,KACAxQ,KAAA8D,IAAAqM,EAAAM,IAAA9Q,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAqM,GAAAnQ,KAAA8D,IAAA2M,KACAzQ,KAAA8D,IAAAsM,EAAAM,IAAA/Q,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAsM,GAAApQ,KAAA8D,IAAA4M,KACA1Q,KAAA8D,IAAAmC,EAAAmB,IAAAzH,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAmC,GAAAjG,KAAA8D,IAAAsD,KACApH,KAAA8D,IAAAoC,EAAAmB,IAAA1H,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAoC,GAAAlG,KAAA8D,IAAAuD,KACArH,KAAA8D,IAAA8B,EAAAqC,IAAAtI,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAA8B,GAAA5F,KAAA8D,IAAAmE,KACAjI,KAAA8D,IAAA+B,EAAA8K,IAAAhR,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAA+B,GAAA7F,KAAA8D,IAAA6M,KACA3Q,KAAA8D,IAAAuM,EAAAO,IAAAjR,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAuM,GAAArQ,KAAA8D,IAAA8M,KACA5Q,KAAA8D,IAAAwM,EAAAO,IAAAlR,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAwM,GAAAtQ,KAAA8D,IAAA+M,IAOA,MAAAC,GAAAtJ,EAMAuJ,GAAAnB,GCtqDA,SAAAoB,KACA,IAAA5Q,EAAA,IAAAR,EAAA,GAMA,OALAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAsCA,SAAA6Q,GAAAvJ,EAAAC,EAAAC,GACA,IAAAxH,EAAA,IAAAR,EAAA,GAIA,OAHAQ,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAAA,GAAAwH,EACAxH,EAgRA,SAAA8Q,GAAA9Q,EAAAE,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA+H,EAAAX,IAAAC,IAAAC,IAQA,OAPAS,EAAA,IAEAA,EAAA,EAAArI,KAAAqD,KAAAgF,GACAjI,EAAA,GAAAE,EAAA,GAAA+H,EACAjI,EAAA,GAAAE,EAAA,GAAA+H,EACAjI,EAAA,GAAAE,EAAA,GAAA+H,GAEAjI,EAUA,SAAA+Q,GAAA7Q,EAAAI,GACA,OAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAWA,SAAA0Q,GAAAhR,EAAAE,EAAAI,GACA,IAAA0J,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GACA0J,EAAAtJ,EAAA,GAAAuJ,EAAAvJ,EAAA,GAAAwJ,EAAAxJ,EAAA,GAKA,OAHAN,EAAA,GAAAiK,EAAAH,EAAAI,EAAAL,EACA7J,EAAA,GAAAkK,EAAAN,EAAAI,EAAAF,EACA9J,EAAA,GAAAgK,EAAAH,EAAAI,EAAAL,EACA5J,EA4TA,MA8BAiR,GAvqBA,SAAA/Q,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA,OAAAN,KAAAqD,KAAAqE,IAAAC,IAAAC,OAurBA,WACA,IAAA0J,EAAAN,KADA,GC1bA,SAAAO,GAAAjR,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA2I,EAAA3I,EAAA,GACA,OAAAN,KAAAqD,KAAAqE,IAAAC,IAAAC,IAAAqB,KASA,SAAAuI,GAAAlR,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA2I,EAAA3I,EAAA,GACA,OAAAoH,IAAAC,IAAAC,IAAAqB,KAgQA,WACA,IAAAqI,EAnjBA,WACA,IAAAlR,EAAA,IAAAR,EAAA,GAOA,OANAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EA2iBAqR,GADA,GC/iBA,SAAAC,KACA,IAAAtR,EAAA,IAAAR,EAAA,GAOA,OANAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,KACAA,EASA,SAAAuR,GAAAvR,GAKA,OAJAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAYA,SAAAwR,GAAAxR,EAAA2H,EAAAxF,GACAA,GAAA,GACA,IAAAC,EAAAxC,KAAAyC,IAAAF,GAKA,OAJAnC,EAAA,GAAAoC,EAAAuF,EAAA,GACA3H,EAAA,GAAAoC,EAAAuF,EAAA,GACA3H,EAAA,GAAAoC,EAAAuF,EAAA,GACA3H,EAAA,GAAAJ,KAAA0C,IAAAH,GACAnC,EAgBA,SAAAyR,GAAAC,EAAA9I,GACA,IAAAzG,EAAA,EAAAvC,KAAA+R,KAAA/I,EAAA,IACAxG,EAAAxC,KAAAyC,IAAAF,EAAA,GAWA,OAVAC,EAAA7C,GACAmS,EAAA,GAAA9I,EAAA,GAAAxG,EACAsP,EAAA,GAAA9I,EAAA,GAAAxG,EACAsP,EAAA,GAAA9I,EAAA,GAAAxG,IAGAsP,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAvP,EAWA,SAAAyP,GAAA5R,EAAAE,EAAAI,GACA,IAAA0J,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GACA0J,EAAAtJ,EAAA,GAAAuJ,EAAAvJ,EAAA,GAAAwJ,EAAAxJ,EAAA,GAAAyJ,EAAAzJ,EAAA,GAMA,OAJAN,EAAA,GAAAgK,EAAAD,EAAAI,EAAAP,EAAAK,EAAAH,EAAAI,EAAAL,EACA7J,EAAA,GAAAiK,EAAAF,EAAAI,EAAAN,EAAAK,EAAAN,EAAAI,EAAAF,EACA9J,EAAA,GAAAkK,EAAAH,EAAAI,EAAAL,EAAAE,EAAAH,EAAAI,EAAAL,EACA5J,EAAA,GAAAmK,EAAAJ,EAAAC,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EACA9J,EAWA,SAAA6R,GAAA7R,EAAAE,EAAAiC,GACAA,GAAA,GAEA,IAAA6H,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GACA0J,EAAAhK,KAAAyC,IAAAF,GAAA4H,EAAAnK,KAAA0C,IAAAH,GAMA,OAJAnC,EAAA,GAAAgK,EAAAD,EAAAI,EAAAP,EACA5J,EAAA,GAAAiK,EAAAF,EAAAG,EAAAN,EACA5J,EAAA,GAAAkK,EAAAH,EAAAE,EAAAL,EACA5J,EAAA,GAAAmK,EAAAJ,EAAAC,EAAAJ,EACA5J,EAWA,SAAA8R,GAAA9R,EAAAE,EAAAiC,GACAA,GAAA,GAEA,IAAA6H,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GACA2J,EAAAjK,KAAAyC,IAAAF,GAAA4H,EAAAnK,KAAA0C,IAAAH,GAMA,OAJAnC,EAAA,GAAAgK,EAAAD,EAAAG,EAAAL,EACA7J,EAAA,GAAAiK,EAAAF,EAAAI,EAAAN,EACA7J,EAAA,GAAAkK,EAAAH,EAAAC,EAAAH,EACA7J,EAAA,GAAAmK,EAAAJ,EAAAE,EAAAJ,EACA7J,EAWA,SAAA+R,GAAA/R,EAAAE,EAAAiC,GACAA,GAAA,GAEA,IAAA6H,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GACA4J,EAAAlK,KAAAyC,IAAAF,GAAA4H,EAAAnK,KAAA0C,IAAAH,GAMA,OAJAnC,EAAA,GAAAgK,EAAAD,EAAAE,EAAAH,EACA9J,EAAA,GAAAiK,EAAAF,EAAAC,EAAAF,EACA9J,EAAA,GAAAkK,EAAAH,EAAAI,EAAAL,EACA9J,EAAA,GAAAmK,EAAAJ,EAAAG,EAAAJ,EACA9J,EAYA,SAAAgS,GAAAhS,EAAAE,GACA,IAAAoH,EAAApH,EAAA,GAAAqH,EAAArH,EAAA,GAAAsH,EAAAtH,EAAA,GAMA,OAJAF,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAAA,GAAAwH,EACAxH,EAAA,GAAAJ,KAAAqD,KAAArD,KAAA8D,IAAA,EAAA4D,IAAAC,IAAAC,MACAxH,EAYA,SAAAiS,GAAAjS,EAAAE,EAAAI,EAAAsH,GAGA,IAGAsK,EAAAC,EAAAC,EAAAC,EAAAC,EAHAtI,EAAA9J,EAAA,GAAA+J,EAAA/J,EAAA,GAAAgK,EAAAhK,EAAA,GAAAiK,EAAAjK,EAAA,GACA0J,EAAAtJ,EAAA,GAAAuJ,EAAAvJ,EAAA,GAAAwJ,EAAAxJ,EAAA,GAAAyJ,EAAAzJ,EAAA,GAiCA,OA5BA6R,EAAAnI,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,EAAAK,EAAAJ,GAEA,IACAoI,KACAvI,KACAC,KACAC,KACAC,MAGA,EAAAoI,EAAA5S,GAEA2S,EAAAtS,KAAA+R,KAAAQ,GACAC,EAAAxS,KAAAyC,IAAA6P,GACAG,EAAAzS,KAAAyC,KAAA,EAAAuF,GAAAsK,GAAAE,EACAE,EAAA1S,KAAAyC,IAAAuF,EAAAsK,GAAAE,IAIAC,EAAA,EAAAzK,EACA0K,EAAA1K,GAGA5H,EAAA,GAAAqS,EAAArI,EAAAsI,EAAA1I,EACA5J,EAAA,GAAAqS,EAAApI,EAAAqI,EAAAzI,EACA7J,EAAA,GAAAqS,EAAAnI,EAAAoI,EAAAxI,EACA9J,EAAA,GAAAqS,EAAAlI,EAAAmI,EAAAvI,EAEA/J,EASA,SAAAuS,GAAAvS,GAGA,IAAAwS,EAAA7S,IACA8S,EAAA9S,IACA+S,EAAA/S,IAEAgT,EAAA/S,KAAAqD,KAAA,EAAAuP,GACAI,EAAAhT,KAAAqD,KAAAuP,GAMA,OAJAxS,EAAA,GAAA2S,EAAA/S,KAAAyC,IAAA,EAAAzC,KAAAE,GAAA2S,GACAzS,EAAA,GAAA2S,EAAA/S,KAAA0C,IAAA,EAAA1C,KAAAE,GAAA2S,GACAzS,EAAA,GAAA4S,EAAAhT,KAAAyC,IAAA,EAAAzC,KAAAE,GAAA4S,GACA1S,EAAA,GAAA4S,EAAAhT,KAAA0C,IAAA,EAAA1C,KAAAE,GAAA4S,GACA1S,EAUA,SAAA6S,GAAA7S,EAAAE,GACA,IAAAoB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GACA4S,EAAAxR,IAAAC,IAAAC,IAAAC,IACAsR,EAAAD,EAAA,EAAAA,EAAA,EAQA,OAJA9S,EAAA,IAAAsB,EAAAyR,EACA/S,EAAA,IAAAuB,EAAAwR,EACA/S,EAAA,IAAAwB,EAAAuR,EACA/S,EAAA,GAAAyB,EAAAsR,EACA/S,EAWA,SAAAgT,GAAAhT,EAAAE,GAKA,OAJAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAcA,SAAAiT,GAAAjT,EAAAkT,GAGA,IACAC,EADAC,EAAAF,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAGA,GAAAE,EAAA,EAEAD,EAAAvT,KAAAqD,KAAAmQ,EAAA,GACApT,EAAA,MAAAmT,EACAA,EAAA,GAAAA,EACAnT,EAAA,IAAAkT,EAAA,GAAAA,EAAA,IAAAC,EACAnT,EAAA,IAAAkT,EAAA,GAAAA,EAAA,IAAAC,EACAnT,EAAA,IAAAkT,EAAA,GAAAA,EAAA,IAAAC,MACG,CAEH,IAAAE,EAAA,EACAH,EAAA,GAAAA,EAAA,KACAG,EAAA,GACAH,EAAA,GAAAA,EAAA,EAAAG,OACAA,EAAA,GACA,IAAAC,GAAAD,EAAA,KACAE,GAAAF,EAAA,KAEAF,EAAAvT,KAAAqD,KAAAiQ,EAAA,EAAAG,KAAAH,EAAA,EAAAI,KAAAJ,EAAA,EAAAK,KAAA,GACAvT,EAAAqT,GAAA,GAAAF,EACAA,EAAA,GAAAA,EACAnT,EAAA,IAAAkT,EAAA,EAAAI,EAAAC,GAAAL,EAAA,EAAAK,EAAAD,IAAAH,EACAnT,EAAAsT,IAAAJ,EAAA,EAAAI,EAAAD,GAAAH,EAAA,EAAAG,EAAAC,IAAAH,EACAnT,EAAAuT,IAAAL,EAAA,EAAAK,EAAAF,GAAAH,EAAA,EAAAG,EAAAE,IAAAJ,EAGA,OAAAnT,EAaA,SAAAwT,GAAAxT,EAAAsH,EAAAC,EAAAC,GACA,IAAAiM,EAAA,GAAA7T,KAAAE,GAAA,IACAwH,GAAAmM,EACAlM,GAAAkM,EACAjM,GAAAiM,EAEA,IAAA7I,EAAAhL,KAAAyC,IAAAiF,GACAoM,EAAA9T,KAAA0C,IAAAgF,GACAuD,EAAAjL,KAAAyC,IAAAkF,GACAoM,EAAA/T,KAAA0C,IAAAiF,GACAuD,EAAAlL,KAAAyC,IAAAmF,GACAoM,EAAAhU,KAAA0C,IAAAkF,GAOA,OALAxH,EAAA,GAAA4K,EAAA+I,EAAAC,EAAAF,EAAA7I,EAAAC,EACA9K,EAAA,GAAA0T,EAAA7I,EAAA+I,EAAAhJ,EAAA+I,EAAA7I,EACA9K,EAAA,GAAA0T,EAAAC,EAAA7I,EAAAF,EAAAC,EAAA+I,EACA5T,EAAA,GAAA0T,EAAAC,EAAAC,EAAAhJ,EAAAC,EAAAC,EAEA9K,EASA,SAAA6T,GAAA3T,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,OAUA,MAAA4T,GD3WA,SAAA5T,GACA,IAAAF,EAAA,IAAAR,EAAA,GAKA,OAJAQ,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,GCiXA+T,GDrWA,SAAAzM,EAAAC,EAAAC,EAAAqB,GACA,IAAA7I,EAAA,IAAAR,EAAA,GAKA,OAJAQ,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAAA,GAAAwH,EACAxH,EAAA,GAAA6I,EACA7I,GCyWAgU,GD/VA,SAAAhU,EAAAE,GAKA,OAJAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,GCuWAiU,GD1VA,SAAAjU,EAAAsH,EAAAC,EAAAC,EAAAqB,GAKA,OAJA7I,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAAA,GAAAwH,EACAxH,EAAA,GAAA6I,EACA7I,GCgWAkU,GDrVA,SAAAlU,EAAAE,EAAAI,GAKA,OAJAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,GCsVAmU,GAAAvC,GAWAwC,GDzNA,SAAApU,EAAAE,EAAAI,GAKA,OAJAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,GC8NAqU,GDpFA,SAAAnU,EAAAI,GACA,OAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,IC+FAgU,GDnFA,SAAAtU,EAAAE,EAAAI,EAAAsH,GACA,IAAAoC,EAAA9J,EAAA,GACA+J,EAAA/J,EAAA,GACAgK,EAAAhK,EAAA,GACAiK,EAAAjK,EAAA,GAKA,OAJAF,EAAA,GAAAgK,EAAApC,GAAAtH,EAAA,GAAA0J,GACAhK,EAAA,GAAAiK,EAAArC,GAAAtH,EAAA,GAAA2J,GACAjK,EAAA,GAAAkK,EAAAtC,GAAAtH,EAAA,GAAA4J,GACAlK,EAAA,GAAAmK,EAAAvC,GAAAtH,EAAA,GAAA6J,GACAnK,GCkFAuU,GAAApD,GAMAqD,GAAAD,GASAE,GAAArD,GAMAsD,GAAAD,GAUAE,GD9JA,SAAA3U,EAAAE,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACAsH,EAAAtH,EAAA,GACA2I,EAAA3I,EAAA,GACA+H,EAAAX,IAAAC,IAAAC,IAAAqB,IAQA,OAPAZ,EAAA,IACAA,EAAA,EAAArI,KAAAqD,KAAAgF,GACAjI,EAAA,GAAAsH,EAAAW,EACAjI,EAAA,GAAAuH,EAAAU,EACAjI,EAAA,GAAAwH,EAAAS,EACAjI,EAAA,GAAA6I,EAAAZ,GAEAjI,GC0JA4U,GDzBA,SAAA1U,EAAAI,GACA,OAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,ICiCAuU,GDvBA,SAAA3U,EAAAI,GACA,IAAAgB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GAAAsB,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GACA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GAAAwB,EAAAxB,EAAA,GAAAyB,EAAAzB,EAAA,GACA,OAAAV,KAAA8D,IAAApC,EAAAM,IAAArC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAApC,GAAA1B,KAAA8D,IAAA9B,KACAhC,KAAA8D,IAAAnC,EAAAM,IAAAtC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAnC,GAAA3B,KAAA8D,IAAA7B,KACAjC,KAAA8D,IAAAlC,EAAAM,IAAAvC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAlC,GAAA5B,KAAA8D,IAAA5B,KACAlC,KAAA8D,IAAAjC,EAAAM,IAAAxC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAjC,GAAA7B,KAAA8D,IAAA3B,KC8BA+S,GAAA,WACA,IAAAC,EAAAnE,KACAoE,EAAAnE,GAAA,OACAoE,EAAApE,GAAA,OAEA,gBAAA7Q,EAAAE,EAAAI,GACA,IAAAwS,EAAA/B,GAAA7Q,EAAAI,GACA,OAAAwS,GAAA,SACA9B,GAAA+D,EAAAC,EAAA9U,GACA+Q,GAAA8D,GAAA,MACA/D,GAAA+D,EAAAE,EAAA/U,GACA4Q,GAAAiE,KACAvD,GAAAxR,EAAA+U,EAAAnV,KAAAE,IACAE,GACK8S,EAAA,SACL9S,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEAgR,GAAA+D,EAAA7U,EAAAI,GACAN,EAAA,GAAA+U,EAAA,GACA/U,EAAA,GAAA+U,EAAA,GACA/U,EAAA,GAAA+U,EAAA,GACA/U,EAAA,KAAA8S,EACA6B,GAAA3U,OA1BA,GA0CAkV,GAAA,WACA,IAAAC,EAAA7D,KACA8D,EAAA9D,KAEA,gBAAAtR,EAAAE,EAAAI,EAAAC,EAAAC,EAAAoH,GAKA,OAJAqK,GAAAkD,EAAAjV,EAAAM,EAAAoH,GACAqK,GAAAmD,EAAA9U,EAAAC,EAAAqH,GACAqK,GAAAjS,EAAAmV,EAAAC,EAAA,EAAAxN,GAAA,EAAAA,IAEA5H,GATA,GAuBAqV,GAAA,WACA,IAAAC,ECzlBA,WACA,IAAAtV,EAAA,IAAAR,EAAA,GAYA,OAXAA,GAAAC,eACAO,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,ED4kBAuV,GAEA,gBAAAvV,EAAAwV,EAAArJ,EAAAgC,GAaA,OAZAmH,EAAA,GAAAnJ,EAAA,GACAmJ,EAAA,GAAAnJ,EAAA,GACAmJ,EAAA,GAAAnJ,EAAA,GAEAmJ,EAAA,GAAAnH,EAAA,GACAmH,EAAA,GAAAnH,EAAA,GACAmH,EAAA,GAAAnH,EAAA,GAEAmH,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GAEAb,GAAA3U,EAAAiT,GAAAjT,EAAAsV,KAhBA,GExlBA,SAAAG,KACA,IAAAzV,EAAA,IAAAR,EAAA,GAKA,OAJAA,GAAAC,eACAO,EAAA,KACAA,EAAA,MAEAA,EASA,SAAA0V,GAAAxV,GACA,IAAAF,EAAA,IAAAR,EAAA,GAGA,OAFAQ,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAUA,SAAA2V,GAAArO,EAAAC,GACA,IAAAvH,EAAA,IAAAR,EAAA,GAGA,OAFAQ,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAUA,SAAA4V,GAAA5V,EAAAE,GAGA,OAFAF,EAAA,GAAAE,EAAA,GACAF,EAAA,GAAAE,EAAA,GACAF,EAWA,SAAA6V,GAAA7V,EAAAsH,EAAAC,GAGA,OAFAvH,EAAA,GAAAsH,EACAtH,EAAA,GAAAuH,EACAvH,EAWA,SAAA8V,GAAA9V,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAWA,SAAA+V,GAAA/V,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAWA,SAAAgW,GAAAhW,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAWA,SAAAiW,GAAAjW,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAAA,GAAAE,EAAA,GAAAI,EAAA,GACAN,EAUA,SAAAkW,GAAAlW,EAAAE,GAGA,OAFAF,EAAA,GAAAJ,KAAAuW,KAAAjW,EAAA,IACAF,EAAA,GAAAJ,KAAAuW,KAAAjW,EAAA,IACAF,EAUA,SAAAoW,GAAApW,EAAAE,GAGA,OAFAF,EAAA,GAAAJ,KAAAyW,MAAAnW,EAAA,IACAF,EAAA,GAAAJ,KAAAyW,MAAAnW,EAAA,IACAF,EAWA,SAAAsW,GAAAtW,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAJ,KAAA2W,IAAArW,EAAA,GAAAI,EAAA,IACAN,EAAA,GAAAJ,KAAA2W,IAAArW,EAAA,GAAAI,EAAA,IACAN,EAWA,SAAAwW,GAAAxW,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAJ,KAAA+D,IAAAzD,EAAA,GAAAI,EAAA,IACAN,EAAA,GAAAJ,KAAA+D,IAAAzD,EAAA,GAAAI,EAAA,IACAN,EAUA,SAAAyW,GAAAzW,EAAAE,GAGA,OAFAF,EAAA,GAAAJ,KAAA8W,MAAAxW,EAAA,IACAF,EAAA,GAAAJ,KAAA8W,MAAAxW,EAAA,IACAF,EAWA,SAAA2W,GAAA3W,EAAAE,EAAAI,GAGA,OAFAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAAA,GAAAE,EAAA,GAAAI,EACAN,EAYA,SAAA4W,GAAA5W,EAAAE,EAAAI,EAAAiD,GAGA,OAFAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAAA,GAAAE,EAAA,GAAAI,EAAA,GAAAiD,EACAvD,EAUA,SAAA6W,GAAA3W,EAAAI,GACA,IAAAgH,EAAAhH,EAAA,GAAAJ,EAAA,GACAqH,EAAAjH,EAAA,GAAAJ,EAAA,GACA,OAAAN,KAAAqD,KAAAqE,IAAAC,KAUA,SAAAuP,GAAA5W,EAAAI,GACA,IAAAgH,EAAAhH,EAAA,GAAAJ,EAAA,GACAqH,EAAAjH,EAAA,GAAAJ,EAAA,GACA,OAAAoH,IAAAC,IASA,SAAAwP,GAAA7W,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACA,OAAAN,KAAAqD,KAAAqE,IAAAC,KASA,SAAAyP,GAAA9W,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACA,OAAAoH,IAAAC,IAUA,SAAA0P,GAAAjX,EAAAE,GAGA,OAFAF,EAAA,IAAAE,EAAA,GACAF,EAAA,IAAAE,EAAA,GACAF,EAUA,SAAAkX,GAAAlX,EAAAE,GAGA,OAFAF,EAAA,KAAAE,EAAA,GACAF,EAAA,KAAAE,EAAA,GACAF,EAUA,SAAAmX,GAAAnX,EAAAE,GACA,IAAAoH,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GACA+H,EAAAX,IAAAC,IAOA,OANAU,EAAA,IAEAA,EAAA,EAAArI,KAAAqD,KAAAgF,GACAjI,EAAA,GAAAE,EAAA,GAAA+H,EACAjI,EAAA,GAAAE,EAAA,GAAA+H,GAEAjI,EAUA,SAAAoX,GAAAlX,EAAAI,GACA,OAAAJ,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAYA,SAAA+W,GAAArX,EAAAE,EAAAI,GACA,IAAAkH,EAAAtH,EAAA,GAAAI,EAAA,GAAAJ,EAAA,GAAAI,EAAA,GAGA,OAFAN,EAAA,GAAAA,EAAA,KACAA,EAAA,GAAAwH,EACAxH,EAYA,SAAAsX,GAAAtX,EAAAE,EAAAI,EAAAsH,GACA,IAAAoC,EAAA9J,EAAA,GACA+J,EAAA/J,EAAA,GAGA,OAFAF,EAAA,GAAAgK,EAAApC,GAAAtH,EAAA,GAAA0J,GACAhK,EAAA,GAAAiK,EAAArC,GAAAtH,EAAA,GAAA2J,GACAjK,EAUA,SAAAuX,GAAAvX,EAAAuD,GACAA,KAAA,EACA,IAAAiU,EAAA,EAAA7X,IAAAC,KAAAE,GAGA,OAFAE,EAAA,GAAAJ,KAAA0C,IAAAkV,GAAAjU,EACAvD,EAAA,GAAAJ,KAAAyC,IAAAmV,GAAAjU,EACAvD,EAWA,SAAAyX,GAAAzX,EAAAE,EAAAgT,GACA,IAAA5L,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GAGA,OAFAF,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EACAvH,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EACAvH,EAWA,SAAA0X,GAAA1X,EAAAE,EAAAgT,GACA,IAAA5L,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GAGA,OAFAF,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,GACAlT,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,GACAlT,EAYA,SAAA2X,GAAA3X,EAAAE,EAAAgT,GACA,IAAA5L,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GAGA,OAFAF,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,GACAlT,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,GACAlT,EAaA,SAAA4X,GAAA5X,EAAAE,EAAAgT,GACA,IAAA5L,EAAApH,EAAA,GACAqH,EAAArH,EAAA,GAGA,OAFAF,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,IACAlT,EAAA,GAAAkT,EAAA,GAAA5L,EAAA4L,EAAA,GAAA3L,EAAA2L,EAAA,IACAlT,EAWA,SAAA6X,GAAA7X,EAAAE,EAAAI,EAAAC,GAEA,IAAAuX,EAAA5X,EAAA,GAAAI,EAAA,GACAyX,EAAA7X,EAAA,GAAAI,EAAA,GACA0X,EAAApY,KAAAyC,IAAA9B,GACA0X,EAAArY,KAAA0C,IAAA/B,GAMA,OAHAP,EAAA,GAAA8X,EAAAG,EAAAF,EAAAC,EAAA1X,EAAA,GACAN,EAAA,GAAA8X,EAAAE,EAAAD,EAAAE,EAAA3X,EAAA,GAEAN,EASA,SAAAkY,GAAAhY,EAAAI,GACA,IAAA+N,EAAAnO,EAAA,GACAqO,EAAArO,EAAA,GACA4I,EAAAxI,EAAA,GACAyI,EAAAzI,EAAA,GAEA6X,EAAA9J,IAAAE,IACA4J,EAAA,IAEAA,EAAA,EAAAvY,KAAAqD,KAAAkV,IAGA,IAAAC,EAAAtP,IAAAC,IACAqP,EAAA,IAEAA,EAAA,EAAAxY,KAAAqD,KAAAmV,IAGA,IAAAC,GAAAhK,EAAAvF,EAAAyF,EAAAxF,GAAAoP,EAAAC,EAGA,OAAAC,EAAA,EACA,EAEAA,GAAA,EACAzY,KAAAE,GAEAF,KAAA+R,KAAA0G,GAUA,SAAAC,GAAApY,GACA,cAAAA,EAAA,QAAAA,EAAA,OAUA,SAAAqY,GAAArY,EAAAI,GACA,OAAAJ,EAAA,KAAAI,EAAA,IAAAJ,EAAA,KAAAI,EAAA,GAUA,SAAAkY,GAAAtY,EAAAI,GACA,IAAAgB,EAAApB,EAAA,GAAAqB,EAAArB,EAAA,GACA0B,EAAAtB,EAAA,GAAAuB,EAAAvB,EAAA,GACA,OAAAV,KAAA8D,IAAApC,EAAAM,IAAArC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAApC,GAAA1B,KAAA8D,IAAA9B,KACAhC,KAAA8D,IAAAnC,EAAAM,IAAAtC,EAAAK,KAAA+D,IAAA,EAAA/D,KAAA8D,IAAAnC,GAAA3B,KAAA8D,IAAA7B,IAOA,MAAA4W,GAAA1B,GAMA2B,GAAA3C,GAMA4C,GAAA3C,GAMA4C,GAAA3C,GAMA4C,GAAAhC,GAMAiC,GAAAhC,GAMAiC,GAAA/B,GAcAgC,GAAA,WACA,IAAA9H,EAAAuE,KAEA,gBAAAvV,EAAA+Y,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAhG,EAAAiG,EAeA,IAdAL,IACAA,EAAA,GAGAC,IACAA,EAAA,GAIAI,EADAH,EACAvZ,KAAA2W,IAAA4C,EAAAF,EAAAC,EAAAhZ,EAAAqZ,QAEArZ,EAAAqZ,OAGAlG,EAAA6F,EAAmB7F,EAAAiG,EAAOjG,GAAA4F,EAC1B/H,EAAA,GAAAhR,EAAAmT,GAAoBnC,EAAA,GAAAhR,EAAAmT,EAAA,GACpB+F,EAAAlI,IAAAmI,GACAnZ,EAAAmT,GAAAnC,EAAA,GAAoBhR,EAAAmT,EAAA,GAAAnC,EAAA,GAGpB,OAAAhR,GAzBA","file":"0.js","sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n"],"sourceRoot":""}