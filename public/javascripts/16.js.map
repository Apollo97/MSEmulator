{"version":3,"sources":["webpack:///./src/game/Renderer/ChatBalloon.js","webpack:///./src/game/Sprite.js"],"names":["ChatBalloon","[object Object]","this","_raw","style","TypeError","cache","cb","Object","assign","path","_base_path","join","promise","$get","data","$promise","defineProperty","value","argb","Number","clr","defCol","str_rgba","toString","padStart","color","nw","_Sprite_js__WEBPACK_IMPORTED_MODULE_1__","n","ne","w","c","e","sw","s","se","arrow","renderer","text","x","y","lines","match","length","ctx","LINE_HEIGHT","height","fillStyle","font","textAlign","textBaseline","min_width","width","_tw","Math","max","apply","map","line","measureText","hw","trunc","tw","th","draw2","_drawPattern","xw","r_adj","arrow_hw","hw_arrow_hw","i","cy","fillText","window","$images_ChatBalloon","SpriteBase","_Engine_js__WEBPACK_IMPORTED_MODULE_2__","raw","url","super","__w","__h","_url","isTexture","hasOwnProperty","__isEmpty","console","group","warn","groupEnd","Error","startsWith","z","_order","defaultValue","propertyName","converter","_engine","drawGraph","drawGraph2","Sprite","origin","_get","_math_js__WEBPACK_IMPORTED_MODULE_0__","get","delay","h","isLoaded","save","rect","clip","left","right","bottom","j","ex","error","restore","sh","top","sx","_drawImage","sy","drawPattern","drawHorizontalPattern","drawVerticalPattern","_drawHorizontalPattern","_drawVerticalPattern"],"mappings":"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","file":"16.js","sourcesContent":["ï»¿\r\nimport { IRenderer } from '../IRenderer.js';\r\nimport { Sprite } from '../Sprite.js';\r\n\r\n\r\nexport class ChatBalloon {\r\n\tconstructor() {\r\n\t\tthis._raw = null;\r\n\t\tthis.style = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {any} style\r\n\t */\r\n\tasync load(style) {\r\n\t\tif (style == null) {\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\t\tif (ChatBalloon.cache[style]) {\r\n\t\t\tlet cb = ChatBalloon.cache[style];\r\n\t\t\tObject.assign(this, cb);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst path = [this._base_path, style].join(\"/\");\r\n\r\n\t\t\tthis.style = style;\r\n\t\t\t\r\n\t\t\tlet promise = $get.data(path);\r\n\t\t\tChatBalloon.cache[style] = this;\r\n\t\t\tthis.$promise = promise;\r\n\t\t\t\r\n\t\t\tObject.defineProperty(this, \"_raw\", {\r\n\t\t\t\tvalue: await promise,\r\n\t\t\t});\r\n\t\t\tdelete this.$promise;\r\n\r\n\t\t\tconst argb = Number(\"clr\" in this._raw ? this._raw.clr : defCol);\r\n\t\t\tconst rgba = (((argb & 0xFF000000) >>> 24) | ((argb & 0x00FFFFFF) << 8)) >>> 0;\r\n\t\t\tconst str_rgba = rgba.toString(16).padStart(8, \"0\");\r\n\t\t\tthis.color = (this._raw.clr == -1 || !this._raw.clr) ? (\"white\") : (\"#\" + str_rgba);\r\n\r\n\t\t\tthis.nw = new Sprite(this._raw.nw);\r\n\t\t\t//this.nw._url = path + \"/nw\";\r\n\r\n\t\t\tthis.n = new Sprite(this._raw.n);\r\n\t\t\t//this.n._url = path + \"/n\";\r\n\r\n\t\t\tthis.ne = new Sprite(this._raw.ne);\r\n\t\t\t//this.ne._url = path + \"/ne\";\r\n\r\n\t\t\tthis.w = new Sprite(this._raw.w);\r\n\t\t\t//this.w._url = path + \"/w\";\r\n\r\n\t\t\tthis.c = new Sprite(this._raw.c);\r\n\t\t\t//this.c._url = path + \"/c\";\r\n\r\n\t\t\tthis.e = new Sprite(this._raw.e);\r\n\t\t\t//this.e._url = path + \"/e\";\r\n\r\n\t\t\tthis.sw = new Sprite(this._raw.sw);\r\n\t\t\t//this.sw._url = path + \"/sw\";\r\n\r\n\t\t\tthis.s = new Sprite(this._raw.s);\r\n\t\t\t//this.s._url = path + \"/s\";\r\n\r\n\t\t\tthis.se = new Sprite(this._raw.se);\r\n\t\t\t//this.se._url = path + \"/se\";\r\n\r\n\t\t\tthis.arrow = new Sprite(this._raw.arrow);\r\n\t\t\t//this.arrow._url = path + \"/arrow\";\r\n\r\n\t\t\t//this._pat_c = ctx.createPattern(this.c, \"repeat\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t/*\r\n\t1 12345 12345 1 : 5\r\n\t2 12345 12345 12345\r\n\t3 12345 12345 12345\r\n\t4 12345 12345 12345\r\n\t5 12345 12345 12345\r\n\t6 xxx12 34512 34\r\n\t */\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {string} text - length = chat.value.length + \" : \".length + name.length = 70 + 3 + name.length\r\n\t * @param {number} x - chat balloon arrow bottom pos.x\r\n\t * @param {number} y - chat balloon arrow bottom pos.y\r\n\t */\r\n\tdraw(renderer, text, x, y) {\r\n\t\tlet lines = text.match(/(.{1,12})/g);\r\n\t\tif (!lines.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tconst LINE_HEIGHT = this.c.height;// = fontSize(12) + PADDING_TOP(2)\r\n\t\tconst PADDING_LEFT = 0, PADDING_TOP = 0, PADDING_RIGHT = 0, PADDING_BOTTOM = 0;\r\n\r\n\t\tctx.fillStyle = this.color;\r\n\t\tctx.font = \"12px å¾®è»æ­£é»é«\";//æ°ç´°æé«\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"hanging\";//top\r\n\t\t\r\n\t\tconst min_width = this.n.width * 3;\r\n\t\tlet _tw = Math.max.apply(null, lines.map(line => ctx.measureText(line).width + PADDING_LEFT + PADDING_RIGHT));\r\n\t\tif (_tw < min_width) {\r\n\t\t\t_tw = min_width;\r\n\t\t}\r\n\t\tconst hw = Math.trunc((_tw / 2) / this.n.width) * this.n.width;\r\n\t\tconst tw = hw * 2;\r\n\t\tconst th = lines.length * LINE_HEIGHT + PADDING_TOP + PADDING_BOTTOM;\r\n\t\r\n\t\tx = (x - hw);\r\n\t\ty = (y - th) - this.arrow.height;\r\n\r\n\t\t{//top\r\n\t\t\tthis.nw.draw2(x, y);\r\n\t\t\tthis.n._drawPattern(x, y, tw, this.n.height);\r\n\t\t\tthis.ne.draw2(x + tw, y);\r\n\t\t}\r\n\t\t{//center\r\n\t\t\tconst xw = this.w.width - this.w.x;\r\n\r\n\t\t\tthis.w._drawPattern(x + xw, y, this.w.width, th);\r\n\t\t\tthis.c._drawPattern(x + xw, y, tw, th);\r\n\t\t\tthis.e._drawPattern(x + xw + tw, y, this.e.width, th);\r\n\t\t}\r\n\t\t{//bottom\r\n\t\t\tconst r_adj = this.arrow.width & 1;\r\n\t\t\tconst arrow_hw = Math.trunc(this.arrow.width / 2);\r\n\t\t\tconst hw_arrow_hw = hw - arrow_hw;\r\n\t\t\r\n\t\t\tthis.sw.draw2(x, y + th);\r\n\t\t\tthis.s._drawPattern(x, y + th, hw_arrow_hw, this.s.height);//clip\r\n\t\t\tthis.s._drawPattern(x + hw + arrow_hw + r_adj, y + th, hw_arrow_hw - r_adj, this.s.height);//clip\r\n\t\t\tthis.se.draw2(x + tw, y + th);\r\n\r\n\t\t\tthis.arrow.draw2(x - arrow_hw + hw, y + th);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, cy = y; i < lines.length; ++i, cy += LINE_HEIGHT) {\r\n\t\t\tlet line = lines[i];\r\n\r\n\t\t\t//if (this.constructor.DEBUG) {\r\n\t\t\t//\tctx.beginPath();\r\n\t\t\t//\tctx.strokeStyle = \"red\";\r\n\t\t\t//\tctx.strokeRect(x + PADDING_LEFT, cy + PADDING_TOP, tw, LINE_HEIGHT);\r\n\t\t\t//}\r\n\t\t\t//ctx.fillStyle = \"black\";\r\n\r\n\t\t\tctx.fillText(line, x + hw + PADDING_LEFT, cy + PADDING_TOP);\r\n\t\t}\r\n\t}\r\n\r\n\tget _base_path() {\r\n\t\treturn \"/UI/ChatBalloon\";\r\n\t}\r\n\r\n\t//static get DEBUG() {\r\n\t//\treturn false;\r\n\t//}\r\n}\r\n\r\n/** @type {{[style:number]:ChatBalloon}} */\r\nChatBalloon.cache = window.$images_ChatBalloon || {};\r\n\r\nwindow.$images_ChatBalloon = ChatBalloon.cache;\r\n\r\nif (module.hot) {\r\n\tObject.values(ChatBalloon.cache).forEach(a => {\r\n\t\ta.__proto__ = ChatBalloon.prototype;\r\n\t\t//a.load(a.style);\r\n\t});\r\n\tmodule.hot.accept();\r\n}\r\n","ï»¿\r\nimport { Vec2, Rectangle } from \"./math.js\";\r\nimport { IGrpah, IRenderer, IGraph } from \"./IRenderer.js\";\r\n\r\nimport { engine, Graph } from \"./Engine.js\";\r\n\r\n\r\n/**\r\n * @extends {IGraph}\r\n */\r\nexport class SpriteBase extends Graph {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tif (raw) {\r\n\t\t\tsuper(url, {\r\n\t\t\t\twidth: raw.__w,\r\n\t\t\t\theight: raw.__h,\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._raw = raw;\r\n\t\t\r\n\t\t//this.src is broken;\r\n\r\n\t\tif (url) {\r\n\t\t\tdebugger\r\n\t\t\tthis._url = url;\r\n\t\t\t//this._loadTexture(url);//_loadTexture: undefined\r\n\t\t}\r\n\t\telse if (SpriteBase.isTexture(raw) !== false) {\r\n\t\t\tthis._url = raw[\"\"];\r\n\t\t}\r\n\t}\r\n\r\n\tstatic isTexture(raw) {\r\n\t\tif (raw) {\r\n\t\t\tif (raw.hasOwnProperty(\"\")) {\r\n\t\t\t\tif (typeof raw[\"\"] == 'string') {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!raw.__isEmpty) {\r\n\t\t\t\t\tconsole.group(\"no texture\");\r\n\t\t\t\t\tconsole.warn(raw);\r\n\t\t\t\t\tconsole.groupEnd();\r\n\t\t\t\t\tthrow new Error(\"no texture\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tstatic isTextureHasData(raw) {\r\n\t\treturn raw && typeof raw[\"\"] == 'string' && raw[\"\"].startsWith(\"data:image/\");\r\n\t}\r\n\r\n\tset z(value) {\r\n\t\tthis._order = value;\r\n\t}\r\n\tget z() {\r\n\t\treturn this._order;\r\n\t}\r\n\t\r\n\t/**\r\n\t * try construct value from raw data\r\n\t * @param {T} defaultValue\r\n\t * @param {string} propertyName\r\n\t * @param {function(any):T} constructor\r\n\t * @returns {T}\r\n\t * @template T\r\n\t */\r\n\t_get(defaultValue, propertyName, converter) {\r\n\t\tif (!this._raw) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\telse if (propertyName in this._raw) {\r\n\t\t\treturn converter(this._raw[propertyName]);\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis._engine.drawGraph(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tdraw2(x, y) {\r\n\t\tthis._engine.drawGraph2(this, x - this.x, y - this.y);\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t */\r\n\tdraw2i(x, y) {\r\n\t\tthis._engine.drawGraph2(this, Math.trunc(x - this.x + 0.5), Math.trunc(y - this.y + 0.5));\r\n\t}\r\n}\r\n\r\n\r\nexport class Sprite extends SpriteBase {\r\n\t/**\r\n\t * sprite = new Sprite(rawData);//ä¸æè¼å¥image\r\n\t * sprite._url = img_url;//ä¸æè¼å¥image\r\n\t *\r\n\t * æè§¸ç¼è¼å¥imageçmethod\r\n\t * draw(), isLoaded(), get width(), get height()\r\n\t * \r\n\t * æåè¼å¥image: __loadTexture()\r\n\t * \r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\r\n\t\tvar origin = this._get(new Vec2(0, 0), \"origin\", Vec2.get);\r\n\t\tthis.x = origin.x;\r\n\t\tthis.y = origin.y;\r\n\r\n\t\tthis.z = this._get(0, \"z\", Number);\r\n\r\n\t\tthis.delay = this._get(100, \"delay\", Number);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(x, y, w, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tctx.rect(x, y, w, h);\r\n\t\t\tctx.clip();\r\n\r\n\t\t\tlet left = x;\r\n\t\t\tlet top = y;\r\n\t\t\tlet right = x + w;\r\n\t\t\tlet bottom = y + h;\r\n\r\n\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\t\tthis.draw2(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t */\r\n\tdrawHorizontalPattern(x, y, w) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tconst left = x;\r\n\t\t\tconst right = x + w;\r\n\r\n\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\tthis.draw2(j, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} h\r\n\t */\r\n\tdrawVerticalPattern(x, y, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tconst top = y;\r\n\t\t\tconst bottom = y + h;\r\n\r\n\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\tthis.draw2(x, i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\t_drawPattern(x, y, w, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t\r\n\t\tconst sw = Math.trunc(w / this.width) * this.width;\r\n\t\tconst sh = Math.trunc(h / this.height) * this.height;\r\n\t\t\r\n\t\tconst left = x;\r\n\t\tconst top = y;\r\n\t\tconst right = x + sw;\r\n\t\tconst bottom = y + h;\r\n\r\n\t\tlet i, j;\r\n\r\n\t\tif (h >= this.height) {\r\n\t\t\tfor (i = top; i < bottom; i += this.height) {\r\n\t\t\t\tif (w >= this.width) {\r\n\t\t\t\t\tfor (j = left; j < right; j += this.width) {\r\n\t\t\t\t\t\tthis.draw2(j, i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet sx = w - sw;\r\n\t\t\t\t\tif (sx > 0) {\r\n\t\t\t\t\t\tthis._engine._drawImage(this, 0, 0, sx, this.height, j - this.x, i - this.y, sx, this.height);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._engine._drawImage(this, 0, 0, w, this.height, left - this.x, i - this.y, w, this.height);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet sy = h - sh;\r\n\t\t\tif (sy > 0) {\r\n\t\t\t\tconsole.error(new Error(\"æªå®æ\"));\r\n\t\t\t\tthis._engine._drawImage(this, 0, 0, this.width, sy, left - this.x, i - this.y, this.width, sy);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.error(new Error(\"æªå®æ\"));\r\n\t\t\tthis._engine._drawImage(this, 0, 0, this.width, h, left - this.x, top - this.y, this.width, h);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t */\r\n\t_drawHorizontalPattern(x, y, w) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tconst left = x;\r\n\t\tconst right = x + w;\r\n\r\n\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\tthis.draw2(j, y);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} h\r\n\t */\r\n\t_drawVerticalPattern(x, y, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tconst top = y;\r\n\t\tconst bottom = y + h;\r\n\r\n\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\tthis.draw2(x, i);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\tdrawPattern4i(x, y, w, h) {\r\n\t\tthis.drawPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t */\r\n\tdrawHorizontalPattern3i(x, y, w) {\r\n\t\tthis.drawHorizontalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5));\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\tdrawVerticalPattern3i(x, y, h) {\r\n\t\tthis.drawVerticalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\t_drawPattern4i(x, y, w, h) {\r\n\t\tthis._drawPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t */\r\n\t_drawHorizontalPattern3i(x, y, w) {\r\n\t\tthis._drawHorizontalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\t_drawVerticalPattern3i(x, y, h) {\r\n\t\tthis._drawVerticalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n}\r\n\r\nexport class _$PatternSprite_Loaded extends Sprite {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._direction = null;\r\n\r\n\t\t/** @type {CanvasPattern} */\r\n\t\tthis._pattern = null;\r\n\t}\r\n\r\n\t/** @type {string} */\r\n\tget direction() {\r\n\t\treturn this._direction;\r\n\t}\r\n\tset direction(value) {\r\n\t\tif (value && this._direction != value) {\r\n\t\t\tthis._direction = value;\r\n\t\r\n\t\t\t//reload;\r\n\t\t\tthis._pattern = null;\r\n\t\t\tthis.__proto__ = $PatternSprite.prototype;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(w, h) {\r\n\t\tif (this.direction && this._pattern) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tctx.rect(-this.x, -this.y, w, h);\r\n\t\t\tctx.fillStyle = this._pattern;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.fillStyle = \"no-repeat\";\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.direction && this._pattern) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tctx.rect(x - this.x, y - this.y, w, h);\r\n\t\t\tctx.fillStyle = this._pattern;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.fillStyle = \"no-repeat\";\r\n\t\t}\r\n\t}\r\n\r\n\t/** @returns {\"repeat\"} */\r\n\tget e_repeat() {\r\n\t\treturn \"repeat\";\r\n\t}\r\n\t/** @returns {\"repeat-x\"} */\r\n\tget e_repeat_x() {\r\n\t\treturn \"repeat-x\";\r\n\t}\r\n\t/** @returns {\"repeat-y\"} */\r\n\tget e_repeat_y() {\r\n\t\treturn \"repeat-y\";\r\n\t}\r\n\t/** @returns {\"no-repeat\"} */\r\n\tget e_noRepeat() {\r\n\t\treturn \"no-repeat\";\r\n\t}\r\n}\r\n\r\nexport class $PatternSprite extends _$PatternSprite_Loaded {\r\n\tdrawPattern(w, h) {\r\n\t\tthis.drawPattern2(0, 0, w, h);\r\n\t}\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.isLoaded()) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\t\tctx.save();\r\n\t\t\t{\r\n\t\t\t\tctx.rect(x, y, w, h);\r\n\t\t\t\tctx.clip();\r\n\t\t\t\t\r\n\t\t\t\tlet left = x;\r\n\t\t\t\tlet top = y;\r\n\t\t\t\tlet right = x + w;\r\n\t\t\t\tlet bottom = y + h;\r\n\r\n\t\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\t\t\tthis.draw2(j, i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(w, h) {\r\n\t\tif (this.direction) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tif (!this._pattern) {\r\n\t\t\t\tif (this.isLoaded()) {\r\n\t\t\t\t\tthis._pattern = ctx.createPattern(this.texture, this.direction);\r\n\t\t\t\t\tthis.__proto__ = _$PatternSprite_Loaded.prototype;\r\n\t\t\t\t\tthis.drawPattern(w, h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.direction) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tif (!this._pattern) {\r\n\t\t\t\tif (this.isLoaded()) {\r\n\t\t\t\t\tthis._pattern = ctx.createPattern(this.texture, this.direction);\r\n\t\t\t\t\tthis.__proto__ = _$PatternSprite_Loaded.prototype;\r\n\t\t\t\t\tthis.drawPattern2(x, y, w, h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"sourceRoot":""}