{"version":3,"sources":["webpack:///./src/game/init.js","webpack:///./src/game/Animation.js","webpack:///./src/game/Renderer/CharacterRenderer.js","webpack:///./src/init.js","webpack:///./src/game/Renderer/ChatBalloon.js","webpack:///./src/Client/Client.js","webpack:///./src/game/GameState.js","webpack:///./src/game/Cursor.js","webpack:///./src/game/main.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2Settings.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2Math.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2Collision.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/Shapes/b2Shape.js","webpack:///./src/game/Sprite.js","webpack:///./src/game/Physics/PPlayer.js","webpack:///./public/javascripts/resource.js","webpack:///./src/game/SceneObject.js","webpack:///./src/game/Physics/Physics.js","webpack:///./src/game/Physics/Filter.js","webpack:///./src/game/Physics/World.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2Distance.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2Fixture.js","webpack:///./src/Common/AttackInfo.js","webpack:///./src/game/Renderer/MobRenderer.js","webpack:///./src/game/Renderer/NpcRenderer.js","webpack:///./src/game/Renderer/ParticleSystem.js","webpack:///./src/game/Map.js","webpack:///./src/ui/Basic/KeySlot.js","webpack:///./src/game/SceneCharacter.js","webpack:///./src/Client/PMovePath.js","webpack:///./src/game/Renderer/LifeRenderer.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2Draw.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2Timer.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2GrowableStack.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2BlockAllocator.js","webpack:///./src/Box2D/build/Box2D/Box2D/Common/b2StackAllocator.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2DynamicTree.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2BroadPhase.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2TimeOfImpact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2CollideCircle.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2CollidePolygon.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/b2CollideEdge.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/Shapes/b2CircleShape.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/Shapes/b2PolygonShape.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/Shapes/b2EdgeShape.js","webpack:///./src/Box2D/build/Box2D/Box2D/Collision/Shapes/b2ChainShape.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2Body.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2Joint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2DistanceJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2AreaJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2FrictionJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2GearJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2MotorJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2MouseJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2PrismaticJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2PulleyJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2RevoluteJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2RopeJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2WeldJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2WheelJoint.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Joints/b2JointFactory.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2Contact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2CircleContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2PolygonContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2PolygonAndCircleContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2EdgeAndCircleContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2EdgeAndPolygonContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2ChainAndCircleContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2ChainAndPolygonContact.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2ContactFactory.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2WorldCallbacks.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2ContactManager.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2TimeStep.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/Contacts/b2ContactSolver.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2Island.js","webpack:///./src/Box2D/build/Box2D/Box2D/Particle/b2Particle.js","webpack:///./src/Box2D/build/Box2D/Box2D/Particle/b2ParticleGroup.js","webpack:///./src/Box2D/build/Box2D/Box2D/Particle/b2StackQueue.js","webpack:///./src/Box2D/build/Box2D/Box2D/Particle/b2VoronoiDiagram.js","webpack:///./src/Box2D/build/Box2D/Box2D/Particle/b2ParticleSystem.js","webpack:///./src/Box2D/build/Box2D/Box2D/Dynamics/b2World.js","webpack:///./src/Box2D/build/Box2D/Box2D/Rope/b2Rope.js","webpack:///./src/Box2D/build/Box2D/Box2D/Box2D.js","webpack:///./src/game/Physics/Foothold.js","webpack:///./src/game/Physics/Ground.js","webpack:///./src/game/Renderer/CharacterActionAnimation.js","webpack:///./src/game/Item.js","webpack:///./src/Common/PlayerData.js","webpack:///./src/util.js","webpack:///./src/game/Physics/PBullet.js","webpack:///./src/game/Skill.js","webpack:///./src/game/Physics/DebugDraw.js","webpack:///./src/game/Physics/LadderRope.js","webpack:///./src/game/Physics/PMob.js","webpack:///./src/game/MobSkill/MobSkillBase.js","webpack:///./src/ui/Basic/KeySlotData.js","webpack:///./src/game/MobSkill/238.FairyDust.js","webpack:///./src/Common/Packet/index.js","webpack:///./src/game/Renderer/Layer.js","webpack:///./src/game/Renderer/DamageNumber.js","webpack:///./src/game/MobSkill/238.FlowerTrap.js","webpack:///./src/Common/Packet/LoginPacket.js","webpack:///./src/Common/Packet/ChatPacket.js","webpack:///./src/Common/Packet/CharacterPacket.js"],"names":["GlobalVar","[object Object]","this","m_is_run","MAX_FPS","FRAME_ELAPSED","CANVAS_SCALE","m_editor_mode","m_display_foothold","m_display_physics_debug","m_display_debug_info","m_debugDraw","_Physics_DebugDraw_js__WEBPACK_IMPORTED_MODULE_4__","m_display_selected_object","m_selected_object","m_hover_object","m_viewRect","_math_js__WEBPACK_IMPORTED_MODULE_3__","m_is_rendering_map","m_display_back","m_display_front","m_display_mapobj","m_display_maptile","m_display_particle_system","m_display_skeletal_anim","m_display_portal","m_display_player","m_display_other_player","m_display_life","m_display_npc","m_display_mob","ChatBalloon_default_style","ChatBalloon_display_duration","input_keyDown","input_keyUp","mouse_move","mouse_x","mouse_y","mouse_dl","mouse_ul","mouse_dm","mouse_um","mouse_dr","mouse_ur","SceneObjectMgr","layeredObjects","i","lo","Object","defineProperty","enumerable","writable","value","Update","stamp","layer","length","uid","update","RenderLayer","engine","render","addToScene","obj","Number","isSafeInteger","TypeError","$layer","$objectid","destroy","$gv","window","m_draw_animation_texture_info","IAnimation","raw","url","_raw","_url","frame","time","delta","textures","is_loop","is_end","reduce","pv","cv","delay","newAnim","constructor","Error","texture","AnimationBase","super","_Sprite_js__WEBPACK_IMPORTED_MODULE_2__","isLoaded","__loadTexture","fc","reset","renderer","x","y","angle","flip","drawRotaGraph","Animation","draw","_draw_and_preload","zMap","sMap","FragmentTexture","_Sprite_js__WEBPACK_IMPORTED_MODULE_5__","full_path","origin","__proto__","_math_js__WEBPACK_IMPORTED_MODULE_6__","prototype","map","relative","calcRelative","_calcRelative","filter","_IRenderer_js__WEBPACK_IMPORTED_MODULE_4__","opacity","_slot","_place","classList","z","not_value","console","warn","order","stack","empty","brow","neck","navel","hand","handMove","_earBelowHead","earBelowHead","_earOverHead","earOverHead","that","base","anchor","sub","add","chara","_getRelativeFunction","isHasAnchor","isAnchorNeck","_calcRelative_neck","isAnchorBrow","_calcRelative_brow","isAnchorNavel","slots","body","_getOrigin","_calcRelative_navel","isAnchorHand","_calcRelative_hand","isAnchorHandMove","lastIndexOf","_calcRelative_handMove_lHand","_calcRelative_handMove","_calcRelativeEmpty","fragments","getTexture","_anchor","head","arm","globalAlpha","isEmpty","drawGraph2","ctx","toString","HairFragmentTexture","args","graph2","graph3","_render","ItemEffectAnimation","_Animation__WEBPACK_IMPORTED_MODULE_2__","__getAttr","load","attr","defVal","actionExceptRotation","oy","height","ItemEffect","animation","action","fixed","itemEffectList","_list","$get","list","clear","forEach","id","parseInt","ex","equipID","eff","has","data","_load","front","__construct","join","Set","CharacterFragmentBase","place","CharacterBodyFragment","getFrameTexture","action_frame","ft","CharacterFaceFragment","emotion_frame","emotion","EquipImageFilter","equip","hue","j","k","sat","bri","contrast","ICharacterEquip","_animation_type","CharacterEquipBase","effect","_onload","categoryInfo","slot_order","islot","vslot","toJSON","__onload","func","call","cateInfo","use_category","promise_raw","promise_name","__load","path","then","name","desc","reason","Promise","resolve","all","result","_public_javascripts_resource_js__WEBPACK_IMPORTED_MODULE_0__","isEquipExist","load_extern_item_data","__load_slot","__load_fragments","a","fragmentConstructor","action_list","keys","_raw_textures","_base_path","__load_frame_textures","fragment_textures","frag","__load_place_textures","FragmentTextureType","slot","info","islots","match","vslots","getIconUrl","getIconRawUrl","CharacterEquip","d","isNaN","isFinite","CharacterEquipHair","CharacterEquipFaceAcc","face","_info","fragmentType","elfEarFragment","lefEarFragment","highlefEarFragment","ear","lefEar","highlefEar","elfEar","slice","CharacterSlots","_ordered_slot","_hair","_hair2","_hairMix2","_hair3","_hairMix3","hair","cap","accessoryFace","accessoryEyes","accessoryEars","coat","longcoat","pants","shoes","glove","cape","shield","weapon","configurable","hairColor2","hairMix2","hairColor3","hairMix3","color","getColorHairID","get","undefined","getHairColor","error","hc2Id","$promise_hair2","__loadColoredHair","hair2","item","ori","hc3Id","$promise_hair3","hair3","loadedEquip","alert","_unload","push","ha","Math","trunc","enumerate_equip","CharacterChangeLog","useEquip","unuseEquip","weaponType","CharacterAnimationBase","_$dirty","job","subJob","actani","_CharacterActionAnimation_js__WEBPACK_IMPORTED_MODULE_7__","speed","fixed_speed","_action","_action_frame","_action_time","_emotion","_emotion_frame","_emotion_time","_emotion_frame_sequence","__require_update","__frag_list","$$changeLog","nc","tasks","getFrameCount","count","_isLoaded_or_doload","$promise","act","reload","frame_count","action_frame_count","next","f","action_time","action_delay","getDelay","emo","_action_list","indexOf","circularSequence","emotion_frame_count","random","emotion_time","emotion_delay","isEnd","loop","getSpeed","_update","__update_frag_list","pushGlobalAlpha","__draw_list","popGlobalAlpha","pushMatrix","translate","rotate","m_a","scale","popMatrix","__add_frag_to_list","__add_equip_to_frag_list","is_back","fts","startsWith","ae","_calcBoundBox","left","top","right","bottom","x0","y0","x1","width","y1","min","max","_boundBox","CharacterRenderer","tx","ty","__load_task","Init","reverse","use","initAnimation","waitLoaded","_draw","__forceUpdate","_waitFrameTexturesLoaded","category","getJobWeaponCategory","isCashWeapon","task","_use","_unuse","code","es","split","_clear","v","ss","cate","h2","h3","hc","c2","m2","c3","m3","hairMix4","apply","hairColor","col","faceColor","getFaceColor","getColorFaceID","changeLog","unuse","genCode","_stringify","link","enumerate","log","open","_outlink","__texture_to_base64","frag_list","file_name","svg","clz","DownloadData","filename","bound","size","$swapCanvas","c2w","_ctx2","canvas","c2h","base64","toDataURL","elem","document","createElement","download","href","appendChild","click","removeChild","$src","src","reject","xhr","XMLHttpRequest","onload","reader","FileReader","onloadend","onerror","ev","readAsDataURL","response","responseType","send","_init_js__WEBPACK_IMPORTED_MODULE_1__","jQuery","jquery__WEBPACK_IMPORTED_MODULE_0___default","$","vue__WEBPACK_IMPORTED_MODULE_14___default","config","productionTip","vuex__WEBPACK_IMPORTED_MODULE_15__","onwheel","init_tasks","AddInitTask","InitAll","ChatBalloon","style","_d_path","nw","_Sprite_js__WEBPACK_IMPORTED_MODULE_1__","n","ne","w","c","e","sw","s","se","arrow","cache","text","lines","line","LINE_HEIGHT","font","textAlign","textBaseline","_tw","measureText","sort","b","tw","ceil","hw","th","draw2","_drawPattern","xw","arrow_hw","hw_arrow_hw","draw2i","cy","fillStyle","fillText","$images_ChatBalloon","Client_Client","socket","_conn","$io","charaMap","charaId","cbfunc","eventName","listener","on","io","URL","location","port","emit","arguments","once","$scene_map","scene_map","account","password","world","channel","charID","Packet","ackPacket","charaData","remoteCharacters","_CreateMyCharacter","onEnterRemoteChara","err","message","store","dispatch","emplace","equips_code","mapId","_$data","guildId","partyId","packet","remote_chara","arg0","controller","$physics","$createRemotePlayer","$$renderer","fnAck","chatCtrl","enter","app","vue","$refs","statusBar","pushChatHistory","type","$move","$anim","invokeSkill","skillId","itemId","bind","_addRemoteCharaPacketListener","onRemoteChat","onRemoteCharaMove","onRemoteCharaAnim","onRemoteCharaSkill","onRemoteAvatarModified","login","selectWorld","selectChara","GameState_GameStateManager","scene","state","map_id","history","pushState","_window_title","title","chara_code","_old_c","_parse","CursorAnimationFrame","CursorAnimationData","frames","duration","addFrame","Cursor","selector","keyword","cssText","tt","t","createTextNode","SCREEN_PRINTLN","getText","getValue","_SCREEN_PRINTLN","addEventListener","PopState","task1","addFrameFromUrl","task2","createToCSS","createCursor_clickable","onkeydown","target","key","onkeyup","set","onmousedown","contains","which","pageX","pageY","onmouseup","onmousemove","main_Game","timer","timer_","_dTimer","fps_arr","frame_s_arr","Map","PushState","_loop","getElementById","onchange","checked","requestAnimationFrame","innerHTML","_$moveViewportSpeed","inBound","mapBound","client","$test","params","sURLVariables","decodeURIComponent","search","substring","sParameter","_parseUrlParameter","DEFAULT_MAP_ID","_isMapReady","IRenderer","waitAllLoaded","avg","toFixed","setTimeout","Image","Engine","_canvas","clearRect","charaList","Skill","ch","$emit","$recMove","DamageNumber","beginScene","loadIdentity","clearDrawScreen","screen_size","setCenter","player","pos","getPosition","px","py","moveViewport","beginRender","renderBackground","layeredObject","renderLayeredObject","renderLayeredTile","applyCamera","chara_index","renderLife","endRender","Render","_$drawName","_$drawChatBalloon","renderPortal","renderFrontground","renderParticle","beginPath","fillRect","_render_debug_info","endScene","ta","tb","lw","lineWidth","strokeStyle","val","strokeText","_val","__val","timeStamp","_requestNextFrame","_calcFPS","_updateScene","_renderScene","b2Assert","condition","__webpack_require__","__webpack_exports__","b2MakeNumberArray","b2_maxFloat","b2_epsilon","b2_epsilon_sq","b2_pi","b2_maxManifoldPoints","b2_maxPolygonVertices","b2_aabbExtension","b2_aabbMultiplier","b2_linearSlop","b2_angularSlop","b2_polygonRadius","b2_maxSubSteps","b2_maxTOIContacts","b2_velocityThreshold","b2_maxLinearCorrection","b2_maxAngularCorrection","b2_maxTranslation","b2_maxTranslationSquared","b2_maxRotation","b2_maxRotationSquared","b2_baumgarte","b2_toiBaumgarte","b2_invalidParticleIndex","b2_maxParticleIndex","b2_particleStride","b2_minParticleWeight","b2_maxParticlePressure","b2_maxParticleForce","b2_maxTriadDistance","b2_maxTriadDistanceSquared","b2_minParticleSystemBufferCapacity","b2_barrierCollisionTime","b2_timeToSleep","b2_linearSleepTolerance","b2_angularSleepTolerance","b2Alloc","b2Free","mem","b2Log","b2Version","major","minor","revision","b2_version","b2_changelist","b2ParseInt","b2ParseUInt","abs","b2MakeArray","init","b2MakeNullArray","_b2Settings__WEBPACK_IMPORTED_MODULE_0__","b2_pi_over_180","b2_180_over_pi","b2_two_pi","b2Abs","b2Min","b2Max","b2Clamp","hi","b2Swap","tmp","b2IsValid","b2Sq","b2InvSqrt","sqrt","b2Sqrt","b2Pow","pow","b2DegToRad","degrees","b2RadToDeg","radians","b2Cos","cos","b2Sin","sin","b2Acos","acos","b2Asin","asin","b2Atan2","atan2","b2NextPowerOfTwo","b2IsPowerOfTwo","b2Random","b2RandomRange","b2Vec2","other","Length","inv_length","out","b2AbsV","b2MinV","b2MaxV","b2ClampV","v_x","v_y","b2RotateV","b2DotVV","b2CrossVV","b2CrossVS","b2CrossVOne","b2CrossSV","b2CrossOneV","b2AddVV","b2SubVV","b2MulSV","b2MulVS","b2AddVMulSV","b2SubVMulSV","b2AddVCrossSV","b2MidVV","b2ExtVV","b2IsEqualToV","c_x","c_y","b2DistanceVV","b2DistanceSquaredVV","b2NegV","ZERO","UNITX","UNITY","s_t0","s_t1","s_t2","s_t3","b2Vec2_zero","b2Vec3","b2DotV3V3","b2CrossV3V3","a_x","a_y","a_z","b_x","b_y","b_z","b2Mat22","ey","Copy","c1","SetVV","r1c1","r1c2","r2c1","r2c2","SetSSSS","SetAngle","SetZero","det","a11","a12","a21","a22","SelfAbs","GetInverse","M","SelfAdd","SelfSub","M_ex","M_ey","b2AbsM","b2MulMV","b2MulTMV","A","B","A_ex","A_ey","B_ex","B_ey","b2AddMM","A_ex_x","A_ex_y","A_ey_x","A_ey_y","B_ex_x","B_ex_y","B_ey_x","B_ey_y","b2MulMM","b2MulTMM","IDENTITY","b2Mat33","ez","SetXYZ","a31","a32","a13","a23","a33","v_z","b2MulM33V3","b2MulM33XYZ","b2MulM33V2","b2MulM33XY","b2Rot","q","r","b2MulRR","b2MulTRR","b2MulRV","b2MulTRV","q_c","q_s","r_c","r_s","b2Transform","p","SetIdentity","position","rotation","GetAngle","T","T_q_c","T_q_s","b2MulXV","p_x","p_y","b2MulTXV","b2MulXX","b2MulTXX","b2Sweep","localCenter","c0","a0","alpha0","xf","beta","one_minus_beta","alpha","floor","b2ContactFeatureType","b2ManifoldType","b2PointState","_b2Distance__WEBPACK_IMPORTED_MODULE_2__","b2ContactFeature","_key","_key_invalid","_indexA","_indexB","_typeA","_typeB","indexA","indexB","typeA","typeB","b2ContactID","cf","o","b2ManifoldPoint","localPoint","_Common_b2Math__WEBPACK_IMPORTED_MODULE_1__","normalImpulse","tangentImpulse","_Common_b2Settings__WEBPACK_IMPORTED_MODULE_0__","b2Manifold","points","MakeArray","localNormal","e_unknown","pointCount","Reset","b2WorldManifold","normal","separations","manifold","xfA","radiusA","xfB","radiusB","e_circles","pointA","MulXV","Initialize_s_pointA","pointB","Initialize_s_pointB","DistanceSquaredVV","SubVV","SelfNormalize","cA","AddVMulSV","Initialize_s_cA","cB","SubVMulSV","Initialize_s_cB","MidVV","DotVV","e_faceA","MulRV","planePoint","Initialize_s_planePoint","clipPoint","Initialize_s_clipPoint","e_faceB","SelfNeg","b2GetPointStates","state1","state2","manifold1","manifold2","b2_removeState","jct","b2_persistState","b2_nullState","b2_addState","b2ClipVertex","b2RayCastInput","p1","p2","maxFraction","b2RayCastOutput","fraction","b2AABB","lowerBound","upperBound","m_cache_center","m_cache_extent","d_x","d_y","valid","IsValid","ExtVV","aabb","aabb1","aabb2","Combine2","output","input","tmin","tmax","absD_x","absD_y","inv_d","t1","t2","t3","d1_x","d1_y","d2_x","d2_y","b2TestOverlapAABB","b2ClipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","vIn0","vIn1","distance0","distance1","interp","e_vertex","e_face","b2TestOverlapShape_s_input","b2TestOverlapShape_s_simplexCache","b2TestOverlapShape_s_output","b2TestOverlapShape","shapeA","shapeB","proxyA","SetShape","proxyB","transformA","transformB","useRadii","simplexCache","distance","b2ShapeType","_Common_b2Math__WEBPACK_IMPORTED_MODULE_0__","b2MassData","mass","center","I","b2Shape","radius","m_type","m_radius","SpriteBase","_Engine_js__WEBPACK_IMPORTED_MODULE_2__","__w","__h","isTexture","hasOwnProperty","__isEmpty","group","groupEnd","_order","defaultValue","propertyName","converter","_engine","drawGraph","Sprite","_get","_math_js__WEBPACK_IMPORTED_MODULE_0__","h","save","rect","clip","restore","drawPattern","drawHorizontalPattern","drawVerticalPattern","_drawHorizontalPattern","_drawVerticalPattern","DEGTORAD","PI","b2Vec2_temp","_Physics_js__WEBPACK_IMPORTED_MODULE_0__","chara_profile","density","foot_width","foot_j_width","JUMP_FORCE","MOVEMENT_VELOCITY","$LADDER_SPEED","PLAYER_USE_WHEEL_WALKER","FOOT_FRICTION","MOVEMENT_POWER","MOVEMENT_STOP_POWER","PORTAL_COOLDOWN","PPlayerState","_begin_jump","jump","jump_count","_drop","walk","prone","dropDown","_fly","brake","ladder","ladder_move_dir","invincible","freeze","portal_cooldown","knockback","outOfControl","FootContact","foothold","priority","PCharacterBase","disable","assign","setMovementSpeed","foot_walk","walker","$foothold","prev_$fh","leave_$fh","_foothold","_foot_at","_foothold_priority","_foot_contact_list","portal","_walker_omega","jump_force","clearForce","by","fy","SetPositionXY","ConstantVelocity","GetPosition","enable","mapRenderer","mapController","getMap","exeScript","reg","tn","cmd","fromTn","toPortal","portalMgr","portals","find","pn","_gotoPortal","tpid","tp","doAfterStep","unload","setPosition","m_world","onceUnlock","_useLadder","contactLadder","flag","$ladder_pj","ladderBody","GetAngularVelocity","SetFixedRotation","SetAwake","SetLinearVelocity2","b2_kinematicBody","SetMotorSpeed","calcHeight","pjd","bodyA","bodyB","localAxisA","lowerTranslation","upperTranslation","enableLimit","maxMotorForce","_getMass","pj","CreateJoint","b2_dynamicBody","DestroyJoint","$sticky_pj","_isCanMove","up","down","EnableMotor","useLadder","ApplyLinearImpulseToCenter2","_usePortal","GetLocalPoint","wheel_sp","velocity","GetLinearVelocity","actionDropdown","SetMaxMotorTorque","remove_sticky","vx","止滑","sticky","_isCanJump","actionJump","isDrop","increment_percent","_setWalkerOmegaFromVelocity","movement_velocity","GetWorld","GetGravity","GetMass","SetGravityScale","_body_category","first_pos","jmp_body_pos_y","bdef","fdef","shape","bullet","userData","CreateBody","$type","_Filter_js__WEBPACK_IMPORTED_MODULE_7__","SetAsBox","friction","restitution","fixture","CreateFixture","circle","m_p","_set_foot_listener","jd","Initialize","enableMotor","maxMotorTorque","lowerAngle","upperAngle","referenceAngle","frequencyHz","dampingRatio","addStep","Step","addAfterStep","AfterStep","setjumpForce","DestroyBody","fa","fb","GetBody","GetUserData","contact","_isFromSelfContact","SetEnabled","foot_fixture","beginContact","__beginContact_walker","endContact","__endContact_walker","preSolve","__preSolve_walker","_ignoreSelfContact","targetBody","m_body","_beginContactPortal","m_userData","_endContactPortal","oldManifold","script","foot_at","is_wall","chain","prev","y2","__priority_foothold_contact","Clone","foot_contact","mapBound_body","_endContactFootholdList","fh","_$fallEdge","force","ApplyForceToCenter","upper","GetUpperLimit","lower","GetLowerLimit","translation","GetJointTranslation","m_awakeFlag","pop","PCharacter","moveX","moveY","move","ApplyLinearImpulseToCenter","kbTime","fx","forceMove","md","ground","bodies","maxForce","moveElem","elapsed","ConstantVelocityWorldCenter2","vy","ALPHA","ONE_MINUS_ALPHA","dx","dy","sx","sy","oldVel","pState","setGravityScale","sign","PPlayer","_create","m_linearVelocity","SetLinearVelocity","_$renderer","PRemoteCharacter","_create_anchor","moveTo","m_targetA","$failed_urls","$archive","character_emotion_list","character_action_list","ItemCategoryInfo","id_prefix","imgDir","listPath","categoryName","dataDir","iconPath","iconRawPath","defineProperties","imageUrl","_id","Equip","Consume","Etc","Install","Cash","typeName","0","1","2","3","4","typeId","0000","0001","0002","0003","0004","0100","0101","0102","0103","0104","0105","0106","0107","0108","0109","0110","0121","0122","0123","0124","0125","0126","0127","0128","0130","0131","0132","0133","0134","013526","013530","0136","0137","0138","0140","0141","0142","0143","0144","0145","0146","0147","0148","0149","0150","0151","0152","0153","0154","0155","0156","0157","0158","0170","_categoryList","info_map","cat","ResourceManager","dp","equip_map","$setValue","JSON","parse","timeout","status","responseText","ontimeout","onabort","root_path","$ROOT_PATH","archive","failed_urls","endsWith","ps","lastIndex","origin_value","$getValue","$ResourceManager","symbol_isPack","Symbol","url_startsWith_protocol","RegExp","test","_setValueByPath","is_pack","_getValueFromArchiveByPath","_path","_getDataPathByUrl","$getValueAsync","async","pack","packUrl","jsonText","packSync","dataUrl","dataSync","listUrl","listSync","soundMp3Url","soundWavUrl","assetUrl","asset","ItemAttrNormalize","gender","g","_equip","regexp_getHairStyleID","regexp_getFaceStyleID","regexp_getHairColor","regexp_getFaceColor","CharacterRenderConfig","m","id_1","id_2","String","ItemTypeInfo","Hat","Cape","Top","Overall","Glove","Bottom","Shield","Shoes","Eye Decoration","Earrings","Face Accessory","Face","Hair","external","load_external_resource","_external_raw","padStart","typeInfo","overallCategory","toLowerCase","subCategory","it","cash","isCash","icon","","external_resource_promise","_concat_external_resource_p","origin_data","_concat_external_resource","concat_external_resource","id_map","ori_item","_name","_desc","$foreign","trigger_update_external_equip_list","default_","frameBooks","default","_act","effects","_frags","frags","_frag","image","originOrZero","mapOffset","metaInfo","iconRaw","SceneObject","enablePhysics","damage","crr","_left","_top","_right","_bottom","lineTo","arcTo","fill","box2d","FilterHelper","b2Body","b2Fixture","b2Contact","b2ContactImpulse","b2ContactListener","$box2d","_on_step","fn","_on_after_step","ApplyForceToCenter2","Acceleration","desiredVel","sourceVel","point","GetWorldCenter","velChange","ix","iy","impulse","ApplyLinearImpulse","AccelerationX","desiredVelX","velChangeX","AccelerationY","desiredVelY","velChangeY","ConstantVelocity2","pointX","pointY","ConstantVelocityX","ConstantVelocityY","postSolve","getOwnerID","host","owner","module","exports","FixtureContactListener","filter_preset","next_category","_Box2D_build_Box2D_Box2D_Dynamics_b2Fixture__WEBPACK_IMPORTED_MODULE_0__","preset","maskBits","categoryBits","debugName","debugCategory","groupIndex","filter_table","filter_list","registerCategory","contactFilter","_Box2D_build_Box2D_Box2D_Box2D__WEBPACK_IMPORTED_MODULE_1__","Fixture","filterName","GetFilterData","GetType","ShouldCollideConnected","ShouldCollide","$gravityAcc","$positionIterations","$velocityIterations","$particleIterations","$particleRadius","GRAVITY","ContactListener","m_fixtureA","m_fixtureB","childIndexA","m_indexA","childIndexB","m_indexB","World","SetDebugDraw","SetContactListener","_Ground_js__WEBPACK_IMPORTED_MODULE_2__","ladderRope","stop","$_mouseJoint","_onceAfterStep","_destryBodyList","_DestroyBody","m_locked","draw_foothold_path_count","particleType","b2_elasticParticle","particleSystemDef","m_particleSystem","CreateParticleSystem","SetRadius","SetDamping","pd","flags","CreateParticleGroup","b2_colorMixingParticle","ColorParticleGroup","$vbo_ps","map_raw_data","_LadderRope_js__WEBPACK_IMPORTED_MODULE_3__","IsLocked","mapMob","mob","_PMob_js__WEBPACK_IMPORTED_MODULE_5__","_destroy","mapNpc","compute_rectangle","_Filter_js__WEBPACK_IMPORTED_MODULE_8__","b2_staticBody","MAP_PORTAL_FULL_SIZE","isSensor","bb","m_vertex1","m_vertex2","sceneObject","_PPlayer_js__WEBPACK_IMPORTED_MODULE_4__","AddVV","hit_fixture","QueryAABB","TestPoint","SetTarget","$_mouseDown","$_mouseUp","$_mouseMove","$_onMouseEvent","GetBodyList","m_next","debugDraw","m_ctx","canvasScale","viewZoom","DrawDebugData","m_display_particleSystem","gl","GetParticleCount","buf","GetPositionBuffer","vertices","Float32Array","bufferData","ARRAY_BUFFER","STATIC_DRAW","vbo","createBuffer","bindBuffer","m_groupList","particleCount","instanceOffset","GetBufferIndex","drawArrays","POINTS","m_positionBuffer","m_colorBuffer","m_weightBuffer","r2","$particle_grd","grd","createRadialGradient","addColorStop","m_firstIndex","m_lastIndex","setTransform","$ladderRope","$drawDebugInfo","$drawDebugInfo2","footholds","_drawLine","lr","calcWidth","b2DistanceProxy","m_buffer","m_vertices","m_count","index","SetupDistanceProxy","bestIndex","bestValue","b2SimplexCache","metric","b2DistanceInput","b2DistanceOutput","iterations","b2_gjkCalls","b2_gjkIters","b2_gjkMaxIters","b2_gjk_reset","b2SimplexVertex","wA","wB","b2Simplex","m_v1","m_v2","m_v3","wALocal","GetVertex","wBLocal","metric1","metric2","GetMetric","NegV","e12","CrossVV","CrossOneV","CrossVOne","pA","pB","DistanceVV","w1","w2","s_e12","d12_2","d12_1","inv_d12","w3","w1e12","e13","s_e13","w1e13","d13_1","d13_2","e23","s_e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","b2Distance_s_simplex","b2Distance_s_saveA","b2Distance_s_saveB","b2Distance_s_p","b2Distance_s_d","b2Distance_s_normal","b2Distance_s_supportA","b2Distance_s_supportB","b2Distance","simplex","ReadCache","saveA","saveB","saveCount","distanceSqr1","distanceSqr2","iter","Solve2","Solve3","GetClosestPoint","LengthSquared","GetSearchDirection","vertex","GetSupport","MulTRV","duplicate","GetWitnessPoints","WriteCache","rA","rB","Normalize","SelfMulAdd","SelfMulSub","_Collision_Shapes_b2Shape__WEBPACK_IMPORTED_MODULE_3__","b2Filter","b2FixtureDef","b2FixtureProxy","_Collision_b2Collision__WEBPACK_IMPORTED_MODULE_2__","childIndex","treeNode","def","m_density","m_friction","m_restitution","m_proxies","m_proxyCount","m_filter","m_isSensor","m_shape","sensor","Refilter","edge","GetContactList","fixtureA","GetFixtureA","fixtureB","GetFixtureB","FlagForFiltering","broadPhase","m_contactManager","m_broadPhase","TouchProxy","GetTransform","ComputeDistance","RayCast","massData","ComputeMass","bodyIndex","Dump","GetChildCount","proxy","ComputeAABB","CreateProxy","DestroyProxy","transform1","transform2","Synchronize_s_aabb1","Synchronize_s_aabb2","displacement","Synchronize_s_displacement","MoveProxy","AttackInfo","allAttack","skill","symbol_targetObject","AttackPair","allDamage","targetObject","objectid","lifeMgr","entities","setTargetObject","realDamage","critical","DamagePair","MobAnimationSpeed","$mob_name","MobRenderer_MobRenderer","LifeRenderer","__info","noFlip","level","maxHP","maxMP","PADamage","PDRate","MADamage","MDRate","acc","eva","pushed","fs","summonType","elemAttr","mobType","firstAttack","hideHP","boss","hpTagColor","hpTagBgcolor","showNotRemoteDam","defaultHP","defaultMP","ignoreMoveImpact","_get_desc_base_path","flySpeed","_animations","NpcAnimationSpeed","NpcRenderer_NpcRenderer","rand_r","range","rand_color2i","colorVar","fromInt24","ParticleSystem_Particle","_initParam","life","math","startScale","lifeMax","lifeVar","angleVar","startColor","startColorVar","color_d","endColor","endColorVar","selfSub","sizeX","sizeY","startSize","startSizeVar","endScale","endSize","endSizeVar","scale_d","startX","posX","posVarX","startY","posY","posVarY","emitterMode","emitterType","gravity","speedVar","dir","radialAccel","radialAccelVar","tangentialAccel","tangentialAccelVar","rotationIsDir","dt","radial","tangential","normalize","clone","mul","newy","_radial","_dir","mx","my","toHSV","drawColoredGraph2","ParticleSystem_ParticleGroupData","totalParticle","ParticleSystem_ParticleGroup","particles","Infinity","pg","totalTime","particle","particle_name","particleName","_particle_path","_experimental_particle","helper","imagedata","imageToImagedata","imagedataToDataURL","whiteToRed","encodeURIComponent","naturalWidth","naturalHeight","_texture_base_path","splice","viewRect","blendFuncDst","blendFuncSrc","globalCompositeOperation","hh","collide4f2","enable_skeletal_anim","map_sprite","Back","Obj","Tile","map_load_package","$map_sprite","allQuest","Map_MapTexture","texture0","raw_default","a1","movetype","movew","moveh","movep","mover","ratio","_drawRotaGraph","Map_MapObjectBase","quest","qid","_load_object_info","_load_back_info","_load_tile_info","display_aabb","aabb_color","zM","typeb","rx","ry","cx","backTags","flow","_load_texture","_texture_raw","__calc_aabb","compute_max_rectangle","round","hr","$editor_mouse","next_texture","mcx","mcy","$select","$unselect","index_of_texture","collide","setLineDash","lineDashOffset","stroke","__draw_texture","horizontal","vertical","x2","yy","xx","__draw","mrx","mry","MapObject","_update_and_preload","oS","l0","l1","l2","Map_MapParticle","groups","evaluate","mapRawData","sceneMap","particleList","particleRaw","mpp","Map_MapObjectSkeletalAnim","ssanim","_fname","_folder","SSAnim","spineRandomStart","anim_length","setAnimTime","MapTile","tS","u","no","MapPortal","tm","states","skin","_loadTexture","__display_mode","_portals_raw","_type_map","pt","editor","game","_getTexturePath","_script","MapPortalManager","createPortal","MapBackBase","MapBack","bS","MapBackAnimation","MapBackSkeletalAnim","ob","LifeSpawnPoint","spawnId","Map_MapLifeEntity","lifeSpawnPoint","lifeId","is_dead","spawn","hide","Map_MapMob","Map_MapNpc","loadDescription","skills","hp","createMob","_loadAction","actions","_load_skill_by_mob_id","_load_skill_info","attack","skill_map","firstSkillInfo","skill_list","die","_applyState","skill1","sname","anim","skill_info","si","mob_id","FlowerTrap","FairyDust","5","invoke","6","7","8","9","10","skill_map_action","lev","skill_id","unknow skill","decreaseLife","destroyMob","destroyNpc","MapLifeEntityCapacityRate","MapLifeManager","spawnPoints","loadLifeDesc","entity","increaseLife","destroyLife","Create","npcID","is_dummy","mobID","whereLayer","Map_SceneMap","background","frontground","layeredTile","namedObject","$load_tasks","$loading_status","$_mapString","$mapString","$region","_map_names","$MapNames","_Init","loading_task_map","back","ani","values","objIsEmpty","objs","__constructLayeredObject_obj","tiles","__constructLayeredObject_tile","tile","stringify","ti","spineAni","groupCollapsed","objtb","__compute_top_bottom_border","tiletb","reCalc","VRLeft","VRTop","VRRight","VRBottom","_compute_top_bottom_border","_compute_left_right_border","mapName","streetName","_get_map_data_url","url2","_loadBgm","_constructBack","_constructLayeredObject","mapobj","__constructMiniMap","construct","results","_compute_map_bound","viewCenter","_createMapBound","spawnMob","bgmPath","bgm","elem_bgm","_getBgmPath","_bgm_path","autoplay","play","pause","miniMap","centerX","centerY","player_spawns","_addChara","isActivated","layerIndex","KeySlot","KeySlot_ActionSlot","KeySlotData","KeySlot_SkillSlot","$addItem_repeatEquip","SceneCharacter_ChatController","$outputText","_isDisplay","isDisplay","$displayDuration","displayDuration","cb","$colon","colon","boundBox","$maxLength","keyboard_map","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","SceneCharacter_BaseSceneCharacter","stat","PlayerData","activeSkills","$inPacket","$outPacket","_move","shift","isAwake","equipId","from","to","delete","_handleAttack","attackInfo","_player_control","getLayer","__drawName","player_state","fly","isLadder","_is_end","getTargetObject","damVar","getCurrentMaxBaseDamage","getCurrentMinBaseDamage","critRate","critDamage","addDamagePair","m_damageSkin","SceneCharacter_SceneCharacter","$createPlayer","items","Array","Item","onJobChange","_onJobChange","newJob","key_map","ikey","can_use_skill","keyName","keySlot","keyDown","itemSlot","useItem","keyUp","sk","control","amount","props","incDEXr","timeLimited","Date","_addItem","itemData","slotType","_removeItem","resource","update_renderer","findItem","_consume","addItem","$style","charaMove","capture","SceneCharacter_SceneRemoteCharacter","$remote","_remote_control","BaseMoveElem","CharacterMoveElem","stand","_construct_actions","getDefaultAction","$index","eval","_Animation_js__WEBPACK_IMPORTED_MODULE_1__","b2DrawFlags","b2Color","rr","gg","aa","a2","a3","SetRGBA","mixColor","strength","MixColors","colorA","colorB","dr","dg","db","da","MakeStyleString","RED","GREEN","BLUE","b2Draw","m_drawFlags","vertexCount","axis","centers","colors","b2Timer","m_start","now","b2Counter","m_min_count","m_max_count","b2GrowableStack","N","m_stack","element","b2BlockAllocator","b2StackAllocator","verify","b2DynamicTree_b2TreeNode","m_id","b2Collision","parent","child1","child2","b2DynamicTree_b2DynamicTree","m_root","m_freeList","m_path","m_insertionCount","callback","s_stack","Push","GetCount","node","Pop","TestOverlap","IsLeaf","b2Math","s_r","s_v","abs_v","AbsV","s_abs_v","segmentAABB","s_segmentAABB","t_x","t_y","GetCenter","GetExtents","subInput","s_subInput","s_node_id","AllocateNode","r_x","b2Settings","r_y","InsertLeaf","RemoveLeaf","FreeNode","Contains","leaf","leafAABB","area","GetPerimeter","combinedAABB","s_combinedAABB","combinedArea","cost","inheritanceCost","cost1","s_aabb","oldArea","newArea","cost2","sibling","oldParent","newParent","Balance","grandParent","C","balance","F","G","D","E","GetAreaNode","rootArea","height1","ComputeHeightNode","height2","ValidateStructure","ValidateMetrics","freeIndex","maxBalance","GetMaxBalanceNode","Validate","newOrigin","ShiftOriginNode","b2Pair","b2BroadPhase_b2BroadPhase","m_tree","m_moveCount","m_moveBuffer","m_pairCount","m_pairBuffer","BufferMove","UnBufferMove","GetFatAABB","aabbA","aabbB","contactManager","queryProxy","QueryCallback","pair","fatAABB","Query","b2PairLessThan","primaryPair","userDataA","userDataB","AddPair","GetHeight","GetMaxBalance","GetAreaRatio","ShiftOrigin","pair1","pair2","b2_toiTime","b2_toiMaxTime","b2_toiCalls","b2_toiIters","b2_toiMaxIters","b2_toiRootIters","b2_toiMaxRootIters","b2_toi_reset","b2TimeOfImpact_s_xfA","b2TimeOfImpact_s_xfB","b2TimeOfImpact_s_pointA","b2TimeOfImpact_s_pointB","b2TimeOfImpact_s_normal","b2TimeOfImpact_s_axisA","b2TimeOfImpact_s_axisB","b2TimeOfImpact_b2TOIInput","sweepA","sweepB","tMax","b2TOIOutputState","b2SeparationFunctionType","b2TOIOutput","b2TimeOfImpact_b2SeparationFunction","m_sweepA","m_sweepB","m_localPoint","m_axis","m_proxyA","m_proxyB","e_points","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","axisA","axisB","b2TimeOfImpact_s_timer","b2TimeOfImpact_s_cache","b2TimeOfImpact_s_distanceInput","b2TimeOfImpact_s_distanceOutput","b2TimeOfImpact_s_fcn","b2TimeOfImpact_s_indexA","b2TimeOfImpact_s_indexB","b2TimeOfImpact_s_sweepA","b2TimeOfImpact_s_sweepB","b2TimeOfImpact","totalRadius","tolerance","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","done","pushBackIter","s2","FindMinSeparation","e_separated","s1","Evaluate","e_failed","rootIterCount","GetMilliseconds","b2CollideCircles_s_pA","b2CollideCircles_s_pB","b2CollideCircles","circleA","circleB","distSqr","b2CollidePolygonAndCircle_s_c","b2CollidePolygonAndCircle_s_cLocal","b2CollidePolygonAndCircle_s_faceCenter","b2CollidePolygonAndCircle","polygonA","cLocal","MulTXV","normalIndex","separation","normals","m_normals","vertIndex1","vertIndex2","v1","v2","u1","u2","faceCenter","b2EdgeSeparation_s_normal1World","b2EdgeSeparation_s_normal1","b2EdgeSeparation_s_v1","b2EdgeSeparation_s_v2","b2EdgeSeparation","poly1","xf1","edge1","poly2","xf2","vertices1","normals1","count2","vertices2","normal1World","normal1","minDot","dot","b2FindMaxSeparation_s_d","b2FindMaxSeparation_s_dLocal1","b2FindMaxSeparation","edgeIndex","count1","m_centroid","dLocal1","maxDot","prevEdge","sPrev","nextEdge","sNext","bestEdge","bestSeparation","increment","b2FindIncidentEdge_s_normal1","b2CollidePolygons_s_incidentEdge","b2CollidePolygons_s_clipPoints1","b2CollidePolygons_s_clipPoints2","b2CollidePolygons_s_edgeA","b2CollidePolygons_s_edgeB","b2CollidePolygons_s_localTangent","b2CollidePolygons_s_localNormal","b2CollidePolygons_s_planePoint","b2CollidePolygons_s_normal","b2CollidePolygons_s_tangent","b2CollidePolygons_s_ntangent","b2CollidePolygons_s_v11","b2CollidePolygons_s_v12","b2CollidePolygons","polyA","polyB","edgeA","separationA","edgeB","separationB","incidentEdge","normals2","i1","i2","cf0","cf1","b2FindIncidentEdge","iv1","iv2","local_v11","local_v12","localTangent","tangent","v11","v12","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","np","ntangent","cp","b2CollideEdgeAndCircle_s_Q","b2CollideEdgeAndCircle_s_e","b2CollideEdgeAndCircle_s_d","b2CollideEdgeAndCircle_s_e1","b2CollideEdgeAndCircle_s_e2","b2CollideEdgeAndCircle_s_P","b2CollideEdgeAndCircle_s_n","b2CollideEdgeAndCircle_s_id","b2CollideEdgeAndCircle","Q","P","m_hasVertex0","A1","m_vertex0","B1","e1","m_hasVertex3","B2","m_vertex3","A2","e2","den","b2EPAxis","b2CollideEdge_b2TempPolygon","b2CollideEdge_b2EPCollider","m_polygonB","m_xf","m_centroidB","m_v0","m_normal0","m_normal1","m_normal2","m_normal","m_type1","m_type2","m_lowerLimit","m_upperLimit","m_front","polygonB","MulTXX","hasVertex0","hasVertex3","s_edge1","offset1","offset0","offset2","convex1","convex2","edge0","s_edge0","edge2","s_edge2","edgeAxis","ComputeEdgeSeparation","s_edgeAxis","polygonAxis","ComputePolygonSeparation","s_polygonAxis","primaryAxis","ie","s_ie","rf","s_rf","ie0","ie1","sideNormal1","sideNormal2","s_clipPoints1","s_clipPoints2","perp","s_perp","s_n","b2CollideEdgeAndPolygon_s_collider","b2CollideEdgeAndPolygon","Collide","b2CircleShape_b2CircleShape","e_circleShape","transform","TestPoint_s_center","TestPoint_s_d","ComputeDistance_s_center","RayCast_s_position","RayCast_s_s","RayCast_s_r","sigma","ComputeAABB_s_p","radius_sq","l","com","b2PolygonShape_b2PolygonShape","e_polygonShape","start","Set_s_ps","tempCount","unique","i0","hull","Set_s_hull","ih","Set_s_r","Set_s_v","vertexi1","vertexi2","ComputeCentroid","hx","hy","SetPosition","SetRotationAngle","pLocal","TestPoint_s_pLocal","ComputeDistance_s_pLocal","maxDistance","normalForMaxDistance","ComputeDistance_s_normalForMaxDistance","minDistance","ComputeDistance_s_minDistance","minDistance2","ComputeDistance_s_distance","distance2","RayCast_s_p1","RayCast_s_p2","RayCast_s_d","numerator","denominator","ComputeAABB_s_v","MinV","MaxV","SelfSubXY","SelfAddXY","ComputeMass_s_center","ComputeMass_s_s","SelfMul","ComputeMass_s_e1","ComputeMass_s_e2","triangleArea","MulSV","ex1","ey1","ex2","ey2","Validate_s_e","Validate_s_v","normalL","ComputeSubmergedArea_s_normalL","offsetL","depths","ComputeSubmergedArea_s_depths","diveCount","intoIndex","outoIndex","lastSubmerged","isSubmerged","ComputeSubmergedArea_s_md","intoIndex2","outoIndex2","intoLamdda","outoLamdda","intoVec","ComputeSubmergedArea_s_intoVec","outoVec","ComputeSubmergedArea_s_outoVec","ComputeSubmergedArea_s_center","p3","vs","pRef","ComputeCentroid_s_pRef","ComputeCentroid_s_e1","ComputeCentroid_s_e2","b2EdgeShape_b2EdgeShape","e_edgeShape","ComputeDistance_s_v1","ComputeDistance_s_v2","ComputeDistance_s_d","ComputeDistance_s_s","ds","RayCast_s_e","RayCast_s_q","ComputeAABB_s_v1","ComputeAABB_s_v2","b2ChainShape_b2ChainShape","e_chainShape","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","prevVertex","nextVertex","CreateChain","ComputeDistance_s_edgeShape","GetChildEdge","edgeShape","RayCast_s_edgeShape","b2BodyType","b2JointType","b2LimitState","b2Body_b2BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","allowSleep","awake","fixedRotation","active","gravityScale","b2Body_b2Body","bd","m_islandFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_toiFlag","m_islandIndex","m_xf0","m_sweep","m_angularVelocity","m_force","m_torque","m_prev","m_fixtureList","m_fixtureCount","m_jointList","m_contactList","m_mass","m_invMass","m_I","m_invI","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_controllerList","m_controllerCount","CreateFixtureDef","CreateFixtureShapeDensity","CreateProxies","ResetMassData","m_newFixture","CreateFixtureShapeDensity_s_def","ppF","Destroy","DestroyProxies","SetTransformXY","Synchronize","FindNewContacts","SetTransformVec","wake","torque","oldCenter","SetMassData_s_oldCenter","AddVCrossSV","ResetMassData_s_localCenter","GetMassData","ResetMassData_s_massData","ResetMassData_s_oldCenter","localVector","worldPoint","worldVector","GetLinearVelocityFromWorldPoint","GetWorldPoint","SynchronizeFixtures","ce","ce0","proxyCount","IsActive","type_str","SynchronizeFixtures_s_xf1","jn","joint","m_collideConnected","Advance","b2Joint_b2Jacobian","linear","angularA","angularB","b2JointEdge","b2JointDef","e_unknownJoint","collideConnected","b2Joint","m_index","m_edgeA","m_edgeB","m_bodyA","m_bodyB","inv_dt","b2DistanceJoint_b2DistanceJointDef","e_distanceJoint","localAnchorA","localAnchorB","b1","b2","anchor1","anchor2","b2DistanceJoint_b2DistanceJoint","m_frequencyHz","m_dampingRatio","m_bias","m_localAnchorA","m_localAnchorB","m_gamma","m_impulse","m_length","m_u","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_qA","m_qB","m_lalcA","m_lalcB","hz","positions","aA","vA","velocities","aB","vB","qA","qB","crAu","crBu","invMass","omega","step","warmStarting","dtRatio","InitVelocityConstraints_s_P","vpA","SolveVelocityConstraints_s_vpA","vpB","SolveVelocityConstraints_s_vpB","Cdot","SolveVelocityConstraints_s_P","SolvePositionConstraints_s_P","b2AreaJoint_b2AreaJointDef","e_areaJoint","b2AreaJoint_b2AreaJoint","m_bodies","m_targetLengths","m_targetArea","m_joints","m_deltas","m_delta","djd","body_c","next_c","SetFrequency","SetDampingRatio","prev_c","body_v","dotMassSum","crossMassSum","lambda","perimeter","dist","toExtrude","next_i","norm_sq","b2FrictionJoint_b2FrictionJointDef","e_frictionJoint","maxTorque","bA","bB","b2FrictionJoint_b2FrictionJoint","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","m_K","mA","mB","iA","iB","K","oldImpulse","maxImpulse","Cdot_v2","SolveVelocityConstraints_s_Cdot_v2","impulseV","MulMV","SolveVelocityConstraints_s_impulseV","oldImpulseV","SolveVelocityConstraints_s_oldImpulseV","b2GearJoint_b2GearJointDef","e_gearJoint","joint1","joint2","b2GearJoint_b2GearJoint","coordinateA","coordinateB","m_joint1","m_joint2","m_typeA","m_typeB","m_bodyC","m_bodyD","m_localAnchorC","m_localAnchorD","m_localAxisC","m_localAxisD","m_referenceAngleA","m_referenceAngleB","m_constant","m_ratio","m_indexC","m_indexD","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","m_qC","m_qD","m_lalcC","m_lalcD","GetBodyA","GetBodyB","xfC","aC","e_revoluteJoint","revolute","m_referenceAngle","prismatic","m_localXAxisA","pC","xfD","aD","pD","vC","wC","vD","wD","qC","qD","InitVelocityConstraints_s_u","rC","InitVelocityConstraints_s_rC","InitVelocityConstraints_s_rA","rD","InitVelocityConstraints_s_rD","InitVelocityConstraints_s_rB","cC","cD","JvAC","JvBD","JwA","JwB","JwC","JwD","SolvePositionConstraints_s_u","SolvePositionConstraints_s_rC","SolvePositionConstraints_s_rA","SolvePositionConstraints_s_rD","SolvePositionConstraints_s_rB","index1","index2","b2MotorJoint_b2MotorJointDef","e_motorJoint","linearOffset","angularOffset","correctionFactor","angleA","angleB","b2MotorJoint_b2MotorJoint","m_linearOffset","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","IsEqualToV","inv_h","CrossSV","impulse_v2","SolveVelocityConstraints_s_impulse_v2","oldImpulse_v2","SolveVelocityConstraints_s_oldImpulse_v2","b2MouseJoint_b2MouseJointDef","e_mouseJoint","b2MouseJoint_b2MouseJoint","m_beta","m_C","IsAwake","SolveVelocityConstraints_s_Cdot","SolveVelocityConstraints_s_impulse","SolveVelocityConstraints_s_oldImpulse","b2PrismaticJoint_b2PrismaticJointDef","e_prismaticJoint","motorSpeed","GetLocalVector","b2PrismaticJoint_b2PrismaticJoint","m_localYAxisA","m_motorImpulse","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_motorSpeed","m_enableLimit","m_enableMotor","m_limitState","e_inactiveLimit","m_perp","m_s1","m_s2","m_a1","m_a2","m_K3","m_K2","m_motorMass","InitVelocityConstraints_s_d","jointTranslation","e_equalLimits","e_atLowerLimit","e_atUpperLimit","LA","LB","Cdot1_x","Cdot1_y","Cdot2","f1","SolveVelocityConstraints_s_f1","df3","Solve33","SolveVelocityConstraints_s_df3","f2r","Solve22","SolveVelocityConstraints_s_f2r","df2","SolveVelocityConstraints_s_df2","SolvePositionConstraints_s_d","SolvePositionConstraints_s_impulse","C1_x","C1_y","linearError","angularError","C2","k11","k12","k13","k22","k23","k33","K2","impulse1","Solve","SolvePositionConstraints_s_impulse1","GetJointTranslation_s_pA","GetJointTranslation_s_pB","GetJointTranslation_s_d","GetWorldVector","GetJointTranslation_s_axis","b2PulleyJoint_b2PulleyJointDef","e_pulleyJoint","groundAnchorA","groundAnchorB","lengthA","lengthB","groundA","groundB","anchorA","anchorB","b2PulleyJoint_b2PulleyJoint","m_groundAnchorA","m_groundAnchorB","m_lengthA","m_lengthB","m_uA","m_uB","ruA","ruB","PA","InitVelocityConstraints_s_PA","PB","InitVelocityConstraints_s_PB","SolveVelocityConstraints_s_PA","SolveVelocityConstraints_s_PB","uA","uB","SolvePositionConstraints_s_PA","SolvePositionConstraints_s_PB","GetCurrentLengthA_s_p","GetCurrentLengthB_s_p","b2RevoluteJoint_b2RevoluteJointDef","b2RevoluteJoint_b2RevoluteJoint","m_maxMotorTorque","m_lowerAngle","m_upperAngle","jointAngle","Cdot1","SolveVelocityConstraints_s_Cdot1","impulse_v3","SolveVelocityConstraints_s_impulse_v3","rhs_x","rhs_y","reduced_v2","SolveVelocityConstraints_s_reduced_v2","positionError","limitImpulse","C_v2","SolvePositionConstraints_s_C_v2","b2RopeJoint_b2RopeJointDef","e_ropeJoint","maxLength","b2RopeJoint_b2RopeJoint","m_maxLength","m_state","crA","crB","b2WeldJoint_b2WeldJointDef","e_weldJoint","b2WeldJoint_b2WeldJoint","GetInverse22","invM","GetSymInverse33","impulse2","MulM33XY","SolveVelocityConstraints_s_impulse1","MulM33XYZ","C1","SolvePositionConstraints_s_C1","b2WheelJoint_b2WheelJointDef","e_wheelJoint","b2WheelJoint_b2WheelJoint","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","m_springMass","dc","ay","sAy","sBy","GetPrismaticJointTranslation","GetRevoluteJointSpeed","b2JointFactory_b2JointFactory","allocator","b2MixFriction","friction1","friction2","b2MixRestitution","restitution1","restitution2","b2ContactEdge","b2Contact_b2Contact","m_touchingFlag","m_enabledFlag","m_filterFlag","m_bulletHitFlag","m_nodeA","m_nodeB","m_manifold","m_toiCount","m_toi","m_tangentSpeed","m_oldManifold","worldManifold","GetShape","tManifold","touching","wasTouching","sensorA","IsSensor","sensorB","mp2","id2","mp1","BeginContact","EndContact","PreSolve","ComputeTOI_s_input","ComputeTOI_s_output","b2CircleContact_b2CircleContact","b2PolygonContact_b2PolygonContact","b2PolygonAndCircleContact_b2PolygonAndCircleContact","b2EdgeAndCircleContact_b2EdgeAndCircleContact","b2EdgeAndPolygonContact_b2EdgeAndPolygonContact","b2ChainAndCircleContact_b2ChainAndCircleContact","Evaluate_s_edge","b2ChainAndPolygonContact_b2ChainAndPolygonContact","b2ContactRegister","pool","createFcn","destroyFcn","primary","b2ContactFactory_b2ContactFactory","m_allocator","InitializeRegisters","type1","type2","poolCreateFcn","poolDestroyFcn","m_registers","e_shapeTypeCount","AddType","b2DestructionListener","system","b2WorldCallbacks_b2ContactFilter","filter1","filter2","b2_defaultFilter","b2WorldCallbacks_b2ContactImpulse","normalImpulses","tangentImpulses","b2_defaultListener","b2QueryCallback","b2RayCastCallback","b2ContactManager_b2ContactManager","m_contactCount","m_contactFilter","m_contactListener","m_contactFactory","fA","fB","GetChildIndexA","GetChildIndexB","UpdatePairs","IsTouching","cNuke","activeA","activeB","b2Profile","solve","solveInit","solveVelocity","solvePosition","broadphase","solveTOI","b2TimeStep","velocityIterations","positionIterations","particleIterations","b2TimeStep_b2Position","b2TimeStep_b2Velocity","b2SolverData","b2ContactSolver_b2VelocityConstraintPoint","normalMass","tangentMass","velocityBias","b2ContactSolver_b2ContactVelocityConstraint","invMassA","invMassB","invIA","invIB","tangentSpeed","contactIndex","b2ContactSolver_b2ContactPositionConstraint","localPoints","localCenterA","localCenterB","b2ContactSolver_b2ContactSolverDef","contacts","b2ContactSolver_b2PositionSolverManifold","pc","b2ContactSolver_b2ContactSolver","m_step","m_positions","m_velocities","m_positionConstraints","m_velocityConstraints","m_contacts","new_length","GetManifold","vc","vcp","InitializeVelocityConstraints_s_xfA","InitializeVelocityConstraints_s_xfB","InitializeVelocityConstraints_s_worldManifold","rnA","rnB","kNormal","rtA","rtB","kTangent","vRel","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","WarmStart_s_P","dv","SolveVelocityConstraints_s_dv","dv1","SolveVelocityConstraints_s_dv1","dv2","SolveVelocityConstraints_s_dv2","SolveVelocityConstraints_s_a","SolveVelocityConstraints_s_b","SolveVelocityConstraints_s_x","SolveVelocityConstraints_s_d","P1","SolveVelocityConstraints_s_P1","P2","SolveVelocityConstraints_s_P2","P1P2","SolveVelocityConstraints_s_P1P2","vt","maxFriction","newImpulse","vn","cp1","cp2","vn1","vn2","SolvePositionConstraints_s_xfA","SolvePositionConstraints_s_xfB","psm","SolvePositionConstraints_s_psm","minSeparation","toiIndexA","toiIndexB","SolveTOIPositionConstraints_s_xfA","SolveTOIPositionConstraints_s_xfB","SolveTOIPositionConstraints_s_psm","SolveTOIPositionConstraints_s_rA","SolveTOIPositionConstraints_s_rB","SolveTOIPositionConstraints_s_P","b2Island_b2Island","m_listener","m_bodyCount","m_jointCount","m_bodyCapacity","m_contactCapacity","m_jointCapacity","bodyCapacity","contactCapacity","jointCapacity","profile","s_timer","solverData","s_solverData","contactSolverDef","s_contactSolverDef","contactSolver","s_contactSolver","InitializeVelocityConstraints","WarmStart","InitVelocityConstraints","SolveVelocityConstraints","StoreImpulses","s_translation","positionSolved","contactsOkay","SolvePositionConstraints","jointsOkay","jointOkay","SynchronizeTransform","Report","minSleepTime","linTolSqr","angTolSqr","subStep","SolveTOIPositionConstraints","constraints","s_impulse","PostSolve","b2ParticleFlag","b2ParticleGroupFlag","b2Particle_b2ParticleDef","lifetime","b2CalculateParticleIterations","timeStep","b2Particle_b2ParticleHandle","b2ParticleGroup_b2ParticleGroupDef","groupFlags","shapes","shapeCount","stride","positionData","b2ParticleGroup_b2ParticleGroup","m_system","m_groupFlags","m_strength","m_timestamp","m_inertia","m_center","m_transform","m_flagsBuffer","b2_particleGroupInternalMask","SetGroupFlags","UpdateStatistics","GetLinearVelocityFromWorldPoint_s_t0","ApplyForce","callDestructionListener","DestroyParticle","GetParticleMass","m_velocityBuffer","inv_mass","b2StackQueue_b2StackQueue","capacity","m_back","m_capacity","concat","b2VoronoiDiagram_b2VoronoiDiagram","generatorCapacity","m_generatorBuffer","m_generatorCapacity","m_generatorCount","m_countX","m_countY","m_diagram","Generator","tag","necessary","margin","inverseRadius","necessary_count","queue","Task","Empty","Front","m_x","m_y","m_i","m_generator","ax","bx","std_iter_swap","array","default_compare","std_sort","first","len","cmp","pivot","std_stable_sort","std_remove_if","predicate","std_lower_bound","last","std_upper_bound","std_rotate","n_first","b2VoronoiDiagram","b2ParticleSystem_b2GrowableBuffer","Grow","newCapacity","Reserve","newEnd","newCount","pred","std_unique","b2ParticleSystem_b2FixtureParticleQueryCallback","childCount","GetAABB","enumerator","GetInsideBoundsEnumerator","GetNext","ReportFixtureAndParticle","b2ParticleSystem_b2ParticleContact","weight","rhs","IsEqual","b2ParticleSystem_b2ParticleBodyContact","b2ParticlePair","b2ParticleSystem_b2ParticleTriad","indexC","pa","pb","ka","kb","kc","b2ParticleSystemDef","strictContactCheck","maxCount","pressureStrength","dampingStrength","elasticStrength","springStrength","viscousStrength","surfaceTensionPressureStrength","surfaceTensionNormalStrength","repulsiveStrength","powderStrength","ejectionStrength","staticPressureStrength","staticPressureRelaxation","staticPressureIterations","colorMixingStrength","destroyByAge","lifetimeGranularity","b2ParticleSystem_b2ParticleSystem","m_paused","m_allParticleFlags","m_needsUpdateAllParticleFlags","m_allGroupFlags","m_needsUpdateAllGroupFlags","m_hasForce","m_iterationIndex","m_inverseDensity","m_particleDiameter","m_inverseDiameter","m_squaredDiameter","m_internalAllocatedCapacity","m_handleIndexBuffer","UserOverridableBuffer","m_forceBuffer","m_staticPressureBuffer","m_accumulationBuffer","m_accumulation2Buffer","m_depthBuffer","m_groupBuffer","m_userDataBuffer","m_stuckThreshold","m_lastBodyContactStepBuffer","m_bodyContactCountBuffer","m_consecutiveContactStepsBuffer","m_stuckParticleBuffer","m_proxyBuffer","Proxy","m_contactBuffer","m_bodyContactBuffer","m_triadBuffer","m_expirationTimeBuffer","m_indexByExpirationTimeBuffer","m_timeElapsed","m_expirationTimeBufferRequiresSorting","m_groupCount","m_def","SetStrictContactCheck","SetDensity","SetMaxParticleCount","SetDestructionByAge","yOffset","yShift","xScale","xOffset","xShift","DestroyParticleGroup","FreeUserOverridableBuffer","FreeBuffer","ReallocateInternalAllocatedBuffers","DestroyOldestParticle","SolveZombie","IsZero","RequestBuffer","Append","finiteLifetime","SetParticleLifetime","ExpirationTimeToLifetime","GetQuantizedTimeElapsed","RotateBuffer","SetParticleFlags","handle","SetIndex","b2_zombieParticle","b2_destructionListenerParticle","oldestFiniteLifetimeParticle","oldestInfiniteLifetimeParticle","DestroyParticlesInShape_s_aabb","DestroyParticlesInShapeCallback","Destroyed","groupDef","s_transform","CreateParticleGroup_s_transform","SetPositionAngle","firstIndex","CreateParticlesWithShapeForGroup","CreateParticlesWithShapesForGroup","CreateParticleForGroup","ConnectionFilter","UpdateContacts","UpdatePairsAndTriads","JoinParticleGroups","groupA","groupB","JoinParticleGroupsFilter","nodeBuffer","ParticleListNode","InitializeParticleLists","MergeParticleListsInContact","survivingList","FindLongestParticleList","MergeZombieParticleListNodes","CreateParticleGroupsFromParticleList","UpdatePairsAndTriadsWithParticleList","paused","damping","newFlags","b2_tensileParticle","buffer","SetUserOverridableBuffer","steps","Data","ComputeCollisionEnergy_s_v","vel_data","sum_v2","enabled","ValidateParticleIndex","initializeExpirationTimes","quantizedLifetime","newExpirationTime","GetExpirationTimeBuffer","expirationTime","GetParticleLifetime","totalMass","velocityDelta","IsSignificantForce","ForceCanBeApplied","PrepareForceBuffer","distributedForce","endProxy","firstProxy","computeTag","CompareProxyTag","lastProxy","CompareTagProxy","pos_data","ReportParticle","QueryShapeAABB_s_aabb","slop","QueryPointAABB_s_aabb","point1","point2","RayCast_s_aabb","s_p","RayCast_s_p","RayCast_s_v","RayCast_s_n","s_point","RayCast_s_point","determinant","sqrtDeterminant","userSuppliedCapacity","oldBuffer","oldCapacity","newBuffer","deferred","ReallocateBuffer3","ReallocateBuffer5","ReallocateBuffer4","LimitCapacity","ReallocateHandleBuffers","stuck","particleDef","CreateParticle","s_edge","CreateParticlesStrokeShapeForGroup_s_edge","s_d","CreateParticlesStrokeShapeForGroup_s_d","CreateParticlesStrokeShapeForGroup_s_p","GetParticleStride","positionOnEdge","edgeLength","CreateParticlesFillShapeForGroup_s_aabb","CreateParticlesFillShapeForGroup_s_p","identity","CreateParticlesStrokeShapeForGroup","CreateParticlesFillShapeForGroup","compositeShape","CompositeShape","oldIndex","newIndex","m_destructionListener","SayGoodbyeParticleGroup","b2_wallParticle","b2_springParticle","GetGroupFlags","b2_rigidParticleGroup","s_dab","UpdatePairsAndTriads_s_dab","s_dbc","UpdatePairsAndTriads_s_dbc","s_dca","UpdatePairsAndTriads_s_dca","particleFlags","k_pairFlags","af","bf","IsNecessary","ParticleCanBeConnected","ShouldCreatePair","ComparePairIndices","Unique","MatchPairIndices","k_triadFlags","diagram","AddGenerator","Generate","ShouldCreateTriad","dab","dbc","dca","maxDistanceSquared","groupC","triad","midPoint_x","midPoint_y","GetNodes","CompareTriadIndices","MatchTriadIndices","ReactiveFilter","b2_reactiveParticle","diffA","diffB","bufferIndex","ContainsParticle","listA","listB","_tmp","MergeParticleLists","nextB","MergeParticleListAndNode","newGroup","CloneParticle","contactGroups","contactGroupsCount","b2_particleGroupNeedsUpdateDepth","groupsToUpdate","groupsToUpdateCount","iterationCount","updated","ap0","bp0","ap1","bp1","lowerTag","upperTag","InsideBoundsEnumerator","AddContact_s_d","distBtParticlesSq","invD","rightTag","computeRelativeTag","AddContact","bottomLeftTag","bottomRightTag","FindContacts_Reference","proxies","inv_diam","UpdateProxies_Reference","CompareProxyProxy","GetParticleContactFilter","RemoveIf","b2_particleContactFilterParticle","ShouldCollideParticleParticle","particlePairs","GetParticleContactListener","contactListener","itemIndex","Invalidate","BeginContactParticleParticle","exceptZombie","UpdateProxies","SortProxies","b2ParticlePairSet","NotifyContactListenerPreContact","FindContacts","FilterContacts","NotifyContactListenerPostContact","b2ParticleContactIsZombie","fixtureSet","GetFixtureContactListener","BeginContactFixtureParticle","UpdateBodyContacts_s_aabb","FixtureParticleSet","NotifyBodyContactListenerPreContact","SetCount","UpdateBodyContactsCallback","GetFixtureContactFilter","RemoveSpuriousBodyContacts","NotifyBodyContactListenerPostContact","s_subStep","Solve_s_subStep","SolveLifetimes","UpdateAllParticleFlags","UpdateAllGroupFlags","UpdateBodyContacts","ComputeWeight","ComputeDepth","UpdatePairsAndTriadsWithReactiveParticles","SolveForce","b2_viscousParticle","SolveViscous","b2_repulsiveParticle","SolveRepulsive","b2_powderParticle","SolvePowder","SolveTensile","b2_solidParticleGroup","SolveSolid","SolveColorMixing","SolveGravity","b2_staticPressureParticle","SolveStaticPressure","SolvePressure","SolveDamping","k_extraDampingFlags","SolveExtraDamping","SolveElastic","SolveSpring","LimitVelocity","SolveRigidDamping","b2_barrierParticle","SolveBarrier","SolveCollision","SolveRigid","SolveWall","SolveCollision_s_aabb","p2_x","p2_y","SolveCollisionCallback","criticalVelocitySquared","GetCriticalVelocitySquared","s_gravity","SolveGravity_s_gravity","SolveBarrier_s_aabb","s_va","SolveBarrier_s_va","s_vb","SolveBarrier_s_vb","s_pba","SolveBarrier_s_pba","s_vba","SolveBarrier_s_vba","s_vc","SolveBarrier_s_vc","s_pca","SolveBarrier_s_pca","s_vca","SolveBarrier_s_vca","s_qba","SolveBarrier_s_qba","s_qca","SolveBarrier_s_qca","s_dv","SolveBarrier_s_dv","s_f","SolveBarrier_s_f","k_barrierWallFlags","aGroup","bGroup","va","vb","pba","vba","cGroup","pca","vca","e0","qba","qca","sqrtDet","IsRigidGroup","inertia","GetInertia","ParticleApplyForce","criticalPressure","GetCriticalPressure","pressurePerWeight","maxPressure","relaxation","SolvePressure_s_f","k_noPressureFlags","velocityPerPressure","GetParticleInvMass","SolveDamping_s_v","SolveDamping_s_f","quadraticDamping","GetCriticalVelocity","SolveRigidDamping_s_t0","SolveRigidDamping_s_t1","SolveRigidDamping_s_p","SolveRigidDamping_s_v","invInertiaA","tangentDistanceA","invInertiaB","tangentDistanceB","InitDampingParameterWithRigidGroupOrParticle","InitDampingParameter","GetLocalCenter","ComputeDampingImpulse","ApplyDamping","aRigid","bRigid","SolveExtraDamping_s_v","SolveExtraDamping_s_f","s_position","SolveRigid_s_position","s_rotation","SolveRigid_s_rotation","SolveRigid_s_transform","s_velocityTransform","SolveRigid_s_velocityTransform","SetPositionRotation","MulXX","velocityTransform","s_pa","SolveElastic_s_pa","s_pb","SolveElastic_s_pb","s_pc","SolveElastic_s_pc","SolveElastic_s_r","SolveElastic_s_t0","oa","oc","invR","SolveSpring_s_pa","SolveSpring_s_pb","SolveSpring_s_d","SolveSpring_s_f","r0","r1","s_weightedNormal","SolveTensile_s_weightedNormal","s_s","SolveTensile_s_s","SolveTensile_s_f","weightedNormal","criticalVelocity","normalStrength","maxVelocityVariation","SolveViscous_s_v","SolveViscous_s_f","SolveRepulsive_s_f","SolvePowder_s_f","minWeight","SolveSolid_s_f","velocityPerForce","colorMixing","newIndices","allParticleFlags","destructionListener","SayGoodbyeParticle","Test","writeOffset","readOffset","modified","b2_particleGroupCanBeEmpty","b2_particleGroupWillBeDestroyed","LifetimeToExpirationTime","quantizedTimeElapsed","expirationTimes","expirationTimeIndices","particleIndexA","particleIndexB","expirationTimeA","expirationTimeB","infiniteExpirationTimeA","particleIndex","mid","end","GetIndex","indexByExpirationTime","inverseStride","b2_fixtureContactFilterParticle","b2_fixtureContactListenerParticle","b2_particleContactListenerParticle","newData","oldFlags","lhs","BodyContactCompare","RemoveSpuriousBodyContacts_s_n","s_pos","RemoveSpuriousBodyContacts_s_pos","s_normal","RemoveSpuriousBodyContacts_s_normal","currentContacts","invInertia","tangentDistance","isRigidGroup","normalVelocity","xTruncBits","yTruncBits","tagBits","yMask","xMask","b2ParticleSystem","m_xLower","m_xUpper","m_yLower","m_yUpper","m_first","m_last","xTag","FixedSetAllocator","itemSize","FixtureParticle","second","bodyContactBuffer","flagsBuffer","ParticlePair","particleA","particleB","contactBuffer","m_callDestructionListener","m_destroyed","particleSystem","threshold","m_threshold","m_shapeCount","m_shapes","s_subaabb","subaabb","Combine1","GetFlagsBuffer","ShouldCollideFixtureParticle","ReportFixtureAndParticle_s_n","s_rp","ReportFixtureAndParticle_s_rp","ap","bp","bm","bI","invBm","invBI","invAm","rp","rpn","DetectStuckParticle","s_p1","ReportFixtureAndParticle_s_p1","s_output","ReportFixtureAndParticle_s_output","s_input","ReportFixtureAndParticle_s_input","ReportFixtureAndParticle_s_p","ReportFixtureAndParticle_s_v","ReportFixtureAndParticle_s_f","av","b2World_b2World","m_clearForces","m_bodyList","m_particleSystemList","m_gravity","m_allowSleep","m_inv_dt0","m_warmStarting","m_continuousPhysics","m_subStepping","m_stepComplete","m_profile","m_island","je","je0","SayGoodbyeJoint","coe","coe0","nextController","RemoveBody","f0","SayGoodbyeFixture","smallestRadius","GetParticleSystemList","GetRadius","GetSmallestRadius","CalculateReasonableParticleIterations","stepTimer","Step_s_stepTimer","Step_s_step","Step_s_timer","SolveTOI","ClearForces","positionBuffer","colorBuffer","GetColorBuffer","DrawParticles","GetFlags","DrawDebugData_s_color","SetRGB","e_shapeBit","PushTransform","GetFixtureList","DrawShape","PopTransform","e_particleBit","DrawParticleSystem","e_jointBit","DrawJoint","e_aabbBit","DrawDebugData_s_vs","DrawPolygon","e_centerOfMassBit","DrawDebugData_s_xf","DrawTransform","e_controllerBit","Draw","ReportFixture","ShouldQueryParticleSystem","QueryShape_s_aabb","QueryPoint_s_aabb","RayCast_s_input","fixture_proxy","RayCast_s_output","min_fraction","GetProxyCount","GetTreeHeight","GetTreeBalance","GetTreeQuality","GetAnchorA","DrawJoint_s_p1","GetAnchorB","DrawJoint_s_p2","DrawJoint_s_color","DrawSegment","pulley","GetGroundAnchorA","GetGroundAnchorB","DrawSolidCircle","DrawCircle","poly","DrawSolidPolygon","island","seed","Clear","stackCount","AddBody","IsEnabled","AddJoint","minContact","minAlpha","collideA","IsBullet","collideB","SolveTOI_s_toi_input","SolveTOI_s_toi_output","backup1","SolveTOI_s_backup1","backup2","SolveTOI_s_backup2","backup","SolveTOI_s_backup","SolveTOI_s_subStep","b2Rope_b2RopeDef","masses","k2","k3","b2Rope_b2Rope","m_ps","m_p0s","m_vs","m_ims","m_Ls","m_as","m_damping","m_k2","m_k3","count3","d1","d2","exp","SolveC2","SolveC3","L","im1","im2","m1","s_d1","s_d2","L1sqr","L2sqr","Jd1","SelfSkew","s_Jd1","Jd2","s_Jd2","J1","s_J1","J2","s_J2","J3","Foothold_FootholdChain","map_footholds","FootholdType","Foothold_FootholdSingle","Foothold_FootholdChainChild","Physics","m_angle","next_a","next_a_deg","$showDebugInfo","body_xf","next_fh","prev_fh","is_empty","is_first","is_last","_is_horizontal_floor","x3","y3","piece","$_text_pos","GetVertex1","GetVertex2","MulVS","Foothold","CREATE_SOLID_FOOTHOLD","CREATE_SOLID_AND_EDGE_FOOTHOLD","USE_GHOST_VERTEX","FOOTHOLD_IS_BULLET","Ground_Ground","rectChains","segment","chains","chainId","_create_foothold","_create_chain","_chain","CreateLoop","Filter","endContact_bodyBase_oneway","preSolveGround_bodyBase_oneway","is_solid","create","nx1","ny1","nx2","ny2","hlen","numPoints","playerBody","getFootholdFromContact","$fh","player_pos","relative_position","GetWorldManifold","cpoint","pointVelPlatform","pointVelOther","relativeVel","_which_foothold_contact","normal_contact","SetFriction","foot","beginContact_bodyBase_oneway","lineJoin","lineCap","isShow","isHide","ActionAnimationFrameData","ActionAnimation","Adef","fdat","total","aadef","actName","_fdef","CharacterActionAnimationDefinition","_loadedItem","$loadedItem","ItemBase","__v","DATA_TAG","DATA_VERSION","isItem","loadString","ItemEquip","$test_proto_prop","$createItem","_itemType","getDataPath","itemPrototype","ItemSlot","_ui_Basic_KeySlotData_js__WEBPACK_IMPORTED_MODULE_2__","itemSN","SN","iSlot","CharacterBaseStat","mp","mhp","mmp","str","luk","dex","int","symbol_onJobChange","$RemotePlayerData","CharacterStat","sceneChara","_$sceneChara","symbolStatJob","_getTotalAttack","getNextExp","$PlayerData","fileName","blob","Blob","createObjectURL","revokeObjectURL","SelectText","selection","createTextRange","moveToElementText","select","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","copyToClipboard","$temp","append","execCommand","remove","PBullet_PBullet","bulletRenderer","bulletMoveFunc","bullet_default_preSolve","linearVelocityX","linearVelocityY","targetPlayer","targetChara","addAttack","Skill_SkillEffectAnimation","targetRenderer","isArray","update_p","update_r","render_p","render_r","SkillHitAnimation","EffectManager","_effects","$EffectManager","Skill_SkillAnimationBase","actType","_owner","_crr","_actani","_$is_end","is_launch","_applyDefaultAction","_owner_player","_applyAction","jobID","exec","_decide_type","_init","skill_anim","proto","effName","_effect_names","arrNd_texture","arrNd","arr2d","hit","tex","arr2d_texture","arr1d","arr1d_texture","inputKey","_addEffect","common","attackCount","effectName","launch","$BULLET_SPEED","isBullet","AddEffect","rapidAttack","_SkillAnimation_RapidAttack","casterMove","avaliableInJumpingState","_SkillAnimation_N_Jump","_SkillAnimation_Default","_default_update","_state_func","_prepare","current_effect","tick","fadeTotalTime","getTotalTime","_keydown","_keydownend","$FIRE_BULLET_T","$FIRE_BULLET_T2","createBullet","jump_max_count","$NJmpX","$NJmpY","_addDefaultEffect","jump2","Skill_SceneSkill","loaded_skill","__loaded_skill","promise","_assign","$SceneSkill","setFlags","bit","DebugDraw","axis_length","viewRotation","flag_drawShape","flag_drawJoint","flag_drawAabb","flag_drawCenterOfMass","flag_drawController","flag_drawParticle","flag_drawAll","e_all","e_none","flag_drawPair","e_pairBit","flagNames","closePath","arc","cs","DrawPoint","hsize","DrawString","format","var_args","string","goog","s_color","DrawStringWorld","vr","cc","s_cc","m_canvas","DrawAABB","strokeRect","MapLadderRope","uf","page","LadderRope","hwidth","calcHalfWidth","hheight","_Filter_js__WEBPACK_IMPORTED_MODULE_3__","leaveLadder","MapLadderRopeLoader","ladderRopes","idx","_$index","$MobAction_Move_Priority","$MobAction_Jump_Priority","MobActionController","_ani","pMob","onEnd","MobAction_Stand","_MobAction_Move","MobAction_MoveLeft","isValid","MobAction_MoveRight","MobAction_Jump","PMob","_PPlayer_js__WEBPACK_IMPORTED_MODULE_0__","attackTarget","_enable_rx","isFlyMob","activityRegion","$debugControl","param","act_map","_registerAction","hasBodyDamage","bodyAttack","_speed","_pushed","_fs","_category","_appleMobCategory","__setAsWalkOnlyMob","__setAsJumpDropMob","fhId","isCanMove","_control_basic","isAllowJump","rx0","rx1","limit_action","cbpos","dx1","fwpos","MobSkillBallDefinition","createDelay","collisionDelay","moveSpeed","_speed_x","_speed_y","MobSkillBallBase","_SceneObject_js__WEBPACK_IMPORTED_MODULE_2__","ballDef","animations","_BallDefinition","E_BEFORE_CREATE","E_CREATED","E_BEGIN_COLLISION","E_ENG_COLLISION","pWorld","begin_collision","end_collision","$stop","MobSkillBase","_anima_name_list","anima","FairyDustBallDefinition","_MobSkillBase_js__WEBPACK_IMPORTED_MODULE_3__","FairyDustBall","FairyDustBallHit","randInt","nextInt","ball","_FairyDust","MOB_SKILL_RAW","LoginPacket","ChatPacket","CharacterPacket","Drawable","Layer","objects","loaded_skin","DamageNumber_DamageNumberTextures","addedCanvasH","font_adv","draw_axis","Miss","guard","shot","DamageNumberRenderer","rand_y","max_display_digit","max_rand_y","_$promise","_default_base_path","_skin_base_path","sPath","loaded","_copy","str_damage","text_width","_display_axis","log10","MAX_SAFE_INTEGER","DamageNumber_DamageNumber","damagePair","move_y","time_tt","recursive","$noRender","catch","move_avy","time_d1","move_avy2","time_d2","DamageNumberTest","damageNumberLayer","$damageNumberLayer","$DamageNumber","$DamageNumberTest","$DamageNumberRenderer","FlowerTrapBallDefinition","FlowerTrapBall","patterns","pattern","pats","pat","_invoke","nextBoolean","$RequestPacket_SelectChara","$ResponsePacket_SelectChara","$Packet_CharacterChat","$Packet_CharacterMove","getTime","phy","_Client_PMovePath__WEBPACK_IMPORTED_MODULE_0__","vel"],"mappings":"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","file":"9.js","sourcesContent":["﻿\r\n\r\nimport { } from '../../public/javascripts/resource.js';\r\n\r\nimport { IGraph } from \"./IRenderer.js\";\r\nimport { engine } from './Engine.js';\r\nimport { Vec2, Rectangle } from './math.js';\r\nimport DebugDraw from './Physics/DebugDraw.js';\r\n\r\nexport class GlobalVar {\r\n\tconstructor() {\r\n\t\tthis.m_is_run = true;\r\n\t\t{\r\n\t\t\tthis.MAX_FPS = 60;\r\n\t\t\tthis.FRAME_ELAPSED = 1000 / 60;\r\n\t\t\tthis.CANVAS_SCALE = 32;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\tthis.m_editor_mode = false;\r\n\r\n\t\t\t\tthis.m_display_foothold = false;\r\n\r\n\t\t\t\tthis.m_display_physics_debug = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.m_editor_mode = true;\r\n\r\n\t\t\t\tthis.m_display_foothold = true;\r\n\r\n\t\t\t\tthis.m_display_physics_debug = true;\r\n\t\t\t}\r\n\t\t\tthis.m_display_debug_info = false;\r\n\r\n\t\t\tthis.m_debugDraw = new DebugDraw(/*renderer_ctx2d*/);\r\n\r\n\t\t\tthis.m_display_selected_object = false;\r\n\t\t\tthis.m_selected_object = null;\r\n\t\t\tthis.m_hover_object = null;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tthis.m_viewRect = new Rectangle(0, -768 / 2, 1366, 768);\r\n\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\tthis.m_is_rendering_map = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.m_is_rendering_map = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.m_display_back = true;\r\n\t\t\tthis.m_display_front = true;\r\n\t\t\tthis.m_display_mapobj = true;\r\n\t\t\tthis.m_display_maptile = true;\r\n\t\t\tthis.m_display_particle_system = true;\r\n\r\n\t\t\tthis.m_display_skeletal_anim = true;\r\n\r\n\t\t\tthis.m_display_portal = true;\r\n\r\n\t\t\tthis.m_display_player = true;\r\n\t\t\tthis.m_display_other_player = true;\r\n\t\t\tthis.m_display_life = true;\r\n\t\t\tthis.m_display_npc = true;//??\r\n\t\t\tthis.m_display_mob = true;//??\r\n\r\n\t\t\t//this.m_display_skill;\r\n\t\t\t//this.m_display_mob_skill;\r\n\t\t\t//this.m_display_mob_effect = true;\r\n\t\t\t//this.m_display_mob_etc = true;\r\n\t\t}\r\n\t\t\r\n\t\t{\r\n\t\t\tthis.ChatBalloon_default_style = 0;\r\n\t\t\tthis.ChatBalloon_display_duration = 5000;\r\n\t\t}\r\n\t\t\r\n\t\t{\r\n\t\t\tthis.input_keyDown = {};\r\n\t\t\tthis.input_keyUp = {};\r\n\r\n\t\t\tthis.mouse_move = 0;\r\n\t\t\tthis.mouse_x = 0;\r\n\t\t\tthis.mouse_y = 0;\r\n\t\t\tthis.mouse_dl = 0;\r\n\t\t\tthis.mouse_ul = 0;\r\n\t\t\tthis.mouse_dm = 0;\r\n\t\t\tthis.mouse_um = 0;\r\n\t\t\tthis.mouse_dr = 0;\r\n\t\t\tthis.mouse_ur = 0;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tlet SceneObjectMgr = {};\r\n\r\n\t\t\tSceneObjectMgr.layeredObjects = [];\r\n\t\t\tfor (let i = 0; i < 12; ++i) {\r\n\t\t\t\tlet lo = SceneObjectMgr.layeredObjects[i] = {};\r\n\t\t\t\tObject.defineProperty(lo, \"length\", {\r\n\t\t\t\t\tenumerable: false,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tSceneObjectMgr.Update = function (stamp) {\r\n\t\t\t\tfor (let layer = 0; layer < SceneObjectMgr.layeredObjects.length; ++layer) {\r\n\t\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\t\t\t\t\tfor (let uid in lo) {\r\n\t\t\t\t\t\tlet obj = lo[uid];\r\n\t\t\t\t\t\tobj.update(stamp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSceneObjectMgr.RenderLayer = function (engine, layer) {\r\n\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\t\t\t\tfor (let uid in lo) {\r\n\t\t\t\t\tlet obj = lo[uid];\r\n\t\t\t\t\tobj.render(engine);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSceneObjectMgr.addToScene = function (layer, obj) {\r\n\t\t\t\tif (Number.isSafeInteger(layer) && layer in SceneObjectMgr.layeredObjects) {\r\n\t\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\r\n\t\t\t\t\tobj.$layer = layer;\r\n\t\t\t\t\tobj.$objectid = lo.length;\r\n\r\n\t\t\t\t\tlo[obj.$objectid] = obj;\r\n\r\n\t\t\t\t\tlo.length++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new TypeError(\"layer\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSceneObjectMgr.destroy = function (obj) {\r\n\t\t\t\tconst layer = obj.$layer;\r\n\t\t\t\tconst uid = obj.$objectid;\r\n\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\r\n\t\t\t\tobj.destroy();\r\n\r\n\t\t\t\tdelete lo[uid];\r\n\t\t\t}\r\n\r\n\t\t\tthis.SceneObjectMgr = SceneObjectMgr;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const $gv = new GlobalVar();\r\n\r\nwindow.$gv = $gv;\r\n","﻿\r\nimport { Vec2 } from \"./math.js\";\r\nimport { IGraph, IRenderer } from \"./IRenderer.js\";\r\n\r\nimport { Sprite } from \"./Sprite.js\";\r\n\r\n\r\nwindow.m_draw_animation_texture_info = false;\r\n\r\nclass IAnimation {\r\n\tconstructor(raw, url) {\r\n\t\tthis._raw = raw;\r\n\t\tthis._url = url;\r\n\r\n\t\tthis.frame = 0;\r\n\t\tthis.time = 0;\r\n\r\n\t\t/** elapsed time */\r\n\t\tthis.delta = 0;\r\n\r\n\t\t/** @type {Sprite[]} */\r\n\t\tthis.textures = [];\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis.is_loop = true;\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis.is_end = false;\r\n\r\n\t\tif (!this._url) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t}\r\n\r\n\tgetTotalTime() {\r\n\t\treturn this.textures.reduce((pv, cv) => pv + cv.delay, 0);\r\n\t}\r\n\t\r\n\tclone() {\r\n\t\tlet newAnim = new this.constructor(this._raw, this._url);\r\n\t\tnewAnim.textures = this.textures;\r\n\t\treturn newAnim;\r\n\t}\r\n\t\r\n\tload() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\r\n\t/** reset frame */\r\n\t_resetFrame() {\r\n\t\tthis.frame = 0;\r\n\t\tthis.time = 0;\r\n\t}\r\n\r\n\t/** restart */\r\n\treset() {\r\n\t\tthis.frame = 0;\r\n\t\tthis.time = 0;\r\n\t\tthis.is_end = false;\r\n\t}\r\n\t\r\n\tget texture() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\r\n\t/**\r\n\t * remove at nextStep\r\n\t */\r\n\tdestroy() {\r\n\t\tthis.is_loop = false;//防止重複\r\n\t\tthis.is_end = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * process animation\r\n */\r\nexport class AnimationBase extends IAnimation {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {!string} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {Promise<Sprite>}\r\n\t */\r\n\tasync load() {\r\n\t\t//if (!this._raw) {\r\n\t\t//\tthis._raw = await $get.data(this._url);\r\n\t\t//}\r\n\r\n\t\tfor (let i = 0; i in this._raw; ++i) {\r\n\t\t\tlet url = this._url + \"/\" + i;\r\n\r\n\t\t\tlet texture = new Sprite(this._raw[i]);\r\n\r\n\t\t\ttexture._url = url;\r\n\r\n\t\t\tthis.textures[i] = texture;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.textures[0]) {\r\n\t\t\tif (!this.textures[0].isLoaded()) {\r\n\t\t\t\tthis.textures[0].__loadTexture();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tisEnd() {\r\n\t\treturn this.is_end;\r\n\t}\r\n\r\n\t/**\r\n\t * aways loop\r\n\t * @param {number} stamp\r\n\t */\r\n\t_update(stamp) {\r\n\t\tconst fc = this.textures.length;\r\n\r\n\t\tif (fc > 0) {//??\r\n\t\t\tthis.time = this.time + stamp;\r\n\r\n\t\t\tif (this.time > this.texture.delay) {\r\n\t\t\t\tthis.frame = ++this.frame % fc;\r\n\t\t\t\tthis.time = 0;\r\n\t\t\t}\r\n\t\t\t//this.frame = Math.trunc(this.time / 1000) % fc;\r\n\t\t}\r\n\r\n\t\tthis.delta += stamp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tconst fc = this.textures.length;\r\n\r\n\t\tif (fc > 0) {//??\r\n\t\t\tthis.time = this.time + stamp;\r\n\r\n\t\t\tif (this.time > this.texture.delay) {\r\n\t\t\t\tthis.frame = this.frame + 1;\r\n\t\t\t\tif (this.frame >= fc) {\r\n\t\t\t\t\tif (this.is_loop) {\r\n\t\t\t\t\t\tthis.reset();//make loop\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//防止錯誤\r\n\t\t\t\t\t\tthis.frame = fc - 1;//this._resetFrame();\r\n\r\n\t\t\t\t\t\tthis.is_end = true;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.time = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.delta += stamp;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer - GraphLayerRenderer\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tdraw(renderer, x, y, angle, flip) {\r\n\t\tlet texture = this.texture;\r\n\t\trenderer.drawRotaGraph(texture, x, y, angle, flip);\r\n\t}\r\n\t\r\n\tget texture() {\r\n\t\treturn this.textures[this.frame];\r\n\t}\r\n}\r\n\r\n/**\r\n * animation rendering\r\n */\r\nexport class Animation extends AnimationBase {\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\r\n\t\tthis.draw = this._draw_and_preload;\r\n\t}\r\n\r\n\t/**\r\n\t * draw and load next frame\r\n\t * @param {IRenderer} renderer - GraphLayerRenderer\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\t_draw_and_preload(renderer, x, y, angle, flip) {\r\n\t\tlet frame;\r\n\r\n\t\t// if current frame is not loaded then render prev frame\r\n\t\tfor (frame = this.frame; frame >= 0; --frame) {\r\n\t\t\tlet texture = this.textures[frame];\r\n\r\n\t\t\tif (texture.isLoaded()) {\r\n\t\t\t\trenderer.drawRotaGraph(texture, x, y, angle, flip);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//preload next frame\r\n\t\tlet texture = this.textures[++frame];\r\n\t\tif (texture) {//if frame < this.textures.length\r\n\t\t\tif (!texture.isLoaded()) {\r\n\t\t\t\ttexture.__loadTexture();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {//if all testure are loaded\r\n\t\t\tdelete this.draw;\r\n\t\t}\r\n\t}\r\n}\r\n","﻿\r\nimport { CharacterRenderConfig, ItemCategoryInfo, ResourceManager } from '../../../public/javascripts/resource.js';\r\nimport { AddInitTask } from \"../../init.js\";\r\nimport { Animation } from \"../Animation\";\r\nimport { engine } from '../Engine.js';\r\nimport { IRenderer, ImageFilter } from '../IRenderer.js';\r\nimport { Sprite, SpriteBase } from '../Sprite.js';\r\nimport { Rectangle, Vec2 } from '../math.js';\r\nimport { ActionAnimation } from './CharacterActionAnimation.js';\r\n\r\n\r\nlet zMap = {};\r\nlet sMap = {};\r\n\r\n\r\n/**\r\n * 00026623.blink[1].brow has bug\r\n * 'Weapon/01702694' is Longcoat(islot)\r\n * how to use cash-weapon (ex: 01702504|0152)\r\n */\r\n\r\n/**\r\n * multi-image-sprite\r\n */\r\nclass FragmentTexture extends SpriteBase {\r\n\t/**\r\n\t * @param {wzproperty} raw\r\n\t * @param {string} full_path\r\n\t */\r\n\tconstructor(raw, full_path) {\r\n\t\tsuper(raw, full_path);\r\n\r\n\t\tif (this._raw.origin) {\r\n\t\t\tthis._raw.origin.__proto__ = Vec2.prototype;\r\n\t\t}\r\n\r\n\t\tfor (let i in this._raw.map) {\r\n\t\t\tthis._raw.map[i].__proto__ = Vec2.prototype;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * if this.relative == null then hide\r\n\t\t */\r\n\t\tthis.relative = new Vec2(0, 0);\r\n\r\n\t\t/** @type {function(CharacterAnimationBase):Vec2} */\r\n\t\tthis.calcRelative = this._calcRelative;//this._getRelativeFunction();//this.__old_calcRelative;//\r\n\r\n\t\tthis.filter = new ImageFilter();\r\n\t\tthis.opacity = 1;\r\n\r\n\r\n\t\t/** @type {string} - extra property. */\r\n\t\tthis._slot = null;\r\n\r\n\t\t/** @type {string} - extra property. 在哪個部位 */\r\n\t\tthis._place = null;\r\n\r\n\t\t/** @type {string} - extra property: _slot itemId, _place, _raw.z z */\r\n\t\tthis.classList = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @returns {number}\r\n\t */\r\n\tget z() {\r\n\t\treturn zMap[this._raw.z] || 1;\r\n\t}\r\n\tset z(not_value) {\r\n\t\tconsole.warn(\"Not implement\");\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @returns {number}\r\n\t */\r\n\tget order() {\r\n\t\tdebugger;\r\n\t\treturn this.z;\r\n\t}\r\n\tset order(not_value) {\r\n\t\tdebugger;\r\n\t\tconsole.warn(new Error(\"Not implement\").stack);\r\n\t}\r\n\r\n\t/** @returns {Vec2} */\r\n\tget origin() { return this._raw.origin || Vec2.empty; }\r\n\r\n\tisHasAnchor() { return !!this._raw.map; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget brow() { return this._raw.map.brow; }\r\n\tisAnchorBrow() { return !!this._raw.map.brow; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget neck() { return this._raw.map.neck; }\r\n\tisAnchorNeck() { return !!this._raw.map.neck; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget navel() { return this._raw.map.navel; }\r\n\tisAnchorNavel() { return !!this._raw.map.navel; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget hand() { return this._raw.map.hand; }\r\n\tisAnchorHand() { return !!this._raw.map.hand; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget handMove() { return this._raw.map.handMove; }\r\n\tisAnchorHandMove() { return !!this._raw.map.handMove; }\r\n\r\n\r\n\t/** @returns {Vec2} */\r\n\tget _earBelowHead() { return this._raw.map.earBelowHead; }\r\n\tisAnchor_EarBelowHead() { return !!this._raw.map.earBelowHead; }\r\n\r\n\t/** @returns {Vec2} */\r\n\tget _earOverHead() { return this._raw.map.earOverHead; }\r\n\tisAnchor_EarOverHead() { return !!this._raw.map.earOverHead; }\r\n\r\n\t/**\r\n\t * @param {FragmentTexture} that\r\n\t * @param {FragmentTexture} base\r\n\t * @param {string} anchor - anchor name\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_anchor(that, base, anchor) {\r\n\t\treturn base[anchor].sub(that[anchor]).add(base.origin.sub(that.origin));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative(chara) {\r\n\t\tthis.calcRelative = this._getRelativeFunction(chara);\r\n\t\treturn this.calcRelative(chara);\r\n\t}\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_getRelativeFunction(chara) {\r\n\t\tif (!this.isHasAnchor()) {\r\n\t\t\treturn this._calcRelativeEmpty;\r\n\t\t}\r\n\t\tif (this.isAnchorNeck()) {\r\n\t\t\treturn this._calcRelative_neck;\r\n\t\t}\r\n\t\tif (this.isAnchorBrow()) {\r\n\t\t\treturn this._calcRelative_brow;\r\n\t\t}\r\n\t\tif (this.isAnchorNavel()) {\r\n\t\t\tif (this == chara.slots.body) {\r\n\t\t\t\treturn this._getOrigin;\r\n\t\t\t}\r\n\t\t\treturn this._calcRelative_navel;\r\n\t\t}\r\n\t\tif (this.isAnchorHand()) {\r\n\t\t\treturn this._calcRelative_hand;\r\n\t\t}\r\n\t\tif (this.isAnchorHandMove()) {\r\n\t\t\tif (this._url.lastIndexOf(\"lHand\") > 0) {\r\n\t\t\t\treturn this._calcRelative_handMove_lHand;\r\n\t\t\t}\r\n\t\t\treturn this._calcRelative_handMove;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelativeEmpty(chara) {\r\n\t\treturn Vec2.empty;\r\n\t}\r\n\t/**\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_getOrigin() {\r\n\t\treturn this.origin;\r\n\t}\r\n\t/**\r\n\t * neck on the navel\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_neck(chara) {\r\n\t\tconst body = chara.slots.body.fragments.body.getTexture(chara);\r\n\t\treturn this._anchor(this, body, \"neck\").sub(body.origin);\r\n\t}\r\n\t/**\r\n\t * brow on the head & head on the neck & neck on the navel\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_brow(chara) {\r\n\t\tconst body = chara.slots.body.fragments.body.getTexture(chara);\r\n\t\tconst head = chara.slots.head.fragments.head.getTexture(chara);\r\n\t\treturn this._anchor(this, head, \"brow\").add(this._anchor(head, body, \"neck\")).sub(body.origin);//anchor_brow+(-7,-33)\r\n\t}\r\n\t/**\r\n\t * this is origin point, no anchor\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_navel(chara) {\r\n\t\tconst body = chara.slots.body.fragments.body.getTexture(chara);\r\n\t\treturn body.navel.sub(this.navel, this.origin);\r\n\t}\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_hand(chara) {\r\n\t\tconst body = chara.slots.body.fragments.body.getTexture(chara);\r\n\t\tconst hand = chara.slots.body.fragments.arm.getTexture(chara);\r\n\t\tif (hand == null) {\r\n\t\t\treturn Vec2.empty.sub(this.hand).sub(this.origin).sub(body.origin);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this._anchor(this, hand, \"hand\").sub(this._anchor(body, hand, \"navel\")).sub(body.origin);\r\n\t}\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_handMove(chara) {\r\n\t\treturn Vec2.empty.sub(this.origin).sub(this.handMove);\r\n\t}\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {Vec2}\r\n\t */\r\n\t_calcRelative_handMove_lHand(chara) {\r\n\t\treturn Vec2.empty.sub(this.origin);\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t */\r\n\tupdate(chara) {\r\n\t\tthis.relative = this.calcRelative(chara);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Character} chara\r\n\t */\r\n\trender(renderer, chara) {\r\n\t\tif (!this.relative) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst x = this.relative.x;\r\n\t\tconst y = this.relative.y;\r\n\r\n\t\trenderer.globalAlpha = this.opacity || 1;\r\n\t\tif (this.filter.isEmpty) {\r\n\t\t\trenderer.drawGraph2(this, x, y);\r\n\t\t}\r\n\t\telse {\r\n\t\t\trenderer.ctx.filter = this.filter.toString();\r\n\t\t\trenderer.drawGraph2(this, x, y);\r\n\t\t\trenderer.ctx.filter = \"none\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass HairFragmentTexture extends FragmentTexture {\r\n\tconstructor(...args) {\r\n\t\tsuper(...args);\r\n\r\n\t\t/** @type {HairFragmentTexture} */\r\n\t\tthis.graph2 = null;\r\n\r\n\t\t/** @type {HairFragmentTexture} */\r\n\t\tthis.graph3 = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t */\r\n\tupdate(chara) {\r\n\t\tthis.relative = this.calcRelative(chara);\r\n\t\tif (this.graph2) {\r\n\t\t\tthis.graph2.relative = this.relative;\r\n\t\t}\r\n\t\tif (this.graph3) {\r\n\t\t\tthis.graph3.relative = this.relative;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Character} chara\r\n\t */\r\n\trender(renderer, chara) {\r\n\t\tif (!this.relative) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trenderer.globalAlpha = this.opacity || 1;\r\n\t\tif (this.filter.isEmpty) {\r\n\t\t\tthis._render(renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\trenderer.ctx.filter = this.filter.toString();\r\n\t\t\tthis._render(renderer);\r\n\t\t\trenderer.ctx.filter = \"none\";\r\n\t\t}\r\n\t}\r\n\t_render(renderer) {\r\n\t\tconst x = this.relative.x;\r\n\t\tconst y = this.relative.y;\r\n\r\n\t\trenderer.drawGraph2(this, x, y);\r\n\r\n\t\tif (this.graph2 && this.graph2.opacity) {//color2\r\n\t\t\trenderer.globalAlpha = this.graph2.opacity;\r\n\r\n\t\t\trenderer.drawGraph2(this.graph2, x, y);\r\n\t\t}\r\n\t\tif (this.graph3 && this.graph3.opacity) {//color3\r\n\t\t\trenderer.globalAlpha = this.graph3.opacity;\r\n\r\n\t\t\trenderer.drawGraph2(this.graph3, x, y);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nclass ItemEffectAnimation extends Animation {\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\t\t\r\n\t\tObject.defineProperty(this, \"_raw\", {\r\n\t\t\tvalue: raw,\r\n\t\t});\r\n\r\n\t\t//this._url = this._url;\r\n\r\n\t\tthis.__getAttr(\"z\", -1);\r\n\t\tthis.__getAttr(\"pos\", 1);\r\n\r\n\t\tsuper.load();\r\n\t}\r\n\t__getAttr(attr, defVal) {\r\n\t\tif (attr in this._raw) {\r\n\t\t\tthis[attr] = this._raw[attr];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis[attr] = defVal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {boolean} actionExceptRotation\r\n\t * @param {number} angle\r\n\t * @param {boolean} flip\r\n\t */\r\n\trender(renderer, actionExceptRotation, angle, flip) {\r\n\t\tif (actionExceptRotation) {\r\n\t\t\tthis.draw(renderer, 0, 0, -angle, flip);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst oy = -this.texture.height * 0.25;\r\n\t\t\tthis.draw(renderer, 0, oy, 0, flip);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//\t/data/Effect/ItemEff/1102918\r\nclass ItemEffect {\r\n\tconstructor() {\r\n\t\tthis._url = null;\r\n\t\tthis._raw = null;\r\n\r\n\t\t/** @type {{[animationName:string]:ItemEffectAnimation}} */\r\n\t\tthis.animation = {};\r\n\r\n\t\tthis.action = null;\r\n\t\tthis.time = 0;\r\n\t\tthis.frame = 0;\r\n\r\n\t\tthis.fixed = 0;\r\n\t\tthis.z = -2;\r\n\t\tthis.action = 1;\r\n\t\tthis.actionExceptRotation = 0;\r\n\t}\r\n\r\n\tstatic async Init() {\r\n\t\ttry {\r\n\t\t\t/** @type {Set<string>} */\r\n\t\t\tlet itemEffectList = ItemEffect._list;\r\n\r\n\t\t\t/** @type {string[]} */\r\n\t\t\tlet raw = $get.list(\"/Effect/ItemEff\");\r\n\r\n\t\t\titemEffectList.clear();\r\n\r\n\t\t\traw.forEach(id => {\r\n\t\t\t\titemEffectList.add(parseInt(id, 10));\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * if (!exist) return null\r\n\t * @param {string} equipID\r\n\t * @returns {Promise<ItemEffect>}\r\n\t */\r\n\tstatic async load(equipID) {\r\n\t\tlet eff = new ItemEffect();\r\n\t\tawait eff.load(equipID);\r\n\t\treturn eff;\r\n\t}\r\n\r\n\t/**\r\n\t * if (!exist) return null\r\n\t * @param {string} equipID\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tasync load(equipID) {\r\n\t\tconst id = Number(equipID);\r\n\t\tconst url = `/Effect/ItemEff/${id}/effect`;\r\n\r\n\t\tif (!ItemEffect._list.has(id)) {\r\n\t\t\t//if (!confirm(\"Try load: \" + url)) {\r\n\t\t\t//\treturn;\r\n\t\t\t//}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet raw = await $get.data(url);\r\n\t\tif (raw) {\r\n\t\t\treturn await this._load(equipID, url, raw);\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t * @param {string} action\r\n\t */\r\n\tupdate(stamp, action) {\r\n\t\tif (action in this.animation) {\r\n\t\t\tthis.action = action;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.action = \"default\";\r\n\t\t}\r\n\r\n\t\tif (this.animation[this.action]) {\r\n\t\t\tthis.animation[this.action].update(stamp);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {CharacterRenderer} chara\r\n\t */\r\n\trender(renderer, chara) {\r\n\t\tif (this.animation && this.animation[this.action]) {\r\n\t\t\tthis.animation[this.action].render(renderer, this.actionExceptRotation, chara.angle, chara.front > 0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} equipID\r\n\t * @param {object} raw_data\r\n\t */\r\n\tasync _load(equipID, url, raw) {\r\n\t\tthis.id = equipID;\r\n\r\n\t\tif (!raw) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\t//this._url = url;\r\n\t\tObject.defineProperty(this, \"_raw\", {\r\n\t\t\tvalue: raw,\r\n\t\t});\r\n\r\n\t\tthis.__construct();\r\n\t}\r\n\t__construct() {\r\n\t\tthis.__getAttr(\"fixed\", 0);\r\n\t\tthis.__getAttr(\"z\", -1);\r\n\t\tthis.__getAttr(\"action\", 1);\r\n\t\tthis.__getAttr(\"actionExceptRotation\", 0);\r\n\r\n\t\tfor (let i in this._raw) {\r\n\t\t\tif (this._raw[i] && typeof this._raw[i] == \"object\" && '0' in this._raw[i]) {//animation has frames\r\n\t\t\t\tthis.animation[i] = new ItemEffectAnimation(this._raw[i], [this._url, i].join(\"/\"));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t__getAttr(attr, defVal) {\r\n\t\tif (attr in this._raw) {\r\n\t\t\tthis[attr] = this._raw[attr];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis[attr] = defVal;\r\n\t\t}\r\n\t}\r\n}\r\n/** @type {Set<string>} */\r\nItemEffect._list = new Set();\r\n\r\nclass CharacterFragmentBase {\r\n\tconstructor(textures) {\r\n\t\tthis.textures = textures;\r\n\t\t//this.opacity = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @param {string} place\r\n\t * @returns {FragmentTexture}\r\n\t */\r\n\tgetTexture(chara, place) {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n}\r\n\r\nclass CharacterBodyFragment extends CharacterFragmentBase {\r\n\tconstructor(textures) {\r\n\t\tsuper(textures);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {FragmentTexture}\r\n\t */\r\n\tgetTexture(chara) {\r\n\t\treturn this.getFrameTexture(chara, chara.action_frame);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @param {number} frame\r\n\t * @returns {FragmentTexture}\r\n\t */\r\n\tgetFrameTexture(chara, frame) {\r\n\t\tif (!(chara.action in this.textures)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//if (this.textures.is_show) {\r\n\t\t\tlet ft = this.textures[chara.action][frame];\r\n\t\t\tif (ft) {\r\n\t\t\t\t//ft.opacity = this.opacity;\r\n\t\t\t\treturn ft;\r\n\t\t\t}\r\n\t\t//}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nclass CharacterFaceFragment extends CharacterFragmentBase {\r\n\tconstructor(textures) {\r\n\t\tsuper(textures);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {FragmentTexture}\r\n\t */\r\n\tgetTexture(chara) {\r\n\t\treturn this.getFrameTexture(chara, chara.emotion_frame);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @param {number} frame\r\n\t * @returns {FragmentTexture}\r\n\t */\r\n\tgetFrameTexture(chara, frame) {\r\n\t\tif (!(chara.emotion in this.textures)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//if (this.textures.is_show) {\r\n\t\t\tlet ft = this.textures[chara.emotion][frame];\r\n\t\t\t//ft.opacity = this.opacity;\r\n\t\t\treturn ft;\r\n\t\t//}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nclass EquipImageFilter {\r\n\t/**\r\n\t * @param {ICharacterEquip} equip\r\n\t */\r\n\tconstructor(equip) {\r\n\t\tthis.equip = equip;\r\n\t}\r\n\r\n\tget hue() {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\treturn ft.filter.hue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tset hue(value) {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.filter.hue = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget sat() {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\treturn ft.filter.sat;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tset sat(value) {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.filter.sat = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tget bri() {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\treturn ft.filter.bri;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tset bri(value) {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.filter.bri = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget contrast() {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\treturn ft.filter.contrast;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tset contrast(value) {\r\n\t\tconst equip = this.equip;\r\n\t\tfor (let i in equip.fragments) {\r\n\t\t\tfor (let j in equip.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < equip.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = equip.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.filter.contrast = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\thue: this.hue,\r\n\t\t\tsat: this.sat,\r\n\t\t\tbri: this.bri,\r\n\t\t\tcontrast: this.contrast,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass ICharacterEquip {\r\n\tconstructor() {\r\n\t}\r\n\r\n\tget _animation_type() {\r\n\t\tthrow new Error(\"Not Implement\");\r\n\t}\r\n\r\n\tisLoaded() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_unload() {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetFrameCount(chara) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetDelay(chara) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tid: -1,//invalid ID\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * ??\r\n */\r\nclass _CharacterEquipSlotLink extends ICharacterEquip {\r\n\tconstructor(slot_link) {\r\n\t\tsuper();\r\n\t\tthis.slot_link = slot_link;//??\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tid: slot_link,//??\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass CharacterEquipBase extends ICharacterEquip {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t\t\r\n\t\tthis._raw = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\t//this._url = null;\r\n\t\t\t\r\n\t\t/** @type {ItemEffect} */\r\n\t\tthis.effect = null;\r\n\r\n\t\t/**\r\n\t\t * this.fragments[place][action][frame]\r\n\t\t * @type {{[place:string]:{[action:string]:FragmentTexture[]}}}\r\n\t\t */\r\n\t\tthis.fragments = null;\r\n\r\n\t\tthis._onload = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.id = null;\r\n\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tthis.categoryInfo = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.slot_order = 0;\r\n\r\n\t\t/** @type {object<string, number>} */\r\n\t\tthis.islot = {};\r\n\r\n\t\t/** @type {object<string, number>} */\r\n\t\tthis.vslot = {};\r\n\r\n\t\tthis.filter = new EquipImageFilter(this);\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tid: this.id,\r\n\t\t\tfilter: this.filter.toJSON(),\r\n\t\t};\r\n\t}\r\n\r\n\tisLoaded() {\r\n\t\treturn this.fragments != null;\r\n\t}\r\n\r\n\t/** @type {function(CharacterEquipBase):void} */\r\n\tget _onload() {\r\n\t\treturn this.__onload;\r\n\t}\r\n\tset _onload(func) {\r\n\t\tthis.__onload = func;\r\n\t\tif (this.isLoaded()) {\r\n\t\t\tthis.__onload.call(this, this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} url\r\n\t * @param {string} id\r\n\t * @param {ItemCategoryInfo} cateInfo\r\n\t * @param {void} use_category - no use\r\n\t * @returns {Promise<boolean>} - true if item exist\r\n\t */\r\n\tasync load(url, id, cateInfo, use_category) {\r\n\t\tlet promise_raw, promise_name;\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.categoryInfo = cateInfo;\r\n\t\t\r\n\t\tpromise_raw = this.__load(url, id, cateInfo);\r\n\r\n\t\tif (cateInfo.path) {\r\n\t\t\tpromise_name = $get.data(`/String/Eqp/Eqp/${cateInfo.path}/${Number(id)}`).then(data => {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tthis.name = data.name;\r\n\t\t\t\t\tthis.desc = data.desc;\r\n\t\t\t\t}\r\n\t\t\t}, reason => {\r\n\t\t\t\tthis.name = \"[\" + id + \"]\";\r\n\t\t\t\tthis.desc = \"\";\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new Promise(function (resolve) {\r\n\t\t\tPromise.all([promise_raw, promise_name]).then(function (result) {\r\n\t\t\t\tresolve(result[0]);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tasync __load(url, id, cateInfo) {\r\n\t\tlet raw;\r\n\r\n\t\ttry {\r\n\t\t\tif (ResourceManager.isEquipExist(id, cateInfo)) {\r\n\t\t\t\traw = await $get.data(url);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif (!raw && load_extern_item_data) {\r\n\t\t\t\traw = await load_extern_item_data(id);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tif (!raw) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//this._url = url;\r\n\t\tObject.defineProperty(this, \"_raw\", {\r\n\t\t\tvalue: raw,\r\n\t\t});\r\n\r\n\t\tlet textures = {};\r\n\r\n\t\tthis.__load_slot();\r\n\r\n\t\tthis.__load_fragments();\r\n\r\n\t\tif (this._onload) {\r\n\t\t\tthis._onload.call(this, this);\r\n\t\t}\r\n\r\n\t\t//// if not body, head, face, hair then try load effect\r\n\t\t//if (id >= \"00050000\") {\r\n\t\t\t// load if exist\r\n\t\t\tItemEffect.load(this.id).then(a => this.effect = a);//01102918\t//01102915\r\n\t\t//}\r\n\r\n\t\treturn true;\r\n\t}\r\n\t__load_fragments() {\r\n\t\tconst fragmentConstructor = this.fragmentConstructor;\r\n\r\n\t\t//Object.keys(this._raw_textures).map(k => { return '0' in this._raw_textures[k]; })\r\n\r\n\t\tlet action_list = Object.keys(this._raw_textures);\r\n\r\n\t\tlet textures = {};\r\n\t\tfor (let action of action_list) {\r\n\t\t\tif (\"0\" in this._raw_textures[action]) {\r\n\t\t\t\tlet _url = this._base_path + action;\r\n\r\n\t\t\t\ttextures[action] = this.__load_frame_textures(this._raw_textures[action], _url);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fragment_textures = {};\r\n\t\tfor (let action in textures) {\r\n\t\t\tfor (let frame in textures[action]) {\r\n\t\t\t\tfor (let place in textures[action][frame]) {\r\n\t\t\t\t\tif (!(place in fragment_textures)) {\r\n\t\t\t\t\t\tfragment_textures[place] = {};\r\n\t\t\t\t\t\t//fragment_textures[place].is_show = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!(action in fragment_textures[place])) {\r\n\t\t\t\t\t\tfragment_textures[place][action] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfragment_textures[place][action][frame] = textures[action][frame][place];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fragments = {};\r\n\t\tfor (let frag in fragment_textures) {\r\n\t\t\tfragments[frag] = new fragmentConstructor(fragment_textures[frag]);\r\n\t\t}\r\n\t\tthis.fragments = fragments;\r\n\t}\r\n\t/**\r\n\t * @param {string} _url\r\n\t * @returns {Object.<string, FragmentTexture>[]} - array - textures[frame][place]\r\n\t */\r\n\t__load_frame_textures(_raw, _url) {\r\n\t\tlet textures = [];\r\n\t\tfor (let frame = 0; frame in _raw; ++frame) {\r\n\t\t\tlet url = `${_url}/${frame}`;\r\n\t\t\ttextures[frame] = this.__load_place_textures(_raw[frame], url);\r\n\t\t}\r\n\t\treturn textures;\r\n\t}\r\n\t/**\r\n\t * @param {string} _url\r\n\t * @returns {Object.<string, FragmentTexture>} - object - textures[place]\r\n\t */\r\n\t__load_place_textures(_raw, _url) {\r\n\t\tlet textures = {};\r\n\t\tfor (let place in _raw) {\r\n\t\t\tlet path = `${_url}/${place}`;\r\n\t\t\tlet raw = _raw[place];\r\n\r\n\t\t\tif (raw) {\r\n\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\tconst FragmentTextureType = this.FragmentTextureType;\r\n\t\t\t\tlet ft;\r\n\t\t\t\tif (raw[\"\"] == \"\") {\r\n\t\t\t\t\tft._url = path;\r\n\t\t\t\t\t//ft._url = path;\r\n\t\t\t\t\ttextures[place] = ft\r\n\t\t\t\t}\r\n\t\t\t\telse if (typeof raw[\"\"] == 'string') {\r\n\t\t\t\t\tft = new FragmentTextureType(raw);\r\n\t\t\t\t\t//ft._url = raw[\"\"];\r\n\t\t\t\t\ttextures[place] = ft;\r\n\t\t\t\t}\r\n\t\t\t\telse if (place == \"hairShade\") {\r\n\t\t\t\t\tft = new FragmentTextureType(raw[0]);\r\n\t\t\t\t\t//ft._url = path + \"/0\";\r\n\t\t\t\t\ttextures[place] = ft;\r\n\t\t\t\t}\r\n\t\t\t\tif (ft) {\r\n\t\t\t\t\tft._slot = this.categoryInfo.slot;\r\n\t\t\t\t\tft._place = place;\r\n\r\n\t\t\t\t\tft.classList = [\r\n\t\t\t\t\t\tft._slot,\r\n\t\t\t\t\t\t\"item\" + this.id,\r\n\t\t\t\t\t\tft._place,\r\n\t\t\t\t\t\tft._raw.z,\r\n\t\t\t\t\t\t'z' + ft.z\r\n\t\t\t\t\t].join(' ');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn textures;\r\n\t}\r\n\tget FragmentTextureType() {\r\n\t\treturn FragmentTexture;\r\n\t}\r\n\t__load_slot() {\r\n\t\tif (!this._raw.info.islot) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet islots = this._raw.info.islot.match(/([A-Z][a-z0-9])/g);\r\n\t\tfor (let i in islots) {\r\n\t\t\tconst slot = islots[i];\r\n\t\t\tconst slot_order = zMap[slot];\r\n\t\t\tthis.islot[slot] = slot_order;\r\n\t\t\t\t\r\n\t\t\tif (slot_order > this.slot_order) {//this.slot_order = Math.max(this.slot_order, slot_order);\r\n\t\t\t\tthis.slot_order = slot_order;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet vslots = this._raw.info.vslot.match(/([A-Z][a-z0-9])/g);\r\n\t\tfor (let i in vslots) {\r\n\t\t\tconst slot = vslots[i];\r\n\t\t\tthis.vslot[slot] = slot;\r\n\t\t}\r\n\t}\r\n\r\n\t_unload() {\r\n\t\tthis.fragments = null;\r\n\t\tthis.effect == null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @returns {number}\r\n\t */\r\n\tget opacity() {\r\n\t\tfor (let i in this.fragments) {\r\n\t\t\tfor (let j in this.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < this.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = this.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\treturn ft.opacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} opacity\r\n\t */\r\n\tset opacity(opacity) {\r\n\t\tfor (let i in this.fragments) {\r\n\t\t\tfor (let j in this.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < this.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = this.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.opacity = opacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} hue 0 ~ 360\r\n\t * @param {number} sat 0 ~ 100\r\n\t * @param {number} bri 0 ~ 100\r\n\t */\r\n\tsetFilter(hue, sat, bri) {\r\n\t\tfor (let i in this.fragments) {\r\n\t\t\tfor (let j in this.fragments[i].textures) {\r\n\t\t\t\tfor (let k = 0; k < this.fragments[i].textures[j].length; ++k) {\r\n\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\tlet ft = this.fragments[i].textures[j][k];\r\n\t\t\t\t\tif (ft) {\r\n\t\t\t\t\t\tft.filter.hue = hue;\r\n\t\t\t\t\t\tft.filter.sat = sat;\r\n\t\t\t\t\t\tft.filter.bri = bri;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * get icon url\r\n\t * @see {@link ItemCategoryInfo.getIconUrl}\r\n\t * @returns {string}\r\n\t */\r\n\tgetIconUrl() {\r\n\t\treturn ItemCategoryInfo.getIconUrl(this.id);\r\n\t}\r\n\r\n\t/**\r\n\t * get iconRaw url\r\n\t * @see {@link ItemCategoryInfo.getIconRawUrl}\r\n\t * @returns {string}\r\n\t */\r\n\tgetIconRawUrl() {\r\n\t\treturn ItemCategoryInfo.getIconRawUrl(this.id);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {{[actions:string]:{[\"0\"]:Sprite,[frames:string]:Sprite}}} raw_textures[...actions][...frames][...fragments]\r\n\t */\r\n\tget _raw_textures() {\r\n\t\treturn this._raw;\r\n\t}\r\n\r\n\tget _base_path() {\r\n\t\treturn this._url;\r\n\t}\r\n}\r\n\r\nclass CharacterEquip extends CharacterEquipBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\tget _animation_type() {\r\n\t\treturn \"action\";\r\n\t}\r\n\t//__is_texture(k) {\r\n\t//\treturn (!(k == \"face\" || k == \"delay\" || k == \"default\"));\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {CharacterAnimationBase} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetFrameCount(chara) {\r\n\t\ttry {\r\n\t\t\treturn chara.slots.body.fragments.body.textures[chara.action].length;\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetDelay(chara) {\r\n\t\ttry {\r\n\t\t\tconst d = this._raw[chara.action][chara.action_frame].delay;\r\n\t\t\tif (d != null) {!isNaN(d) && isFinite(d)\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger\r\n\t\t}\r\n\t\treturn 120;\r\n\t}\r\n\r\n\tget fragmentConstructor() {\r\n\t\treturn CharacterBodyFragment;\r\n\t}\r\n}\r\n\r\nclass CharacterEquipBody extends CharacterEquip {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t///**\r\n\t// * @param {CharacterAnimationBase} chara\r\n\t// * @returns {number}\r\n\t// */\r\n\t//getFrameCount(chara) {\r\n\t//\treturn this.fragments.body.textures[chara.action].length;\r\n\t//}\r\n}\r\n\r\nclass CharacterEquipCashWeapon extends CharacterEquip {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.use_category = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} url\r\n\t * @param {string} id\r\n\t * @param {ItemCategoryInfo} cateInfo\r\n\t * @param {string} use_category - cash-weapon as [category]\r\n\t * @returns {Promise<boolean>} - true if item exist\r\n\t */\r\n\tasync load(url, id, cateInfo, use_category) {\r\n\t\tif (!use_category && use_category != \"\") {\r\n\t\t\tconsole.warn(\"no use_category\");\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.use_category = use_category.slice(2, 4);\r\n\r\n\t\treturn super.load(url, id, cateInfo);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {object} raw_textures[...actions][...frames][...fragments]\r\n\t */\r\n\tget _raw_textures() {\r\n\t\treturn this._raw[this.use_category];\r\n\t}\r\n\r\n\tget _base_path() {\r\n\t\treturn this._url + this.use_category;\r\n\t}\r\n}\r\n\r\nclass CharacterEquipHead extends CharacterEquip {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.elfEarFragment = null;\r\n\t\tthis.lefEarFragment = null;\r\n\t\tthis.highlefEarFragment = null;\r\n\t}\r\n\t__load_fragments() {\r\n\t\tsuper.__load_fragments()\r\n\t\t\r\n\t\tif (this.fragments) {\r\n\t\t\tif (this.fragments.ear) {\r\n\t\t\t\tthis.elfEarFragment = this.fragments.ear;\r\n\t\t\t\tdelete this.fragments.ear;\r\n\t\t\t}\r\n\t\t\tif (this.fragments.lefEar) {\r\n\t\t\t\tthis.lefEarFragment = this.fragments.lefEar;\r\n\t\t\t\tdelete this.fragments.lefEar;\r\n\t\t\t}\r\n\t\t\tif (this.fragments.highlefEar) {\r\n\t\t\t\tthis.highlefEarFragment = this.fragments.highlefEar;\r\n\t\t\t\tdelete this.fragments.highlefEar;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tget elfEar() {\r\n\t\treturn this.fragments.ear != null;\r\n\t}\r\n\tset elfEar(value) {\r\n\t\tif (!this.elfEarFragment) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis.fragments.ear = this.elfEarFragment;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete this.fragments.ear;\r\n\t\t}\r\n\t}\r\n\r\n\tget lefEar() {\r\n\t\treturn this.fragments.lefEar != null;\r\n\t}\r\n\tset lefEar(value) {\r\n\t\tif (!this.lefEarFragment) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis.fragments.lefEar = this.lefEarFragment;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete this.fragments.lefEar;\r\n\t\t}\r\n\t}\r\n\r\n\tget highlefEar() {\r\n\t\treturn this.fragments.highlefEar != null;\r\n\t}\r\n\tset highlefEar(value) {\r\n\t\tif (!this.highlefEarFragment) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis.fragments.highlefEar = this.highlefEarFragment;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete this.fragments.highlefEar;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass CharacterEquipHair extends CharacterEquip {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tget FragmentTextureType() {\r\n\t\treturn HairFragmentTexture;\r\n\t}\r\n}\r\n\r\nclass CharacterEquipFaceAcc extends CharacterEquipBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\tget _animation_type() {\r\n\t\treturn \"emotion\";\r\n\t}\r\n\t//__is_texture(k) {\r\n\t//\treturn (!(k == \"delay\" || k == \"default\"));\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetFrameCount(chara) {\r\n\t\ttry {\r\n\t\t\treturn chara.slots.face.fragments.face.textures[chara.emotion].length;\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Character} chara\r\n\t * @returns {number}\r\n\t */\r\n\tgetDelay(chara) {\r\n\t\ttry {\r\n\t\t\tconst d = this._raw[chara.emotion][chara.emotion_frame].delay;\r\n\t\t\tif (d != null) {//!isNaN(d) && isFinite(d)\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger\r\n\t\t}\r\n\t\treturn 60;\r\n\t}\r\n\r\n\tget fragmentConstructor() {\r\n\t\treturn CharacterFaceFragment;\r\n\t}\r\n}\r\nclass CharacterEquipFace extends CharacterEquipFaceAcc {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n}\r\n\r\nItemCategoryInfo._info['0000'].fragmentType = CharacterEquipBody;\r\nItemCategoryInfo._info['0001'].fragmentType = CharacterEquipHead;\t//\telfEar\r\nItemCategoryInfo._info['0002'].fragmentType = CharacterEquipFace;\t//\tFace\r\nItemCategoryInfo._info['0003'].fragmentType = CharacterEquipHair;\t//\tCharacterEquipHair;\t//\tHair\r\nItemCategoryInfo._info['0004'].fragmentType = CharacterEquipHair;\t//\tCharacterEquipHair;\t//\tHair\r\n\r\nItemCategoryInfo._info['0100'].fragmentType = CharacterEquip;\t\t//\tCap\r\nItemCategoryInfo._info['0101'].fragmentType = CharacterEquipFaceAcc;//\taccessoryFace\r\nItemCategoryInfo._info['0102'].fragmentType = CharacterEquip;\t\t//\taccessoryEyes\r\nItemCategoryInfo._info['0103'].fragmentType = CharacterEquip;\t\t//\taccessoryEars\r\nItemCategoryInfo._info['0104'].fragmentType = CharacterEquip;\t\t//\tCoat\r\nItemCategoryInfo._info['0105'].fragmentType = CharacterEquip;\t\t//\tLongcoat\r\nItemCategoryInfo._info['0106'].fragmentType = CharacterEquip;\t\t//\tPants\r\nItemCategoryInfo._info['0107'].fragmentType = CharacterEquip;\t\t//\tShoes\r\nItemCategoryInfo._info['0108'].fragmentType = CharacterEquip;\t\t//\tGlove\r\nItemCategoryInfo._info['0109'].fragmentType = CharacterEquip;\t\t//\tShield\r\nItemCategoryInfo._info['0110'].fragmentType = CharacterEquip;\t\t//\tCape\r\n\r\nItemCategoryInfo._info['0170'].fragmentType = CharacterEquipCashWeapon;\t\t//\tcash-weapon\r\n\r\nclass CharacterSlots {\r\n\tconstructor() {\r\n\t\t\t\r\n\t\t/** @type {CharacterEquipBase[]} */\r\n\t\tthis._ordered_slot = [];\r\n\r\n\r\n\t\t/** @type {CharacterEquipHair} */\r\n\t\tthis._hair = null;\r\n\t\t/** @type {CharacterEquipHair} */\r\n\t\tthis._hair2 = null;\r\n\t\t/** @type {CharacterEquipHair} 0~1.0 */\r\n\t\tthis._hairMix2 = null;\r\n\t\t/** @type {CharacterEquipHair} */\r\n\t\tthis._hair3 = null;\r\n\t\t/** @type {CharacterEquipHair} 0~1.0 */\r\n\t\tthis._hairMix3 = null;\r\n\r\n\r\n\t\t/** @type {CharacterEquipBody} */\r\n\t\tthis.body = null;\r\n\r\n\t\t/** @type {CharacterEquip} */\r\n\t\tthis.head = null;\r\n\r\n\t\t/** @type {CharacterEquipFace} */\r\n\t\tthis.face = null;\r\n\r\n\t\t/** @type {CharacterEquip} */\r\n\t\tthis.hair = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 1 */\r\n\t\tthis.cap = null;\r\n\r\n\t\t/** @type {CharacterEquipFace} - 2 */\r\n\t\tthis.accessoryFace = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 3*/\r\n\t\tthis.accessoryEyes = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 4 */\r\n\t\tthis.accessoryEars = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 5 */\r\n\t\tthis.coat = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 5 */\r\n\t\tthis.longcoat = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 6 */\r\n\t\tthis.pants = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 7 */\r\n\t\tthis.shoes = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 8 */\r\n\t\tthis.glove = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 9 */\r\n\t\tthis.cape = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 10 */\r\n\t\tthis.shield = null;\r\n\r\n\t\t/** @type {CharacterEquip} - 11 */\r\n\t\tthis.weapon = null;\r\n\t\r\n\t\t{\r\n\t\t\tObject.defineProperty(this, \"_ordered_slot\", {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: []\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(this, \"_hair\", {\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\tObject.defineProperty(this, \"_hair2\", {\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\tObject.defineProperty(this, \"_hairMix2\", {\t// 0~1.0\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\tObject.defineProperty(this, \"_hair3\", {\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\tObject.defineProperty(this, \"_hairMix3\", {\t// 0~1.0\r\n\t\t\t\twritable: true,\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/** @type {CharacterEquipHair} */\r\n\tget hair() {\r\n\t\treturn this._hair;\r\n\t}\r\n\tset hair(value) {\r\n\t\tthis._hair = value;\r\n\t\tif (value) {\r\n\t\t\tif (this._hair2 && this._hairMix2) {\r\n\t\t\t\tthis.hairColor2 = this.hairColor2;\r\n\t\t\t\tthis.hairMix2 = this.hairMix2;\r\n\t\t\t}\r\n\t\t\tif (this._hair3 && this._hairMix3) {\r\n\t\t\t\tthis.hairColor3 = this.hairColor3;\r\n\t\t\t\tthis.hairMix3 = this.hairMix3;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync __loadColoredHair(color) {\r\n\t\tconst id = CharacterRenderConfig.getColorHairID(this.hair.id, color);\r\n\t\tconst cateInfo = ItemCategoryInfo.get(id);\r\n\r\n\t\tif (cateInfo) {\r\n\t\t\tconst url = `/Character/${cateInfo.path + (cateInfo.path ? \"/\" : \"\") + id}`;\r\n\t\t\tconst use_category = undefined;\r\n\r\n\t\t\tlet hair = new CharacterEquipHair();\r\n\r\n\t\t\tawait hair.load(url, id, cateInfo, use_category);\r\n\r\n\t\t\treturn hair;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @returns {number} */\r\n\tget hairColor2() {\r\n\t\tif (this._hair2) {\r\n\t\t\treturn Number(CharacterRenderConfig.getHairColor(this._hair2.id));\r\n\t\t}\r\n\t}\r\n\tset hairColor2(color) {\r\n\t\tif (!color) {\r\n\t\t\tconsole.error(new TypeError());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet hc2Id = CharacterRenderConfig.getColorHairID(this.hair.id, color);\r\n\r\n\t\tif (!this._hair2 || hc2Id != this._hair2.id) {\r\n\t\t\tif (hc2Id == this._hair.id) {\r\n\t\t\t\tthis._hair2 = null;\r\n\t\t\t\tthis.hairMix2 = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hair.$promise_hair2 = this.__loadColoredHair(color);\r\n\r\n\t\t\t\tthis.hair.$promise_hair2.then(hair2 => {\r\n\t\t\t\t\tdelete this.hair.$promise_hair2;\r\n\r\n\t\t\t\t\tthis._hair2 = hair2;\r\n\t\t\t\t\tif (this._hair2 && this.hairMix2 != null) {\r\n\t\t\t\t\t\tthis.hairMix2 = this.hairMix2;//force update\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//else {\r\n\t\t\t\t\t//\tthis.hairMix2 = 0;//disable\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** @returns {number} 0~1.0 */\r\n\tget hairMix2() {\r\n\t\treturn this._hairMix2;\r\n\t}\r\n\tset hairMix2(value) {\r\n\t\tvalue = Number(value);\r\n\r\n\t\tPromise.resolve(this.hair.$promise_hair2).then(() => {\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet item = this._hair2;\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet base = this.hair;\r\n\r\n\t\t\tif (!item || !base) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let j in item.fragments) {\r\n\t\t\t\tfor (let k in item.fragments[j].textures) {\r\n\t\t\t\t\tfor (let i = 0; i < item.fragments[j].textures[k].length; ++i) {\r\n\t\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\t\tlet ft = item.fragments[j].textures[k][i];\r\n\t\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\t\tlet ori = base.fragments[j].textures[k][i];\r\n\t\t\t\t\t\tif (ori) {\r\n\t\t\t\t\t\t\tori.graph2 = ft;\r\n\t\t\t\t\t\t\tori.graph2.opacity = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._hairMix2 = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/** @returns {number} 0~1.0 */\r\n\tget hairColor3() {\r\n\t\tif (this._hair3) {\r\n\t\t\treturn Number(CharacterRenderConfig.getHairColor(this._hair3.id));\r\n\t\t}\r\n\t}\r\n\tset hairColor3(color) {\r\n\t\tif (!color) {\r\n\t\t\tconsole.error(new TypeError());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet hc3Id = CharacterRenderConfig.getColorHairID(this.hair.id, color);\r\n\r\n\t\tif (!this._hair3 || this._hair3.id != hc3Id) {\r\n\t\t\tif (this._hair.id == hc3Id || this._hair2.id == hc3Id) {\r\n\t\t\t\tthis._hair3 = null;\r\n\t\t\t\tthis.hairMix3 = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hair.$promise_hair3 = this.__loadColoredHair(color);\r\n\r\n\t\t\t\tthis.hair.$promise_hair3.then(hair3 => {\r\n\t\t\t\t\tdelete this.hair.$promise_hair3;\r\n\r\n\t\t\t\t\tthis._hair3 = hair3;\r\n\t\t\t\t\tif (this._hair3 && this.hairMix3 != null) {\r\n\t\t\t\t\t\tthis.hairMix3 = this.hairMix3;//force update\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//else {\r\n\t\t\t\t\t//\tthis.hairMix3 = 0;//disable\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/** @returns {number} */\r\n\tget hairMix3() {\r\n\t\treturn this._hairMix3;\r\n\t}\r\n\tset hairMix3(value) {\r\n\t\tvalue = Number(value);\r\n\r\n\t\tPromise.resolve(this.hair.$promise_hair3).then(() => {\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet item = this._hair3;\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet base = this.hair;\r\n\r\n\t\t\tif (!item || !base) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let j in item.fragments) {\r\n\t\t\t\tfor (let k in item.fragments[j].textures) {\r\n\t\t\t\t\tfor (let i = 0; i < item.fragments[j].textures[k].length; ++i) {\r\n\t\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\t\tlet ft = item.fragments[j].textures[k][i];\r\n\t\t\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\t\t\tlet ori = base.fragments[j].textures[k][i];\r\n\t\t\t\t\t\tif (ori) {\r\n\t\t\t\t\t\t\tori.graph3 = ft;\r\n\t\t\t\t\t\t\tori.graph3.opacity = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._hairMix3 = value;\r\n\t\t});\r\n\t}\r\n\r\n\t//__order_slot() {\r\n\t//\tlet slot_map = new Map();\r\n\t//\r\n\t//\tfor (let i in this) {\r\n\t//\t\tlet equip = this[i];\r\n\t//\r\n\t//\t\tequip.cs\r\n\t//\t}\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @param {CharacterEquipBase} loadedEquip\r\n\t * @param {string} use_category - category which used of cash-weapon\r\n\t */\r\n\tasync _use(id, loadedEquip, use_category) {\r\n\t\tif (!id) {\r\n\t\t\tdebugger\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst cateInfo = ItemCategoryInfo.get(id);\r\n\r\n\t\tif (cateInfo) {\r\n\t\t\tlet url = `/Character/${cateInfo.path + (cateInfo.path ? \"/\":\"\") + id}`;\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet item;\r\n\r\n\t\t\tif (loadedEquip instanceof CharacterEquipBase) {\r\n\t\t\t\talert(\"CharacterSlots # _use: param loadedEquip ??\");\r\n\t\t\t\tdebugger;\r\n\t\t\t\titem = loadedEquip;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (loadedEquip) {\r\n\t\t\t\t\talert(\"CharacterSlots # _use: param loadedEquip ??\");\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t}\r\n\t\t\t\tconst fragmentType = cateInfo.fragmentType || CharacterEquip;\r\n\r\n\t\t\t\titem = new fragmentType();\r\n\t\t\t}\r\n\t\t\t/** _use_loaded_equip */\r\n\t\t\tif (0) {\r\n\t\t\t\tif (this[cateInfo.slot]) {\r\n\t\t\t\t\tthis[cateInfo.slot]._unload();\r\n\t\t\t\t}\r\n\t\t\t\tthis[cateInfo.slot] = item;\r\n\r\n\t\t\t\tthis._ordered_slot[item.slot_order] = item;\r\n\t\t\t}\r\n\r\n\t\t\tlet is_exist = loadedEquip || await item.load(url, id, cateInfo, use_category);\r\n\t\t\tif (is_exist) {\r\n\t\t\t\t/** _use_loaded_equip */\r\n\t\t\t\tif (1) {\r\n\t\t\t\t\tif (this[cateInfo.slot]) {\r\n\t\t\t\t\t\tthis[cateInfo.slot]._unload();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis[cateInfo.slot] = item;\r\n\r\n\t\t\t\t\tthis._ordered_slot[item.slot_order] = item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.warn(\"item(\" + id + \") is not exist\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {boolean}\r\n\t */\r\n\t_unuse(id) {\r\n\t\tif (!id) {\r\n\t\t\tdebugger\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet cateInfo, equip;\r\n\r\n\t\tif (id instanceof CharacterEquipBase) {\r\n\t\t\tequip = id;\r\n\t\t\tid = equip.id;\r\n\t\t\tcateInfo = equip.categoryInfo;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcateInfo = ItemCategoryInfo.get(id);\r\n\t\t}\r\n\r\n\t\tif (cateInfo.slot != \"head\" && cateInfo.slot != \"body\") {\r\n\t\t\tif (this[cateInfo.slot] && this[cateInfo.slot].id == id) {\r\n\t\t\t\tequip = this[cateInfo.slot];\r\n\t\t\t\tfor (let slot in equip.islot) {\r\n\t\t\t\t\tlet order = equip.islot[slot];\r\n\t\t\t\t\tif (this._ordered_slot[order]) {\r\n\t\t\t\t\t\tthis._ordered_slot[order]._unload();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._ordered_slot[order];\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t_clear() {\r\n\t\t//this.body = null;\r\n\t\t//this.head = null;\r\n\t\tthis.face = null;\r\n\t\tthis.hair = null;\r\n\t\tthis.cap = null;\r\n\t\tthis.accessoryFace = null;\r\n\t\tthis.accessoryEyes = null;\r\n\t\tthis.accessoryEars = null;\r\n\t\tthis.coat = null;\r\n\t\tthis.longcoat = null;\r\n\t\tthis.pants = null;\r\n\t\tthis.shoes = null;\r\n\t\tthis.glove = null;\r\n\t\tthis.cape = null;\r\n\t\tthis.shield = null;\r\n\r\n\t\t//temp\r\n\t\tlet head = this.head;\r\n\t\tlet body = this.body;\r\n\r\n\t\t//clear\r\n\t\tthis._ordered_slot = [];\r\n\r\n\t\t//restore\r\n\t\tif (head) {\r\n\t\t\tthis._ordered_slot[head.slot_order] = head;\r\n\t\t}\r\n\t\tif (body) {\r\n\t\t\tthis._ordered_slot[body.slot_order] = body;\r\n\t\t}\r\n\t}\r\n\r\n\t_stringify() {\r\n\t\tlet slots = [\"c\"];\r\n\t\t\t\r\n\t\tif (this.body) slots.push(this.body.id);\r\n\t\tif (this.head) slots.push(this.head.id);\r\n\t\tif (this.face) slots.push(this.face.id + \"|\" + this.face.id);\r\n\t\tif (this.hair) {\r\n\t\t\tlet ha = [];\r\n\t\t\tha.push(this.hair.id);\r\n\t\t\tif (this.hairColor2 && this.hairMix2 > 0) ha.push(this.hairColor2 + \"%\" + Math.trunc(this.hairMix2 * 100));\r\n\t\t\tif (this.hairColor3 && this.hairMix3 > 0) ha.push(this.hairColor3 + \"%\" + Math.trunc(this.hairMix3 * 100));\r\n\t\t\tslots.push(ha.join(\"|\"));\r\n\t\t}\r\n\t\tif (this.cap) slots.push(this.cap.id);\r\n\t\tif (this.accessoryFace) slots.push(this.accessoryFace.id);\r\n\t\tif (this.accessoryEyes) slots.push(this.accessoryEyes.id);\r\n\t\tif (this.accessoryEars) slots.push(this.accessoryEars.id);\r\n\t\tif (this.coat) slots.push(this.coat.id);\r\n\t\tif (this.longcoat) slots.push(this.longcoat.id);\r\n\t\tif (this.pants) slots.push(this.pants.id);\r\n\t\tif (this.shoes) slots.push(this.shoes.id);\r\n\t\tif (this.glove) slots.push(this.glove.id);\r\n\t\tif (this.shield) slots.push(this.shield.id);\r\n\t\tif (this.cape) slots.push(this.cape.id);\r\n\t\tif (this.weapon) slots.push(this.weapon.id);\r\n\r\n\t\treturn slots.join(\",\");\r\n\t}\r\n\r\n\ttoJSON() {\r\n\t\tlet slots = [];\r\n\r\n\t\tif (this.body) slots.push(this.body.id);\r\n\t\tif (this.head) slots.push(this.head.id);\r\n\t\tif (this.face) slots.push(this.face.id);\r\n\t\tif (this.hair) slots.push(this.hair.id);\r\n\t\tif (this.cap) slots.push(this.cap.id);\r\n\t\tif (this.accessoryFace) slots.push(this.accessoryFace.id);\r\n\t\tif (this.accessoryEyes) slots.push(this.accessoryEyes.id);\r\n\t\tif (this.accessoryEars) slots.push(this.accessoryEars.id);\r\n\t\tif (this.coat) slots.push(this.coat.id);\r\n\t\tif (this.longcoat) slots.push(this.longcoat.id);\r\n\t\tif (this.pants) slots.push(this.pants.id);\r\n\t\tif (this.shoes) slots.push(this.shoes.id);\r\n\t\tif (this.glove) slots.push(this.glove.id);\r\n\t\tif (this.shield) slots.push(this.shield.id);\r\n\t\tif (this.cape) slots.push(this.cape.id);\r\n\t\tif (this.weapon) slots.push(this.weapon.id);\r\n\r\n\t\treturn slots;\r\n\t}\r\n\r\n\t/**\r\n\t * returns: [face, hair, cap, ..., weapon]\r\n\t */\r\n\t*enumerate() {\r\n\t\tif (this.face) yield this.face;\r\n\t\tif (this.hair) yield this.hair;\r\n\r\n\t\tyield* this.enumerate_equip();\r\n\t}\r\n\t*enumerate_equip() {\r\n\t\tif (this.cap) yield this.cap;\r\n\t\tif (this.accessoryFace) yield this.accessoryFace;\r\n\t\tif (this.accessoryEyes) yield this.accessoryEyes;\r\n\t\tif (this.accessoryEars) yield this.accessoryEars;\r\n\t\tif (this.coat) yield this.coat;\r\n\t\tif (this.longcoat) yield this.longcoat;\r\n\t\tif (this.pants) yield this.pants;\r\n\t\tif (this.shoes) yield this.shoes;\r\n\t\tif (this.glove) yield this.glove;\r\n\t\tif (this.shield) yield this.shield;\r\n\t\tif (this.cape) yield this.cape;\r\n\t\tif (this.weapon) yield this.weapon;\r\n\t}\r\n\t*enumerate_face() {\r\n\t\tif (this.face) yield this.face;\r\n\t\tif (this.accessoryFace) yield this.accessoryFace;\r\n\t}\r\n}\r\n\r\nclass CharacterChangeLog {\r\n\tconstructor() {\r\n\t\t/** @type {\"human\"|\"elf\"|\"lef\"|\"highlef\"} */\r\n\t\tthis.ear = undefined;\r\n\r\n\t\t/** @type {string[]} */\r\n\t\tthis.useEquip = [];\r\n\r\n\t\t/** @type {string[]} */\r\n\t\tthis.unuseEquip = [];\r\n\t\t\r\n\t\t/** @type {string} - hair2 id */\r\n\t\tthis.hair2 = undefined;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.hairMix2 = undefined;\r\n\r\n\t\t///** @type {string} */\r\n\t\t//this.hair3 = undefined;\r\n\r\n\t\t///** @type {string} */\r\n\t\t//this.hairMix3 = undefined;\r\n\r\n\t\t/** @type {string} weapon => equip id */\r\n\t\tthis.weapon = undefined;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.weaponType = undefined;\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.ear = undefined;\r\n\t\tthis.useEquip = [];\r\n\t\tthis.unuseEquip = [];\r\n\t\tthis.hair2 = undefined;\r\n\t\tthis.hairMix2 = undefined;\r\n\t\t//this.hair3 = undefined;\r\n\t\t//this.hairMix3 = undefined;\r\n\t\tthis.weaponType = undefined;\r\n\t}\r\n}\r\n\r\nexport class CharacterAnimationBase {\r\n\tconstructor() {\r\n\t\tthis._$dirty = 0;//force update vue\r\n\r\n\t\t/** @type {string} - 未完成 */\r\n\t\tthis.job = null;\r\n\t\t/** @type {string} - 未完成 */\r\n\t\tthis.subJob = null;\r\n\r\n\t\t/** @type {ActionAnimation} */\r\n\t\tthis.actani = new ActionAnimation();\r\n\r\n\t\t/** @type {number} - animation speed rate */\r\n\t\tthis.speed = 1;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.fixed_speed = false;\r\n\t\t\r\n\t\tthis._action = \"stand1\";\r\n\t\tthis._action_frame = 0;\r\n\t\tthis._action_time = 0;\r\n\r\n\t\tthis._emotion = \"blink\";\r\n\t\tthis._emotion_frame = 0;\r\n\t\tthis._emotion_time = 0;\r\n\t\tthis._emotion_frame_sequence = [0, 1, 2, 1];\r\n\r\n\t\t/** @type {CharacterSlots} */\r\n\t\tthis.slots = new CharacterSlots();\r\n\r\n\t\t/**\r\n\t\t * is require update render data\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.__require_update = true;\r\n\r\n\t\t/** @type {FragmentTexture[]} */\r\n\t\tthis.__frag_list = [];\r\n\r\n\t\t/** @type {CharacterChangeLog} **/\r\n\t\tthis.$$changeLog = new CharacterChangeLog();\r\n\t}\r\n\r\n\t_clone() {\r\n\t\talert(this.constructor.name + \"::_clone\");\r\n\r\n\t\t/** @type {CharacterAnimationBase} */\r\n\t\tlet nc = new this.constructor();//not must CharacterRender\r\n\t\tif (!nc) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tnc.speed = 0;\r\n\r\n\t\tnc.x = this.x;\r\n\t\tnc.y = this.y;\r\n\t\tnc.angle = this.angle;\r\n\r\n\t\tnc.action = this.action;\r\n\t\tnc.action_frame = this.action_frame;\r\n\r\n\t\tnc.emotion = this._emotion;\r\n\t\tnc.emotion_frame = this.emotion_frame;\r\n\r\n\t\tfor (let i in this.slots) {\r\n\t\t\tlet item = this.slots[i];\r\n\t\t\tif (item) {\r\n\t\t\t\tnc.slots[i] = this.slots[i];//not need colne ?\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nc;\r\n\t}\r\n\t\t\r\n\t_waitFrameTexturesLoaded() {\r\n\t\tlet tasks = [];\r\n\t\tfor (let i in this.slots) {\r\n\t\t\tlet item = this.slots[i];\r\n\t\t\tif (item) {\r\n\t\t\t\tif (typeof item.getFrameCount != \"function\") {\r\n\t\t\t\t\talert('typeof item.getFrameCount != \"function\"');\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t}\r\n\t\t\t\tlet count = item.getFrameCount(this);\r\n\t\t\t\tfor (let j in item.fragments) {\r\n\t\t\t\t\tlet frag = item.fragments[j];\r\n\t\t\t\t\tfor (let k = 0; k < count; ++k) {\r\n\t\t\t\t\t\tlet ft = frag.getFrameTexture(this, k);\r\n\t\t\t\t\t\tif (ft && !ft._isLoaded_or_doload()) {\r\n\t\t\t\t\t\t\ttasks.push(ft.$promise);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n\r\n\t/**\r\n\t * init animation status\r\n\t */\r\n\tinitAnimation() {\r\n\t\t/** @type {string} */\r\n\t\tthis.action = \"stand1\";\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis._action_time = 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis._action_frame = 0;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.emotion = \"blink\";\r\n\t\t\t\r\n\t\t/** @type {number} */\r\n\t\tthis._emotion_time = 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis._emotion_frame = 0;\r\n\t}\r\n\r\n\t/** @type {number} - 0~1 */\r\n\tgetSpeed() {\r\n\t\treturn this.fixed_speed ? 1 : this.speed;\r\n\t}\r\n\r\n\t/**\r\n\t * @type {boolean}\r\n\t */\r\n\tget elfEar() {\r\n\t\tif (this.slots.head) {\r\n\t\t\treturn this.slots.head.elfEar;\r\n\t\t}\r\n\t}\r\n\tset elfEar(value) {\r\n\t\tif (this.slots.head) {\r\n\t\t\tthis.slots.head.elfEar = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {boolean}\r\n\t */\r\n\tget lefEar() {\r\n\t\tif (this.slots.head) {\r\n\t\t\treturn this.slots.head.lefEar;\r\n\t\t}\r\n\t}\r\n\tset lefEar(value) {\r\n\t\tif (this.slots.head) {\r\n\t\t\tthis.slots.head.lefEar = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {boolean}\r\n\t */\r\n\tget highlefEar() {\r\n\t\tif (this.slots.head) {\r\n\t\t\treturn this.slots.head.highlefEar;\r\n\t\t}\r\n\t}\r\n\tset highlefEar(value) {\r\n\t\tif (this.slots.head) {\r\n\t\t\tthis.slots.head.highlefEar = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @returns {\"human\"|\"elf\"|\"lef\"|\"highlef\"} */\r\n\tget ear() {\r\n\t\tif (this.slots.head) {\r\n\t\t\treturn this.slots.head.lefEar ? \"lef\" : (this.slots.head.elfEar ? \"elf\" : (this.slots.head.highlefEar ? \"highlef\" : \"human\"));\r\n\t\t}\r\n\t}\r\n\tset ear(value) {\r\n\t\tif (this.slots.head) {\r\n\t\t\tif (value == \"elf\") {\r\n\t\t\t\tthis.slots.head.elfEar = true;\r\n\t\t\t\tthis.slots.head.lefEar = false;\r\n\t\t\t\tthis.slots.head.highlefEar = false;\r\n\t\t\t\tthis.$$changeLog.ear = value;\r\n\t\t\t}\r\n\t\t\telse if (value == \"lef\") {\r\n\t\t\t\tthis.slots.head.lefEar = true;\r\n\t\t\t\tthis.slots.head.elfEar = false;\r\n\t\t\t\tthis.slots.head.highlefEar = false;\r\n\t\t\t\tthis.$$changeLog.ear = value;\r\n\t\t\t}\r\n\t\t\telse if (value == \"highlef\") {\r\n\t\t\t\tthis.slots.head.elfEar = false;\r\n\t\t\t\tthis.slots.head.lefEar = false;\r\n\t\t\t\tthis.slots.head.highlefEar = true;\r\n\t\t\t\tthis.$$changeLog.ear = value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.slots.head.elfEar = false;\r\n\t\t\t\tthis.slots.head.lefEar = false;\r\n\t\t\t\tthis.slots.head.highlefEar = false;\r\n\t\t\t\tthis.$$changeLog.ear = \"human\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.$$changeLog.ear = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @type {string} */\r\n\tget action() {\r\n\t\treturn this._action;\r\n\t}\r\n\tset action(act) {\r\n\t\tif (this.actani._action != act && this.slots.body) {\r\n\t\t//if (this._action != act && this.slots.body) {\r\n\t\t\t//if (this.slots.body._action_list.indexOf(act) >= 0) {\r\n\t\t\t//\tthis._action = act;\r\n\t\t\t//}\r\n\t\t\t//this._action_frame = 0;\r\n\t\t\t//this._action_time = 0;\r\n\t\t\t////\r\n\t\t\t////this.action_frame_sequence = [...circularSequence(this.action_frame_count)];\r\n\r\n\t\t\tthis._action = act;\r\n\t\t\tthis.actani.reload(act);\r\n\r\n\t\t\tthis.__require_update |= true;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget action_frame() {\r\n\t\tconst frame_count = this.action_frame_count;\r\n\t\tif (frame_count) {\r\n\t\t\treturn this._action_frame % frame_count;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tset action_frame(value) {\r\n\t\tthis._action_time = 0;\r\n\t\tthis._action_frame = value;\r\n\t\tthis.__require_update |= true;\r\n\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!(typeof value == 'number')) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tthis._action_frame = Number(value) | 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} next\r\n\t */\r\n\t_get_action_next_frame(next) {\r\n\t\tconst frame_count = this.action_frame_count;\r\n\t\tif (frame_count) {\r\n\t\t\tlet f = this._action_frame + next;\r\n\t\t\treturn f < 0 ? (frame_count - 1) : (f % frame_count);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget action_time() {\r\n\t\treturn this._action_time;\r\n\t}\r\n\tset action_time(time) {\r\n\t\tconst frame_count = this.action_frame_count;\r\n\r\n\t\tif (frame_count) {\r\n\t\t\tif (time < this.action_delay) {\r\n\t\t\t\tthis._action_time = time;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._action_time = 0;\r\n\t\t\t\t++this._action_frame;\r\n\r\n\t\t\t\tthis.__require_update |= true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {number}\r\n\t */\r\n\tget action_delay() {\r\n\t\tif (this.slots.body) {\r\n\t\t\treturn this.slots.body.getDelay(this);\r\n\t\t}\r\n\t\treturn 180;\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget action_frame_count() {\r\n\t\ttry {\r\n\t\t\tif (this.slots.body) {\r\n\t\t\t\treturn this.slots.body.getFrameCount(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/** @type {string} */\r\n\tget emotion() {\r\n\t\treturn this._emotion;\r\n\t}\r\n\tset emotion(emo) {\r\n\t\tif (this._emotion != emo && this.slots.face && this.slots.face._action_list.indexOf(emo) >= 0) {\r\n\t\t\tthis._emotion = emo;\r\n\t\t\tthis._emotion_frame = 0;\r\n\t\t\tthis._emotion_time = 0;\r\n\r\n\t\t\tthis._emotion_frame_sequence = [...circularSequence(this.emotion_frame_count)];\r\n\r\n\t\t\tthis.__require_update |= true;\r\n\t\t}\r\n\t}\r\n\r\n\t*emotion_frame_sequence_generator(length) {\r\n\t\tfor (; ;) {\r\n\t\t\tyield* circularSequence(length);\r\n\r\n\t\t\tfor (; Math.random() < 0.5;) {\r\n\t\t\t\tyield 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t/** @type {number} */\r\n\tget emotion_frame() {\r\n\t\tlet f = this._emotion_frame_sequence[this._emotion_frame % this._emotion_frame_sequence.length];\r\n\t\treturn f;\r\n\t}\r\n\tset emotion_frame(value) {\r\n\t\tthis._emotion_frame = value;\r\n\t\tthis._emotion_time = 0;\r\n\t\tthis.__require_update |= true;\r\n\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!(typeof value == 'number')) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tthis._emotion_frame = Number(value) | 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} next\r\n\t */\r\n\t_get_emotion_next_frame(next) {\r\n\t\tlet f = this._emotion_frame + next;\r\n\t\tf = f < 0 ? (this._emotion_frame_sequence.length - 1) : (f % this._emotion_frame_sequence.length);\r\n\t\treturn this._emotion_frame_sequence[f];\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget emotion_time() {\r\n\t\treturn this._emotion_time;\r\n\t}\r\n\tset emotion_time(time) {\r\n\t\tif (this.emotion_frame_count) {\r\n\t\t\tif (time < this.emotion_delay) {\r\n\t\t\t\tthis._emotion_time = time;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._emotion_time = 0;\r\n\r\n\t\t\t\t++this._emotion_frame;\r\n\r\n\t\t\t\tthis.__require_update |= true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {number}\r\n\t */\r\n\tget emotion_delay() {\r\n\t\tif (this.slots.face) {\r\n\t\t\treturn this.slots.face.getDelay(this);\r\n\t\t}\r\n\t\treturn 60;\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget emotion_frame_count() {\r\n\t\ttry {\r\n\t\t\tif (this.slots.face) {\r\n\t\t\t\treturn this.slots.face.getFrameCount(this);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp - 0 <= stamp < Infinity\r\n\t */\r\n\t_update(stamp) {\r\n\t\tif (this.actani) {\r\n\t\t\tif (this.actani.isEnd() && this.actani.loop) {\r\n\t\t\t\tthis.actani.reset();\r\n\t\t\t}\r\n\r\n\t\t\tthis.actani.update(stamp, this);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.action_time += stamp;\r\n\t\t}\r\n\r\n\t\tthis.emotion_time += stamp;\r\n\r\n\t\tfor (let i in this.slots) {\r\n\t\t\tlet equip = this.slots[i];\r\n\t\t\tif (equip && equip.effect) {\r\n\t\t\t\tequip.effect.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {any} number  0 < stamp * speed < Infinity\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tstamp *= this.getSpeed();\r\n\r\n\t\tthis._update(stamp);\r\n\t}\r\n\r\n\t__forceUpdate(stamp) {\r\n\t\tthis._$dirty = -Math.random() + Math.random() * 3.1415926535897;\r\n\t\tthis._update(stamp | 0);\r\n\t\tthis.__update_frag_list();\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {number} x\r\n\t * @param {number} y, \r\n\t * @param {number} angle\r\n\t * @param {boolean} flip\r\n\t */\r\n\t_draw(renderer, x, y, angle, flip) {\r\n\t\trenderer.pushGlobalAlpha();\r\n\r\n\t\tif (this.__require_update) {\r\n\t\t\tthis.__update_frag_list();\r\n\t\t\tthis.__require_update = false;\r\n\t\t}\r\n\r\n\t\t//list.filter(a=>a&&a._raw.map).forEach(a=>{ for (let i in a._raw.map) { if (q[i]) { q[i].push(a); } else { q[i] = [a]; } } })\r\n\t\tthis.__draw_list(renderer, this.__frag_list, x, y, angle, flip);\r\n\r\n\t\trenderer.popGlobalAlpha();\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {FragmentTexture[]} list\r\n\t */\r\n\t__draw_list(renderer, list, x, y, angle, flip) {\r\n\t\trenderer.pushMatrix();\r\n\r\n\t\trenderer.translate(x, y);\r\n\t\t\r\n\t\tif (0) {\r\n\t\t\tlet ctx = renderer.ctx;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(0, 0);\r\n\t\t\tctx.lineTo(100, 0);\r\n\t\t\tctx.strokeStyle = \"#F00\";\r\n\t\t\tctx.stroke();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(0, 0);\r\n\t\t\tctx.lineTo(0, 100);\r\n\t\t\tctx.strokeStyle = \"#0F0\";\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\r\n\t\trenderer.rotate(window.m_a || angle);\r\n\r\n\t\tif (flip) {\r\n\t\t\trenderer.scale(-1, 1);\r\n\t\t}\r\n\t\t//{\r\n\t\t//\tlet ctx = renderer.ctx;\r\n\t\t//\tctx.beginPath();\r\n\t\t//\tctx.moveTo(0, 0);\r\n\t\t//\tctx.lineTo(100, 0);\r\n\t\t//\tctx.strokeStyle = \"#F00\";\r\n\t\t//\tctx.stroke();\r\n\t\t//\tctx.beginPath();\r\n\t\t//\tctx.moveTo(0, 0);\r\n\t\t//\tctx.lineTo(0, 100);\r\n\t\t//\tctx.strokeStyle = \"#0F0\";\r\n\t\t//\tctx.stroke();\r\n\t\t//}\r\n\r\n\t\t{\r\n\t\t\tfor (let i in this.slots) {\r\n\t\t\t\tlet equip = this.slots[i];\r\n\t\t\t\tif (equip && equip.effect) {\r\n\t\t\t\t\tequip.effect.render(renderer, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (let i in list) {\r\n\t\t\t\tlet ft = list[i];\r\n\t\t\t\tft.render(renderer, this);\r\n\t\t\t}\r\n\t\t}\r\n\t\trenderer.popMatrix();\r\n\t}\r\n\t/**\r\n\t * @param {Array<CharacterEquipBase>[]} slots\r\n\t * @param {CharacterEquipBase} item\r\n\t */\r\n\t__add_equip_to_frag_list(slots, item) {\r\n\t\t// if equip not use then value is mumber(slot_order) where this.slots._ordered_slot\r\n\t\tif (item == null) {\r\n\t\t\treturn;//debugger;\r\n\t\t}\r\n\t\telse if (item > 0) {// typeof item == 'number'; item != null && (item instanceof CharacterEquipBase || item >= 0)\r\n\t\t\treturn;//continue;\r\n\t\t}\r\n\r\n\t\t// init slots\r\n\t\tfor (let j in item.vslot) {\r\n\t\t\tlet slot = item.vslot[j];\r\n\t\t\tslots[slot] = [];\r\n\t\t}\r\n\r\n\t\tfor (let j in item.fragments) {//foreach equip place\r\n\t\t\tlet slot = sMap[j];\r\n\t\t\tif (slot != null) {\r\n\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\tlet ft = item.fragments[j].getTexture(this);\r\n\t\t\t\tif (ft) {\r\n\t\t\t\t\tif (!slots[slot]) {\r\n\t\t\t\t\t\tslots[slot] = [ft];//cover ??\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tslots[slot].push(ft);//cover ??\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (j == \"default\") {\r\n\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\tlet ft = item.fragments[j].getTexture(this);\r\n\t\t\t\tslot = item._raw.info.islot;\r\n\t\t\t\tif (ft) {\r\n\t\t\t\t\tif (!slots[slot]) {\r\n\t\t\t\t\t\tslots[slot] = [ft];//cover ??\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tslots[slot].push(ft);//cover ??\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\tlet ft = item.fragments[j].getTexture(this);\r\n\t\t\t\tif (ft) {\r\n\t\t\t\t\tthis.__add_frag_to_list(ft);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//item.fragments[j].is_show = true;\r\n\t\t}\r\n\t}\r\n\t__update_frag_list() {\r\n\t\tthis.__frag_list = [];\r\n\r\n\t\t/** @type {Array<CharacterEquipBase>[]} */\r\n\t\tlet slots = {};\r\n\r\n\t\tfor (let i = 2; i <= 3; ++i) {\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet item = this.slots[\"_hair\" + i];\r\n\r\n\t\t\tthis.__add_equip_to_frag_list(slots, item);\r\n\t\t}\r\n\t\tfor (let i in this.slots._ordered_slot) {\r\n\t\t\t/** @type {CharacterEquipBase} */\r\n\t\t\tlet item = this.slots._ordered_slot[i];\r\n\r\n\t\t\tthis.__add_equip_to_frag_list(slots, item);\r\n\t\t}\r\n\r\n\t\tlet is_back = false;\r\n\r\n\t\tfor (let i in slots) {\r\n\t\t\t/** @type {FragmentTexture[]} */\r\n\t\t\tlet fts = slots[i];\r\n\t\t\tfor (let j in fts) {\r\n\t\t\t\t/** @type {FragmentTexture} */\r\n\t\t\t\tlet ft = fts[j];\r\n\t\t\t\tif (is_back) {\r\n\t\t\t\t\tif (ft._place.startsWith(\"face\")) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (ft._place.startsWith(\"backHair\")) {\r\n\t\t\t\t\tis_back = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.__add_frag_to_list(ft);\r\n\t\t\t}\r\n\t\t}\r\n\t\t{\r\n\t\t\tlet ae = this.__frag_list[114];//TODO: Ae\r\n\t\t\tif (ae) {\r\n\t\t\t\tthis.__frag_list.push(ae);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._calcBoundBox();\r\n\t}\r\n\t/** @param {FragmentTexture} ft */\r\n\t__add_frag_to_list(ft) {\r\n\t\tft.update(this);\r\n\t\tthis.__frag_list[ft.z] = ft;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * calc current frame bound box and restore result\r\n\t * @returns {Rectangle}\r\n\t */\r\n\t_calcBoundBox() {\r\n\t\tlet left = 0, top = 0, right = 0, bottom = 0;\r\n\r\n\t\tfor (let i in this.__frag_list) {\r\n\t\t\tlet ft = this.__frag_list[i];\r\n\t\t\tif (ft.texture) {\r\n\t\t\t\tlet x0 = ft.relative.x;\r\n\t\t\t\tlet y0 = ft.relative.y;\r\n\t\t\t\tlet x1 = x0 + ft.width;\r\n\t\t\t\tlet y1 = y0 + ft.height;\r\n\r\n\t\t\t\tleft = Math.min(left, x0);\r\n\t\t\t\ttop = Math.min(top, y0);\r\n\t\t\t\tright = Math.max(right, x1);\r\n\t\t\t\tbottom = Math.max(bottom, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._boundBox = new Rectangle(\r\n\t\t\tMath.trunc(left),\r\n\t\t\tMath.trunc(top),\r\n\t\t\tMath.trunc(right - left),\r\n\t\t\tMath.trunc(bottom - top)\r\n\t\t);\r\n\t\treturn this._boundBox;\r\n\t}\r\n\t\r\n\ttoJSON() {\r\n\t\tlet obj = {\r\n\t\t\thair2: this.slots._hair2.id,\r\n\t\t\thairMix2: this.slots.hairMix2,\r\n\t\t\tslots: this.slots.toJSON(),\r\n\t\t};\r\n\r\n\t\tif (this.slots.head.elfEar) {\r\n\t\t\tobj.ear = \"elf\";\r\n\t\t}\r\n\t\telse if (this.slots.head.lefEar) {\r\n\t\t\tobj.ear = \"lef\";\r\n\t\t}\r\n\t\telse if (this.slots.head.highlefEar) {\r\n\t\t\tobj.ear = \"highlef\";\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t}\r\n}\r\n\r\nexport class CharacterRenderer extends CharacterAnimationBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t/** @type {number} - position x */\r\n\t\tthis.x = 0;\r\n\t\t/** @type {number} - position y */\r\n\t\tthis.y = 0;\r\n\r\n\t\t/** @type {number} - where layer */\r\n\t\tthis.z = 5;\r\n\r\n\t\t/** @type {number} - translate x once frame */\r\n\t\tthis.tx = 0;\r\n\t\t/** @type {number} - translate y once frame */\r\n\t\tthis.ty = 0;\r\n\t\t\r\n\t\tthis.angle = 0;\r\n\t\tthis.front = -1;\r\n\r\n\t\t/** @type {Promise<void>[]} */\r\n\t\tthis.__load_task = [];\r\n\r\n\t\t/** @type {function(IRenderer)} */\r\n\t\tthis.render = function (renderer) {\r\n\t\t\t//not ready to render\r\n\t\t\t//if load then set load render = _render\r\n\t\t}\r\n\r\n\t\t/** @type {Rectangle} */\r\n\t\tthis._boundBox = null;\r\n\t}\r\n\r\n\tstatic async Init() {\r\n\t\tlet result = await Promise.all([\r\n\t\t\t$get.data(\"/zmap\"),\r\n\t\t\t$get.data(\"/smap\"),\r\n\t\t\tItemEffect.Init(),\r\n\t\t\tActionAnimation.Init(),//action definition\r\n\t\t]);\r\n\t\t\r\n\t\tzMap = {};\r\n\t\tObject.keys(result[0]).reverse().forEach((k, i) => zMap[k] = i + 1);\r\n\r\n\t\tsMap = result[1];\r\n\t}\r\n\r\n\tload() {\r\n\t\t//load body and head for calc relative position\r\n\t\tthis.use(\"00002012\");\r\n\t\tthis.use(\"00012012\");\r\n\r\n\t\tlet $promise = Promise.all([...this.__load_task]);\r\n\t\t(function (that, $promise) {\r\n\t\t\t$promise.then(function (result) {\r\n\t\t\t\tthat.initAnimation();\r\n\t\t\t\tthat.render = that._render;\r\n\t\t\t});\r\n\t\t})(this, $promise);\r\n\r\n\t\treturn $promise;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {any} number  0 < stamp * speed < Infinity\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis.waitLoaded();\r\n\t\tsuper.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\t_render(renderer) {\r\n\t\tconst x = Math.trunc(this.x + this.tx);\r\n\t\tconst y = Math.trunc(this.y + this.ty);\r\n\t\t\r\n\t\tthis._draw(renderer, x, y, this.angle, this.front >= 1);\r\n\t\t\r\n\t\t//this.tx = 0;//auto clear\r\n\t\t//this.ty = 0;//auto clear\r\n\t}\r\n\t\r\n\t_setup_test() {\r\n\t\tthis.use(\"00026509\");\r\n\r\n\t\tthis.use(\"00044041\");\r\n\r\n\t\t//this.use(\"01022274\");\r\n\r\n\t\tthis.use(\"01053169\");\r\n\r\n\t\tthis.use(\"01071077\");\r\n\r\n\t\t//this.use(\"01102960\");\r\n\t}\r\n\r\n\t\r\n\tasync __synchronize(stamp) {\r\n\t\tthis.__forceUpdate(stamp);\r\n\t\r\n\t\tawait this.waitLoaded();\r\n\t\tawait this._waitFrameTexturesLoaded();\r\n\t}\r\n\tasync waitLoaded() {\r\n\t\tlet tasks = this.__load_task;\r\n\t\tif (tasks && tasks.length) {\r\n\t\t\tawait Promise.all(tasks).then(() => {\r\n\t\t\t\tthis.__load_task = [];\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t//isLoading() {\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @param {string} category - category of cash-weapon\r\n\t */\r\n\tasync use(id, category) {\r\n\t\tif (!category) {\r\n\t\t\tcategory = ItemCategoryInfo.getJobWeaponCategory(this.job);\r\n\t\t}\r\n\t\tconst item_type = id[0];\r\n\t\tswitch (item_type) {\r\n\t\t\tcase \"0\"://equip\r\n\t\t\t\tif (ItemCategoryInfo.isCashWeapon(id)) {\r\n\t\t\t\t\t//this.$$changeLog.weaponType = ss[1];/??\r\n\t\t\t\t\tthis.$$changeLog.weapon = id;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.$$changeLog.useEquip.push(id);\r\n\t\t\t\t}\r\n\t\t\t\t//\r\n\t\t\t\tlet task = this.slots._use(id, null, category);\r\n\t\t\t\tthis.__load_task.push(task);\r\n\t\t\t\tawait task;\r\n\t\t\t\tthis._calcBoundBox();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t */\r\n\tunuse(id) {\r\n\t\tdebugger;\r\n\t\tif (id[0] == \"0\") {//equip\r\n\t\t\tlet result = this.slots._unuse(id);\r\n\t\t\tif (result) {\r\n\t\t\t\tthis.$$changeLog.unuseEquip.push(id);\r\n\t\t\t\tthis._calcBoundBox();\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\t_parse(code) {\r\n\t\tif (!code) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet es = code.split(\",\");\r\n\t\tthis.slots._clear();\r\n\t\tes.forEach((v, i, a) => {\r\n\t\t\tif (v.indexOf(\"|\") >= 0) {\r\n\t\t\t\tconst ss = v.split(\"|\");\r\n\t\t\t\tconst cate = ItemCategoryInfo.get(ss[0]);\r\n\t\t\t\tlet id;\r\n\t\t\t\tif (cate.slot == \"face\") {\r\n\t\t\t\t\tid = ss[1];\r\n\t\t\t\t\tthis.$$changeLog.useEquip.push(id);\r\n\t\t\t\t\t//\r\n\t\t\t\t\tthis.use(id);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (cate.slot == \"hair\") {\r\n\t\t\t\t\tconst slots = this.slots;\r\n\t\t\t\t\tlet h2 = ss[1];\r\n\t\t\t\t\tlet h3 = ss[2];\r\n\t\t\t\t\t//\r\n\t\t\t\t\tid = ss[0];\r\n\t\t\t\t\tthis.$$changeLog.useEquip.push(id);\r\n\t\t\t\t\t//\r\n\t\t\t\t\tthis.use(id).then(() => {\r\n\t\t\t\t\t\tif (h2 && h2.indexOf(\"%\") >= 0) {\r\n\t\t\t\t\t\t\tlet hc = h2.split(\"%\");\r\n\t\t\t\t\t\t\tconst c2 = hc[0];\r\n\t\t\t\t\t\t\tconst m2 = hc[1] / 100;\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tthis.$$changeLog.hair2 = c2;\r\n\t\t\t\t\t\t\tthis.$$changeLog.hairMix2 = m2;\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tslots.hairColor2 = c2;\r\n\t\t\t\t\t\t\tslots.hairMix2 = m2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (h3 && h3.indexOf(\"%\") >= 0) {\r\n\t\t\t\t\t\t\tlet hc = h3.split(\"%\");\r\n\t\t\t\t\t\t\tconst c3 = hc[0];\r\n\t\t\t\t\t\t\tconst m3 = hc[1] / 100;\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tthis.$$changeLog.hair3 = c3;\r\n\t\t\t\t\t\t\tthis.$$changeLog.hairMix3 = m3;\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\tslots.hairColor3 = hc[0];\r\n\t\t\t\t\t\t\tslots.hairMix4 = hc[1] / 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse if (cate.slot == \"weapon\") {\r\n\t\t\t\t\tthis.$$changeLog.weaponType = ss[1];\r\n\t\t\t\t\tthis.$$changeLog.weapon = id;\r\n\t\t\t\t\tthis.use.apply(this, ss, ss[1]);//this.use(ss[0], ss[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (Number.isFinite(parseInt(v, 10))) {\r\n\t\t\t\tthis.use(v);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @type {string} col\r\n\t */\r\n\tget hairColor() {\r\n\t\tif (this.slots.hair) {\r\n\t\t\treturn CharacterRenderConfig.getHairColor(this.slots.hair.id);\r\n\t\t}\r\n\t\treturn \"0\";\r\n\t}\r\n\tset hairColor(col) {\r\n\t\tif (this.slots.hair && col != this.hairColor) {\r\n\t\t\tlet id = CharacterRenderConfig.getColorHairID(this.slots.hair.id, col);\r\n\t\t\tthis.use(id);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} col\r\n\t */\r\n\tget faceColor() {\r\n\t\tif (this.slots.face) {\r\n\t\t\treturn CharacterRenderConfig.getFaceColor(this.slots.face.id);\r\n\t\t}\r\n\t\treturn \"0\";\r\n\t}\r\n\tset faceColor(col) {\r\n\t\tif (this.slots.face && col != this.faceColor) {\r\n\t\t\tlet id = CharacterRenderConfig.getColorFaceID(this.slots.face.id, col);\r\n\t\t\tthis.use(id);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CharacterChangeLog} changeLog\r\n\t */\r\n\tcommitChange(changeLog) {\r\n\t\tif (changeLog.ear) {\r\n\t\t\tthis.ear = changeLog.ear;\r\n\t\t}\r\n\r\n\t\tif (this.useEquip) {\r\n\t\t\tfor (let id of this.useEquip) {\r\n\t\t\t\tthis.use(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.unuseEquip) {\r\n\t\t\tfor (let id of this.unuseEquip) {\r\n\t\t\t\tthis.unuse(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (changeLog.hair2 && changeLog.hairMix2) {\r\n\t\t\tthis.slots.hairColor2 = changeLog.hair2;\r\n\t\t\tthis.slots.hairMix2 = changeLog.hairMix2;\r\n\t\t}\r\n\r\n\t\tif (changeLog.hair3 && changeLog.hairMix3) {\r\n\t\t\t//this.slots.hairColor3 = changeLog.hair3;\r\n\t\t\t//this.slots.hairMix3 = changeLog.hairMix3;\r\n\t\t}\r\n\t\t\r\n\t\tif (changeLog.weapon && changeLog.weaponType) {\r\n\t\t\tthis.use(changeLog.weapon, changeLog.weaponType);\r\n\t\t}\r\n\t}\r\n\r\n\t_stringify(genCode) {\r\n\t\tlet result = this.slots._stringify();\r\n\t\tif (genCode) {\r\n\t\t\treturn `chara._parse('${result}')`;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t_outlink() {\r\n\t\tif (this.slots.body && this.slots.body.id && this.slots.face && this.slots.face.id && this.action && this.emotion) {\r\n\t\t\tlet link = \"https://labs.maplestory.io/api/GMS/latest/character/center/\" + this.slots.body.id + \"/\";\r\n\t\t\tlet slots = [...this.slots.enumerate()].map(a => parseInt(a.id, 10));\r\n\r\n\t\t\tslots[0] = this.slots.face.id + \":\" + this.emotion;\r\n\r\n\t\t\tlink += slots.join(\",\");\r\n\r\n\t\t\tlink += \"/\" + this.action + \"?showears=\" + (this.elfEar ? \"true\" : \"false\");\r\n\r\n\t\t\tlink += \"&showLefEars=\" + (this.lefEar ? \"true\" : \"false\");\r\n\r\n\t\t\treturn link;\r\n\t\t}\r\n\t\tconsole.log(\"character need body, face, action, emotion\");\r\n\t}\r\n\r\n\t_download() {\r\n\t\twindow.open(this._outlink());\r\n\t}\r\n\r\n\t_save_as_svg() {\r\n\t\tthis.__texture_to_base64().then(frag_list => {\r\n\t\t\tlet file_name = this.id + \".svg\";\r\n\t\t\t//let frag_list = this.__frag_list;\r\n\t\r\n\t\t\tlet svg = '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >';\r\n\r\n\t\t\tsvg += '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink= \"http://www.w3.org/1999/xlink\">\\n';// width=\"64\" height=\"96\"\r\n\r\n\t\t\tsvg += '<g transform=\"translate(32, 96)\">';\r\n\t\t\tfrag_list.forEach(function (ft) {\r\n\t\t\t\tif (ft) {\r\n\t\t\t\t\tlet clz = ft.classList;\r\n\t\t\t\t\tsvg += `\\t<image class=\"${clz}\" opacity=\"${ft.opacity}\" x=\"${ft.relative.x}\" y=\"${ft.relative.y}\" width=\"${ft.width}\" height=\"${ft.height}\" xlink:href=\"${ft._url}\"></image>\\n`;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tsvg += '</g>';\r\n\r\n\t\t\tsvg += '<text x=\"0\" y=\"122\" fill=\"transparent\">' + this._stringify(false) + '</text>';\r\n\r\n\t\t\tsvg += '</svg>';\r\n\r\n\t\t\t//let url = \"data:text/plain;utf8,\" + svg;\r\n\r\n\t\t\tdebugger;\r\n\r\n\t\t\t//window.open(url);\r\n\t\t\tDownloadData(svg, \"image/svg+xml;utf8\", file_name);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * \"data:image/png;base64,[...]\"\r\n\t * @param {IRenderer} renderer\r\n\t * @param {string} filename\r\n\t * @returns {string}\r\n\t */\r\n\t_save_as_png(renderer, filename) {\r\n\t\tlet bound = this._calcBoundBox();\r\n\t\tlet size = bound.size;\r\n\t\tlet x = -bound.left;\r\n\t\tlet y = bound.height;\r\n\t\tlet angle = 0;\r\n\t\tlet front = false;\r\n\r\n\t\t// use Canvas2, must not fail\r\n\t\ttry {\r\n\t\t\trenderer.$swapCanvas();\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//save Canvas2 size, current ctx is _ctx2\r\n\t\tconst c2w = renderer._ctx2.canvas.width;\r\n\t\tconst c2h = renderer._ctx2.canvas.height;\r\n\t\t//\r\n\t\trenderer.ctx.canvas.width = size.x;\r\n\t\trenderer.ctx.canvas.height = size.y;\r\n\r\n\t\ttry {\r\n\t\t\tthis._draw(renderer, x, y, angle, front);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\t// nothing\r\n\t\t}\r\n\r\n\t\tlet base64 = renderer.ctx.canvas.toDataURL(\"image/png\");\r\n\t\t{\r\n\t\t\tlet elem = document.createElement(\"a\");\r\n\r\n\t\t\tlet name = `${filename ? (filename+\".\"):\"\"}${this.action}[${this.action_frame}].${this.emotion}[${this.emotion_frame}].png`;\r\n\r\n\t\t\telem.id = name;\r\n\t\t\telem.download = name;\r\n\t\t\telem.href = base64;\r\n\r\n\t\t\tdocument.body.appendChild(elem);\r\n\t\t\telem.click();\r\n\t\t\tdocument.body.removeChild(elem);\r\n\t\t}\r\n\r\n\t\t//restore Canvas2 size, current ctx is _ctx2\r\n\t\trenderer.ctx.canvas.width = c2w;\r\n\t\trenderer.ctx.canvas.height = c2h;\r\n\r\n\t\t// restore Canvas, must not fail\r\n\t\ttry {\r\n\t\t\trenderer.$swapCanvas();\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\t// nothing\r\n\t\t}\r\n\r\n\t\treturn base64;\r\n\t}\r\n\t\r\n\tasync __texture_to_base64() {\r\n\t\tlet frag_list = this.__frag_list;\r\n\t\tlet tasks = [];\r\n\r\n\t\tfrag_list.forEach(function (ft) {\r\n\t\t\tif (!ft) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!ft._url.startsWith(\"data:\")) {\r\n\t\t\t\ttasks.push((async function () {\r\n\t\t\t\t\tft.texture.$src = ft._url;\r\n\t\t\t\t\tft._url = await toDataURL(ft._url);\r\n\t\t\t\t\treturn ft;\r\n\t\t\t\t})());\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttasks.push(ft);\r\n\t\t\t}\r\n\t\t\tif (ft.graph2) {\r\n\t\t\t\tlet src = ft.graph2._url;\r\n\t\t\t\tif (!src.startsWith(\"data:\")) {\r\n\t\t\t\t\ttasks.push((async function () {\r\n\t\t\t\t\t\tft.texture.$src = ft._url;\r\n\t\t\t\t\t\tft.graph2._url = await toDataURL(src);\r\n\t\t\t\t\t\treturn ft.graph2;\r\n\t\t\t\t\t})());\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttasks.push(ft.graph2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ft.graph3) {\r\n\t\t\t\tlet src = ft.graph3._url;\r\n\t\t\t\tif (!src.startsWith(\"data:\")) {\r\n\t\t\t\t\ttasks.push((async function () {\r\n\t\t\t\t\t\tft.texture.$src = ft._url;\r\n\t\t\t\t\t\tft.graph3._url = await toDataURL(src);\r\n\t\t\t\t\t\treturn ft.graph3;\r\n\t\t\t\t\t})());\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttasks.push(ft.graph3);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n}\r\nAddInitTask(CharacterRenderer.Init());\r\n\r\nfunction* circularSequence(length) {\r\n\tlet i = 0;\r\n\tfor (; i < length; ++i) {//a: 0, 1, 2, 3, ...b\r\n\t\tyield i;\r\n\t}\r\n\tfor (i -= 2; i > 0; --i) {//b: 2, 1, ...a\r\n\t\tyield i;\r\n\t}\r\n}\r\n\r\nfunction* linearSequence(length) {\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tyield i;\r\n\t}\r\n}\r\n\r\nfunction extract_number(input) {\r\n\treturn String(input).match(/(-?\\d+\\.?\\d*)|(\\.\\d*)/g);\r\n}\r\n\r\n/**\r\n * image href to data url\r\n */\r\nfunction toDataURL(url) {\r\n\treturn new Promise(function (resolve, reject) {\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\t\txhr.onload = function () {\r\n\t\t\tlet reader = new FileReader();\r\n\t\t\treader.onloadend = function () {\r\n\t\t\t\tresolve(reader.result);\r\n\t\t\t}\r\n\t\t\treader.onerror = function (ev) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\treject(ev);\r\n\t\t\t}\r\n\t\t\treader.readAsDataURL(xhr.response);\r\n\t\t};\r\n\t\txhr.open('GET', url);\r\n\t\txhr.responseType = 'blob';\r\n\t\txhr.send();\r\n\t});\r\n}\r\n","\r\nimport jQuery from \"jquery\";\r\n\r\nimport \"jquery-ui/themes/base/core.css\";\r\nimport \"jquery-ui/themes/base/theme.css\";\r\nimport \"jquery-ui/themes/base/selectable.css\";\r\nimport \"jquery-ui/themes/base/sortable.css\";\r\nimport \"jquery-ui/themes/base/draggable.css\";\r\n\r\nimport \"jquery-ui/ui/core\";\r\nimport \"jquery-ui/ui/widgets/selectable\";\r\nimport \"jquery-ui/ui/widgets/sortable\";\r\nimport \"jquery-ui/ui/widgets/draggable\";\r\nimport \"jquery-ui/ui/disable-selection\";\r\nimport \"jquery-ui/ui/position\";\r\nimport \"jquery-ui/ui/effect\";\r\n\r\nimport { } from \"./util.js\";\r\n\r\nimport Vue from \"vue\";\r\nimport Vuex from \"vuex\";\r\n\r\nwindow.jQuery = jQuery;\r\nwindow.$ = jQuery;\r\n\r\nVue.config.productionTip = false;\r\n\r\nVue.use(Vuex);\r\n\r\nif (!window.onwheel) {\r\n\twindow.onwheel = function () {\r\n\t}\r\n}\r\n\r\nlet init_tasks = [];\r\n\r\nexport function AddInitTask(task) {\r\n\tinit_tasks.push(task);\r\n}\r\n\r\nexport function InitAll() {\r\n\tlet a = Promise.all(init_tasks);\r\n\tinit_tasks = [];\r\n\treturn a;\r\n}\r\n","\r\nimport { IRenderer } from '../IRenderer.js';\r\nimport { Sprite } from '../Sprite.js';\r\n\r\n\r\nexport class ChatBalloon {\r\n\tconstructor() {\r\n\t\tthis._raw = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {any} style\r\n\t */\r\n\tasync load(style) {\r\n\t\tconst _d_path = [this.constructor._base_path, style].join(\"/\");\r\n\t\t//const _i_path = _d_path;\r\n\t\t\r\n\t\tObject.defineProperty(this, \"_raw\", {\r\n\t\t\tvalue: await $get.data(_d_path),\r\n\t\t});\r\n\r\n\t\tthis.nw = new Sprite(this._raw.nw);\r\n\t\t//this.nw._url = _i_path + \"/nw\";\r\n\r\n\t\tthis.n = new Sprite(this._raw.n);\r\n\t\t//this.n._url = _i_path + \"/n\";\r\n\r\n\t\tthis.ne = new Sprite(this._raw.ne);\r\n\t\t//this.ne._url = _i_path + \"/ne\";\r\n\r\n\t\tthis.w = new Sprite(this._raw.w);\r\n\t\t//this.w._url = _i_path + \"/w\";\r\n\r\n\t\tthis.c = new Sprite(this._raw.c);\r\n\t\t//this.c._url = _i_path + \"/c\";\r\n\r\n\t\tthis.e = new Sprite(this._raw.e);\r\n\t\t//this.e._url = _i_path + \"/e\";\r\n\r\n\t\tthis.sw = new Sprite(this._raw.sw);\r\n\t\t//this.sw._url = _i_path + \"/sw\";\r\n\r\n\t\tthis.s = new Sprite(this._raw.s);\r\n\t\t//this.s._url = _i_path + \"/s\";\r\n\r\n\t\tthis.se = new Sprite(this._raw.se);\r\n\t\t//this.se._url = _i_path + \"/se\";\r\n\r\n\t\tthis.arrow = new Sprite(this._raw.arrow);\r\n\t\t//this.arrow._url = _i_path + \"/arrow\";\r\n\r\n\t\t//this._pat_c = ctx.createPattern(this.c, \"repeat\");\r\n\r\n\t\tChatBalloon.cache[style] = this;\r\n\t}\r\n\r\n\t/*\r\n\t1 12345 12345 1 : 5\r\n\t2 12345 12345 12345\r\n\t3 12345 12345 12345\r\n\t4 12345 12345 12345\r\n\t5 12345 12345 12345\r\n\t6 xxx12 34512 34\r\n\t */\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {string} text - length = chat.value.length + \" : \".length + name.length = 70 + 3 + name.length\r\n\t * @param {number} x - chat balloon arrow bottom pos.x\r\n\t * @param {number} y - chat balloon arrow bottom pos.y\r\n\t */\r\n\tdraw(renderer, text, x, y) {\r\n\t\tlet lines = [];\r\n\t\tfor (let i = 0; i < text.length; i += 12) {\r\n\t\t\tlet line = text.slice(i, i + 12);\r\n\t\t\tlines.push(line);\r\n\t\t}\r\n\t\tif (!lines.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst LINE_HEIGHT = this.c.height;// = fontSize(12) + PADDING_TOP(2)\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tconst PADDING_LEFT = 0, PADDING_TOP = 0, PADDING_RIGHT = 0, PADDING_BOTTOM = 0;\r\n\r\n\t\tctx.font = \"12px 微軟正黑體\";//新細明體\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"top\";//alphabetic\r\n\r\n\t\tconst _tw = lines.map(line => ctx.measureText(line).width + PADDING_LEFT + PADDING_RIGHT).sort((a, b) => b - a)[0];\r\n\t\tconst tw = Math.ceil(_tw / this.n.width) * this.n.width;\r\n\t\tconst hw = tw / 2;\r\n\t\tconst th = lines.length * LINE_HEIGHT + PADDING_TOP + PADDING_BOTTOM;\r\n\r\n\t\tx = Math.trunc((x - hw));\r\n\t\ty = Math.trunc((y - th) - this.arrow.height);\r\n\r\n\t\tthis.nw.draw2(x, y);\r\n\t\tthis.n._drawPattern(x, y, tw, this.n.height);\r\n\t\tthis.ne.draw2(x + tw, y);\r\n\r\n\t\tconst xw = this.w.width - this.w.x;\r\n\r\n\t\tthis.w._drawPattern(x + xw, y, this.w.width, th);\r\n\t\tthis.c._drawPattern(x + xw, y, tw, th);\r\n\t\tthis.e._drawPattern(x + xw + tw, y, this.e.width, th);\r\n\r\n\t\tconst arrow_hw = this.arrow.width / 2;\r\n\t\tconst hw_arrow_hw = hw - arrow_hw;\r\n\r\n\t\tthis.sw.draw2(x, y + th);\r\n\t\tthis.s._drawPattern(x, y + th, hw_arrow_hw, this.s.height);\r\n\t\tthis.s._drawPattern(x + hw + arrow_hw, y + th, hw_arrow_hw, this.s.height);\r\n\t\tthis.se.draw2(x + tw, y + th);\r\n\r\n\t\tthis.arrow.draw2i(x - arrow_hw + hw, y + th);\r\n\t\t\r\n\t\tfor (let i = 0, cy = y; i < lines.length; ++i, cy += LINE_HEIGHT) {\r\n\t\t\tlet line = lines[i];\r\n\r\n\t\t\t//if (this.constructor.DEBUG) {\r\n\t\t\t//\tctx.beginPath();\r\n\t\t\t//\tctx.strokeStyle = \"red\";\r\n\t\t\t//\tctx.strokeRect(x + PADDING_LEFT, cy + PADDING_TOP, tw, LINE_HEIGHT);\r\n\t\t\t//}\r\n\t\t\r\n\t\t\tctx.fillStyle = \"black\";\r\n\t\t\tctx.fillText(line, x + hw + PADDING_LEFT, cy + PADDING_TOP);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic get _base_path() {\r\n\t\treturn \"/UI/ChatBalloon\";\r\n\t}\r\n\r\n\t//static get DEBUG() {\r\n\t//\treturn false;\r\n\t//}\r\n}\r\n\r\n/** @type {{[style:number]:ChatBalloon}} */\r\nChatBalloon.cache = {};\r\n\r\nwindow.$images_ChatBalloon = ChatBalloon.cache;\r\n","﻿\r\nimport { GameStateManager } from \"../game/GameState.js\";\r\n\r\nimport { SceneMap } from \"../game/Map.js\";\r\nimport { SceneCharacter, SceneRemoteCharacter } from \"../game/SceneCharacter.js\";\r\n\r\nimport { CharacterMoveElem } from \"../Client/PMovePath.js\";//debug\r\nimport { $RequestPacket_SelectChara, $ResponsePacket_SelectChara,\r\n\t\t $Packet_RemoteChat,\r\n\t\t $Packet_CharacterMove,\r\n\t\t} from \"../Common/Packet\";//debug\r\n\r\nimport { app as gApp } from \"../index.js\";//debug\r\n\r\n//(function (window) {\r\n//\tlet elemSc = document.getElementById(\"io\");\r\n//\tfunction conn_io() {\r\n//\t\treturn new Promise(function (resolve, reject) {\r\n//\t\t\tif (!elemSc) {\r\n//\t\t\t\telemSc = document.createElement(\"SCRIPT\");\r\n//\t\t\t\telemSc.id = \"io\";\r\n//\t\t\t\telemSc.src = \"//localhost:8787/socket.io/socket.io.js\";\r\n//\t\t\t\telemSc.onload = function () {\r\n//\t\t\t\t\tresolve(true);\r\n//\t\t\t\t};\r\n//\t\t\t\tdocument.body.append(elemSc);\r\n//\t\t\t}\r\n//\t\t\telse {\r\n//\t\t\t\tresolve(true);\r\n//\t\t\t}\r\n//\t\t});\r\n//\t};\r\n//\tconn_io().then(function () {\r\n//\t\tlet socket = io(\"//localhost:8787\");\r\n//\t\tsocket.emit(\"chat\", \"hello\");\r\n//\t\tsocket.on(\"gWvs\", function (msg) {\r\n//\t\t\tconsole.log(\"gWvs: \" + msg);\r\n//\t\t});\r\n//\t});\r\n//\r\n//\twindow.$io = socket;\r\n//})(window);\r\n\r\nclass $Socket {\r\n\t/**\r\n\t * socket.emit(eventName[, ...args])\r\n\t * return server answer\r\n\t * @param {string} eventName\r\n\t * @param {any} data\r\n\t * @returns {Promise<any>}\r\n\t */\r\n\temit(eventName, data) {\r\n\t}\r\n\ton(eventName, callback) {\r\n\t}\r\n\tonce(eventName, data) {\r\n\t}\r\n}\r\n\r\nexport class Client {\r\n\tconstructor() {\r\n\t\t/** @type {$Socket} */\r\n\t\tthis.socket = this._conn();\r\n\t\twindow.$io = this.socket;\r\n\r\n\t\t/** @type {{[id:string]:SceneCharacter}} */\r\n\t\tthis.charaMap = {};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} charaId\r\n\t * @param {function(SceneCharacter)} cbfunc\r\n\t */\r\n\t_findChara(charaId, cbfunc) {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (typeof cbfunc != 'function') {\r\n\t\t\t\tconsole.error(new TypeError());\r\n\t\t\t}\r\n\t\t}\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tlet chara = this.charaMap[charaId];\r\n\r\n\t\tif (chara) {\r\n\t\t\tcbfunc.call(this, chara);\r\n\t\t}\r\n\t\t//else {\r\n\t\t//\talert(`chara['${charaId}'] not exist`);\r\n\t\t//}\r\n\t}\r\n\t/**\r\n\t * _addRemoteCharaPacketListener(eventName, fnAck(...))\r\n\t * @param {string} eventName\r\n\t * @param {function(...any, function(...any):void)} listener\r\n\t */\r\n\t_addRemoteCharaPacketListener(eventName, listener) {\r\n\t\tthis.socket.on(eventName, (...args) => {\r\n\t\t\t/** @type {string} */\r\n\t\t\tlet charaId = args[0].id;\r\n\r\n\t\t\t/** @type {SceneCharacter} */\r\n\t\t\tlet chara = this.charaMap[charaId];\r\n\r\n\t\t\tif (chara) {\r\n\t\t\t\tlistener.call(this, chara, ...args);//listener(chara, packet[, ...packet], fnAck)\r\n\t\t\t}\r\n\t\t\t//else {\r\n\t\t\t//\talert(`chara['${charaId}'] not exist`);\r\n\t\t\t//}\r\n\t\t});\r\n\t}\r\n\r\n\t/** @returns {$Socket} */\r\n\t_conn() {\r\n\t\tlet socket;\r\n\r\n\t\tif (window.io != null) {\r\n\t\t\tlet url = new URL(window.location);\r\n\t\t\turl.port = 8787;\r\n\r\n\t\t\tsocket = io(url.href);\r\n\r\n\t\t\tconst emit = socket.emit;\r\n\r\n\t\t\tsocket.emit = function (eventName, data) {\r\n\t\t\t\t//let cbfunc = arguments[arguments.length - 1];\r\n\t\t\t\t//if (typeof cbfunc == 'function') {\r\n\t\t\t\t//\temit(eventName, data, cbfunc);\r\n\t\t\t\t//}\r\n\t\t\t\t//else {\r\n\t\t\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\t\t\temit.call(socket, eventName, data, function () {\r\n\t\t\t\t\t\tresolve.apply(this, arguments);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t//}\r\n\t\t\t};\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsocket = {\r\n\t\t\t\temit() {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t},\r\n\t\t\t\ton() {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t},\r\n\t\t\t\tonce() {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn socket;\r\n\t}\r\n\r\n\t/** @type {SceneMap} */\r\n\tget $scene_map() {\r\n\t\treturn window.scene_map;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} account\r\n\t * @param {string} password\r\n\t */\r\n\tasync login(account, password) {\r\n\t\tlet result = await this.socket.emit(\"login\", {\r\n\t\t\taccount: \"aaa\",\r\n\t\t\tpassword: \"aaa\",\r\n\t\t});\r\n\t\tif (result) {\r\n\t\t\tconsole.info(\"login\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.info(\"login failed\");\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} world\r\n\t * @param {number} channel\r\n\t */\r\n\tasync selectWorld(world, channel) {\r\n\t\tlet result = await this.socket.emit(\"selectWorld\", {\r\n\t\t\tworld: 0,\r\n\t\t\tchannel: 0,\r\n\t\t});\r\n\t\tif (result) {\r\n\t\t\tconsole.info(\"selectWorld\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.info(\"selectWorld failed\");\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {any} charID\r\n\t */\r\n\tasync selectChara(charID) {\r\n\t\t/** @type {$RequestPacket_SelectChara} */\r\n\t\tlet req = new $RequestPacket_SelectChara();\r\n\t\t\r\n\t\t/** @type {$Packet_SelectChara} */\r\n\t\tlet ackPacket = await this.socket.emit(\"selectChara\", {\r\n\t\t\tid: 123,\r\n\t\t});\r\n\t\tconst charaData = ackPacket.charaData;\r\n\t\tconst remoteCharacters = ackPacket.remoteCharacters;\r\n\r\n\t\tif (charaData) {\r\n\t\t\ttry {\r\n\t\t\t\tthis._CreateMyCharacter(charaData);\r\n\t\t\t\tthis.onEnterRemoteChara(remoteCharacters);\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\talert(err.message);\r\n\t\t\t\tconsole.error(err);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\talert(\"selectChara: chara not exist\");\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * online mode\r\n\t */\r\n\tasync _CreateMyCharacter(charaData) {\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tlet chara = await gApp.store.dispatch('_createChara', {\r\n\t\t\templace: {\r\n\t\t\t\tid: charaData.id,\r\n\t\t\t\tcode: charaData.equips_code,\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.chara = chara;\r\n\r\n\t\tthis.$scene_map.load(charaData.mapId);\r\n\r\n\t\tchara._$data = chara._$data || {\r\n\t\t\tguildId: \"\",//guildId == guildName\r\n\t\t\tpartyId: \"\",//partyId == partyName\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * offline mode\r\n\t * @param {{id:string,equips_code:string}} charaData\r\n\t */\r\n\tstatic async _CreateMyCharacter(charaData) {//??\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tlet chara = await gApp.store.dispatch('_createChara', {\r\n\t\t\templace: {\r\n\t\t\t\tid: charaData.id,\r\n\t\t\t\tcode: charaData.equips_code,\r\n\t\t\t}\r\n\t\t});\r\n\t\tchara = chara;\r\n\r\n\t\tchara._$data = chara._$data || {\r\n\t\t\tguildId: \"\",//guildId == guildName\r\n\t\t\tpartyId: \"\",//partyId == partyName\r\n\t\t}\r\n\r\n\t\treturn chara;\r\n\t}\r\n\t/**\r\n\t * @param {$RemotePlayerData[]} packet - characters\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tonEnterRemoteChara(packet) {\r\n\t\tconst characters = packet;\r\n\r\n\t\tlet tasks = characters.map(charaData => {\r\n\t\t\treturn gApp.store.dispatch('_createChara', {\r\n\t\t\t\tremote_chara: {\r\n\t\t\t\t\tid: charaData.id,\r\n\t\t\t\t\tcode: charaData.equips_code,\r\n\t\t\t\t}\r\n\t\t\t}).then(arg0 => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst world = this.$scene_map.controller;\r\n\r\n\t\t\t\t\t/** @type {SceneRemoteCharacter} */\r\n\t\t\t\t\tlet chara = arg0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tchara.$physics = world.$createRemotePlayer(chara, chara.$$renderer);\r\n\r\n\t\t\t\t\tthis.charaMap[chara.id] = chara;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ex) {\r\n\t\t\t\t\talert(err.message);\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t * @param {$Packet_RemoteChat} packet\r\n\t * @param {function(...any):void} fnAck\r\n\t */\r\n\tonRemoteChat(chara, packet, fnAck) {\r\n\t\tchara.chatCtrl.style = packet.style;\r\n\t\tchara.chatCtrl.enter(packet.text);\r\n\t\tapp.vue.$refs.statusBar.pushChatHistory(packet.type, packet.style, packet.text);\r\n\t}\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t * @param {$Packet_CharacterMove} packet\r\n\t * @param {function(...any):void} fnAck\r\n\t */\r\n\tonRemoteCharaMove(chara, packet, fnAck) {\r\n\t\tchara.$move(packet);\r\n\t}\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t * @param {$Packet_RemoteCharaAnim} packet\r\n\t * @param {function(...any):void} fnAck\r\n\t */\r\n\tonRemoteCharaAnim(chara, packet, fnAck) {\r\n\t\tchara.$anim(packet);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t * @param {} packet\r\n\t * @param {function(...any):void} fnAck\r\n\t */\r\n\tonRemoteCharaSkill(chara, packet, fnAck) {\r\n\t\tchara.invokeSkill(packet.skillId);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t * @param {} packet\r\n\t * @param {function(...any):void} fnAck\r\n\t */\r\n\tonRemoteAvatarModified(chara, packet, fnAck) {\r\n\t\tchara.renderer.use(packet.itemId);\r\n\t}\r\n\r\n\tasync $test() {\r\n\t\tthis.socket.on(\"enterRemoteChara\", this.onEnterRemoteChara.bind(this));\r\n\t\tthis._addRemoteCharaPacketListener(\"remoteChat\", this.onRemoteChat);\r\n\t\tthis._addRemoteCharaPacketListener(\"remoteCharaMove\", this.onRemoteCharaMove);\r\n\t\tthis._addRemoteCharaPacketListener(\"remoteCharaAnim\", this.onRemoteCharaAnim);\r\n\t\tthis._addRemoteCharaPacketListener(\"remoteCharaSkill\", this.onRemoteCharaSkill);\r\n\t\tthis._addRemoteCharaPacketListener(\"remoteAvatarModified\", this.onRemoteAvatarModified);\r\n\r\n\t\tawait this.login(\"aaa\", \"aaa\");\r\n\r\n\t\tawait this.selectWorld(0, 0);\r\n\r\n\t\tawait this.selectChara(0);\r\n\t}\r\n}\r\n\r\n\r\n\r\n","﻿\r\nimport { SceneMap } from \"./Map.js\";\r\nimport { SceneCharacter } from \"./SceneCharacter.js\";\r\n\r\nimport { Client } from \"../Client/Client.js\";//debug\r\n\r\nimport { app as gApp } from \"../index.js\";//debug\r\n\r\n\r\nexport class GameState {\r\n\tconstructor(scene, chara) {\r\n\t\t/** @type {string} */\r\n\t\tthis.map_id = scene.map_id;\r\n\r\n\t\tif (chara.renderer) {\r\n\t\t\t/** @type {string} */\r\n\t\t\tthis.chara = chara.renderer._stringify(false);\r\n\t\t\turl += \"&chara=\" + this.chara;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class GameStateManager {\r\n\tconstructor() {\r\n\t\tthrow new Error(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneMap} scene\r\n\t * @param {SceneCharacter} chara\r\n\t */\r\n\tstatic PushState(scene, chara) {\r\n\t\tif (!scene) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet state = {};\r\n\t\tlet url = \"?map=\" + scene.map_id;\r\n\r\n\t\tstate.map_id = scene.map_id;\r\n\r\n\t\tif (chara && chara.renderer) {\r\n\t\t\tstate.chara = chara.renderer._stringify(false);\r\n\t\t\turl += \"&chara=\" + state.chara;\r\n\t\t}\r\n\r\n\t\thistory.pushState(state, scene._window_title, url);\r\n\r\n\t\tdocument.title = scene._window_title;\r\n\t}\r\n\t/**\r\n\t * @param {string} map_id\r\n\t * @param {string} chara_code\r\n\t */\r\n\tstatic PushStateString(map_id, chara_code) {\r\n\t\tif (!map_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet state = {};\r\n\r\n\t\tlet url = \"?map=\" + map_id;\r\n\t\tstate.map_id = map_id;\r\n\r\n\t\tif (chara_code) {\r\n\t\t\tstate.chara = chara_code;\r\n\t\t\turl += \"&chara=\" + state.chara;\r\n\t\t}\r\n\r\n\t\thistory.pushState(state, scene._window_title, url);\r\n\r\n\t\tdocument.title = scene._window_title;\r\n\t}\r\n\tstatic async PopState(state) {\r\n\t\tif (!state) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (state.chara && window.chara && window.chara.renderer) {\r\n\t\t\tlet _old_c = window.chara.renderer._stringify(false);\r\n\t\t\tif (state.chara != _old_c) {\r\n\t\t\t\twindow.chara.renderer._parse(state.chara);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tClient._CreateMyCharacter({\r\n\t\t\t\tid: \"chara_1\",\r\n\t\t\t\tequips_code: state.chara,\r\n\t\t\t});\r\n\t\t\t//await gApp.store.dispatch('_createChara', {\r\n\t\t\t//\templace: {\r\n\t\t\t//\t\tid: \"chara_1\",\r\n\t\t\t//\t\tcode: state.chara,\r\n\t\t\t//\t}\r\n\t\t\t//});\r\n\t\t}\r\n\r\n\t\tif (scene_map && scene_map.map_id != state.map_id) {\r\n\t\t\tawait scene_map.load(state.map_id);\r\n\t\t}\r\n\t}\r\n}\r\n","\r\n\r\nexport class CursorPicker {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.type = null;\r\n\t\t/** @type {any} */\r\n\t\tthis.data = null;\r\n\t}\r\n}\r\n\r\n\r\nexport class CursorAnimationFrame {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.url = null;\r\n\t\t/** @type {number} */\r\n\t\tthis.x = 0;\r\n\t\t/** @type {number} */\r\n\t\tthis.y = 0;\r\n\t\t/** @type {number} - time in millisecond */\r\n\t\tthis.delay = 0;\r\n\t}\r\n}\r\n\r\nexport class CursorAnimationData {\r\n\tconstructor() {\r\n\t\t/** @type {CursorAnimationFrame[]} */\r\n\t\tthis.frames = [];\r\n\r\n\t\t/** @type {number} - time in millisecond */\r\n\t\tthis.duration = 0;\r\n\t}\r\n\t/**\r\n\t * @param {string} url\r\n\t * @returns {Promise<number>} - index\r\n\t */\r\n\tasync addFrameFromUrl(url) {\r\n\t\tlet raw = await $get.data(url);\r\n\t\treturn this.addFrame(\"images\" + url, raw.origin.x, raw.origin.y, raw.delay);\r\n\t}\r\n\t/**\r\n\t * @param {string} url\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} delay\r\n\t * @returns {number} - index\r\n\t */\r\n\taddFrame(url, x, y, delay) {\r\n\t\tif (!url) {\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\t\tconst i = this.frames.length;\r\n\t\tlet frame = new CursorAnimationFrame();\r\n\r\n\t\tframe.url = url;\r\n\t\tframe.x = x | 0;\r\n\t\tframe.y = y | 0;\r\n\t\tframe.delay = delay | 0;\r\n\r\n\t\tthis.frames.push(frame);\r\n\r\n\t\tthis.duration += frame.delay; \r\n\r\n\t\treturn i;\r\n\t}\r\n\tasync load(url) {\r\n\t\tlet raw = await $get.data(url);\r\n\r\n\t\tfor (let i = 0, frame = raw[i]; frame; ++i, frame = raw[i]) {\r\n\t\t\tlet img = {};\r\n\r\n\t\t\tthis.addFrame(\r\n\t\t\t\t[\"images\", url, i].join(\"/\"),\r\n\t\t\t\tframe.origin.x,\r\n\t\t\t\tframe.origin.y,\r\n\t\t\t\tframe.delay\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class Cursor  {\r\n\tconstructor(/*raw, url*/) {\r\n\t\t///** @type {Animation} */\r\n\t\t//this.ani = null;\r\n\t}\r\n\t//async createAnimation(url) {\r\n\t//\tlet raw = await $get.data(url);\r\n\t//\tthis.ani = new Animation(raw, url);\r\n\t//\tawait this.ani.load();\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {CursorAnimationData} data\r\n\t * @param {string} selector\r\n\t * @param {string} keyword\r\n\t */\r\n\tstatic createToCSS(data, selector, keyword) {\r\n\t\tconst id = \"Cursor\" + Math.trunc(Math.random() * 0xFFFFFFFF).toString(16);\r\n\r\n\t\tconst { frames, duration } = data;\r\n\r\n\t\tlet cssText = `${selector}:hover {\\n`;\r\n\r\n\t\tcssText += `cursor: url(${frames[0].url}) ${frames[0].x} ${frames[0].y}, ${keyword};\\n`;\r\n\r\n\t\tif (duration) {\r\n\t\t\tcssText += `animation-name: ${id}_keyframes;\\n`;\r\n\t\t\tcssText += `animation-duration: ${duration}ms;\\n`;\r\n\t\t\tcssText += `animation-iteration-count: infinite;\\n`;\r\n\t\t\tcssText += \"}\\n\";\r\n\r\n\t\t\tlet tt = 0;\r\n\t\t\t{\r\n\t\t\t\tcssText += `@keyframes ${id}_keyframes {\\n`;\r\n\r\n\t\t\t\tfor (let i = 0; i < frames.length; ++i) {\r\n\t\t\t\t\tconst frame = frames[i];\r\n\r\n\t\t\t\t\tlet start = Math.trunc((tt / duration) * 100);\r\n\r\n\t\t\t\t\tcssText += `${start}% { cursor: url(${frames[i].url}) ${frames[i].x} ${frames[i].y}, ${keyword}; }\\n`;\r\n\r\n\t\t\t\t\ttt += frame.delay;\r\n\t\t\t\t}\r\n\t\t\t\t//cssText += `100% { cursor: url(${frames[0].url}) ${frames[0].x} ${frames[0].y}; }\\n`;\r\n\r\n\t\t\t\tcssText += \"}\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcssText += \"}\";\r\n\t\t}\r\n\t\t\r\n\t\tvar x = document.createElement(\"STYLE\");\r\n\t\tvar t = document.createTextNode(cssText);\r\n\t\tx.id = id;\r\n\t\tx.appendChild(t);\r\n\t\tdocument.head.appendChild(x);\r\n\r\n\t\treturn x;\r\n\t}\r\n}\r\n","\r\nimport { } from './init.js';\r\nimport { Vec2, Rectangle } from './math.js';\r\nimport { IGraph, IRenderer } from './IRenderer.js';\r\nimport { engine, Graph } from './Engine.js';\r\nimport { Animation } from './Animation.js';\r\n\r\nimport { GameStateManager } from './GameState.js';\r\nimport { SceneMap } from './Map.js';\r\n//import { SceneCharacter } from './SceneCharacter.js';\r\n\r\nimport { EffectManager } from \"./Skill.js\";\r\nimport { } from \"./MobSkill/238.FairyDust.js\";\r\n\r\nimport { damageNumberLayer } from \"./Renderer/DamageNumber.js\";\r\n\r\nimport { Cursor, CursorAnimationData } from \"./Cursor.js\";\r\n\r\nimport { Client } from \"../Client/Client.js\";\r\n\r\n\r\nimport { SceneCharacter } from \"./SceneCharacter.js\";//debug\r\nimport { app as gApp } from \"../index.js\";//debug\r\n\r\n\r\nwindow.SCREEN_PRINTLN = function (getText, getValue) {\r\n\tif (arguments.length == 2) {\r\n\t\twindow._SCREEN_PRINTLN.push({ getText, getValue });\r\n\t}\r\n\telse if (arguments.length == 1) {\r\n\t\twindow._SCREEN_PRINTLN.push(arguments[0]);\r\n\t}\r\n}\r\nwindow._SCREEN_PRINTLN = [];\r\n\r\nvar animationRequestID = null;\r\n\r\nwindow.addEventListener(\"popstate\", function (e) {\r\n\tGameStateManager.PopState(e.state);\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction createCursor_clickable() {\r\n\tlet data = new CursorAnimationData();\r\n\r\n\tlet task1 = data.addFrameFromUrl(\"/UI/Basic/Cursor/0/0\").then(function (i) {\r\n\t\tdata.frames[i].delay = 200;\r\n\t});\r\n\r\n\tlet task2 = data.addFrameFromUrl(\"/UI/Basic/Cursor/12/0\").then(function (i) {\r\n\t\tdata.frames[i].delay = 200;\r\n\t});\r\n\r\n\treturn Promise.all([task1, task2]).then(function () {\r\n\t\tdata.duration = 400;\r\n\r\n\t\tCursor.createToCSS(data, \".ui-clickable\", \"pointer\");\r\n\t});\r\n}\r\n\r\ncreateCursor_clickable();\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n/**\r\n * @param {KeyboardEvent} e\r\n */\r\nwindow.onkeydown = function (e) {\r\n\tif (e.target != document.body) {\r\n\t\treturn;\r\n\t}\r\n\tlet k = e.key;\r\n\r\n\tif (k != null && !$gv.input_keyDown[k]) {\r\n\t\t$gv.input_keyDown[k] != null ? (++$gv.input_keyDown[k]) : ($gv.input_keyDown[k] = 1);\r\n\t}\r\n\r\n\tif (e.code == 'Space') {\r\n\t\t$(\"#m_is_run\").click();\r\n\t}\r\n\tif (e.code == \"F2\") {\r\n\t\t$gv.m_editor_mode = !$gv.m_editor_mode;\r\n\t}\r\n}\r\n\r\nwindow.onkeyup = function (e) {\r\n\tif (e.target != document.body) {\r\n\t\treturn;\r\n\t}\r\n\tlet k = e.key;\r\n\r\n\tif (k != null && $gv.input_keyDown[k]) {\r\n\t\t$gv.input_keyDown[k] = 0;\r\n\t\t$gv.input_keyUp[k] = 1;\r\n\t}\r\n}\r\n\r\nObject.defineProperty(window, \"$m_is_run\", {\r\n\tget: function () {\r\n\t\treturn $(\"#m_is_run\").attr(\"checked\");\r\n\t}, \r\n\tset: function (value) {\r\n\t\t$(\"#m_is_run\").attr(\"checked\", !value);\r\n\t\t$(\"#m_is_run\").click();\r\n\t}\r\n});\r\n\r\n/**\r\n * @param {MouseEvent} e\r\n */\r\nwindow.onmousedown = function (e) {\r\n\tif ($gv.m_editor_mode) {\r\n\t\tif (!e.target.classList.contains(\"Editor\")) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (e.which == 1) {\r\n\t\t$gv.mouse_dl = 1;\r\n\t\t$gv.mouse_ul = 0;\r\n\t}\r\n\telse if (e.which == 2) {\r\n\t\t$gv.mouse_dm = 1;\r\n\t\t$gv.mouse_um = 0;\r\n\t}\r\n\telse if (e.which == 3) {\r\n\t\t$gv.mouse_dr = 1;\r\n\t\t$gv.mouse_ur = 0;\r\n\t}\r\n\t$gv.mouse_x = e.pageX;\r\n\t$gv.mouse_y = e.pageY;\r\n}\r\n\r\n/**\r\n * @param {MouseEvent} e\r\n */\r\nwindow.onmouseup = function (e) {\r\n\tif ($gv.m_editor_mode) {\r\n\t\tif (!e.target.classList.contains(\"Editor\")) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (e.which == 1) {\r\n\t\t$gv.mouse_dl = 0;\r\n\t\t$gv.mouse_ul = 1;\r\n\t}\r\n\telse if (e.which == 2) {\r\n\t\t$gv.mouse_dm = 0;\r\n\t\t$gv.mouse_um = 1;\r\n\t}\r\n\telse if (e.which == 3) {\r\n\t\t$gv.mouse_dr = 0;\r\n\t\t$gv.mouse_ur = 1;\r\n\t}\r\n\t$gv.mouse_x = e.pageX;\r\n\t$gv.mouse_y = e.pageY;\r\n}\r\n\r\n/**\r\n * @param {MouseEvent} e\r\n */\r\nwindow.onmousemove = function (e) {\r\n\tif ($gv.m_editor_mode) {\r\n\t\tif (!e.target.classList.contains(\"Editor\")) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t$gv.mouse_x = e.pageX;\r\n\t$gv.mouse_y = e.pageY;\r\n\t$gv.mouse_move = 1;\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\nexport class Game {\r\n\tconstructor() {\r\n\t\tthis.timer = 0;\r\n\t\tthis.timer_ = 0;\r\n\t\tthis._dTimer = 0;\r\n\t\tthis.fps_arr = [];\r\n\t\tthis.frame_s_arr = [];\r\n\t\t\r\n\t\t//this.chara = null;\r\n\t\t\r\n\t\t/** @type {SceneMap} */\r\n\t\tthis.scene_map = new SceneMap();\r\n\r\n\t\twindow.scene_map = this.scene_map;\r\n\t\t$gv.scene_map = window;\r\n\r\n\t\tscene_map.onload = function () {\r\n\t\t\tGameStateManager.PushState(this, window.chara);\r\n\t\t}\r\n\t\t\r\n\t\tthis._loop = this._loop.bind(this);\r\n\t\t\r\n\t\tdocument.getElementById(\"m_is_run\").onchange = (function (e) {\r\n\t\t\tthis.m_is_run = e.target.checked ? true : false;\r\n\t\t\tif (this.m_is_run) {\r\n\t\t\t\tanimationRequestID = requestAnimationFrame(this._loop);\r\n\t\t\t\tdocument.getElementById(\"Screenshot\").innerHTML = \"\";\r\n\t\t\t}\r\n\t\t}).bind(this);\r\n\r\n\t\tthis._$moveViewportSpeed = 10;//debug\r\n\t}\r\n\t\r\n\tmoveViewport(inBound) {\r\n\t\tconst scene_map = this.scene_map;\r\n\r\n\t\tconst speed = $gv.input_keyDown['z'] ? (this._$moveViewportSpeed * 10) : this._$moveViewportSpeed;\r\n\r\n\t\t//$gv.m_viewRect = scene_map.viewArea(new Vec2($gv.m_viewRect.left, $gv.m_viewRect.top));\r\n\r\n\t\tif ($gv.input_keyDown['ArrowLeft'] > 0) {\r\n\t\t\t$gv.m_viewRect.left -= speed;\r\n\t\t}\r\n\t\tif ($gv.input_keyDown['ArrowRight'] > 0) {\r\n\t\t\t$gv.m_viewRect.left += speed;\r\n\t\t}\r\n\t\tif ($gv.input_keyDown['ArrowUp'] > 0) {\r\n\t\t\t$gv.m_viewRect.top -= speed;\r\n\t\t}\r\n\t\tif ($gv.input_keyDown['ArrowDown'] > 0) {\r\n\t\t\t$gv.m_viewRect.top += speed;\r\n\t\t}\r\n\r\n\t\tlet { left, top, right, bottom } = scene_map.mapBound;\r\n\r\n\t\tif (inBound) {\r\n\t\t\tif ($gv.m_viewRect.left < left) {\r\n\t\t\t\t$gv.m_viewRect.left = left;\r\n\t\t\t}\r\n\t\t\tif ($gv.m_viewRect.right > right) {\r\n\t\t\t\t$gv.m_viewRect.left = right - $gv.m_viewRect.width;\r\n\t\t\t}\r\n\t\t\tif ($gv.m_viewRect.top < top) {\r\n\t\t\t\t$gv.m_viewRect.top = top;\r\n\t\t\t}\r\n\t\t\tif ($gv.m_viewRect.bottom > bottom) {\r\n\t\t\t\t$gv.m_viewRect.top = bottom - $gv.m_viewRect.height;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync _$startClient() {\r\n\t\tif (scene_map) {\r\n\t\t\tif (window.io != null) {\r\n\t\t\t\tlet client = new Client();\r\n\t\t\t\tgApp.client = client;\r\n\t\t\t\tclient.$test();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet params = _parseUrlParameter();\r\n\t\t\t\tlet map_id;\r\n\r\n\t\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\t\tmap_id = params[\"map\"] || window.DEFAULT_MAP_ID;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmap_id = params[\"map\"] || \"000000000\";//450003000\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet chara_code = params[\"chara\"] || \"c,00002012,00012012,00026509|00026509,00034873|00034873,01051429,01072392\";\r\n\r\n\t\t\t\tGameStateManager.PopState({\r\n\t\t\t\t\tmap_id: map_id,\r\n\t\t\t\t\tchara: chara_code,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** @type {boolean} */\r\n\tget _isMapReady() {\r\n\t\tconst scene_map = this.scene_map;\r\n\t\treturn scene_map && scene_map.isLoaded();\r\n\t}\r\n\t\r\n\tasync run() {\r\n\t\tconsole.log(\"begin render\");\r\n\t\tthis._loop(0);//start render\r\n\t}\r\n\t\r\n\tasync forceUpdateScreen() {\r\n\t\tconst chara = this.chara;\r\n\t\t\r\n\t\tchara.renderer.__forceUpdate(0);\r\n\t\t\r\n\t\tif (this.m_is_run) {\r\n\t\t\tawait chara.renderer.waitLoaded();\r\n\t\t\tchara.renderer.__require_update = true;//update once\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tawait chara.renderer.waitLoaded();\r\n\t\tawait chara.renderer._waitFrameTexturesLoaded();\r\n\t\tawait IGraph.waitAllLoaded();\r\n\t\t\r\n\t\tdocument.getElementById(\"Screenshot\").innerHTML = \"\";\r\n\t\t\r\n\t\tchara.renderer.__require_update = true;//update once\r\n\t\t\r\n\t\tthis._loop(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\t_calcFPS(stamp) {\r\n\t\ttry {\r\n\t\t\tif ((this.timer - this.timer_) >= 1000) {\r\n\t\t\t\tif (this.fps_arr.length) {\r\n\t\t\t\t\tlet sum = this.fps_arr.reduce(function (a, b) { return a + b; });\r\n\t\t\t\t\tlet avg = sum / this.fps_arr.length;\r\n\r\n\t\t\t\t\tdocument.getElementById(\"FPS\").innerHTML = avg.toFixed(2);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.frame_s_arr.length) {\r\n\t\t\t\t\tlet sum = this.frame_s_arr.reduce(function (a, b) { return a + b; });\r\n\t\t\t\t\tlet avg = sum / this.frame_s_arr.length;\r\n\r\n\t\t\t\t\tdocument.getElementById(\"frame\").innerHTML = avg.toFixed(2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.frame_s_arr = [];\r\n\t\t\t\tthis.fps_arr = [];\r\n\r\n\t\t\t\tthis.timer_ = this.timer;\r\n\t\t\t}\r\n\t\t\telse if (stamp > 0 && Number.isFinite(stamp)) {\r\n\t\t\t\tthis.fps_arr.push(1000 / stamp);\r\n\t\t\t\tthis.frame_s_arr.push(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t\tdocument.getElementById(\"FPS\").innerHTML = \"-\";\r\n\t\t\tdocument.getElementById(\"frame\").innerHTML = \"-\";\r\n\t\t\tthis.fps_arr = [];\r\n\t\t\tthis.frame_s_arr = [];\r\n\t\t}\r\n\t}\r\n\r\n\t_requestNextFrame() {\r\n\t\tif (this.m_is_run) {\r\n\t\t\tanimationRequestID = requestAnimationFrame(this._loop);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//async\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\tlet elem = new Image();\r\n\t\t\t\telem.src = engine._canvas.toDataURL();\r\n\t\t\t\tengine.ctx.clearRect(0, 0, engine.ctx.width, engine.ctx.height);\r\n\t\t\t\tdocument.getElementById(\"Screenshot\").appendChild(elem);\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\t_updateScene(stamp) {\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tconst chara = this.chara;\r\n\r\n\t\t/** @type {SceneCharacter[]} */\r\n\t\tconst charaList = this.charaList;\r\n\r\n\t\t{\r\n\t\t\tif (this._isMapReady) {\r\n\t\t\t\tscene_map.update(stamp);//include world.update\r\n\t\t\t}\r\n\r\n\t\t\t// before world.update ??\r\n\t\t\tfor (let i = 0; i < charaList.length; ++i) {\r\n\t\t\t\tcharaList[i].update(stamp);\r\n\t\t\t}\r\n\r\n\t\t\t$gv.SceneObjectMgr.Update(stamp);\r\n\r\n\t\t\tEffectManager.Update(stamp);\r\n\t\t}\r\n\t\t{\r\n\t\t\tconst client = gApp.client;//not offline character\r\n\r\n\t\t\tif (client && client.chara) {\r\n\t\t\t\t/** @type {SceneCharacter} */\r\n\t\t\t\tconst ch = client.chara;\r\n\t\t\t\t\r\n\t\t\t\tch.$emit(window.$io);\r\n\r\n\t\t\t\tch.$recMove();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdamageNumberLayer.update(stamp);\r\n\t}\r\n\t\r\n\t_renderScene() {\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tconst chara = this.chara;\r\n\r\n\t\t/** @type {SceneCharacter[]} */\r\n\t\tconst charaList = this.charaList;\r\n\r\n\t\tengine.beginScene();\r\n\t\t{\r\n\t\t\tengine.loadIdentity();\r\n\t\t\tengine.clearDrawScreen();\r\n\t\t\t\r\n\t\t\t$gv.m_viewRect.size = engine.screen_size;\r\n\t\t\tif (!$gv.m_editor_mode) {\r\n\t\t\t\tif (chara && chara.renderer) {\r\n\t\t\t\t\t$gv.m_viewRect.setCenter(chara.renderer.x, chara.renderer.y);\r\n\t\t\t\t}\r\n\t\t\t\telse if (scene_map.controller.player) {\r\n\t\t\t\t\tconst pos = scene_map.controller.player.getPosition();\r\n\t\t\t\t\tconst px = Math.trunc(pos.x * $gv.CANVAS_SCALE + 0.5);\r\n\t\t\t\t\tconst py = Math.trunc(pos.y * $gv.CANVAS_SCALE + 0.5);\r\n\t\t\t\t\t$gv.m_viewRect.setCenter(px, py);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($gv.m_editor_mode && this._isMapReady) {\r\n\t\t\t\tthis.moveViewport(false);\r\n\t\t\t}\r\n\t\t\tif ($gv.m_is_rendering_map && this._isMapReady) {\r\n\t\t\t\tscene_map.beginRender(engine);\r\n\t\t\t\t{\t\t\t\t\t\r\n\t\t\t\t\tscene_map.renderBackground(engine);\r\n\t\t\t\t\t//if ($gv.m_display_life && scene_map._raw.info.mirror_Bottom) {\r\n\t\t\t\t\t//\tengine.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\t\t//\tengine.ctx.translate(Math.trunc(-$gv.m_viewRect.x), Math.trunc(-$gv.m_viewRect.y));\r\n\t\t\t\t\t//\tengine.ctx.scale(1, -1);\r\n\t\t\t\t\t//\tfor (let i = 0; i < scene_map.layeredObject.length; ++i) {\r\n\t\t\t\t\t//\t\tscene_map.renderLife(engine, i);\r\n\t\t\t\t\t//\t}\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tfor (let i = 0; i < scene_map.layeredObject.length; ++i) {\r\n\t\t\t\t\t\tscene_map.renderLayeredObject(engine, i);\r\n\t\t\t\t\t\tscene_map.renderLayeredTile(engine, i);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ($gv.m_display_other_player) {\r\n\t\t\t\t\t\t\t\tfor (let chara_index = 0; chara_index < charaList.length; ++chara_index) {\r\n\t\t\t\t\t\t\t\t\tif (charaList[chara_index] == chara) {\r\n\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (charaList[chara_index].$layer == i) {\r\n\t\t\t\t\t\t\t\t\t\tcharaList[chara_index].render(engine);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tscene_map.renderLife(engine, i);\r\n\r\n\t\t\t\t\t\t\tif ($gv.m_display_player && chara) {\r\n\t\t\t\t\t\t\t\tif ((chara.$layer == null || chara.$layer == i) && chara.renderer) {\r\n\t\t\t\t\t\t\t\t\tchara.render(engine);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t$gv.SceneObjectMgr.RenderLayer(engine, i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor (let i = scene_map.layeredObject.length; i < 12; ++i) {\r\n\t\t\t\t\t\t\t$gv.SceneObjectMgr.RenderLayer(engine, i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tscene_map.endRender(engine);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ($gv.m_display_other_player || $gv.m_display_player) {\r\n\t\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < charaList.length; ++i) {\r\n\t\t\t\t\t\tif (charaList[i] != chara && $gv.m_display_other_player) {\r\n\t\t\t\t\t\t\tcharaList[i].render(engine);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($gv.m_display_player && chara) {\r\n\t\t\t\t\t\tchara.render(engine);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tEffectManager.Render(engine);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdamageNumberLayer.render(engine);\r\n\r\n\t\t\tfor (let i = 0; i < charaList.length; ++i) {\r\n\t\t\t\tcharaList[i]._$drawName(engine);\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < charaList.length; ++i) {\r\n\t\t\t\tcharaList[i]._$drawChatBalloon(engine);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ($gv.m_is_rendering_map && this._isMapReady) {\r\n\t\t\t\tscene_map.beginRender(engine);\r\n\t\t\t\t{\r\n\t\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tscene_map.renderPortal(engine);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tscene_map.renderFrontground(engine);\r\n\t\t\t\t}\r\n\t\t\t\tscene_map.endRender(engine);\r\n\t\t\t\t\r\n\t\t\t\tscene_map.renderParticle(engine);\r\n\r\n\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t{\r\n\t\t\t\t\tEffectManager.Render(engine);\r\n\t\t\t\t}\r\n\t\t\t\tengine.loadIdentity();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\t\tscene_map.applyCamera(engine);\r\n\t\t\t\t\r\n\t\t\t\tif ($gv.m_display_debug_info) {\r\n\t\t\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\t\t\tconst ctx = engine.ctx;\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tctx.beginPath();\r\n\r\n\t\t\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\t\t\tctx.fillRect(0, 0, 96, 50);\r\n\r\n\t\t\t\t\t\tctx.fillStyle = \"black\";\r\n\t\t\t\t\t\tctx.fillText(\"map origin\", 5, 14, 96);\r\n\r\n\t\t\t\t\t\tctx.fillText(\"view-x: \" + $gv.m_viewRect.x.toFixed(0), 5, 30, 96);\r\n\r\n\t\t\t\t\t\tctx.fillText(\"view-y: \" + $gv.m_viewRect.y.toFixed(0), 5, 46, 96);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tscene_map.controller.render(engine);\r\n\t\t\t\t\r\n\t\t\t\tengine.loadIdentity();\r\n\t\t\t\t\r\n\t\t\t\tif ($gv.m_display_debug_info) {\r\n\t\t\t\t\tthis._render_debug_info();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tengine.endScene();\r\n\t}\r\n\r\n\t_render_debug_info() {\r\n\t\tif (this._isMapReady && scene_map.controller && scene_map.controller.player) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = engine.ctx;\r\n\r\n\t\t\tconst ta = ctx.textAlign, tb = ctx.textBaseline, lw = ctx.lineWidth;\r\n\t\t\tctx.textBaseline = \"top\";\r\n\t\t\tctx.lineWidth = 2.5;\r\n\t\t\tctx.strokeStyle = \"#000\";\r\n\t\t\tlet x = 400, y = 5;\r\n\t\t\tfor (let line of window._SCREEN_PRINTLN) {\r\n\t\t\t\tconst val = line.getValue();\r\n\t\t\t\tconst text = line.getText();\r\n\r\n\t\t\t\tctx.fillStyle = \"#FFF\";\r\n\t\t\t\t{\r\n\t\t\t\t\tctx.textAlign = \"right\";\r\n\t\t\t\t\tctx.strokeText(text, x - 2, y);\r\n\t\t\t\t\tctx.fillText(text, x - 2, y);\r\n\r\n\t\t\t\t\tctx.textAlign = \"center\";\r\n\t\t\t\t\tctx.strokeText(\":\", x, y);\r\n\t\t\t\t\tctx.fillText(\":\", x, y);\r\n\r\n\t\t\t\t\tctx.textAlign = \"left\";\r\n\t\t\t\t\tctx.strokeText(val, x + 2, y);\r\n\t\t\t\t\tctx.fillText(val, x + 2, y);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (\"_val\" in line) {\r\n\t\t\t\t\tlet _val;\r\n\t\t\t\t\tif (line._val != val) {\r\n\t\t\t\t\t\t_val = line._val;//display new value\r\n\t\t\t\t\t\tline.__val = line._val;\r\n\t\t\t\t\t\tline._val = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t_val = line.__val;//display old value\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_val != val) {\r\n\t\t\t\t\t\tctx.fillStyle = \"#0FF\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tctx.fillStyle = \"#FFF\";\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tctx.textAlign = \"right\";\r\n\t\t\t\t\t\tctx.strokeText(text, x - 2 + 200, y);\r\n\t\t\t\t\t\tctx.fillText(text, x - 2 + 200, y);\r\n\r\n\t\t\t\t\t\tctx.textAlign = \"center\";\r\n\t\t\t\t\t\tctx.strokeText(\":\", x + 200, y);\r\n\t\t\t\t\t\tctx.fillText(\":\", x + 200, y);\r\n\r\n\t\t\t\t\t\tctx.textAlign = \"left\";\r\n\t\t\t\t\t\tctx.strokeText(_val, x + 2 + 200, y);\r\n\t\t\t\t\t\tctx.fillText(_val, x + 2 + 200, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tline.__val = val;\r\n\t\t\t\t\tline._val = val;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ty += 16;\r\n\t\t\t}\r\n\t\t\tctx.textAlign = ta;\r\n\t\t\tctx.textBaseline = tb;\r\n\t\t\tctx.lineWidth = lw;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {DOMHighResTimeStamp} timeStamp\r\n\t */\r\n\t_loop(timeStamp) {\r\n\t\tconst scene_map = this.scene_map;\r\n\t\tlet stamp = timeStamp - this.timer;\r\n\t\t\r\n\t\tthis.timer = timeStamp;\r\n\r\n\t\tthis._requestNextFrame();\r\n\r\n\t\tthis._calcFPS(stamp);\r\n\t\r\n\t\tthis._updateScene(stamp);\r\n\r\n\t\tthis._renderScene();\r\n\t\t\r\n\t\tfor (let i in $gv.input_keyDown) {\r\n\t\t\tif ($gv.input_keyDown[i] > 0) {\r\n\t\t\t\t++$gv.input_keyDown[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i in $gv.input_keyUp) {\r\n\t\t\t$gv.input_keyUp[i] = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\tget chara() {\r\n\t\treturn window.chara;\r\n\t}\r\n\t//set chara(value) {\r\n\t//\twindow.chara = value;\r\n\t//}\r\n\r\n\tget charaList() {\r\n\t\treturn gApp.store.state.charaList;\r\n\t}\r\n\t\r\n\tget m_is_run() {\r\n\t\treturn window.m_is_run;\r\n\t}\r\n\tset m_is_run(value) {\r\n\t\twindow.m_is_run = value;\r\n\t}\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction _parseUrlParameter() {\r\n\tlet sPageURL = decodeURIComponent(window.location.search.substring(1));\r\n\tlet sURLVariables = sPageURL.split(\"&\");\r\n\tlet params = {};\r\n\r\n\tfor (let i = 0; i < sURLVariables.length; ++i) {\r\n\t\tlet sParameter = sURLVariables[i].split(\"=\");\r\n\r\n\t\tparams[sParameter[0]] = sParameter[1];\r\n\t}\r\n\r\n\treturn params;\r\n};\r\n\r\n","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport function b2Assert(condition, ...args) {\r\n    if (!condition) {\r\n        debugger;\r\n    }\r\n}\r\nexport const b2_maxFloat = 1E+37; // FLT_MAX instead of Number.MAX_VALUE;\r\nexport const b2_epsilon = 1E-5; // FLT_EPSILON instead of Number.MIN_VALUE;\r\nexport const b2_epsilon_sq = (b2_epsilon * b2_epsilon);\r\nexport const b2_pi = 3.14159265359; // Math.PI;\r\n/// @file\r\n/// Global tuning constants based on meters-kilograms-seconds (MKS) units.\r\n///\r\n// Collision\r\n/// The maximum number of contact points between two convex shapes. Do\r\n/// not change this value.\r\nexport const b2_maxManifoldPoints = 2;\r\n/// The maximum number of vertices on a convex polygon. You cannot increase\r\n/// this too much because b2BlockAllocator has a maximum object size.\r\nexport const b2_maxPolygonVertices = 8;\r\n/// This is used to fatten AABBs in the dynamic tree. This allows proxies\r\n/// to move by a small amount without triggering a tree adjustment.\r\n/// This is in meters.\r\nexport const b2_aabbExtension = 0.1;\r\n/// This is used to fatten AABBs in the dynamic tree. This is used to predict\r\n/// the future position based on the current displacement.\r\n/// This is a dimensionless multiplier.\r\nexport const b2_aabbMultiplier = 2;\r\n/// A small length used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_linearSlop = 0.008; // 0.005;\r\n/// A small angle used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_angularSlop = 2 / 180 * b2_pi;\r\n/// The radius of the polygon/edge shape skin. This should not be modified. Making\r\n/// this smaller means polygons will have an insufficient buffer for continuous collision.\r\n/// Making it larger may create artifacts for vertex collision.\r\nexport const b2_polygonRadius = 2 * b2_linearSlop;\r\n/// Maximum number of sub-steps per contact in continuous physics simulation.\r\nexport const b2_maxSubSteps = 8;\r\n// Dynamics\r\n/// Maximum number of contacts to be handled to solve a TOI impact.\r\nexport const b2_maxTOIContacts = 32;\r\n/// A velocity threshold for elastic collisions. Any collision with a relative linear\r\n/// velocity below this threshold will be treated as inelastic.\r\nexport const b2_velocityThreshold = 1;\r\n/// The maximum linear position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxLinearCorrection = 0.2;\r\n/// The maximum angular position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxAngularCorrection = 8 / 180 * b2_pi;\r\n/// The maximum linear velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxTranslation = 2;\r\nexport const b2_maxTranslationSquared = b2_maxTranslation * b2_maxTranslation;\r\n/// The maximum angular velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxRotation = 0.5 * b2_pi;\r\nexport const b2_maxRotationSquared = b2_maxRotation * b2_maxRotation;\r\n/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so\r\n/// that overlap is removed in one time step. However using values close to 1 often lead\r\n/// to overshoot.\r\nexport const b2_baumgarte = 0.2;\r\nexport const b2_toiBaumgarte = 0.75;\r\n// #if B2_ENABLE_PARTICLE\r\n// Particle\r\n/// A symbolic constant that stands for particle allocation error.\r\nexport const b2_invalidParticleIndex = -1;\r\nexport const b2_maxParticleIndex = 0x7FFFFFFF;\r\n/// The default distance between particles, multiplied by the particle diameter.\r\nexport const b2_particleStride = 0.75;\r\n/// The minimum particle weight that produces pressure.\r\nexport const b2_minParticleWeight = 1.0;\r\n/// The upper limit for particle pressure.\r\nexport const b2_maxParticlePressure = 0.25;\r\n/// The upper limit for force between particles.\r\nexport const b2_maxParticleForce = 0.5;\r\n/// The maximum distance between particles in a triad, multiplied by the particle diameter.\r\nexport const b2_maxTriadDistance = 2.0;\r\nexport const b2_maxTriadDistanceSquared = (b2_maxTriadDistance * b2_maxTriadDistance);\r\n/// The initial size of particle data buffers.\r\nexport const b2_minParticleSystemBufferCapacity = 256;\r\n/// The time into the future that collisions against barrier particles will be detected.\r\nexport const b2_barrierCollisionTime = 2.5;\r\n// #endif\r\n// Sleep\r\n/// The time that a body must be still before it will go to sleep.\r\nexport const b2_timeToSleep = 0.5;\r\n/// A body cannot sleep if its linear velocity is above this tolerance.\r\nexport const b2_linearSleepTolerance = 0.01;\r\n/// A body cannot sleep if its angular velocity is above this tolerance.\r\nexport const b2_angularSleepTolerance = 2 / 180 * b2_pi;\r\n// Memory Allocation\r\n/// Implement this function to use your own memory allocator.\r\nexport function b2Alloc(size) {\r\n    return null;\r\n}\r\n/// If you implement b2Alloc, you should also implement this function.\r\nexport function b2Free(mem) {\r\n}\r\n/// Logging function.\r\nexport function b2Log(message, ...args) {\r\n    // console.log(message, ...args);\r\n}\r\n/// Version numbering scheme.\r\n/// See http://en.wikipedia.org/wiki/Software_versioning\r\nexport class b2Version {\r\n    constructor(major = 0, minor = 0, revision = 0) {\r\n        this.major = 0; ///< significant changes\r\n        this.minor = 0; ///< incremental changes\r\n        this.revision = 0; ///< bug fixes\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.revision = revision;\r\n    }\r\n    toString() {\r\n        return this.major + \".\" + this.minor + \".\" + this.revision;\r\n    }\r\n}\r\n/// Current version.\r\nexport const b2_version = new b2Version(2, 3, 2);\r\nexport const b2_changelist = 313;\r\nexport function b2ParseInt(v) {\r\n    return parseInt(v, 10);\r\n}\r\nexport function b2ParseUInt(v) {\r\n    return Math.abs(parseInt(v, 10));\r\n}\r\nexport function b2MakeArray(length, init) {\r\n    let a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(init(i));\r\n    }\r\n    return a;\r\n}\r\nexport function b2MakeNullArray(length) {\r\n    const a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(null);\r\n    }\r\n    return a;\r\n}\r\nexport function b2MakeNumberArray(length, init = 0) {\r\n    const a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(init);\r\n    }\r\n    return a;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbW1vbi9iMlNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTSxtQkFBbUIsU0FBa0IsRUFBRSxHQUFHLElBQVc7SUFDekQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLFFBQVEsQ0FBQztLQUNWO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBVyxLQUFLLENBQUMsQ0FBQyx1Q0FBdUM7QUFDakYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFXLElBQUksQ0FBQyxDQUFDLDJDQUEyQztBQUNuRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQVcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDL0QsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFXLGFBQWEsQ0FBQyxDQUFDLFdBQVc7QUFFdkQsU0FBUztBQUNULDBFQUEwRTtBQUMxRSxHQUFHO0FBRUgsWUFBWTtBQUVaLHNFQUFzRTtBQUN0RSwwQkFBMEI7QUFDMUIsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQVcsQ0FBQyxDQUFDO0FBRTlDLDJFQUEyRTtBQUMzRSxxRUFBcUU7QUFDckUsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQVcsQ0FBQyxDQUFDO0FBRS9DLHlFQUF5RTtBQUN6RSxtRUFBbUU7QUFDbkUsc0JBQXNCO0FBQ3RCLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFXLEdBQUcsQ0FBQztBQUU1Qyw2RUFBNkU7QUFDN0UsMERBQTBEO0FBQzFELHVDQUF1QztBQUN2QyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBVyxDQUFDLENBQUM7QUFFM0MsOEVBQThFO0FBQzlFLHFFQUFxRTtBQUNyRSxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQVcsS0FBSyxDQUFDLENBQUMsU0FBUztBQUVyRCw2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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_epsilon, b2MakeArray } from \"./b2Settings\";\r\nexport const b2_pi_over_180 = b2_pi / 180;\r\nexport const b2_180_over_pi = 180 / b2_pi;\r\nexport const b2_two_pi = 2 * b2_pi;\r\nexport const b2Abs = Math.abs;\r\n// export function b2Abs(n: number): number {\r\n//   return (n < 0) ? (-n) : (n);\r\n// }\r\nexport const b2Min = Math.min;\r\n// export function b2Min(a: number, b: number): number {\r\n//   return (a < b) ? (a) : (b);\r\n// }\r\nexport const b2Max = Math.max;\r\n// export function b2Max(a: number, b: number): number {\r\n//   return (a > b) ? (a) : (b);\r\n// }\r\nexport function b2Clamp(a, lo, hi) {\r\n    return (a < lo) ? (lo) : ((a > hi) ? (hi) : (a));\r\n}\r\nexport function b2Swap(a, b) {\r\n    ///b2Assert(false);\r\n    const tmp = a[0];\r\n    a[0] = b[0];\r\n    b[0] = tmp;\r\n}\r\n/// This function is used to ensure that a floating point number is\r\n/// not a NaN or infinity.\r\nexport function b2IsValid(n) {\r\n    return isFinite(n);\r\n}\r\nexport function b2Sq(n) {\r\n    return n * n;\r\n}\r\n/// This is a approximate yet fast inverse square-root.\r\nexport function b2InvSqrt(n) {\r\n    return 1 / Math.sqrt(n);\r\n}\r\nexport const b2Sqrt = Math.sqrt;\r\n// export function b2Sqrt(n: number): number {\r\n//   return Math.sqrt(n);\r\n// }\r\nexport const b2Pow = Math.pow;\r\n// export function b2Pow(x: number, y: number): number {\r\n//   return Math.pow(x, y);\r\n// }\r\nexport function b2DegToRad(degrees) {\r\n    return degrees * b2_pi_over_180;\r\n}\r\nexport function b2RadToDeg(radians) {\r\n    return radians * b2_180_over_pi;\r\n}\r\nexport const b2Cos = Math.cos;\r\n// export function b2Cos(radians: number): number {\r\n//   return Math.cos(radians);\r\n// }\r\nexport const b2Sin = Math.sin;\r\n// export function b2Sin(radians: number): number {\r\n//   return Math.sin(radians);\r\n// }\r\nexport const b2Acos = Math.acos;\r\n// export function b2Acos(n: number): number {\r\n//   return Math.acos(n);\r\n// }\r\nexport const b2Asin = Math.asin;\r\n// export function b2Asin(n: number): number {\r\n//   return Math.asin(n);\r\n// }\r\nexport const b2Atan2 = Math.atan2;\r\n// export function b2Atan2(y: number, x: number): number {\r\n//   return Math.atan2(y, x);\r\n// }\r\nexport function b2NextPowerOfTwo(x) {\r\n    x |= (x >> 1) & 0x7FFFFFFF;\r\n    x |= (x >> 2) & 0x3FFFFFFF;\r\n    x |= (x >> 4) & 0x0FFFFFFF;\r\n    x |= (x >> 8) & 0x00FFFFFF;\r\n    x |= (x >> 16) & 0x0000FFFF;\r\n    return x + 1;\r\n}\r\nexport function b2IsPowerOfTwo(x) {\r\n    return x > 0 && (x & (x - 1)) === 0;\r\n}\r\nexport function b2Random() {\r\n    return Math.random() * 2 - 1;\r\n}\r\nexport function b2RandomRange(lo, hi) {\r\n    return (hi - lo) * Math.random() + lo;\r\n}\r\n/// A 2D column vector.\r\nexport class b2Vec2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Clone() {\r\n        return new b2Vec2(this.x, this.y);\r\n    }\r\n    SetZero() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        return this;\r\n    }\r\n    Set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n    SelfAdd(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    SelfAddXY(x, y) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n    SelfSub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    SelfSubXY(x, y) {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n    SelfMul(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this;\r\n    }\r\n    SelfMulAdd(s, v) {\r\n        this.x += s * v.x;\r\n        this.y += s * v.y;\r\n        return this;\r\n    }\r\n    SelfMulSub(s, v) {\r\n        this.x -= s * v.x;\r\n        this.y -= s * v.y;\r\n        return this;\r\n    }\r\n    Dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    Cross(v) {\r\n        return this.x * v.y - this.y * v.x;\r\n    }\r\n    Length() {\r\n        const x = this.x, y = this.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n    LengthSquared() {\r\n        const x = this.x, y = this.y;\r\n        return (x * x + y * y);\r\n    }\r\n    Normalize() {\r\n        const length = this.Length();\r\n        if (length >= b2_epsilon) {\r\n            const inv_length = 1 / length;\r\n            this.x *= inv_length;\r\n            this.y *= inv_length;\r\n        }\r\n        return length;\r\n    }\r\n    SelfNormalize() {\r\n        const length = this.Length();\r\n        if (length >= b2_epsilon) {\r\n            const inv_length = 1 / length;\r\n            this.x *= inv_length;\r\n            this.y *= inv_length;\r\n        }\r\n        return this;\r\n    }\r\n    SelfRotate(radians) {\r\n        const c = Math.cos(radians);\r\n        const s = Math.sin(radians);\r\n        const x = this.x;\r\n        this.x = c * x - s * this.y;\r\n        this.y = s * x + c * this.y;\r\n        return this;\r\n    }\r\n    IsValid() {\r\n        return isFinite(this.x) && isFinite(this.y);\r\n    }\r\n    SelfCrossVS(s) {\r\n        const x = this.x;\r\n        this.x = s * this.y;\r\n        this.y = -s * x;\r\n        return this;\r\n    }\r\n    SelfCrossSV(s) {\r\n        const x = this.x;\r\n        this.x = -s * this.y;\r\n        this.y = s * x;\r\n        return this;\r\n    }\r\n    SelfMinV(v) {\r\n        this.x = b2Min(this.x, v.x);\r\n        this.y = b2Min(this.y, v.y);\r\n        return this;\r\n    }\r\n    SelfMaxV(v) {\r\n        this.x = b2Max(this.x, v.x);\r\n        this.y = b2Max(this.y, v.y);\r\n        return this;\r\n    }\r\n    SelfAbs() {\r\n        this.x = b2Abs(this.x);\r\n        this.y = b2Abs(this.y);\r\n        return this;\r\n    }\r\n    SelfNeg() {\r\n        this.x = (-this.x);\r\n        this.y = (-this.y);\r\n        return this;\r\n    }\r\n    SelfSkew() {\r\n        const x = this.x;\r\n        this.x = -this.y;\r\n        this.y = x;\r\n        return this;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Vec2());\r\n    }\r\n    static AbsV(v, out) { return b2AbsV(v, out); }\r\n    static MinV(a, b, out) { return b2MinV(a, b, out); }\r\n    static MaxV(a, b, out) { return b2MaxV(a, b, out); }\r\n    static ClampV(v, lo, hi, out) { return b2ClampV(v, lo, hi, out); }\r\n    static RotateV(v, radians, out) { return b2RotateV(v, radians, out); }\r\n    static DotVV(a, b) { return b2DotVV(a, b); }\r\n    static CrossVV(a, b) { return b2CrossVV(a, b); }\r\n    static CrossVS(v, s, out) { return b2CrossVS(v, s, out); }\r\n    static CrossVOne(v, out) { return b2CrossVOne(v, out); }\r\n    static CrossSV(s, v, out) { return b2CrossSV(s, v, out); }\r\n    static CrossOneV(v, out) { return b2CrossOneV(v, out); }\r\n    static AddVV(a, b, out) { return b2AddVV(a, b, out); }\r\n    static SubVV(a, b, out) { return b2SubVV(a, b, out); }\r\n    static MulSV(s, v, out) { return b2MulSV(s, v, out); }\r\n    static MulVS(v, s, out) { return b2MulVS(v, s, out); }\r\n    static AddVMulSV(a, s, b, out) { return b2AddVMulSV(a, s, b, out); }\r\n    static SubVMulSV(a, s, b, out) { return b2SubVMulSV(a, s, b, out); }\r\n    static AddVCrossSV(a, s, v, out) { return b2AddVCrossSV(a, s, v, out); }\r\n    static MidVV(a, b, out) { return b2MidVV(a, b, out); }\r\n    static ExtVV(a, b, out) { return b2ExtVV(a, b, out); }\r\n    static IsEqualToV(a, b) { return b2IsEqualToV(a, b); }\r\n    static DistanceVV(a, b) { return b2DistanceVV(a, b); }\r\n    static DistanceSquaredVV(a, b) { return b2DistanceSquaredVV(a, b); }\r\n    static NegV(v, out) { return b2NegV(v, out); }\r\n}\r\nb2Vec2.ZERO = new b2Vec2(0, 0);\r\nb2Vec2.UNITX = new b2Vec2(1, 0);\r\nb2Vec2.UNITY = new b2Vec2(0, 1);\r\nb2Vec2.s_t0 = new b2Vec2();\r\nb2Vec2.s_t1 = new b2Vec2();\r\nb2Vec2.s_t2 = new b2Vec2();\r\nb2Vec2.s_t3 = new b2Vec2();\r\nexport const b2Vec2_zero = new b2Vec2(0, 0);\r\nfunction b2AbsV(v, out) {\r\n    out.x = b2Abs(v.x);\r\n    out.y = b2Abs(v.y);\r\n    return out;\r\n}\r\nfunction b2MinV(a, b, out) {\r\n    out.x = b2Min(a.x, b.x);\r\n    out.y = b2Min(a.y, b.y);\r\n    return out;\r\n}\r\nfunction b2MaxV(a, b, out) {\r\n    out.x = b2Max(a.x, b.x);\r\n    out.y = b2Max(a.y, b.y);\r\n    return out;\r\n}\r\nfunction b2ClampV(v, lo, hi, out) {\r\n    out.x = b2Clamp(v.x, lo.x, hi.x);\r\n    out.y = b2Clamp(v.y, lo.y, hi.y);\r\n    return out;\r\n}\r\nfunction b2RotateV(v, radians, out) {\r\n    const v_x = v.x, v_y = v.y;\r\n    const c = Math.cos(radians);\r\n    const s = Math.sin(radians);\r\n    out.x = c * v_x - s * v_y;\r\n    out.y = s * v_x + c * v_y;\r\n    return out;\r\n}\r\nfunction b2DotVV(a, b) {\r\n    return a.x * b.x + a.y * b.y;\r\n}\r\nfunction b2CrossVV(a, b) {\r\n    return a.x * b.y - a.y * b.x;\r\n}\r\nfunction b2CrossVS(v, s, out) {\r\n    const v_x = v.x;\r\n    out.x = s * v.y;\r\n    out.y = -s * v_x;\r\n    return out;\r\n}\r\nfunction b2CrossVOne(v, out) {\r\n    const v_x = v.x;\r\n    out.x = v.y;\r\n    out.y = -v_x;\r\n    return out;\r\n}\r\nfunction b2CrossSV(s, v, out) {\r\n    const v_x = v.x;\r\n    out.x = -s * v.y;\r\n    out.y = s * v_x;\r\n    return out;\r\n}\r\nfunction b2CrossOneV(v, out) {\r\n    const v_x = v.x;\r\n    out.x = -v.y;\r\n    out.y = v_x;\r\n    return out;\r\n}\r\nfunction b2AddVV(a, b, out) { out.x = a.x + b.x; out.y = a.y + b.y; return out; }\r\nfunction b2SubVV(a, b, out) { out.x = a.x - b.x; out.y = a.y - b.y; return out; }\r\nfunction b2MulSV(s, v, out) { out.x = v.x * s; out.y = v.y * s; return out; }\r\nfunction b2MulVS(v, s, out) { out.x = v.x * s; out.y = v.y * s; return out; }\r\nfunction b2AddVMulSV(a, s, b, out) { out.x = a.x + (s * b.x); out.y = a.y + (s * b.y); return out; }\r\nfunction b2SubVMulSV(a, s, b, out) { out.x = a.x - (s * b.x); out.y = a.y - (s * b.y); return out; }\r\nfunction b2AddVCrossSV(a, s, v, out) {\r\n    const v_x = v.x;\r\n    out.x = a.x - (s * v.y);\r\n    out.y = a.y + (s * v_x);\r\n    return out;\r\n}\r\nfunction b2MidVV(a, b, out) { out.x = (a.x + b.x) * 0.5; out.y = (a.y + b.y) * 0.5; return out; }\r\nfunction b2ExtVV(a, b, out) { out.x = (b.x - a.x) * 0.5; out.y = (b.y - a.y) * 0.5; return out; }\r\nfunction b2IsEqualToV(a, b) {\r\n    return a.x === b.x && a.y === b.y;\r\n}\r\nfunction b2DistanceVV(a, b) {\r\n    const c_x = a.x - b.x;\r\n    const c_y = a.y - b.y;\r\n    return Math.sqrt(c_x * c_x + c_y * c_y);\r\n}\r\nfunction b2DistanceSquaredVV(a, b) {\r\n    const c_x = a.x - b.x;\r\n    const c_y = a.y - b.y;\r\n    return (c_x * c_x + c_y * c_y);\r\n}\r\nfunction b2NegV(v, out) { out.x = -v.x; out.y = -v.y; return out; }\r\n/// A 2D column vector with 3 elements.\r\nexport class b2Vec3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    Clone() {\r\n        return new b2Vec3(this.x, this.y, this.z);\r\n    }\r\n    SetZero() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        return this;\r\n    }\r\n    SetXYZ(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n        return this;\r\n    }\r\n    SelfNeg() {\r\n        this.x = (-this.x);\r\n        this.y = (-this.y);\r\n        this.z = (-this.z);\r\n        return this;\r\n    }\r\n    SelfAdd(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    SelfAddXYZ(x, y, z) {\r\n        this.x += x;\r\n        this.y += y;\r\n        this.z += z;\r\n        return this;\r\n    }\r\n    SelfSub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        return this;\r\n    }\r\n    SelfSubXYZ(x, y, z) {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        this.z -= z;\r\n        return this;\r\n    }\r\n    SelfMul(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        this.z *= s;\r\n        return this;\r\n    }\r\n    static DotV3V3(a, b) { return b2DotV3V3(a, b); }\r\n    static CrossV3V3(a, b, out) { return b2CrossV3V3(a, b, out); }\r\n}\r\nb2Vec3.ZERO = new b2Vec3(0, 0, 0);\r\nb2Vec3.s_t0 = new b2Vec3();\r\nfunction b2DotV3V3(a, b) {\r\n    return a.x * b.x + a.y * b.y + a.z * b.z;\r\n}\r\nfunction b2CrossV3V3(a, b, out) {\r\n    const a_x = a.x, a_y = a.y, a_z = a.z;\r\n    const b_x = b.x, b_y = b.y, b_z = b.z;\r\n    out.x = a_y * b_z - a_z * b_y;\r\n    out.y = a_z * b_x - a_x * b_z;\r\n    out.z = a_x * b_y - a_y * b_x;\r\n    return out;\r\n}\r\n/// A 2-by-2 matrix. Stored in column-major order.\r\nexport class b2Mat22 {\r\n    constructor() {\r\n        this.ex = new b2Vec2(1, 0);\r\n        this.ey = new b2Vec2(0, 1);\r\n    }\r\n    Clone() {\r\n        return new b2Mat22().Copy(this);\r\n    }\r\n    static FromVV(c1, c2) {\r\n        return new b2Mat22().SetVV(c1, c2);\r\n    }\r\n    static FromSSSS(r1c1, r1c2, r2c1, r2c2) {\r\n        return new b2Mat22().SetSSSS(r1c1, r1c2, r2c1, r2c2);\r\n    }\r\n    static FromAngle(radians) {\r\n        return new b2Mat22().SetAngle(radians);\r\n    }\r\n    SetSSSS(r1c1, r1c2, r2c1, r2c2) {\r\n        this.ex.Set(r1c1, r2c1);\r\n        this.ey.Set(r1c2, r2c2);\r\n        return this;\r\n    }\r\n    SetVV(c1, c2) {\r\n        this.ex.Copy(c1);\r\n        this.ey.Copy(c2);\r\n        return this;\r\n    }\r\n    SetAngle(radians) {\r\n        const c = Math.cos(radians);\r\n        const s = Math.sin(radians);\r\n        this.ex.Set(c, s);\r\n        this.ey.Set(-s, c);\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.ex.Copy(other.ex);\r\n        this.ey.Copy(other.ey);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.ex.Set(1, 0);\r\n        this.ey.Set(0, 1);\r\n        return this;\r\n    }\r\n    SetZero() {\r\n        this.ex.SetZero();\r\n        this.ey.SetZero();\r\n        return this;\r\n    }\r\n    GetAngle() {\r\n        return Math.atan2(this.ex.y, this.ex.x);\r\n    }\r\n    GetInverse(out) {\r\n        const a = this.ex.x;\r\n        const b = this.ey.x;\r\n        const c = this.ex.y;\r\n        const d = this.ey.y;\r\n        let det = a * d - b * c;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.ex.x = det * d;\r\n        out.ey.x = (-det * b);\r\n        out.ex.y = (-det * c);\r\n        out.ey.y = det * a;\r\n        return out;\r\n    }\r\n    Solve(b_x, b_y, out) {\r\n        const a11 = this.ex.x, a12 = this.ey.x;\r\n        const a21 = this.ex.y, a22 = this.ey.y;\r\n        let det = a11 * a22 - a12 * a21;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (a22 * b_x - a12 * b_y);\r\n        out.y = det * (a11 * b_y - a21 * b_x);\r\n        return out;\r\n    }\r\n    SelfAbs() {\r\n        this.ex.SelfAbs();\r\n        this.ey.SelfAbs();\r\n        return this;\r\n    }\r\n    SelfInv() {\r\n        return this.GetInverse(this);\r\n    }\r\n    SelfAddM(M) {\r\n        this.ex.SelfAdd(M.ex);\r\n        this.ey.SelfAdd(M.ey);\r\n        return this;\r\n    }\r\n    SelfSubM(M) {\r\n        this.ex.SelfSub(M.ex);\r\n        this.ey.SelfSub(M.ey);\r\n        return this;\r\n    }\r\n    static AbsM(M, out) { return b2AbsM(M, out); }\r\n    static MulMV(M, v, out) { return b2MulMV(M, v, out); }\r\n    static MulTMV(M, v, out) { return b2MulTMV(M, v, out); }\r\n    static AddMM(A, B, out) { return b2AddMM(A, B, out); }\r\n    static MulMM(A, B, out) { return b2MulMM(A, B, out); }\r\n    static MulTMM(A, B, out) { return b2MulTMM(A, B, out); }\r\n}\r\nb2Mat22.IDENTITY = new b2Mat22();\r\nfunction b2AbsM(M, out) {\r\n    const M_ex = M.ex, M_ey = M.ey;\r\n    out.ex.x = b2Abs(M_ex.x);\r\n    out.ex.y = b2Abs(M_ex.y);\r\n    out.ey.x = b2Abs(M_ey.x);\r\n    out.ey.y = b2Abs(M_ey.y);\r\n    return out;\r\n}\r\nfunction b2MulMV(M, v, out) {\r\n    const M_ex = M.ex, M_ey = M.ey;\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = M_ex.x * v_x + M_ey.x * v_y;\r\n    out.y = M_ex.y * v_x + M_ey.y * v_y;\r\n    return out;\r\n}\r\nfunction b2MulTMV(M, v, out) {\r\n    const M_ex = M.ex, M_ey = M.ey;\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = M_ex.x * v_x + M_ex.y * v_y;\r\n    out.y = M_ey.x * v_x + M_ey.y * v_y;\r\n    return out;\r\n}\r\nfunction b2AddMM(A, B, out) {\r\n    const A_ex = A.ex, A_ey = A.ey;\r\n    const B_ex = B.ex, B_ey = B.ey;\r\n    out.ex.x = A_ex.x + B_ex.x;\r\n    out.ex.y = A_ex.y + B_ex.y;\r\n    out.ey.x = A_ey.x + B_ey.x;\r\n    out.ey.y = A_ey.y + B_ey.y;\r\n    return out;\r\n}\r\nfunction b2MulMM(A, B, out) {\r\n    const A_ex_x = A.ex.x, A_ex_y = A.ex.y;\r\n    const A_ey_x = A.ey.x, A_ey_y = A.ey.y;\r\n    const B_ex_x = B.ex.x, B_ex_y = B.ex.y;\r\n    const B_ey_x = B.ey.x, B_ey_y = B.ey.y;\r\n    out.ex.x = A_ex_x * B_ex_x + A_ey_x * B_ex_y;\r\n    out.ex.y = A_ex_y * B_ex_x + A_ey_y * B_ex_y;\r\n    out.ey.x = A_ex_x * B_ey_x + A_ey_x * B_ey_y;\r\n    out.ey.y = A_ex_y * B_ey_x + A_ey_y * B_ey_y;\r\n    return out;\r\n}\r\nfunction b2MulTMM(A, B, out) {\r\n    const A_ex_x = A.ex.x, A_ex_y = A.ex.y;\r\n    const A_ey_x = A.ey.x, A_ey_y = A.ey.y;\r\n    const B_ex_x = B.ex.x, B_ex_y = B.ex.y;\r\n    const B_ey_x = B.ey.x, B_ey_y = B.ey.y;\r\n    out.ex.x = A_ex_x * B_ex_x + A_ex_y * B_ex_y;\r\n    out.ex.y = A_ey_x * B_ex_x + A_ey_y * B_ex_y;\r\n    out.ey.x = A_ex_x * B_ey_x + A_ex_y * B_ey_y;\r\n    out.ey.y = A_ey_x * B_ey_x + A_ey_y * B_ey_y;\r\n    return out;\r\n}\r\n/// A 3-by-3 matrix. Stored in column-major order.\r\nexport class b2Mat33 {\r\n    constructor() {\r\n        this.ex = new b2Vec3(1, 0, 0);\r\n        this.ey = new b2Vec3(0, 1, 0);\r\n        this.ez = new b2Vec3(0, 0, 1);\r\n    }\r\n    Clone() {\r\n        return new b2Mat33().Copy(this);\r\n    }\r\n    SetVVV(c1, c2, c3) {\r\n        this.ex.Copy(c1);\r\n        this.ey.Copy(c2);\r\n        this.ez.Copy(c3);\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.ex.Copy(other.ex);\r\n        this.ey.Copy(other.ey);\r\n        this.ez.Copy(other.ez);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.ex.SetXYZ(1, 0, 0);\r\n        this.ey.SetXYZ(0, 1, 0);\r\n        this.ez.SetXYZ(0, 0, 1);\r\n        return this;\r\n    }\r\n    SetZero() {\r\n        this.ex.SetZero();\r\n        this.ey.SetZero();\r\n        this.ez.SetZero();\r\n        return this;\r\n    }\r\n    SelfAddM(M) {\r\n        this.ex.SelfAdd(M.ex);\r\n        this.ey.SelfAdd(M.ey);\r\n        this.ez.SelfAdd(M.ez);\r\n        return this;\r\n    }\r\n    Solve33(b_x, b_y, b_z, out) {\r\n        const a11 = this.ex.x, a21 = this.ex.y, a31 = this.ex.z;\r\n        const a12 = this.ey.x, a22 = this.ey.y, a32 = this.ey.z;\r\n        const a13 = this.ez.x, a23 = this.ez.y, a33 = this.ez.z;\r\n        let det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (b_x * (a22 * a33 - a32 * a23) + b_y * (a32 * a13 - a12 * a33) + b_z * (a12 * a23 - a22 * a13));\r\n        out.y = det * (a11 * (b_y * a33 - b_z * a23) + a21 * (b_z * a13 - b_x * a33) + a31 * (b_x * a23 - b_y * a13));\r\n        out.z = det * (a11 * (a22 * b_z - a32 * b_y) + a21 * (a32 * b_x - a12 * b_z) + a31 * (a12 * b_y - a22 * b_x));\r\n        return out;\r\n    }\r\n    Solve22(b_x, b_y, out) {\r\n        const a11 = this.ex.x, a12 = this.ey.x;\r\n        const a21 = this.ex.y, a22 = this.ey.y;\r\n        let det = a11 * a22 - a12 * a21;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (a22 * b_x - a12 * b_y);\r\n        out.y = det * (a11 * b_y - a21 * b_x);\r\n        return out;\r\n    }\r\n    GetInverse22(M) {\r\n        const a = this.ex.x, b = this.ey.x, c = this.ex.y, d = this.ey.y;\r\n        let det = a * d - b * c;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        M.ex.x = det * d;\r\n        M.ey.x = -det * b;\r\n        M.ex.z = 0;\r\n        M.ex.y = -det * c;\r\n        M.ey.y = det * a;\r\n        M.ey.z = 0;\r\n        M.ez.x = 0;\r\n        M.ez.y = 0;\r\n        M.ez.z = 0;\r\n    }\r\n    GetSymInverse33(M) {\r\n        let det = b2DotV3V3(this.ex, b2CrossV3V3(this.ey, this.ez, b2Vec3.s_t0));\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        const a11 = this.ex.x, a12 = this.ey.x, a13 = this.ez.x;\r\n        const a22 = this.ey.y, a23 = this.ez.y;\r\n        const a33 = this.ez.z;\r\n        M.ex.x = det * (a22 * a33 - a23 * a23);\r\n        M.ex.y = det * (a13 * a23 - a12 * a33);\r\n        M.ex.z = det * (a12 * a23 - a13 * a22);\r\n        M.ey.x = M.ex.y;\r\n        M.ey.y = det * (a11 * a33 - a13 * a13);\r\n        M.ey.z = det * (a13 * a12 - a11 * a23);\r\n        M.ez.x = M.ex.z;\r\n        M.ez.y = M.ey.z;\r\n        M.ez.z = det * (a11 * a22 - a12 * a12);\r\n    }\r\n    static MulM33V3(A, v, out) { return b2MulM33V3(A, v, out); }\r\n    static MulM33XYZ(A, x, y, z, out) { return b2MulM33XYZ(A, x, y, z, out); }\r\n    static MulM33V2(A, v, out) { return b2MulM33V2(A, v, out); }\r\n    static MulM33XY(A, x, y, out) { return b2MulM33XY(A, x, y, out); }\r\n}\r\nb2Mat33.IDENTITY = new b2Mat33();\r\nfunction b2MulM33V3(A, v, out) {\r\n    const v_x = v.x, v_y = v.y, v_z = v.z;\r\n    out.x = A.ex.x * v_x + A.ey.x * v_y + A.ez.x * v_z;\r\n    out.y = A.ex.y * v_x + A.ey.y * v_y + A.ez.y * v_z;\r\n    out.z = A.ex.z * v_x + A.ey.z * v_y + A.ez.z * v_z;\r\n    return out;\r\n}\r\nfunction b2MulM33XYZ(A, x, y, z, out) {\r\n    out.x = A.ex.x * x + A.ey.x * y + A.ez.x * z;\r\n    out.y = A.ex.y * x + A.ey.y * y + A.ez.y * z;\r\n    out.z = A.ex.z * x + A.ey.z * y + A.ez.z * z;\r\n    return out;\r\n}\r\nfunction b2MulM33V2(A, v, out) {\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = A.ex.x * v_x + A.ey.x * v_y;\r\n    out.y = A.ex.y * v_x + A.ey.y * v_y;\r\n    return out;\r\n}\r\nfunction b2MulM33XY(A, x, y, out) {\r\n    out.x = A.ex.x * x + A.ey.x * y;\r\n    out.y = A.ex.y * x + A.ey.y * y;\r\n    return out;\r\n}\r\n/// Rotation\r\nexport class b2Rot {\r\n    constructor(angle = 0) {\r\n        this.s = 0;\r\n        this.c = 1;\r\n        if (angle) {\r\n            this.s = Math.sin(angle);\r\n            this.c = Math.cos(angle);\r\n        }\r\n    }\r\n    Clone() {\r\n        return new b2Rot().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.s = other.s;\r\n        this.c = other.c;\r\n        return this;\r\n    }\r\n    SetAngle(angle) {\r\n        this.s = Math.sin(angle);\r\n        this.c = Math.cos(angle);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.s = 0;\r\n        this.c = 1;\r\n        return this;\r\n    }\r\n    GetAngle() {\r\n        return Math.atan2(this.s, this.c);\r\n    }\r\n    GetXAxis(out) {\r\n        out.x = this.c;\r\n        out.y = this.s;\r\n        return out;\r\n    }\r\n    GetYAxis(out) {\r\n        out.x = -this.s;\r\n        out.y = this.c;\r\n        return out;\r\n    }\r\n    static MulRR(q, r, out) { return b2MulRR(q, r, out); }\r\n    static MulTRR(q, r, out) { return b2MulTRR(q, r, out); }\r\n    static MulRV(q, v, out) { return b2MulRV(q, v, out); }\r\n    static MulTRV(q, v, out) { return b2MulTRV(q, v, out); }\r\n}\r\nb2Rot.IDENTITY = new b2Rot();\r\nfunction b2MulRR(q, r, out) {\r\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\r\n    // [qs  qc]   [rs  rc]   [qs*rc+qc*rs -qs*rs+qc*rc]\r\n    // s = qs * rc + qc * rs\r\n    // c = qc * rc - qs * rs\r\n    const q_c = q.c, q_s = q.s;\r\n    const r_c = r.c, r_s = r.s;\r\n    out.s = q_s * r_c + q_c * r_s;\r\n    out.c = q_c * r_c - q_s * r_s;\r\n    return out;\r\n}\r\nfunction b2MulTRR(q, r, out) {\r\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\r\n    // [-qs qc]   [rs  rc]   [-qs*rc+qc*rs qs*rs+qc*rc]\r\n    // s = qc * rs - qs * rc\r\n    // c = qc * rc + qs * rs\r\n    const q_c = q.c, q_s = q.s;\r\n    const r_c = r.c, r_s = r.s;\r\n    out.s = q_c * r_s - q_s * r_c;\r\n    out.c = q_c * r_c + q_s * r_s;\r\n    return out;\r\n}\r\nfunction b2MulRV(q, v, out) {\r\n    const q_c = q.c, q_s = q.s;\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = q_c * v_x - q_s * v_y;\r\n    out.y = q_s * v_x + q_c * v_y;\r\n    return out;\r\n}\r\nfunction b2MulTRV(q, v, out) {\r\n    const q_c = q.c, q_s = q.s;\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = q_c * v_x + q_s * v_y;\r\n    out.y = -q_s * v_x + q_c * v_y;\r\n    return out;\r\n}\r\n/// A transform contains translation and rotation. It is used to represent\r\n/// the position and orientation of rigid frames.\r\nexport class b2Transform {\r\n    constructor() {\r\n        this.p = new b2Vec2();\r\n        this.q = new b2Rot();\r\n    }\r\n    Clone() {\r\n        return new b2Transform().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.p.Copy(other.p);\r\n        this.q.Copy(other.q);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.p.SetZero();\r\n        this.q.SetIdentity();\r\n        return this;\r\n    }\r\n    SetPositionRotation(position, q) {\r\n        this.p.Copy(position);\r\n        this.q.Copy(q);\r\n        return this;\r\n    }\r\n    SetPositionAngle(pos, a) {\r\n        this.p.Copy(pos);\r\n        this.q.SetAngle(a);\r\n        return this;\r\n    }\r\n    SetPosition(position) {\r\n        this.p.Copy(position);\r\n        return this;\r\n    }\r\n    SetPositionXY(x, y) {\r\n        this.p.Set(x, y);\r\n        return this;\r\n    }\r\n    SetRotation(rotation) {\r\n        this.q.Copy(rotation);\r\n        return this;\r\n    }\r\n    SetRotationAngle(radians) {\r\n        this.q.SetAngle(radians);\r\n        return this;\r\n    }\r\n    GetPosition() {\r\n        return this.p;\r\n    }\r\n    GetRotation() {\r\n        return this.q;\r\n    }\r\n    GetRotationAngle() {\r\n        return this.q.GetAngle();\r\n    }\r\n    GetAngle() {\r\n        return this.q.GetAngle();\r\n    }\r\n    static MulXV(T, v, out) { return b2MulXV(T, v, out); }\r\n    static MulTXV(T, v, out) { return b2MulTXV(T, v, out); }\r\n    static MulXX(A, B, out) { return b2MulXX(A, B, out); }\r\n    static MulTXX(A, B, out) { return b2MulTXX(A, B, out); }\r\n}\r\nb2Transform.IDENTITY = new b2Transform();\r\nfunction b2MulXV(T, v, out) {\r\n    //  float32 x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;\r\n    //  float32 y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;\r\n    //\r\n    //  return b2Vec2(x, y);\r\n    const T_q_c = T.q.c, T_q_s = T.q.s;\r\n    const v_x = v.x, v_y = v.y;\r\n    out.x = (T_q_c * v_x - T_q_s * v_y) + T.p.x;\r\n    out.y = (T_q_s * v_x + T_q_c * v_y) + T.p.y;\r\n    return out;\r\n}\r\nfunction b2MulTXV(T, v, out) {\r\n    //  float32 px = v.x - T.p.x;\r\n    //  float32 py = v.y - T.p.y;\r\n    //  float32 x = (T.q.c * px + T.q.s * py);\r\n    //  float32 y = (-T.q.s * px + T.q.c * py);\r\n    //\r\n    //  return b2Vec2(x, y);\r\n    const T_q_c = T.q.c, T_q_s = T.q.s;\r\n    const p_x = v.x - T.p.x;\r\n    const p_y = v.y - T.p.y;\r\n    out.x = (T_q_c * p_x + T_q_s * p_y);\r\n    out.y = (-T_q_s * p_x + T_q_c * p_y);\r\n    return out;\r\n}\r\nfunction b2MulXX(A, B, out) {\r\n    b2MulRR(A.q, B.q, out.q);\r\n    b2AddVV(b2MulRV(A.q, B.p, out.p), A.p, out.p);\r\n    return out;\r\n}\r\nfunction b2MulTXX(A, B, out) {\r\n    b2MulTRR(A.q, B.q, out.q);\r\n    b2MulTRV(A.q, b2SubVV(B.p, A.p, out.p), out.p);\r\n    return out;\r\n}\r\n/// This describes the motion of a body/shape for TOI computation.\r\n/// Shapes are defined with respect to the body origin, which may\r\n/// no coincide with the center of mass. However, to support dynamics\r\n/// we must interpolate the center of mass position.\r\nexport class b2Sweep {\r\n    constructor() {\r\n        this.localCenter = new b2Vec2();\r\n        this.c0 = new b2Vec2();\r\n        this.c = new b2Vec2();\r\n        this.a0 = 0;\r\n        this.a = 0;\r\n        this.alpha0 = 0;\r\n    }\r\n    Clone() {\r\n        return new b2Sweep().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.localCenter.Copy(other.localCenter);\r\n        this.c0.Copy(other.c0);\r\n        this.c.Copy(other.c);\r\n        this.a0 = other.a0;\r\n        this.a = other.a;\r\n        this.alpha0 = other.alpha0;\r\n        return this;\r\n    }\r\n    GetTransform(xf, beta) {\r\n        const one_minus_beta = (1 - beta);\r\n        xf.p.x = one_minus_beta * this.c0.x + beta * this.c.x;\r\n        xf.p.y = one_minus_beta * this.c0.y + beta * this.c.y;\r\n        const angle = one_minus_beta * this.a0 + beta * this.a;\r\n        xf.q.SetAngle(angle);\r\n        xf.p.SelfSub(b2MulRV(xf.q, this.localCenter, b2Vec2.s_t0));\r\n        return xf;\r\n    }\r\n    Advance(alpha) {\r\n        ///b2Assert(this.alpha0 < 1);\r\n        const beta = (alpha - this.alpha0) / (1 - this.alpha0);\r\n        const one_minus_beta = (1 - beta);\r\n        this.c0.x = one_minus_beta * this.c0.x + beta * this.c.x;\r\n        this.c0.y = one_minus_beta * this.c0.y + beta * this.c.y;\r\n        this.a0 = one_minus_beta * this.a0 + beta * this.a;\r\n        this.alpha0 = alpha;\r\n    }\r\n    Normalize() {\r\n        const d = b2_two_pi * Math.floor(this.a0 / b2_two_pi);\r\n        this.a0 -= d;\r\n        this.a -= d;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJNYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvQ29tbW9uL2IyTWF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNsRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQVcsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUM5Qiw2Q0FBNkM7QUFDN0MsaUNBQWlDO0FBQ2pDLElBQUk7QUFFSixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUM5Qix3REFBd0Q7QUFDeEQsZ0NBQWdDO0FBQ2hDLElBQUk7QUFFSixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUM5Qix3REFBd0Q7QUFDeEQsZ0NBQWdDO0FBQ2hDLElBQUk7QUFFSixNQUFNLGtCQUFrQixDQUFTLEVBQUUsRUFBVSxFQUFFLEVBQVU7SUFDdkQsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxNQUFNLGlCQUFvQixDQUFNLEVBQUUsQ0FBTTtJQUN0Qyxt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RSxDQUFTLEVBQUUsR0FBVyxJQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVJLHFCQUFxQixDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxHQUFXLElBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFNUksdUJBQXVCLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLEdBQVc7SUFDakUsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxpQkFBaUIsQ0FBUyxFQUFFLENBQVMsRUFBRSxHQUFXLElBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxD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LENBQUMsRUFBRTtZQUNiLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7UUFDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFTSxPQUFPLENBQUMsR0FBVyxFQUFFLEdBQVcsRUFBRSxHQUFXO1FBQ2xELE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkQsSUFBSSxHQUFHLEdBQVcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3hDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNiLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7UUFDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDdEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sWUFBWSxDQUFDLENBQVU7UUFDNUIsTUFBTSxDQUFDLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakcsSUFBSSxHQUFHLEdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNiLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7UUFFRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQVUsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQVUsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxlQUFlLENBQUMsQ0FBVTtRQUMvQixJQUFJLEdBQUcsR0FBVyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNiLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7UUFFRCxNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUV2QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUV2QyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFVLEVBQUUsQ0FBUyxFQUFFLEdBQVcsSUFBWSxPQUFPLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RixNQUFNLENBQUMsU0FBUyxDQUFDLENBQVUsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxHQUFXLElBQVksT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzSCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQVUsRUFBRSxDQUFTLEVBQUUsR0FBVyxJQUFZLE9BQU8sVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdGLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBVSxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsR0FBVyxJQUFZLE9BQU8sVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUE5R3BHLGdCQUFRLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQWlIekMsb0JBQW9CLENBQVUsRUFBRSxDQUFTLEVBQUUsR0FBVztJQUNwRCxNQUFNLEdBQUcsR0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDbkQsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNuRCxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ25ELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUNELHFCQUFxQixDQUFVLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsR0FBVztJQUMzRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFDRCxvQkFBb0IsQ0FBVSxFQUFFLENBQVMsRUFBRSxHQUFXO0lBQ3BELE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3BDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNwQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFDRCxvQkFBb0IsQ0FBVSxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsR0FBVztJQUMvRCxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFlBQVk7QUFDWixNQUFNO0lBTUosWUFBWSxRQUFnQixDQUFDO1FBSHRCLE1BQUMsR0FBVyxDQUFDLENBQUM7UUFDZCxNQUFDLEdBQVcsQ0FBQyxDQUFDO1FBR25CLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQVk7UUFDdEIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBUSxFQUFFLENBQVEsRUFBRSxHQUFVLElBQVcsT0FBTyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFRLEVBQUUsQ0FBUSxFQUFFLEdBQVUsSUFBVyxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRixNQUFNLENBQUMsS0FBSyxDQUFDLENBQVEsRUFBRSxDQUFTLEVBQUUsR0FBVyxJQUFZLE9BQU8sT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBUSxFQUFFLENBQVMsRUFBRSxHQUFXLElBQVksT0FBTyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBckRoRixjQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQXdEdkMsaUJBQWlCLENBQVEsRUFBRSxDQUFRLEVBQUUsR0FBVTtJQUM3QyxtREFBbUQ7SUFDbkQsbURBQW1EO0lBQ25ELHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxNQUFNLEdBQUcsR0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQzlCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQzlCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELGtCQUFrQixDQUFRLEVBQUUsQ0FBUSxFQUFFLEdBQVU7SUFDOUMsbURBQW1EO0lBQ25ELG1EQUFtRDtJQUNuRCx3QkFBd0I7SUFDeEIsd0JBQXdCO0lBQ3hCLE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUM5QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxpQkFBaUIsQ0FBUSxFQUFFLENBQVMsRUFBRSxHQUFXO0lBQy9DLE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUM5QixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxrQkFBa0IsQ0FBUSxFQUFFLENBQVMsRUFBRSxHQUFXO0lBQ2hELE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxHQUFHLENBQUMsQ0FBQyxHQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUMvQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQy9CLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELDBFQUEwRTtBQUMxRSxpREFBaUQ7QUFDakQsTUFBTTtJQUFOO1FBR2tCLE1BQUMsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLE1BQUMsR0FBVSxJQUFJLEtBQUssRUFBRSxDQUFDO0lBdUV6QyxDQUFDO0lBckVRLEtBQUs7UUFDVixPQUFPLElBQUksV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBa0I7UUFDNUIsNEJBQTRCO1FBQzVCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxDQUFRO1FBQ25ELElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsR0FBVyxFQUFFLENBQVM7UUFDNUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWdCO1FBQ2pDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGFBQWEsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUN2QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWU7UUFDaEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsT0FBZTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBYyxFQUFFLENBQVMsRUFBRSxHQUFXLElBQVksT0FBTyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFjLEVBQUUsQ0FBUyxFQUFFLEdBQVcsSUFBWSxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RixNQUFNLENBQUMsS0FBSyxDQUFDLENBQWMsRUFBRSxDQUFjLEVBQUUsR0FBZ0IsSUFBaUIsT0FBTyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFjLEVBQUUsQ0FBYyxFQUFFLEdBQWdCLElBQWlCLE9BQU8sUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQXpFckcsb0JBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBNEU3QyxpQkFBaUIsQ0FBYyxFQUFFLENBQVMsRUFBRSxHQUFXO0lBQ3ZELG9EQUFvRDtJQUNwRCxvREFBb0Q7SUFDcEQsRUFBRTtJQUNGLHdCQUF3QjtJQUN0QixNQUFNLEtBQUssR0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELGtCQUFrQixDQUFjLEVBQUUsQ0FBUyxFQUFFLEdBQVc7SUFDeEQsNkJBQTZCO0lBQzdCLDZCQUE2QjtJQUM3QiwwQ0FBMEM7SUFDMUMsMkNBQTJDO0lBQzNDLEVBQUU7SUFDRix3QkFBd0I7SUFDdEIsTUFBTSxLQUFLLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sR0FBRyxHQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxHQUFHLEdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUUsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDckMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDckMsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsaUJBQWlCLENBQWMsRUFBRSxDQUFjLEVBQUUsR0FBZ0I7SUFDL0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELGtCQUFrQixDQUFjLEVBQUUsQ0FBYyxFQUFFLEdBQWdCO0lBQ2hFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxrRUFBa0U7QUFDbEUsaUVBQWlFO0FBQ2pFLHFFQUFxRTtBQUNyRSxvREFBb0Q7QUFDcEQsTUFBTTtJQUFOO1FBQ2tCLGdCQUFXLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNuQyxPQUFFLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUMxQixNQUFDLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNsQyxPQUFFLEdBQVcsQ0FBQyxDQUFDO1FBQ2YsTUFBQyxHQUFXLENBQUMsQ0FBQztRQUNkLFdBQU0sR0FBVyxDQUFDLENBQUM7SUEyQzVCLENBQUM7SUF6Q1EsS0FBSztRQUNWLE9BQU8sSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFjO1FBQ3hCLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxZQUFZLENBQUMsRUFBZSxFQUFFLElBQVk7UUFDL0MsTUFBTSxjQUFjLEdBQVcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sS0FBSyxHQUFXLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJCLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQWE7UUFDMUIsNkJBQTZCO1FBQzdCLE1BQU0sSUFBSSxHQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxjQUFjLEdBQVcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxFQUFFLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLFNBQVM7UUFDZCxNQUFNLENBQUMsR0FBVyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_maxFloat, b2_epsilon, b2_epsilon_sq, b2_maxManifoldPoints, b2MakeArray, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Distance, b2DistanceInput, b2DistanceOutput, b2SimplexCache } from \"./b2Distance\";\r\n/// @file\r\n/// Structures and functions used for computing contact points, distance\r\n/// queries, and TOI queries.\r\nexport var b2ContactFeatureType;\r\n(function (b2ContactFeatureType) {\r\n    b2ContactFeatureType[b2ContactFeatureType[\"e_vertex\"] = 0] = \"e_vertex\";\r\n    b2ContactFeatureType[b2ContactFeatureType[\"e_face\"] = 1] = \"e_face\";\r\n})(b2ContactFeatureType || (b2ContactFeatureType = {}));\r\n/// The features that intersect to form the contact point\r\n/// This must be 4 bytes or less.\r\nexport class b2ContactFeature {\r\n    constructor() {\r\n        this._key = 0;\r\n        this._key_invalid = false;\r\n        this._indexA = 0;\r\n        this._indexB = 0;\r\n        this._typeA = 0;\r\n        this._typeB = 0;\r\n    }\r\n    get key() {\r\n        if (this._key_invalid) {\r\n            this._key_invalid = false;\r\n            this._key = this._indexA | (this._indexB << 8) | (this._typeA << 16) | (this._typeB << 24);\r\n        }\r\n        return this._key;\r\n    }\r\n    set key(value) {\r\n        this._key = value;\r\n        this._key_invalid = false;\r\n        this._indexA = this._key & 0xff;\r\n        this._indexB = (this._key >> 8) & 0xff;\r\n        this._typeA = (this._key >> 16) & 0xff;\r\n        this._typeB = (this._key >> 24) & 0xff;\r\n    }\r\n    get indexA() {\r\n        return this._indexA;\r\n    }\r\n    set indexA(value) {\r\n        this._indexA = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get indexB() {\r\n        return this._indexB;\r\n    }\r\n    set indexB(value) {\r\n        this._indexB = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get typeA() {\r\n        return this._typeA;\r\n    }\r\n    set typeA(value) {\r\n        this._typeA = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get typeB() {\r\n        return this._typeB;\r\n    }\r\n    set typeB(value) {\r\n        this._typeB = value;\r\n        this._key_invalid = true;\r\n    }\r\n}\r\n/// Contact ids to facilitate warm starting.\r\nexport class b2ContactID {\r\n    constructor() {\r\n        this.cf = new b2ContactFeature();\r\n    }\r\n    Copy(o) {\r\n        this.key = o.key;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2ContactID().Copy(this);\r\n    }\r\n    get key() {\r\n        return this.cf.key;\r\n    }\r\n    set key(value) {\r\n        this.cf.key = value;\r\n    }\r\n}\r\n/// A manifold point is a contact point belonging to a contact\r\n/// manifold. It holds details related to the geometry and dynamics\r\n/// of the contact points.\r\n/// The local point usage depends on the manifold type:\r\n/// -e_circles: the local center of circleB\r\n/// -e_faceA: the local center of cirlceB or the clip point of polygonB\r\n/// -e_faceB: the clip point of polygonA\r\n/// This structure is stored across time steps, so we keep it small.\r\n/// Note: the impulses are used for internal caching and may not\r\n/// provide reliable contact forces, especially for high speed collisions.\r\nexport class b2ManifoldPoint {\r\n    constructor() {\r\n        this.localPoint = new b2Vec2(); ///< usage depends on manifold type\r\n        this.normalImpulse = 0; ///< the non-penetration impulse\r\n        this.tangentImpulse = 0; ///< the friction impulse\r\n        this.id = new b2ContactID(); ///< uniquely identifies a contact point between two shapes\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ManifoldPoint());\r\n    }\r\n    Reset() {\r\n        this.localPoint.SetZero();\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.id.key = 0;\r\n    }\r\n    Copy(o) {\r\n        this.localPoint.Copy(o.localPoint);\r\n        this.normalImpulse = o.normalImpulse;\r\n        this.tangentImpulse = o.tangentImpulse;\r\n        this.id.Copy(o.id);\r\n        return this;\r\n    }\r\n}\r\nexport var b2ManifoldType;\r\n(function (b2ManifoldType) {\r\n    b2ManifoldType[b2ManifoldType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2ManifoldType[b2ManifoldType[\"e_circles\"] = 0] = \"e_circles\";\r\n    b2ManifoldType[b2ManifoldType[\"e_faceA\"] = 1] = \"e_faceA\";\r\n    b2ManifoldType[b2ManifoldType[\"e_faceB\"] = 2] = \"e_faceB\";\r\n})(b2ManifoldType || (b2ManifoldType = {}));\r\n/// A manifold for two touching convex shapes.\r\n/// Box2D supports multiple types of contact:\r\n/// - clip point versus plane with radius\r\n/// - point versus point with radius (circles)\r\n/// The local point usage depends on the manifold type:\r\n/// -e_circles: the local center of circleA\r\n/// -e_faceA: the center of faceA\r\n/// -e_faceB: the center of faceB\r\n/// Similarly the local normal usage:\r\n/// -e_circles: not used\r\n/// -e_faceA: the normal on polygonA\r\n/// -e_faceB: the normal on polygonB\r\n/// We store contacts in this way so that position correction can\r\n/// account for movement, which is critical for continuous physics.\r\n/// All contact scenarios must be expressed in one of these types.\r\n/// This structure is stored across time steps, so we keep it small.\r\nexport class b2Manifold {\r\n    constructor() {\r\n        this.points = b2ManifoldPoint.MakeArray(b2_maxManifoldPoints);\r\n        this.localNormal = new b2Vec2();\r\n        this.localPoint = new b2Vec2();\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.pointCount = 0;\r\n    }\r\n    Reset() {\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            ///b2Assert(this.points[i] instanceof b2ManifoldPoint);\r\n            this.points[i].Reset();\r\n        }\r\n        this.localNormal.SetZero();\r\n        this.localPoint.SetZero();\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.pointCount = 0;\r\n    }\r\n    Copy(o) {\r\n        this.pointCount = o.pointCount;\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            ///b2Assert(this.points[i] instanceof b2ManifoldPoint);\r\n            this.points[i].Copy(o.points[i]);\r\n        }\r\n        this.localNormal.Copy(o.localNormal);\r\n        this.localPoint.Copy(o.localPoint);\r\n        this.type = o.type;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2Manifold().Copy(this);\r\n    }\r\n}\r\nexport class b2WorldManifold {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.points = b2Vec2.MakeArray(b2_maxManifoldPoints);\r\n        this.separations = b2MakeNumberArray(b2_maxManifoldPoints);\r\n    }\r\n    Initialize(manifold, xfA, radiusA, xfB, radiusB) {\r\n        if (manifold.pointCount === 0) {\r\n            return;\r\n        }\r\n        switch (manifold.type) {\r\n            case b2ManifoldType.e_circles:\r\n                {\r\n                    this.normal.Set(1, 0);\r\n                    const pointA = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_pointA);\r\n                    const pointB = b2Transform.MulXV(xfB, manifold.points[0].localPoint, b2WorldManifold.Initialize_s_pointB);\r\n                    if (b2Vec2.DistanceSquaredVV(pointA, pointB) > b2_epsilon_sq) {\r\n                        b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\r\n                    }\r\n                    const cA = b2Vec2.AddVMulSV(pointA, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                    const cB = b2Vec2.SubVMulSV(pointB, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                    b2Vec2.MidVV(cA, cB, this.points[0]);\r\n                    this.separations[0] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\r\n                }\r\n                break;\r\n            case b2ManifoldType.e_faceA:\r\n                {\r\n                    b2Rot.MulRV(xfA.q, manifold.localNormal, this.normal);\r\n                    const planePoint = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\r\n                    for (let i = 0; i < manifold.pointCount; ++i) {\r\n                        const clipPoint = b2Transform.MulXV(xfB, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\r\n                        const s = radiusA - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\r\n                        const cA = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                        const cB = b2Vec2.SubVMulSV(clipPoint, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                        b2Vec2.MidVV(cA, cB, this.points[i]);\r\n                        this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\r\n                    }\r\n                }\r\n                break;\r\n            case b2ManifoldType.e_faceB:\r\n                {\r\n                    b2Rot.MulRV(xfB.q, manifold.localNormal, this.normal);\r\n                    const planePoint = b2Transform.MulXV(xfB, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\r\n                    for (let i = 0; i < manifold.pointCount; ++i) {\r\n                        const clipPoint = b2Transform.MulXV(xfA, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\r\n                        const s = radiusB - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\r\n                        const cB = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                        const cA = b2Vec2.SubVMulSV(clipPoint, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                        b2Vec2.MidVV(cA, cB, this.points[i]);\r\n                        this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cA, cB, b2Vec2.s_t0), this.normal); // b2Dot(cA - cB, normal);\r\n                    }\r\n                    // Ensure normal points from A to B.\r\n                    this.normal.SelfNeg();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\nb2WorldManifold.Initialize_s_pointA = new b2Vec2();\r\nb2WorldManifold.Initialize_s_pointB = new b2Vec2();\r\nb2WorldManifold.Initialize_s_cA = new b2Vec2();\r\nb2WorldManifold.Initialize_s_cB = new b2Vec2();\r\nb2WorldManifold.Initialize_s_planePoint = new b2Vec2();\r\nb2WorldManifold.Initialize_s_clipPoint = new b2Vec2();\r\n/// This is used for determining the state of contact points.\r\nexport var b2PointState;\r\n(function (b2PointState) {\r\n    b2PointState[b2PointState[\"b2_nullState\"] = 0] = \"b2_nullState\";\r\n    b2PointState[b2PointState[\"b2_addState\"] = 1] = \"b2_addState\";\r\n    b2PointState[b2PointState[\"b2_persistState\"] = 2] = \"b2_persistState\";\r\n    b2PointState[b2PointState[\"b2_removeState\"] = 3] = \"b2_removeState\"; ///< point was removed in the update\r\n})(b2PointState || (b2PointState = {}));\r\n/// Compute the point states given two manifolds. The states pertain to the transition from manifold1\r\n/// to manifold2. So state1 is either persist or remove while state2 is either add or persist.\r\nexport function b2GetPointStates(state1, state2, manifold1, manifold2) {\r\n    // Detect persists and removes.\r\n    let i;\r\n    for (i = 0; i < manifold1.pointCount; ++i) {\r\n        const id = manifold1.points[i].id;\r\n        const key = id.key;\r\n        state1[i] = b2PointState.b2_removeState;\r\n        for (let j = 0, jct = manifold2.pointCount; j < jct; ++j) {\r\n            if (manifold2.points[j].id.key === key) {\r\n                state1[i] = b2PointState.b2_persistState;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i < b2_maxManifoldPoints; ++i) {\r\n        state1[i] = b2PointState.b2_nullState;\r\n    }\r\n    // Detect persists and adds.\r\n    for (i = 0; i < manifold2.pointCount; ++i) {\r\n        const id = manifold2.points[i].id;\r\n        const key = id.key;\r\n        state2[i] = b2PointState.b2_addState;\r\n        for (let j = 0, jct = manifold1.pointCount; j < jct; ++j) {\r\n            if (manifold1.points[j].id.key === key) {\r\n                state2[i] = b2PointState.b2_persistState;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i < b2_maxManifoldPoints; ++i) {\r\n        state2[i] = b2PointState.b2_nullState;\r\n    }\r\n}\r\n/// Used for computing contact manifolds.\r\nexport class b2ClipVertex {\r\n    constructor() {\r\n        this.v = new b2Vec2();\r\n        this.id = new b2ContactID();\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ClipVertex());\r\n    }\r\n    Copy(other) {\r\n        this.v.Copy(other.v);\r\n        this.id.Copy(other.id);\r\n        return this;\r\n    }\r\n}\r\n/// Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\r\nexport class b2RayCastInput {\r\n    constructor() {\r\n        this.p1 = new b2Vec2();\r\n        this.p2 = new b2Vec2();\r\n        this.maxFraction = 1;\r\n    }\r\n    Copy(o) {\r\n        this.p1.Copy(o.p1);\r\n        this.p2.Copy(o.p2);\r\n        this.maxFraction = o.maxFraction;\r\n        return this;\r\n    }\r\n}\r\n/// Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2\r\n/// come from b2RayCastInput.\r\nexport class b2RayCastOutput {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.fraction = 0;\r\n    }\r\n    Copy(o) {\r\n        this.normal.Copy(o.normal);\r\n        this.fraction = o.fraction;\r\n        return this;\r\n    }\r\n}\r\n/// An axis aligned bounding box.\r\nexport class b2AABB {\r\n    constructor() {\r\n        this.lowerBound = new b2Vec2(); ///< the lower vertex\r\n        this.upperBound = new b2Vec2(); ///< the upper vertex\r\n        this.m_cache_center = new b2Vec2(); // access using GetCenter()\r\n        this.m_cache_extent = new b2Vec2(); // access using GetExtents()\r\n    }\r\n    Copy(o) {\r\n        this.lowerBound.Copy(o.lowerBound);\r\n        this.upperBound.Copy(o.upperBound);\r\n        return this;\r\n    }\r\n    /// Verify that the bounds are sorted.\r\n    IsValid() {\r\n        const d_x = this.upperBound.x - this.lowerBound.x;\r\n        const d_y = this.upperBound.y - this.lowerBound.y;\r\n        let valid = d_x >= 0 && d_y >= 0;\r\n        valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();\r\n        return valid;\r\n    }\r\n    /// Get the center of the AABB.\r\n    GetCenter() {\r\n        return b2Vec2.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);\r\n    }\r\n    /// Get the extents of the AABB (half-widths).\r\n    GetExtents() {\r\n        return b2Vec2.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);\r\n    }\r\n    /// Get the perimeter length\r\n    GetPerimeter() {\r\n        const wx = this.upperBound.x - this.lowerBound.x;\r\n        const wy = this.upperBound.y - this.lowerBound.y;\r\n        return 2 * (wx + wy);\r\n    }\r\n    /// Combine an AABB into this one.\r\n    Combine1(aabb) {\r\n        this.lowerBound.x = b2Min(this.lowerBound.x, aabb.lowerBound.x);\r\n        this.lowerBound.y = b2Min(this.lowerBound.y, aabb.lowerBound.y);\r\n        this.upperBound.x = b2Max(this.upperBound.x, aabb.upperBound.x);\r\n        this.upperBound.y = b2Max(this.upperBound.y, aabb.upperBound.y);\r\n        return this;\r\n    }\r\n    /// Combine two AABBs into this one.\r\n    Combine2(aabb1, aabb2) {\r\n        this.lowerBound.x = b2Min(aabb1.lowerBound.x, aabb2.lowerBound.x);\r\n        this.lowerBound.y = b2Min(aabb1.lowerBound.y, aabb2.lowerBound.y);\r\n        this.upperBound.x = b2Max(aabb1.upperBound.x, aabb2.upperBound.x);\r\n        this.upperBound.y = b2Max(aabb1.upperBound.y, aabb2.upperBound.y);\r\n        return this;\r\n    }\r\n    static Combine(aabb1, aabb2, out) {\r\n        out.Combine2(aabb1, aabb2);\r\n        return out;\r\n    }\r\n    /// Does this aabb contain the provided AABB.\r\n    Contains(aabb) {\r\n        let result = true;\r\n        result = result && this.lowerBound.x <= aabb.lowerBound.x;\r\n        result = result && this.lowerBound.y <= aabb.lowerBound.y;\r\n        result = result && aabb.upperBound.x <= this.upperBound.x;\r\n        result = result && aabb.upperBound.y <= this.upperBound.y;\r\n        return result;\r\n    }\r\n    // From Real-time Collision Detection, p179.\r\n    RayCast(output, input) {\r\n        let tmin = (-b2_maxFloat);\r\n        let tmax = b2_maxFloat;\r\n        const p_x = input.p1.x;\r\n        const p_y = input.p1.y;\r\n        const d_x = input.p2.x - input.p1.x;\r\n        const d_y = input.p2.y - input.p1.y;\r\n        const absD_x = b2Abs(d_x);\r\n        const absD_y = b2Abs(d_y);\r\n        const normal = output.normal;\r\n        if (absD_x < b2_epsilon) {\r\n            // Parallel.\r\n            if (p_x < this.lowerBound.x || this.upperBound.x < p_x) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            const inv_d = 1 / d_x;\r\n            let t1 = (this.lowerBound.x - p_x) * inv_d;\r\n            let t2 = (this.upperBound.x - p_x) * inv_d;\r\n            // Sign of the normal vector.\r\n            let s = (-1);\r\n            if (t1 > t2) {\r\n                const t3 = t1;\r\n                t1 = t2;\r\n                t2 = t3;\r\n                s = 1;\r\n            }\r\n            // Push the min up\r\n            if (t1 > tmin) {\r\n                normal.x = s;\r\n                normal.y = 0;\r\n                tmin = t1;\r\n            }\r\n            // Pull the max down\r\n            tmax = b2Min(tmax, t2);\r\n            if (tmin > tmax) {\r\n                return false;\r\n            }\r\n        }\r\n        if (absD_y < b2_epsilon) {\r\n            // Parallel.\r\n            if (p_y < this.lowerBound.y || this.upperBound.y < p_y) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            const inv_d = 1 / d_y;\r\n            let t1 = (this.lowerBound.y - p_y) * inv_d;\r\n            let t2 = (this.upperBound.y - p_y) * inv_d;\r\n            // Sign of the normal vector.\r\n            let s = (-1);\r\n            if (t1 > t2) {\r\n                const t3 = t1;\r\n                t1 = t2;\r\n                t2 = t3;\r\n                s = 1;\r\n            }\r\n            // Push the min up\r\n            if (t1 > tmin) {\r\n                normal.x = 0;\r\n                normal.y = s;\r\n                tmin = t1;\r\n            }\r\n            // Pull the max down\r\n            tmax = b2Min(tmax, t2);\r\n            if (tmin > tmax) {\r\n                return false;\r\n            }\r\n        }\r\n        // Does the ray start inside the box?\r\n        // Does the ray intersect beyond the max fraction?\r\n        if (tmin < 0 || input.maxFraction < tmin) {\r\n            return false;\r\n        }\r\n        // Intersection.\r\n        output.fraction = tmin;\r\n        return true;\r\n    }\r\n    TestOverlap(other) {\r\n        const d1_x = other.lowerBound.x - this.upperBound.x;\r\n        const d1_y = other.lowerBound.y - this.upperBound.y;\r\n        const d2_x = this.lowerBound.x - other.upperBound.x;\r\n        const d2_y = this.lowerBound.y - other.upperBound.y;\r\n        if (d1_x > 0 || d1_y > 0)\r\n            return false;\r\n        if (d2_x > 0 || d2_y > 0)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\nexport function b2TestOverlapAABB(a, b) {\r\n    const d1_x = b.lowerBound.x - a.upperBound.x;\r\n    const d1_y = b.lowerBound.y - a.upperBound.y;\r\n    const d2_x = a.lowerBound.x - b.upperBound.x;\r\n    const d2_y = a.lowerBound.y - b.upperBound.y;\r\n    if (d1_x > 0 || d1_y > 0)\r\n        return false;\r\n    if (d2_x > 0 || d2_y > 0)\r\n        return false;\r\n    return true;\r\n}\r\n/// Clipping for contact manifolds.\r\nexport function b2ClipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\r\n    // Start with no output points\r\n    let numOut = 0;\r\n    const vIn0 = vIn[0];\r\n    const vIn1 = vIn[1];\r\n    // Calculate the distance of end points to the line\r\n    const distance0 = b2Vec2.DotVV(normal, vIn0.v) - offset;\r\n    const distance1 = b2Vec2.DotVV(normal, vIn1.v) - offset;\r\n    // If the points are behind the plane\r\n    if (distance0 <= 0)\r\n        vOut[numOut++].Copy(vIn0);\r\n    if (distance1 <= 0)\r\n        vOut[numOut++].Copy(vIn1);\r\n    // If the points are on different sides of the plane\r\n    if (distance0 * distance1 < 0) {\r\n        // Find intersection point of edge and plane\r\n        const interp = distance0 / (distance0 - distance1);\r\n        const v = vOut[numOut].v;\r\n        v.x = vIn0.v.x + interp * (vIn1.v.x - vIn0.v.x);\r\n        v.y = vIn0.v.y + interp * (vIn1.v.y - vIn0.v.y);\r\n        // VertexA is hitting edgeB.\r\n        const id = vOut[numOut].id;\r\n        id.cf.indexA = vertexIndexA;\r\n        id.cf.indexB = vIn0.id.cf.indexB;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        id.cf.typeB = b2ContactFeatureType.e_face;\r\n        ++numOut;\r\n    }\r\n    return numOut;\r\n}\r\n/// Determine if two generic shapes overlap.\r\nconst b2TestOverlapShape_s_input = new b2DistanceInput();\r\nconst b2TestOverlapShape_s_simplexCache = new b2SimplexCache();\r\nconst b2TestOverlapShape_s_output = new b2DistanceOutput();\r\nexport function b2TestOverlapShape(shapeA, indexA, shapeB, indexB, xfA, xfB) {\r\n    const input = b2TestOverlapShape_s_input.Reset();\r\n    input.proxyA.SetShape(shapeA, indexA);\r\n    input.proxyB.SetShape(shapeB, indexB);\r\n    input.transformA.Copy(xfA);\r\n    input.transformB.Copy(xfB);\r\n    input.useRadii = true;\r\n    const simplexCache = b2TestOverlapShape_s_simplexCache.Reset();\r\n    simplexCache.count = 0;\r\n    const output = b2TestOverlapShape_s_output.Reset();\r\n    b2Distance(output, simplexCache, input);\r\n    return output.distance < 10 * b2_epsilon;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb2xsaXNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9Db2xsaXNpb24vYjJDb2xsaXNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEksT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbkYsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTdGLFNBQVM7QUFDVCx3RUFBd0U7QUFDeEUsNkJBQTZCO0FBRTdCLE1BQU0sQ0FBTixJQUFZLG9CQUdYO0FBSEQsV0FBWSxvQkFBb0I7SUFDOUIsdUVBQVksQ0FBQTtJQUNaLG1FQUFVLENBQUE7QUFDWixDQUFDLEVBSFcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQUcvQjtBQUVELHlEQUF5RDtBQUN6RCxpQ0FBaUM7QUFDakMsTUFBTTtJQVFKO1FBUE8sU0FBSSxHQUFXLENBQUMsQ0FBQztRQUNqQixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBQ3BCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFDcEIsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixXQUFNLEdBQVcsQ0FBQyxDQUFDO0lBRzFCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDWixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzVGO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLEdBQUcsQ0FBQyxLQUFhO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDekMsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBVyxNQUFNLENBQUMsS0FBYTtRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFXLE1BQU0sQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxLQUFLLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFFRCw0Q0FBNEM7QUFDNUMsTUFBTTtJQUFOO1FBQ1MsT0FBRSxHQUFxQixJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFrQnZELENBQUM7SUFoQlEsSUFBSSxDQUFDLENBQWM7UUFDeEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLElBQUksV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFXLEdBQUcsQ0FBQyxLQUFhO1FBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0NBQ0Y7QUFFRCw4REFBOEQ7QUFDOUQsbUVBQW1FO0FBQ25FLDBCQUEwQjtBQUMxQix1REFBdUQ7QUFDdkQsMkNBQTJDO0FBQzNDLHVFQUF1RTtBQUN2RSx3Q0FBd0M7QUFDeEMsb0VBQW9FO0FBQ3BFLGdFQUFnRTtBQUNoRSwwRUFBMEU7QUFDMUUsTUFBTTtJQUFOO1FBQ1MsZUFBVSxHQUFXLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBRSxtQ0FBbUM7UUFDdkUsa0JBQWEsR0FBVyxDQUFDLENBQUMsQ0FBTSxnQ0FBZ0M7UUFDaEUsbUJBQWMsR0FBVyxDQUFDLENBQUMsQ0FBTSx5QkFBeUI7UUFDMUQsT0FBRSxHQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUUsMkRBQTJEO0lBb0IxRyxDQUFDO0lBbEJRLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYztRQUNwQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFTLEVBQW1CLEVBQUUsQ0FBQyxJQUFJLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRU0sSUFBSSxDQUFDLENBQWtCO1FBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBTixJQUFZLGNBS1g7QUFMRCxXQUFZLGNBQWM7SUFDeEIsOERBQWMsQ0FBQTtJQUNkLDZEQUFhLENBQUE7SUFDYix5REFBVyxDQUFBO0lBQ1gseURBQVcsQ0FBQTtBQUNiLENBQUMsRUFMVyxjQUFjLEtBQWQsY0FBYyxRQUt6QjtBQUVELDhDQUE4QztBQUM5Qyw2Q0FBNkM7QUFDN0MseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qyx1REFBdUQ7QUFDdkQsMkNBQTJDO0FBQzNDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMscUNBQXFDO0FBQ3JDLHdCQUF3QjtBQUN4QixvQ0FBb0M7QUFDcEMsb0NBQW9DO0FBQ3BDLGlFQUFpRTtBQUNqRSxtRUFBbUU7QUFDbkUsa0VBQWtFO0FBQ2xFLG9FQUFvRTtBQUNwRSxNQUFNO0lBQU47UUFDUyxXQUFNLEdBQXNCLGVBQWUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM1RSxnQkFBVyxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDbkMsZUFBVSxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDbEMsU0FBSSxHQUFXLGNBQWMsQ0FBQyxTQUFTLENBQUM7UUFDeEMsZUFBVSxHQUFXLENBQUMsQ0FBQztJQTRCaEMsQ0FBQztJQTFCUSxLQUFLO1FBQ1YsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3JELHVEQUF1RDtZQUN2RCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUNyQyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRU0sSUFBSSxDQUFDLENBQWE7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNyRCx1REFBdUQ7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSztRQUNWLE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBRUQsTUFBTTtJQUFOO1FBQ1MsV0FBTSxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDOUIsV0FBTSxHQUFhLE1BQU0sQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUMxRCxnQkFBVyxHQUFhLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLENBQUM7SUErRHpFLENBQUM7SUF2RFEsVUFBVSxDQUFDLFFBQW9CLEVBQUUsR0FBZ0IsRUFBRSxPQUFlLEVBQUUsR0FBZ0IsRUFBRSxPQUFlO1FBQzFHLElBQUksUUFBUSxDQUFDLFVBQVUsS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTztTQUNSO1FBRUQsUUFBUSxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEtBQUssY0FBYyxDQUFDLFNBQVM7Z0JBQUU7b0JBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDdEIsTUFBTSxNQUFNLEdBQVcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDeEcsTUFBTSxNQUFNLEdBQVcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7b0JBQ2xILElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxhQUFhLEVBQUU7d0JBQzVELE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7cUJBQzNEO29CQUVELE1BQU0sRUFBRSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDbkcsTUFBTSxFQUFFLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO29CQUNuRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7aUJBQy9HO2dCQUNELE1BQU07WUFFUixLQUFLLGNBQWMsQ0FBQyxPQUFPO2dCQUFFO29CQUN6QixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RELE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLHVCQUF1QixDQUFDLENBQUM7b0JBRWhILEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFO3dCQUNwRCxNQUFNLFNBQVMsR0FBVyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FBQzt3QkFDeEgsTUFBTSxDQUFDLEdBQVcsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3hHLE1BQU0sRUFBRSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQzt3QkFDaEcsTUFBTSxFQUFFLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO3dCQUN0RyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7cUJBQy9HO2lCQUNGO2dCQUNELE1BQU07WUFFUixLQUFLLGNBQWMsQ0FBQyxPQUFPO2dCQUFFO29CQUN6QixLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3RELE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLHVCQUF1QixDQUFDLENBQUM7b0JBRWhILEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFO3dCQUNwRCxNQUFNLFNBQVMsR0FBVyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsc0JBQXNCLENBQUMsQ0FBQzt3QkFDeEgsTUFBTSxDQUFDLEdBQVcsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQ3hHLE1BQU0sRUFBRSxHQUFXLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQzt3QkFDaEcsTUFBTSxFQUFFLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO3dCQUN0RyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7cUJBQy9HO29CQUVELG9DQUFvQztvQkFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDdkI7Z0JBQ0QsTUFBTTtTQUNQO0lBQ0gsQ0FBQzs7QUE1RGMsbUNBQW1CLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUNuQyxtQ0FBbUIsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ25DLCtCQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUMvQiwrQkFBZSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7QUFDL0IsdUNBQXVCLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUN2QyxzQ0FBc0IsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBMER2RCw2REFBNkQ7QUFDN0QsTUFBTSxDQUFOLElBQVksWUFLWDtBQUxELFdBQVksWUFBWTtJQUN0QiwrREFBZ0IsQ0FBQTtJQUNoQiw2REFBZSxDQUFBO0lBQ2YscUVBQW1CLENBQUE7SUFDbkIsbUVBQWtCLENBQUEsQ0FBRSxvQ0FBb0M7QUFDMUQsQ0FBQyxFQUxXLFlBQVksS0FBWixZQUFZLFFBS3ZCO0FBRUQscUdBQXFHO0FBQ3JHLDhGQUE4RjtBQUM5RixNQUFNLDJCQUEyQixNQUFzQixFQUFFLE1BQXNCLEVBQUUsU0FBcUIsRUFBRSxTQUFxQjtJQUMzSCwrQkFBK0I7SUFDL0IsSUFBSSxDQUFTLENBQUM7SUFDZCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDekMsTUFBTSxFQUFFLEdBQWdCLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQy9DLE1BQU0sR0FBRyxHQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUM7UUFFM0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFFeEMsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsR0FBRyxHQUFHLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNoRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUU7Z0JBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsZUFBZSxDQUFDO2dCQUN6QyxNQUFNO2FBQ1A7U0FDRjtLQUNGO0lBQ0QsT0FBTyxDQUFDLEdBQUcsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUM7S0FDdkM7SUFFRCw0QkFBNEI7SUFDNUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ3pDLE1BQU0sRUFBRSxHQUFnQixTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMvQyxNQUFNLEdBQUcsR0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDO1FBRTNCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO1FBRXJDLEtBQUssSUFBSSxDQUFDLEdBQVcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDaEUsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO2dCQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQztnQkFDekMsTUFBTTthQUNQO1NBQ0Y7S0FDRjtJQUNELE9BQU8sQ0FBQyxHQUFHLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELHlDQUF5QztBQUN6QyxNQUFNO0lBQU47UUFDUyxNQUFDLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN6QixPQUFFLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFXN0MsQ0FBQztJQVRRLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYztRQUNwQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFTLEVBQWdCLEVBQUUsQ0FBQyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFtQjtRQUM3QixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsaUZBQWlGO0FBQ2pGLE1BQU07SUFBTjtRQUNTLE9BQUUsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzFCLE9BQUUsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzFCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO0lBUWpDLENBQUM7SUFOUSxJQUFJLENBQUMsQ0FBaUI7UUFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxvRkFBb0Y7QUFDcEYsNkJBQTZCO0FBQzdCLE1BQU07SUFBTjtRQUNTLFdBQU0sR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBVyxDQUFDLENBQUM7SUFPOUIsQ0FBQztJQUxRLElBQUksQ0FBQyxDQUFrQjtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQzNCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsaUNBQWlDO0FBQ2pDLE1BQU07SUFBTjtRQUNTLGVBQVUsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUMscUJBQXFCO1FBQ3hELGVBQVUsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUMscUJBQXFCO1FBRXZELG1CQUFjLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDLDJCQUEyQjtRQUNsRSxtQkFBYyxHQUFXLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyw0QkFBNEI7SUFpTDdFLENBQUM7SUEvS1EsSUFBSSxDQUFDLENBQVM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzQ0FBc0M7SUFDL0IsT0FBTztRQUNaLE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksS0FBSyxHQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxQyxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCwrQkFBK0I7SUFDeEIsU0FBUztRQUNkLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCw4Q0FBOEM7SUFDdkMsVUFBVTtRQUNmLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCw0QkFBNEI7SUFDckIsWUFBWTtRQUNqQixNQUFNLEVBQUUsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN6RCxNQUFNLEVBQUUsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsa0NBQWtDO0lBQzNCLFFBQVEsQ0FBQyxJQUFZO1FBQzFCLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELG9DQUFvQztJQUM3QixRQUFRLENBQUMsS0FBYSxFQUFFLEtBQWE7UUFDMUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDN0QsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsNkNBQTZDO0lBQ3RDLFFBQVEsQ0FBQyxJQUFZO1FBQzFCLElBQUksTUFBTSxHQUFZLElBQUksQ0FBQztRQUMzQixNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzFELE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUMxRCxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzFELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw0Q0FBNEM7SUFDckMsT0FBTyxDQUFDLE1BQXVCLEVBQUUsS0FBcUI7UUFDM0QsSUFBSSxJQUFJLEdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksSUFBSSxHQUFXLFdBQVcsQ0FBQztRQUUvQixNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLEdBQUcsR0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLE1BQU0sR0FBVyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQVcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sTUFBTSxHQUFXLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFckMsSUFBSSxNQUFNLEdBQUcsVUFBVSxFQUFFO1lBQ3ZCLFlBQVk7WUFDWixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3RELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjthQUFNO1lBQ0wsTUFBTSxLQUFLLEdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUM5QixJQUFJLEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuRCxJQUFJLEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUVuRCw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJCLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDWCxNQUFNLEVBQUUsR0FBVyxFQUFFLENBQUM7Z0JBQ3RCLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ1A7WUFFRCxrQkFBa0I7WUFDbEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUVELG9CQUFvQjtZQUNwQixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUV2QixJQUFJLElBQUksR0FBRyxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsSUFBSSxNQUFNLEdBQUcsVUFBVSxFQUFFO1lBQ3ZCLFlBQVk7WUFDWixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3RELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjthQUFNO1lBQ0wsTUFBTSxLQUFLLEdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUM5QixJQUFJLEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuRCxJQUFJLEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUVuRCw2QkFBNkI7WUFDN0IsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXJCLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDWCxNQUFNLEVBQUUsR0FBVyxFQUFFLENBQUM7Z0JBQ3RCLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ1A7WUFFRCxrQkFBa0I7WUFDbEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUVELG9CQUFvQjtZQUNwQixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUV2QixJQUFJLElBQUksR0FBRyxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQscUNBQXFDO1FBQ3JDLGtEQUFrRDtRQUNsRCxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLEVBQUU7WUFDeEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELGdCQUFnQjtRQUNoQixNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUV2QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxXQUFXLENBQUMsS0FBYTtRQUM5QixNQUFNLElBQUksR0FBVyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksR0FBVyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7WUFDdEIsT0FBTyxLQUFLLENBQUM7UUFFZixJQUFJLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUM7WUFDdEIsT0FBTyxLQUFLLENBQUM7UUFFZixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sNEJBQTRCLENBQVMsRUFBRSxDQUFTO0lBQ3BELE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sSUFBSSxHQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXJELElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQztJQUVmLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUN0QixPQUFPLEtBQUssQ0FBQztJQUVmLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELG1DQUFtQztBQUNuQyxNQUFNLDhCQUE4QixJQUFvQixFQUFFLEdBQW1CLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxZQUFvQjtJQUNqSSw4QkFBOEI7SUFDOUIsSUFBSSxNQUFNLEdBQVcsQ0FBQyxDQUFDO0lBRXZCLE1BQU0sSUFBSSxHQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsTUFBTSxJQUFJLEdBQWlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQyxtREFBbUQ7SUFDbkQsTUFBTSxTQUFTLEdBQVcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUNoRSxNQUFNLFNBQVMsR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBRWhFLHFDQUFxQztJQUNyQyxJQUFJLFNBQVMsSUFBSSxDQUFDO1FBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLElBQUksU0FBUyxJQUFJLENBQUM7UUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUMsb0RBQW9EO0lBQ3BELElBQUksU0FBUyxHQUFHLFNBQVMsR0FBRyxDQUFDLEVBQUU7UUFDN0IsNENBQTRDO1FBQzVDLE1BQU0sTUFBTSxHQUFXLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUMzRCxNQUFNLENBQUMsR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEQsNEJBQTRCO1FBQzVCLE1BQU0sRUFBRSxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztRQUM1QixFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDakMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1FBQzVDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztRQUMxQyxFQUFFLE1BQU0sQ0FBQztLQUNWO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELDRDQUE0QztBQUM1QyxNQUFNLDBCQUEwQixHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0FBQzFFLE1BQU0saUNBQWlDLEdBQW1CLElBQUksY0FBYyxFQUFFLENBQUM7QUFDL0UsTUFBTSwyQkFBMkIsR0FBcUIsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0FBQzdFLE1BQU0sNkJBQTZCLE1BQWUsRUFBRSxNQUFjLEVBQUUsTUFBZSxFQUFFLE1BQWMsRUFBRSxHQUFnQixFQUFFLEdBQWdCO0lBQ3JJLE1BQU0sS0FBSyxHQUFvQiwwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNsRSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRXRCLE1BQU0sWUFBWSxHQUFtQixpQ0FBaUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMvRSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUV2QixNQUFNLE1BQU0sR0FBcUIsMkJBQTJCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFckUsVUFBVSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFeEMsT0FBTyxNQUFNLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRyxVQUFVLENBQUM7QUFDM0MsQ0FBQyJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Vec2 } from \"../../Common/b2Math\";\r\n/// This holds the mass data computed for a shape.\r\nexport class b2MassData {\r\n    constructor() {\r\n        /// The mass of the shape, usually in kilograms.\r\n        this.mass = 0;\r\n        /// The position of the shape's centroid relative to the shape's origin.\r\n        this.center = new b2Vec2(0, 0);\r\n        /// The rotational inertia of the shape about the local origin.\r\n        this.I = 0;\r\n    }\r\n}\r\nexport var b2ShapeType;\r\n(function (b2ShapeType) {\r\n    b2ShapeType[b2ShapeType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2ShapeType[b2ShapeType[\"e_circleShape\"] = 0] = \"e_circleShape\";\r\n    b2ShapeType[b2ShapeType[\"e_edgeShape\"] = 1] = \"e_edgeShape\";\r\n    b2ShapeType[b2ShapeType[\"e_polygonShape\"] = 2] = \"e_polygonShape\";\r\n    b2ShapeType[b2ShapeType[\"e_chainShape\"] = 3] = \"e_chainShape\";\r\n    b2ShapeType[b2ShapeType[\"e_shapeTypeCount\"] = 4] = \"e_shapeTypeCount\";\r\n})(b2ShapeType || (b2ShapeType = {}));\r\n/// A shape is used for collision detection. You can create a shape however you like.\r\n/// Shapes used for simulation in b2World are created automatically when a b2Fixture\r\n/// is created. Shapes may encapsulate a one or more child shapes.\r\nexport class b2Shape {\r\n    constructor(type, radius) {\r\n        this.m_type = b2ShapeType.e_unknown;\r\n        this.m_radius = 0;\r\n        this.m_type = type;\r\n        this.m_radius = radius;\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this.m_type === other.m_type);\r\n        this.m_radius = other.m_radius;\r\n        return this;\r\n    }\r\n    /// Get the type of this shape. You can use this to down cast to the concrete shape.\r\n    /// @return the shape type.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbGxpc2lvbi9TaGFwZXMvYjJTaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUkxRCxrREFBa0Q7QUFDbEQsTUFBTTtJQUFOO1FBQ0UsZ0RBQWdEO1FBQ3pDLFNBQUksR0FBVyxDQUFDLENBQUM7UUFFeEIsd0VBQXdFO1FBQ2pFLFdBQU0sR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFekMsK0RBQStEO1FBQ3hELE1BQUMsR0FBVyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUFBO0FBRUQsTUFBTSxDQUFOLElBQVksV0FPWDtBQVBELFdBQVksV0FBVztJQUNyQix3REFBYyxDQUFBO0lBQ2QsK0RBQWlCLENBQUE7SUFDakIsMkRBQWUsQ0FBQTtJQUNmLGlFQUFrQixDQUFBO0lBQ2xCLDZEQUFnQixDQUFBO0lBQ2hCLHFFQUFvQixDQUFBO0FBQ3RCLENBQUMsRUFQVyxXQUFXLEtBQVgsV0FBVyxRQU90QjtBQUVELHFGQUFxRjtBQUNyRixvRkFBb0Y7QUFDcEYsa0VBQWtFO0FBQ2xFLE1BQU07SUFJSixZQUFZLElBQWlCLEVBQUUsTUFBYztRQUh0QyxXQUFNLEdBQWdCLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDNUMsYUFBUSxHQUFXLENBQUMsQ0FBQztRQUcxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBS00sSUFBSSxDQUFDLEtBQWM7UUFDeEIsMENBQTBDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxvRkFBb0Y7SUFDcEYsMkJBQTJCO0lBQ3BCLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQTJDRiJ9","﻿\r\nimport { Vec2, Rectangle } from \"./math.js\";\r\nimport { IGrpah, IRenderer, IGraph } from \"./IRenderer.js\";\r\n\r\nimport { engine, Graph } from \"./Engine.js\";\r\n\r\n\r\n/**\r\n * @extends {IGraph}\r\n */\r\nexport class SpriteBase extends Graph {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tif (raw) {\r\n\t\t\tsuper(url, {\r\n\t\t\t\twidth: raw.__w,\r\n\t\t\t\theight: raw.__h,\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._raw = raw;\r\n\t\t\r\n\t\t//this.src is broken;\r\n\r\n\t\tif (url) {\r\n\t\t\tdebugger\r\n\t\t\tthis._url = url;\r\n\t\t\t//this._loadTexture(url);//_loadTexture: undefined\r\n\t\t}\r\n\t\telse if (SpriteBase.isTexture(raw) !== false) {\r\n\t\t\tthis._url = raw[\"\"];\r\n\t\t}\r\n\t}\r\n\r\n\tstatic isTexture(raw) {\r\n\t\tif (raw) {\r\n\t\t\tif (raw.hasOwnProperty(\"\")) {\r\n\t\t\t\tif (typeof raw[\"\"] == 'string') {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!raw.__isEmpty) {\r\n\t\t\t\t\tconsole.group(\"no texture\");\r\n\t\t\t\t\tconsole.warn(raw);\r\n\t\t\t\t\tconsole.groupEnd();\r\n\t\t\t\t\tthrow new Error(\"no texture\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tstatic isTextureHasData(raw) {\r\n\t\treturn raw && typeof raw[\"\"] == 'string' && raw[\"\"].startsWith(\"data:image/\");\r\n\t}\r\n\r\n\tset z(value) {\r\n\t\tthis._order = value;\r\n\t}\r\n\tget z() {\r\n\t\treturn this._order;\r\n\t}\r\n\t\r\n\t/**\r\n\t * try construct value from raw data\r\n\t * @param {T} defaultValue\r\n\t * @param {string} propertyName\r\n\t * @param {function(any):T} constructor\r\n\t * @returns {T}\r\n\t * @template T\r\n\t */\r\n\t_get(defaultValue, propertyName, converter) {\r\n\t\tif (!this._raw) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\telse if (propertyName in this._raw) {\r\n\t\t\treturn converter(this._raw[propertyName]);\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis._engine.drawGraph(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tdraw2(x, y) {\r\n\t\tthis._engine.drawGraph2(this, x - this.x, y - this.y);\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t */\r\n\tdraw2i(x, y) {\r\n\t\tthis._engine.drawGraph2(this, Math.trunc(x - this.x + 0.5), Math.trunc(y - this.y + 0.5));\r\n\t}\r\n}\r\n\r\n\r\nexport class Sprite extends SpriteBase {\r\n\t/**\r\n\t * sprite = new Sprite(rawData);//不會載入image\r\n\t * sprite._url = img_url;//不會載入image\r\n\t *\r\n\t * 會觸發載入image的method\r\n\t * draw(), isLoaded(), get width(), get height()\r\n\t * \r\n\t * 手動載入image: __loadTexture()\r\n\t * \r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\r\n\t\tvar origin = this._get(new Vec2(0, 0), \"origin\", Vec2.get);\r\n\t\tthis.x = origin.x;\r\n\t\tthis.y = origin.y;\r\n\r\n\t\tthis.z = this._get(0, \"z\", Number);\r\n\r\n\t\tthis.delay = this._get(100, \"delay\", Number);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(x, y, w, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tctx.rect(x, y, w, h);\r\n\t\t\tctx.clip();\r\n\r\n\t\t\tlet left = x;\r\n\t\t\tlet top = y;\r\n\t\t\tlet right = x + w;\r\n\t\t\tlet bottom = y + h;\r\n\r\n\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\t\tthis.draw2(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t */\r\n\tdrawHorizontalPattern(x, y, w) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tconst left = x;\r\n\t\t\tconst right = x + w;\r\n\r\n\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\tthis.draw2(j, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} h\r\n\t */\r\n\tdrawVerticalPattern(x, y, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tctx.save();\r\n\t\ttry {\r\n\t\t\tconst top = y;\r\n\t\t\tconst bottom = y + h;\r\n\r\n\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\tthis.draw2(x, i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\t_drawPattern(x, y, w, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tconst left = x;\r\n\t\tconst top = y;\r\n\t\tconst right = x + w;\r\n\t\tconst bottom = y + h;\r\n\r\n\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\tthis.draw2(j, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t */\r\n\t_drawHorizontalPattern(x, y, w) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tconst left = x;\r\n\t\tconst right = x + w;\r\n\r\n\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\tthis.draw2(j, y);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} h\r\n\t */\r\n\t_drawVerticalPattern(x, y, h) {\r\n\t\tif (!this.isLoaded()) {\r\n\t\t\treturn;//sprite require property: width, height\r\n\t\t}\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\tconst top = y;\r\n\t\tconst bottom = y + h;\r\n\r\n\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\tthis.draw2(x, i);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\tdrawPattern4i(x, y, w, h) {\r\n\t\tthis.drawPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t */\r\n\tdrawHorizontalPattern3i(x, y, w) {\r\n\t\tthis.drawHorizontalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5));\r\n\t}\r\n\t/**\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\tdrawVerticalPattern3i(x, y, h) {\r\n\t\tthis.drawVerticalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\t_drawPattern4i(x, y, w, h) {\r\n\t\tthis._drawPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} w - type: int\r\n\t */\r\n\t_drawHorizontalPattern3i(x, y, w) {\r\n\t\tthis._drawHorizontalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(w + 0.5));\r\n\t}\r\n\t/**\r\n\t * without clip\r\n\t * @param {number} x - type: int\r\n\t * @param {number} y - type: int\r\n\t * @param {number} h - type: int\r\n\t */\r\n\t_drawVerticalPattern3i(x, y, h) {\r\n\t\tthis._drawVerticalPattern(Math.trunc(x + 0.5), Math.trunc(y + 0.5), Math.trunc(h + 0.5));\r\n\t}\r\n}\r\n\r\nexport class _$PatternSprite_Loaded extends Sprite {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {string=} url\r\n\t */\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._direction = null;\r\n\r\n\t\t/** @type {CanvasPattern} */\r\n\t\tthis._pattern = null;\r\n\t}\r\n\r\n\t/** @type {string} */\r\n\tget direction() {\r\n\t\treturn this._direction;\r\n\t}\r\n\tset direction(value) {\r\n\t\tif (value && this._direction != value) {\r\n\t\t\tthis._direction = value;\r\n\t\r\n\t\t\t//reload;\r\n\t\t\tthis._pattern = null;\r\n\t\t\tthis.__proto__ = $PatternSprite.prototype;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(w, h) {\r\n\t\tif (this.direction && this._pattern) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tctx.rect(-this.x, -this.y, w, h);\r\n\t\t\tctx.fillStyle = this._pattern;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.fillStyle = \"no-repeat\";\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.direction && this._pattern) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tctx.rect(x - this.x, y - this.y, w, h);\r\n\t\t\tctx.fillStyle = this._pattern;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.fillStyle = \"no-repeat\";\r\n\t\t}\r\n\t}\r\n\r\n\t/** @returns {\"repeat\"} */\r\n\tget e_repeat() {\r\n\t\treturn \"repeat\";\r\n\t}\r\n\t/** @returns {\"repeat-x\"} */\r\n\tget e_repeat_x() {\r\n\t\treturn \"repeat-x\";\r\n\t}\r\n\t/** @returns {\"repeat-y\"} */\r\n\tget e_repeat_y() {\r\n\t\treturn \"repeat-y\";\r\n\t}\r\n\t/** @returns {\"no-repeat\"} */\r\n\tget e_noRepeat() {\r\n\t\treturn \"no-repeat\";\r\n\t}\r\n}\r\n\r\nexport class $PatternSprite extends _$PatternSprite_Loaded {\r\n\tdrawPattern(w, h) {\r\n\t\tthis.drawPattern2(0, 0, w, h);\r\n\t}\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.isLoaded()) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\r\n\t\t\tctx.save();\r\n\t\t\t{\r\n\t\t\t\tctx.rect(x, y, w, h);\r\n\t\t\t\tctx.clip();\r\n\t\t\t\t\r\n\t\t\t\tlet left = x;\r\n\t\t\t\tlet top = y;\r\n\t\t\t\tlet right = x + w;\r\n\t\t\t\tlet bottom = y + h;\r\n\r\n\t\t\t\tfor (let i = top; i < bottom; i += this.height) {\r\n\t\t\t\t\tfor (let j = left; j < right; j += this.width) {\r\n\t\t\t\t\t\tthis.draw2(j, i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern(w, h) {\r\n\t\tif (this.direction) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tif (!this._pattern) {\r\n\t\t\t\tif (this.isLoaded()) {\r\n\t\t\t\t\tthis._pattern = ctx.createPattern(this.texture, this.direction);\r\n\t\t\t\t\tthis.__proto__ = _$PatternSprite_Loaded.prototype;\r\n\t\t\t\t\tthis.drawPattern(w, h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} w\r\n\t * @param {number} h\r\n\t */\r\n\tdrawPattern2(x, y, w, h) {\r\n\t\tif (this.direction) {\r\n\t\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\t\tconst ctx = this._engine.ctx;\r\n\t\r\n\t\t\tif (!this._pattern) {\r\n\t\t\t\tif (this.isLoaded()) {\r\n\t\t\t\t\tthis._pattern = ctx.createPattern(this.texture, this.direction);\r\n\t\t\t\t\tthis.__proto__ = _$PatternSprite_Loaded.prototype;\r\n\t\t\t\t\tthis.drawPattern2(x, y, w, h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","﻿\r\nimport {\r\n\tb2_linearSlop,\r\n\tb2Vec2,\r\n\tb2BodyType, b2BodyDef, b2FixtureDef,\r\n\tb2Body, b2Fixture,\r\n\tb2PolygonShape, b2CircleShape,\r\n\tb2WheelJointDef, b2RevoluteJointDef, b2PrismaticJointDef, b2MouseJointDef,\r\n\tb2Joint, b2RevoluteJoint, b2PrismaticJoint, b2MouseJoint,\r\n\tb2Contact,\r\n} from \"./Physics.js\";\r\n\r\nimport { Foothold } from \"./Ground.js\";\r\n\r\nimport { World } from \"./World.js\";\r\n\r\nimport { CharacterMoveElem } from \"../../Client/PMovePath.js\";\r\nimport { SceneObject } from \"../SceneObject.js\";\r\n\r\nimport { SceneMap } from \"../Map.js\";\r\nimport { LadderRope } from \"./LadderRope.js\";\r\nimport { FilterHelper } from \"./Filter.js\";\r\n\r\n\r\nconst DEGTORAD = Math.PI / 180;\r\n\r\nlet b2Vec2_temp = new b2Vec2();\r\n\r\n/**\r\n * physics profile\r\n */\r\nconst chara_profile = {\r\n\twidth: 25 / $gv.CANVAS_SCALE,\r\n\theight: 48 / $gv.CANVAS_SCALE,\r\n\tdensity: 1,\r\n\t/** radius */\r\n\tget foot_width() {\r\n\t\treturn (chara_profile.width * 0.5);\r\n\t},\r\n\t/** radius */\r\n\tget foot_j_width() {\r\n\t\treturn (chara_profile.width * 0.4);\r\n\t},\r\n};\r\n\r\n(function () {\r\n\tconst jumpSpeed = 555;//??\r\n\tconst fallSpeed = 670;//px/s\r\n\tconst walkSpeed = 125;//px/s\r\n\t\r\n\twindow.JUMP_FORCE = jumpSpeed;\r\n\r\n\twindow.MOVEMENT_VELOCITY = walkSpeed / $gv.CANVAS_SCALE;\r\n\twindow.$LADDER_SPEED = walkSpeed / $gv.CANVAS_SCALE;\r\n\r\n\twindow.PLAYER_USE_WHEEL_WALKER = false;\r\n\r\n\twindow.FOOT_FRICTION = 1;\r\n\r\n\twindow.MOVEMENT_POWER = 140000;\r\n\twindow.MOVEMENT_STOP_POWER = 140000;\r\n\r\n\twindow.PORTAL_COOLDOWN = 1000;\r\n})();\r\n\r\n\r\nexport class PPlayerState {\r\n\tconstructor() {\r\n\t\t/** @type {boolean} - ApplyForce(jump_force) until leave foothold */\r\n\t\tthis._begin_jump = false;\r\n\r\n\t\t/** jump_count = jump ? jump_count : 0 */\r\n\t\tthis.jump = true;\r\n\r\n\t\t/** jump_count = jump ? jump_count : 0 */\r\n\t\tthis.jump_count = 0;\r\n\r\n\t\t/** ?? */\r\n\t\tthis._drop = true;\r\n\r\n\t\tthis.walk = false;\r\n\r\n\t\tthis.prone = false;\r\n\r\n\t\t/** TODO: fallDown */\r\n\t\tthis.dropDown = false;\r\n\r\n\t\tthis._fly = false;//not jump \r\n\t\t\r\n\t\tthis.brake = true;//??\r\n\t\t\r\n\t\t/** @type {-1|1} */\r\n\t\tthis.front = -1;\r\n\r\n\t\t/** @type {boolean} - is use ladder */\r\n\t\tthis.ladder = false;\r\n\r\n\t\t/**\r\n\t\t * action animation\r\n\t\t * @type {-1|0|1} - up: -1, down: 1, stop: 0\r\n\t\t */\r\n\t\tthis.ladder_move_dir = 0;\r\n\r\n\t\t/** @type {number} - 無敵時間，unit is millisecond */\r\n\t\tthis.invincible = 0;\r\n\t\t\r\n\t\t/** @type {boolean} - can not move or jump */\r\n\t\tthis.freeze = false;\r\n\r\n\t\t/** @type {boolean} - can not move or jump */\r\n\t\tthis.invokeSkill = false;\r\n\r\n\t\t/** @type {number} - use portal cooldown time，unit is millisecond */\r\n\t\tthis.portal_cooldown = 0;\r\n\t\t\r\n\t\t//\r\n\r\n\t\t/** @type {number} - knockback time，unit is millisecond */\r\n\t\tthis.knockback = 0;\r\n\r\n\t\t/** @type {boolean} - off walker power */\r\n\t\tthis.outOfControl = false;\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {number} jump_height\r\n * @param {b2Vec2} gravity\r\n */\r\nfunction _CalcJumpImpulse(jump_height, gravity) {\r\n\tlet impulse = Math.sqrt(jump_height * 2.0 * Math.abs(gravity.y));\r\n\t//(impulse = m * v) => (F = ∫ Mass * dVel)\r\n\treturn impulse;\r\n}\r\n\r\n\r\nclass ControlKeys {\r\n\tconstructor() {\r\n\t\tthis.up = 0;\r\n\t\tthis.left = 0;\r\n\t\tthis.down = 0;\r\n\t\tthis.right = 0;\r\n\t\tthis.jump = 0;\r\n\t\tthis.enterPortal = 0;//TODO: key: enterPortal\r\n\t}\r\n}\r\n\r\nexport class FootContact {\r\n\t/**\r\n\t * @param {Foothold} foothold\r\n\t * @param {b2Vec2} position\r\n\t * @param {number} priority\r\n\t */\r\n\tconstructor(foothold, position, priority) {\r\n\t\t/** @type {Foothold} */\r\n\t\tthis.foothold = foothold;\r\n\r\n\t\t/** @type {b2Vec2} */\r\n\t\tthis.position = position;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.priority = priority;\r\n\t}\r\n}\r\n\r\nclass PCharacterBase {\r\n\tconstructor() {\r\n\t\t/** @type {boolean} */\r\n\t\tthis.disable = false;\r\n\r\n\t\tthis.chara_profile = Object.assign({}, chara_profile);\r\n\t\t\r\n\t\tthis.setMovementSpeed(100);\r\n\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.body = null;\r\n\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.foot_walk = null;\r\n\r\n\t\t/** @type {b2Joint|b2RevoluteJoint} */\r\n\t\tthis.walker = null;\r\n\r\n\t\t/** @type {Foothold} */\r\n\t\tthis.$foothold = null;\r\n\r\n\t\t/**\r\n\t\t * this.$foothold old value\r\n\t\t * @type {Foothold}\r\n\t\t */\r\n\t\tthis.prev_$fh = null;\r\n\r\n\t\t/**\r\n\t\t * no contact leave_$fh\r\n\t\t * where foothold chara dropDown\r\n\t\t * @type {Foothold}\r\n\t\t */\r\n\t\tthis.leave_$fh = null;\r\n\r\n\r\n\t\t/** @type {Foothold} - in World::Setp */\r\n\t\tthis._foothold = null;\r\n\r\n\t\t/** @type {b2Vec2} - contact foothold point */\r\n\t\tthis._foot_at = new b2Vec2();\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis._foothold_priority = 0;\r\n\t\t\r\n\t\t/** @type {FootContact[]} */\r\n\t\tthis._foot_contact_list = [];\r\n\r\n\r\n\t\t/** @type {MapPortal} */\r\n\t\tthis.portal = null;\r\n\r\n\r\n\t\t/** @type {LadderRope} */\r\n\t\tthis.ladder = null;\r\n\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis._walker_omega = 1;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.jump_force = JUMP_FORCE;\r\n\r\n\t\tthis.state = new PPlayerState();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {boolean} clearForce\r\n\t */\r\n\tsetPosition(x, y, clearForce) {\r\n\t\tconst by = y - this.chara_profile.foot_width - this.chara_profile.height * 0.75 * 0.5;\r\n\t\tconst fy = y - this.chara_profile.foot_width;\r\n\r\n\t\tthis.body.SetPositionXY(x, by);\r\n\r\n\t\ttry {\r\n\t\t\tif (this.foot_walk)\r\n\t\t\t\tthis.foot_walk.SetPositionXY(x, fy);\r\n\r\n\t\t\tif (clearForce) {\r\n\t\t\t\tconst speed = new b2Vec2(0, 0);\r\n\t\t\t\tthis.body.ConstantVelocity(speed);\r\n\t\t\t\tif (this.foot_walk)\r\n\t\t\t\t\tthis.foot_walk.ConstantVelocity(speed);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * get bottom position\r\n\t * @returns {{x: number, y: number}}\r\n\t */\r\n\tgetPosition() {\r\n\t\tconst pos = this.foot_walk.GetPosition();\r\n\t\treturn new b2Vec2(pos.x, pos.y + this.chara_profile.foot_width);\r\n\t}\r\n\r\n\t/**\r\n\t * from.tn(hp00_1) == to.pn(hp00_1) && from.pn(hp00) == to.tn(hp00)\r\n\t * @param {MapPortal} portal\r\n\t * @returns {boolean} true if enter portal\r\n\t */\r\n\t_usePortal(portal) {\r\n\t\tif (!portal.enable || this.state.portal_cooldown > 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t/** @type {SceneMap} */\r\n\t\tconst mapRenderer = portal.mapRenderer;\r\n\r\n\t\tconst mapController = mapRenderer.controller;\r\n\t\t\r\n\t\tconst map_id = portal.getMap();\r\n\t\t\r\n\t\tif (portal.exeScript) {//TODO: portal script\r\n\t\t\tportal.exeScript(this);\r\n\t\t}\r\n\t\telse if (map_id) {\r\n\t\t\tif (map_id == mapRenderer.map_id) {\r\n\t\t\t\tconst reg = portal.tn.match(/(^[a-z_]+)(\\d+$)/) || portal.tn.match(/(^[a-z]+)\\d+_\\d+$/);//pn?tn?\r\n\t\t\t\tconst cmd = reg[1];\r\n\r\n\t\t\t\tif (cmd == \"hp\") {\r\n\t\t\t\t\tlet fromTn = portal.tn;\r\n\t\t\t\t\tlet toPortal = mapRenderer.portalMgr.portals.find(function (toPortal) {\r\n\t\t\t\t\t\treturn fromTn == toPortal.pn;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis._gotoPortal(toPortal);\r\n\t\t\t\t}\r\n\t\t\t\telse if (cmd == \"pt_go\") {\r\n\t\t\t\t\tdebugger;//??\r\n\r\n\t\t\t\t\tconst tpid = parseInt(reg[2], 10);\r\n\t\t\t\t\tconst tp = mapRenderer.portalMgr.portals[tpid];\r\n\r\n\t\t\t\t\tthis._gotoPortal(tp);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(`portal.pn: ${portal.pn}, portal.tn: ${portal.tn}, %o`, portal);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmapController.doAfterStep(function () {\r\n\t\t\t\t\tmapRenderer.unload();\r\n\t\t\t\t\tmapRenderer.load(map_id);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"portal: $o\", portal);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.state.portal_cooldown = PORTAL_COOLDOWN;//防止重複\r\n\t\treturn true;\r\n\t}\r\n\t/**\r\n\t * @param {MapPortal} portal\r\n\t */\r\n\t_gotoPortal(portal) {\r\n\t\t/** @type {SceneMap} */\r\n\t\tconst mapRenderer = portal.mapRenderer;\r\n\t\tconst mapController = mapRenderer.controller;\r\n\r\n\t\t//not in world.Step\r\n\t\tmapController.doAfterStep(() => {\r\n\t\t\tconst x = portal.x / $gv.CANVAS_SCALE;\r\n\t\t\tconst y = (portal.y - 3) / $gv.CANVAS_SCALE;//adj portal pos\r\n\t\t\tthis.setPosition(x, y, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * set ladder, not use\r\n\t * @param {LadderRope} ladder\r\n\t */\r\n\tcontactLadder(ladder) {\r\n\t\tif (ladder) {\r\n\t\t\tthis.ladder = ladder;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.ladder = null;\r\n\t\t}\r\n\t}\r\n\tleaveLadder() {\r\n\t\t/** @type {World} */\r\n\t\tconst world = this.body.m_world;\r\n\r\n\t\tworld.onceUnlock(() => {\r\n\t\t\tthis._useLadder(false);\r\n\t\t\tthis.contactLadder(null, null);//set no contact\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * @param {boolean} flag - true: use, false: no use\r\n\t */\r\n\tuseLadder(flag) {\r\n\t\t/** @type {World} */\r\n\t\tconst world = this.body.m_world;\r\n\r\n\t\tworld.onceUnlock(() => {\r\n\t\t\tthis._useLadder(flag);\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * @param {boolean} flag - true: use, false: no use\r\n\t */\r\n\t_useLadder(flag) {\r\n\t\t/** @type {World} */\r\n\t\tconst world = this.body.m_world;\r\n\r\n\t\tif (flag) {\r\n\t\t\tif (this.ladder && !this.$ladder_pj) {\r\n\t\t\t\tconst ladderBody = this.ladder.body;\r\n\r\n\t\t\t\tif (ladderBody.GetAngle() || ladderBody.GetAngularVelocity()) {\r\n\t\t\t\t\tthis.body.SetAngle(ladderBody.GetAngle());\r\n\t\t\t\t\tthis.body.SetFixedRotation(false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.state.ladder = true;\r\n\t\t\t\tthis.state.jump = false;\r\n\t\t\t\tthis.state.jump_count = 0;\r\n\r\n\t\t\t\tthis.body.SetAwake(true);\r\n\t\t\t\tthis.body.SetLinearVelocity2(0, 0);\r\n\t\t\t\tthis.body.m_type = b2BodyType.b2_kinematicBody;\r\n\t\t\t\t//\r\n\t\t\t\tthis.foot_walk.SetAwake(true);\r\n\t\t\t\tthis.foot_walk.SetLinearVelocity2(0, 0);\r\n\t\t\t\tthis.foot_walk.m_type = b2BodyType.b2_kinematicBody;\r\n\r\n\t\t\t\tthis.walker.SetMotorSpeed(0);\r\n\r\n\t\t\t\t// create joint\r\n\r\n\t\t\t\tlet height = this.ladder.calcHeight() / $gv.CANVAS_SCALE;\r\n\r\n\t\t\t\t//let ground = world.ground.bodies[0];\r\n\r\n\t\t\t\tthis.setPosition(ladderBody.GetPosition().x, this.getPosition().y);\r\n\r\n\t\t\t\tlet pjd = new b2PrismaticJointDef();\r\n\t\t\t\t//pjd.Initialize(ladderBody, this.body, anchor, new b2Vec2(0, 1));\r\n\t\t\t\t{\r\n\t\t\t\t\tpjd.bodyA = ladderBody;\r\n\t\t\t\t\tpjd.bodyB = this.foot_walk;//this.body;\r\n\t\t\t\t\t//pjd.localAnchorA.Set(0, 0);\r\n\t\t\t\t\t//pjd.localAnchorB.Set(0, 0);\r\n\t\t\t\t\tpjd.localAxisA.Set(0, 1);\r\n\t\t\t\t\t//pjd.referenceAngle = 0;\r\n\t\t\t\t}\r\n\t\t\t\tpjd.lowerTranslation = -this.chara_profile.foot_width;\r\n\t\t\t\tpjd.upperTranslation = height + this.chara_profile.foot_width;\r\n\t\t\t\tpjd.enableLimit = true;\r\n\t\t\t\tpjd.maxMotorForce = this._getMass() * 1000;\r\n\r\n\t\t\t\t/** @type {b2PrismaticJoint} */\r\n\t\t\t\tlet pj = world.CreateJoint(pjd);\r\n\r\n\t\t\t\tthis.$ladder_pj = pj;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.ladder) {\r\n\t\t\t\t//this.ladder = null;\r\n\r\n\t\t\t\tif (this.state.ladder) {\r\n\t\t\t\t\tthis.state.ladder = false;\r\n\r\n\t\t\t\t\tthis.body.SetAwake(true);\r\n\t\t\t\t\tthis.body.SetLinearVelocity2(0, 0);\r\n\t\t\t\t\tthis.body.m_type = b2BodyType.b2_dynamicBody;\r\n\t\t\t\t\t//\r\n\t\t\t\t\tthis.foot_walk.SetAwake(true);\r\n\t\t\t\t\tthis.foot_walk.SetLinearVelocity2(0, 0);\r\n\t\t\t\t\tthis.foot_walk.m_type = b2BodyType.b2_dynamicBody;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.$ladder_pj) {\r\n\t\t\t\tworld.DestroyJoint(this.$ladder_pj);\r\n\t\t\t\tdelete this.$ladder_pj;\r\n\r\n\t\t\t\tthis.body.SetAngle(0);\r\n\t\t\t\tthis.body.SetFixedRotation(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremove_sticky() {\r\n\t\tif (this.$sticky_pj) {\r\n\t\t\tthis.body.m_world.DestroyJoint(this.$sticky_pj);\r\n\t\t\tthis.$sticky_pj = null;\r\n\t\t}\r\n\t}\r\n\r\n\tactionJump() {\r\n\t\tthis.state._begin_jump = true;\r\n\t\t++this.state.jump_count;\r\n\t}\r\n\t//actionWalk(front) {\r\n\t//}\r\n\tactionDropdown() {\r\n\t\tthis.leave_$fh = this.$foothold;\r\n\t\tthis.$foothold = null;\r\n\t\tthis.state.dropDown = true;\r\n\t\tthis.body.SetAwake(true);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {Partial<ControlKeys>} keys\r\n\t */\r\n\tcontrol(keys) {\r\n\t\tif (!this._isCanMove()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.state.ladder && this.$ladder_pj) {\r\n\t\t\tconst ladderBody = this.ladder.body;\r\n\t\t\tconst speed = (window.$LADDER_SPEED || 1);\r\n\r\n\t\t\tif (ladderBody) {\r\n\t\t\t\tif (ladderBody.GetAngle() || ladderBody.GetAngularVelocity()) {\r\n\t\t\t\t\tthis.body.SetAngle(ladderBody.GetAngle());\r\n\t\t\t\t\tthis.body.SetFixedRotation(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//else {\r\n\t\t\t//\tdebugger;\r\n\t\t\t//}\r\n\r\n\t\t\tif (keys.up && !keys.down) {\r\n\t\t\t\tthis.state.ladder_move_dir = -1;//action animation\r\n\r\n\t\t\t\tthis.$ladder_pj.EnableMotor(true);\r\n\t\t\t\tthis.$ladder_pj.SetMotorSpeed(-speed);\r\n\t\t\t}\r\n\t\t\telse if (keys.down && !keys.up) {\r\n\t\t\t\tthis.state.ladder_move_dir = 1;//action animation\r\n\r\n\t\t\t\tthis.$ladder_pj.EnableMotor(true);\r\n\t\t\t\tthis.$ladder_pj.SetMotorSpeed(speed);\r\n\t\t\t}\r\n\t\t\telse {//stop\r\n\t\t\t\tthis.state.ladder_move_dir = 0;//action animation\r\n\r\n\t\t\t\tthis.$ladder_pj.EnableMotor(false);\r\n\r\n\t\t\t\tthis.body.SetLinearVelocity2(0, 0);\r\n\t\t\t\t//\r\n\t\t\t\tthis.foot_walk.SetLinearVelocity2(0, 0);\r\n\t\t\t}\r\n\t\t\tif (keys.jump) {\r\n\t\t\t\tconst world = this.body.m_world;\r\n\t\t\t\tconst mass = this._getMass();\r\n\r\n\t\t\t\tif (keys.left && keys.right) {\r\n\t\t\t\t\tthis.useLadder(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (keys.left) {\r\n\t\t\t\t\tthis.useLadder(false);\r\n\t\t\t\t\tworld.doAfterStep(() => {\r\n\t\t\t\t\t\t//const f = new b2Vec2(0, -world.m_gravity.y * mass);\r\n\t\t\t\t\t\t//this.body.ApplyForceToCenter(f, true);\r\n\t\t\t\t\t\tthis.body.ApplyLinearImpulseToCenter2(-speed * mass, 0);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse if (keys.right) {\r\n\t\t\t\t\tthis.useLadder(false);\r\n\t\t\t\t\tworld.doAfterStep(() => {\r\n\t\t\t\t\t\t//const f = new b2Vec2(0, -world.m_gravity.y * mass);\r\n\t\t\t\t\t\t//this.body.ApplyForceToCenter(f, true);\r\n\t\t\t\t\t\tthis.body.ApplyLinearImpulseToCenter2(speed * mass, 0);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.$ladder_pj) {\r\n\t\t\tdebugger\r\n\t\t\tthis.useLadder(false);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.state.outOfControl) {\r\n\t\t\t\tthis.walker.EnableMotor(false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.walker.EnableMotor(true);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.portal && keys.up) {\r\n\t\t\t\t//TODO: enter portal key: keys.enterPortal\r\n\t\t\t\tlet portal = this.portal;\r\n\t\t\t\tif (this._usePortal(portal)) {\r\n\t\t\t\t\tthis.portal = null;//使用完畢\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.ladder && (\r\n\t\t\t\t(keys.down && this.$foothold && this.ladder.body.GetLocalPoint(this.getPosition(), b2Vec2_temp).y <= 0) ||\r\n\t\t\t\t(keys.up && !this.$foothold && this.ladder.body.GetLocalPoint(this.getPosition(), b2Vec2_temp).y > 0))\r\n\t\t\t) {\r\n\t\t\t\tthis.state.ladder_move_dir = 0;//reset\r\n\t\t\t\tthis.useLadder(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst wheel_sp = this._walker_omega;\r\n\t\t\tconst velocity = this.body.GetLinearVelocity();//foot_walk\r\n\r\n\t\t\tif (!this.state.jump && !this.state.dropDown) {\r\n\t\t\t\t//dropDown\r\n\t\t\t\tif (keys.down && keys.jump) {\r\n\t\t\t\t\tthis.actionDropdown();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//趴下\r\n\t\t\t\tif (keys.down) {\r\n\t\t\t\t\tthis.state.prone = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.state.prone = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.state.prone = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (keys.left && !keys.right) {\r\n\t\t\t\tthis.state.walk = true;\r\n\t\t\t\tthis.state.front = -1;\r\n\t\t\t\tthis.walker.SetMotorSpeed(-wheel_sp);\r\n\t\t\t\tthis.walker.SetMaxMotorTorque(MOVEMENT_POWER);\r\n\t\t\t\t//this.walker.EnableMotor(true);//power on\r\n\r\n\t\t\t\tthis.remove_sticky();\r\n\t\t\t}\r\n\t\t\telse if (keys.right && !keys.left) {\r\n\t\t\t\tthis.state.walk = true;\r\n\t\t\t\tthis.state.front = 1;\r\n\t\t\t\tthis.walker.SetMotorSpeed(wheel_sp);\r\n\t\t\t\tthis.walker.SetMaxMotorTorque(MOVEMENT_POWER);\r\n\t\t\t\t//this.walker.EnableMotor(true);//power on\r\n\r\n\t\t\t\tthis.remove_sticky();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.state.walk = false;\r\n\r\n\t\t\t\tif (!this.state.jump) {\r\n\t\t\t\t\tlet vx = velocity.x;\r\n\t\t\t\t\tif (vx > 50 * b2_linearSlop) {\r\n\t\t\t\t\t\tthis.walker.SetMotorSpeed(-vx * Math.PI / 2 / Math.PI / this.chara_profile.width / 2);//煞車但無法止滑\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (vx < -50 * b2_linearSlop) {\r\n\t\t\t\t\t\tthis.walker.SetMotorSpeed(-vx * Math.PI / 2 / Math.PI / this.chara_profile.width / 2);//煞車但無法止滑\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.walker.SetMotorSpeed(0);//stop motor\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.walker.SetMotorSpeed(0);//stop motor\r\n\t\t\t\t}\r\n\t\t\t\tthis.walker.SetMaxMotorTorque(MOVEMENT_STOP_POWER);\r\n\t\t\t\t//this.walker.EnableMotor(false);//power off\r\n\r\n\t\t\t\tif (this.state.止滑) {\r\n\t\t\t\t\tthis.sticky(this.getPosition());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (keys.jump && this._isCanJump()) {\r\n\t\t\t\tthis.remove_sticky();\r\n\t\t\t\tthis.actionJump();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_isCanJump() {\r\n\t\treturn !this.state.jump && !this.isDrop();\r\n\t}\r\n\r\n\t_isCanMove() {\r\n\t\treturn !this.state.freeze && !this.state.knockback;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} increment_percent - increment_percent >= -100\r\n\t */\r\n\tsetMovementSpeed(increment_percent) {\r\n\t\tif (!(Number.isSafeInteger(increment_percent) || (!Number.isNaN(increment_percent) && Number.isFinite(increment_percent)))) {\r\n\t\t\tdebugger\r\n\t\t\tif (process.env.NODE_ENV !== '') {\r\n\t\t\t\tthrow new TypeError(\"increment_percent must is number\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlet scale = (100 + increment_percent) / 100;\r\n\t\tif (scale > 0) {\r\n\t\t\tthis._setWalkerOmegaFromVelocity(MOVEMENT_VELOCITY * scale);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._setWalkerOmegaFromVelocity(0);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {number} speed - speed = pixel / second\r\n\t */\r\n\tsetMovementSpeedPixel(speed) {\r\n\t\tlet v = speed / $gv.CANVAS_SCALE;\r\n\t\tif (v > 0) {\r\n\t\t\tthis._walker_omega = v;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._walker_omega = 0;\r\n\t\t}\r\n\t}\r\n\t_setWalkerOmegaFromVelocity(movement_velocity) {\r\n\t\tthis._walker_omega = movement_velocity / (Math.PI * this.chara_profile.width) * Math.PI;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} increment_percent - increment_percent >= -100\r\n\t */\r\n\tsetjumpForce(increment_percent) {\r\n\t\tif (!(Number.isSafeInteger(increment_percent) || (!Number.isNaN(increment_percent) && Number.isFinite(increment_percent)))) {\r\n\t\t\tdebugger\r\n\t\t\tthrow new TypeError(\"increment_percent must is number\");\r\n\t\t}\r\n\r\n\t\tlet scale = (100 + increment_percent) / 100;\r\n\t\tif (scale <= 0) {\r\n\t\t\tthis.jump_force = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst gravity = this.body.GetWorld().GetGravity();\r\n\t\t\tthis.jump_force = JUMP_FORCE * scale;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {number}\r\n\t */\r\n\t_getMass() {\r\n\t\treturn this.body.GetMass() + this.foot_walk.GetMass();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} s\r\n\t */\r\n\tsetGravityScale(s) {\r\n\t\tthis.body.SetGravityScale(s);\r\n\t\tthis.foot_walk.SetGravityScale(s);\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @returns {string}\r\n\t */\r\n\tget _body_category() {\r\n\t\treturn \"body\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @returns {void}\r\n\t */\r\n\t_create(world) {\r\n\t\tlet first_pos = new b2Vec2(1 / $gv.CANVAS_SCALE, -2 / $gv.CANVAS_SCALE);\r\n\t\tlet jmp_body_pos_y = first_pos.y + this.chara_profile.height * 0.75 * 0.5;\r\n\t\tlet bdef = new b2BodyDef();\r\n\t\tlet fdef = new b2FixtureDef();\r\n\t\tlet shape = new b2PolygonShape();\r\n\r\n\t\tbdef.type = b2BodyType.b2_dynamicBody;\r\n\t\tbdef.bullet = true;//get real contact point\r\n\t\tbdef.position.Set(first_pos.x, first_pos.y);\r\n\t\tbdef.userData = this;\r\n\r\n\t\tfdef.userData = this;\r\n\r\n\t\t//create body\r\n\t\t{\r\n\t\t\tthis.body = world.CreateBody(bdef);\r\n\t\t\tthis.body.SetFixedRotation(true);\r\n\t\t}\r\n\t\tthis.body.$type = \"player\";\r\n\r\n\t\tfdef.filter.Copy(FilterHelper.get(this._body_category));\r\n\r\n\t\t//head\r\n\t\t{\r\n\t\t\tshape.SetAsBox(\r\n\t\t\t\tthis.chara_profile.width * 0.5,\r\n\t\t\t\tthis.chara_profile.height * 0.75 * 0.5,\r\n\t\t\t\tb2Vec2.ZERO,//new b2Vec2(0, 0),//\r\n\t\t\t\t0);\r\n\r\n\t\t\tfdef.density = this.chara_profile.density;\r\n\t\t\tfdef.friction = 0;\r\n\t\t\tfdef.restitution = 0;\r\n\t\t\tfdef.shape = shape;\r\n\t\t\t//\r\n\t\t\tthis.fixture = this.body.CreateFixture(fdef);\r\n\t\t\tthis.fixture.$type = \"player\";\r\n\t\t}\r\n\r\n\t\tfdef.filter.Copy(FilterHelper.get(\"foot\"));\r\n\t\t//\r\n\t\t//create walker\r\n\t\t{\r\n\t\t\tbdef.type = b2BodyType.b2_dynamicBody;\r\n\t\t\tbdef.position.Set(first_pos.x, jmp_body_pos_y);\r\n\t\t\tthis.foot_walk = world.CreateBody(bdef);\r\n\r\n\t\t\tlet circle = new b2CircleShape();\r\n\t\t\tcircle.m_p.Set(0, 0);\r\n\t\t\tcircle.m_radius = this.chara_profile.foot_width;\r\n\t\t\tfdef.shape = circle;\r\n\t\t\tfdef.density = this.chara_profile.density;\r\n\t\t\t//fdef.filter = world.getFilterDefine(\"pl_ft_walk\");\r\n\t\t\tfdef.friction = FOOT_FRICTION;//walk\r\n\t\t\tfdef.restitution = 0;\r\n\t\t\tlet fixture = this.foot_walk.CreateFixture(fdef);\r\n\t\t\tfixture.$type = \"pl_ft_walk\";\r\n\r\n\t\t\tthis._set_foot_listener(fixture);\r\n\t\t}\r\n\t\tthis.foot_walk.$type = \"pl_ft_walk\";\r\n\r\n\t\t//j2\r\n\t\t{\r\n\t\t\tlet jd;\r\n\r\n\t\t\tif (PLAYER_USE_WHEEL_WALKER) {\r\n\t\t\t\tjd = new b2WheelJointDef();//b2WheelJointDef//b2RevoluteJointDef\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tjd = new b2RevoluteJointDef();//b2WheelJointDef//b2RevoluteJointDef\r\n\t\t\t}\r\n\r\n\t\t\tif (jd instanceof b2RevoluteJointDef) {\r\n\t\t\t\tjd.Initialize(this.body, this.foot_walk, new b2Vec2(first_pos.x, jmp_body_pos_y));\r\n\t\t\t}\r\n\t\t\tif (jd instanceof b2WheelJointDef) {\r\n\t\t\t\tjd.Initialize(this.body, this.foot_walk, new b2Vec2(first_pos.x, jmp_body_pos_y), new b2Vec2(0, -1));\r\n\t\t\t}\r\n\t\t\tjd.enableMotor = true;\r\n\t\t\tjd.maxMotorTorque = MOVEMENT_POWER;\r\n\t\t\t//jd.motorSpeed = 40;\r\n\t\t\tif (jd instanceof b2RevoluteJointDef) {\r\n\t\t\t\tjd.enableLimit = false;\r\n\t\t\t\tjd.lowerAngle = 0 * DEGTORAD;\r\n\t\t\t\tjd.upperAngle = -0 * DEGTORAD;\r\n\t\t\t\tjd.referenceAngle = 0;\r\n\t\t\t}\r\n\t\t\tif (jd instanceof b2WheelJointDef) {\r\n\t\t\t\tjd.frequencyHz = 10;//springs\r\n\t\t\t\tjd.dampingRatio = 1;//springs\r\n\t\t\t}\r\n\t\t\tthis.walker = world.CreateJoint(jd);\r\n\t\t}\r\n\t\t\r\n\t\tthis.body.addStep(this.Step.bind(this));\r\n\t\tthis.body.addAfterStep(this.AfterStep.bind(this));\r\n\t\t\r\n\t\tthis.setMovementSpeed(0);\r\n\t\tthis.setjumpForce(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * destroy this\r\n\t * @returns {void}\r\n\t */\r\n\t_destroy() {\r\n\t\t/** @type {World} world */\r\n\t\tconst world = this.body.m_world;\r\n\r\n\t\tif (this.body) {\r\n\t\t\tworld.DestroyBody(this.body);\r\n\t\t\tthis.body = null;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"this already dead\");\r\n\t\t}\r\n\t\tif (this.foot_walk) {\r\n\t\t\tworld.DestroyBody(this.foot_walk);\r\n\t\t\tthis.foot_walk = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Fixture} fa - self\r\n\t * @param {b2Fixture} fb - other\r\n\t * @returns {boolean}\r\n\t */\r\n\t_isFromSelfContact(fa, fb) {\r\n\t\tlet a = fa.GetBody().GetUserData();\t// A data\r\n\t\tlet b = fb.GetBody().GetUserData();\t// B data\r\n\r\n\t\tif (a && b && a.body && b.body && a.body == b.body) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa - self\r\n\t * @param {b2Fixture} fb - other\r\n\t * @returns {boolean} - return true if from self and disable this contact\r\n\t */\r\n\t_ignoreSelfContact(contact, fa, fb) {\r\n\t\tif (this._isFromSelfContact(fa, fb)) {\r\n\t\t\tcontact.SetEnabled(false);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t_set_foot_listener(foot_fixture) {\r\n\t\tfoot_fixture.beginContact = this.__beginContact_walker;\r\n\t\tfoot_fixture.endContact = this.__endContact_walker;\r\n\t\tfoot_fixture.preSolve = this.__preSolve_walker;\r\n\t}\r\n\t\r\n\t__beginContact_walker(contact, fa, fb) {\r\n\t\tif (this._ignoreSelfContact(contact, fa, fb)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet targetBody = fb.m_body;\r\n\t\tif (targetBody) {\r\n\t\t\tswitch (targetBody.$type) {\r\n\t\t\t\tcase \"portal\":\r\n\t\t\t\t\tthis._beginContactPortal(fb.m_userData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t__endContact_walker(contact, fa, fb) {\r\n\t\tif (this._ignoreSelfContact(contact, fa, fb)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet targetBody = fb.m_body;\r\n\t\tif (targetBody) {\r\n\t\t\tswitch (targetBody.$type) {\r\n\t\t\t\tcase \"portal\":\r\n\t\t\t\t\tthis._endContactPortal(fb.m_userData);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t__preSolve_walker(contact, oldManifold, fa, fb) {\r\n\t\tif (this._ignoreSelfContact(contact, fa, fb)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (fa.$type == \"pl_ft_walk\" && fb.$type == \"pl_ft_walk\") {\r\n\t\t\tcontact.SetEnabled(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @param {MapPortal} portal */\r\n\t_beginContactPortal(portal) {\r\n\t\tthis.portal = portal;\r\n\r\n\t\tif (portal.enable) {\r\n\t\t\tif (portal.script) {\r\n\t\t\t\tconsole.log(\"goto map: \" + portal.getMap() + \"; \" + portal.script);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.log(\"goto map: \" + portal.getMap());\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.log(\"contact portal: %o\", portal);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @param {MapPortal} portal */\r\n\t_endContactPortal(portal) {\r\n\t\tif (this.portal == portal) {\r\n\t\t\tthis.portal = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 決定接觸哪一個foothold，忽略牆壁\r\n\t * @param {Foothold} foothold\r\n\t * @param {b2Vec2} foot_at\r\n\t * @returns {number}\r\n\t */\r\n\t__priority_foothold_contact(foothold, foot_at) {\r\n\t\tif (foothold.is_wall) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (this.$foothold && this.$foothold.chain != foothold.chain) {\r\n\t\t\tif (this.$foothold != foothold && !this.state.dropDown) {\r\n\t\t\t\t// 接觸多個 foothold 以 \"下面\" 的為主，上坡時以 \"下(上)一個\" 為主\r\n\t\t\t\t// 忽略連續 foothold 重疊的點\r\n\t\t\t\tif (this._foot_at && foot_at.y < this._foot_at.y) {\r\n\t\t\t\t\tif ((this.$foothold.prev == foothold.id && foothold.y1 < this.$foothold.y1) ||\r\n\t\t\t\t\t\t(this.$foothold.next == foothold.id && foothold.y2 < this.$foothold.y2)) {\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//新的接觸\r\n\t\treturn 2;\r\n\t}\r\n\r\n\t/**\r\n\t * 決定接觸哪一個foothold，忽略牆壁\r\n\t * if foothold is wall then return true\r\n\t * @param {Foothold} foothold\r\n\t * @param {b2Vec2} foot_at\r\n\t */\r\n\t_which_foothold_contact(foothold, foot_at) {\r\n\t\tif (foothold.is_wall) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tlet priority = this.__priority_foothold_contact(foothold, foot_at);\r\n\t\tif (priority > 0) {\r\n\t\t\tif (!this._foothold_priority || priority >= this._foothold_priority) {\r\n\t\t\t\tthis._foothold = foothold;\r\n\t\t\t\tthis._foot_at = foot_at.Clone();\r\n\t\t\t\tthis._foothold_priority = priority;\r\n\t\t\t\t//this.sticky(foot_at);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet foot_contact = new FootContact(foothold, foot_at, priority);\r\n\t\t\t\tthis._foot_contact_list.push(foot_contact);\r\n\t\t\t\tthis._foot_contact_list.sort((a, b) => a.priority - b.priority);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Vec2} anchor\r\n\t */\r\n\tsticky(anchor) {\r\n\t\t/** @type {World} */\r\n\t\tconst world = this.body.m_world;\r\n\r\n\t\tworld.onceUnlock(() => {\r\n\t\t\tif (this.$sticky_pj) {\r\n\t\t\t\treturn;\r\n\r\n\t\t\t\tworld.DestroyJoint(this.$sticky_pj);\r\n\t\t\t}\r\n\r\n\t\t\t//this.setPosition(anchor.x, anchor.y);\r\n\r\n\t\t\tlet pjd = new b2PrismaticJointDef();\r\n\t\t\tpjd.Initialize(world.mapBound_body, this.body, anchor, new b2Vec2(0, 1));\r\n\t\t\tif (0) {\r\n\t\t\t\tpjd.bodyA = world.mapBound_body;\r\n\t\t\t\tpjd.bodyB = this.foot_walk;//this.body;\r\n\t\t\t\t//pjd.localAnchorA.Set(0, 0);\r\n\t\t\t\t//pjd.localAnchorB.Set(0, 0);\r\n\t\t\t\tpjd.localAxisA.Set(0, 1);\r\n\t\t\t\t//pjd.referenceAngle = 0;\r\n\t\t\t}\r\n\t\t\tpjd.lowerTranslation = 0;\r\n\t\t\tpjd.upperTranslation = 0;\r\n\t\t\tpjd.enableLimit = true;\r\n\t\t\tpjd.maxMotorForce = this._getMass() * 1000;\r\n\r\n\t\t\t/** @type {b2PrismaticJoint} */\r\n\t\t\tlet pj = world.CreateJoint(pjd);\r\n\r\n\t\t\tthis.$sticky_pj = pj;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tisDrop() {\r\n\t\treturn this.state.dropDown || this.state._drop;\r\n\t}\r\n\r\n\t_endContactFoothold() {\r\n\t\tfor (let i = 0; i < this._endContactFootholdList.length; ++i) {\r\n\t\t\tlet fh = this._endContactFootholdList[i];\r\n\r\n\t\t\tif (fh == this._$fallEdge) {\r\n\t\t\t\tthis._$fallEdge = null;\r\n\t\t\t}\r\n\t\t\telse if (fh == this._foothold) {\r\n\t\t\t\tthis._foothold = null;\r\n\t\t\t\tthis._foot_at = null;\r\n\t\t\t}\r\n\t\t\t//else if (fh.id == this._foothold.id) {\r\n\t\t\t//\tthis._foothold = null;\r\n\t\t\t//\tthis._foot_at = null;\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.$foothold && fh == this.$foothold) {\r\n\t\t\t\tthis.prev_$fh = this.$foothold;\r\n\t\t\t\tthis.$foothold = null;\r\n\t\t\t}\r\n\t\t\tif (this.leave_$fh && this.leave_$fh == fh) {\r\n\t\t\t\tthis.leave_$fh = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._endContactFootholdList.length = 0;//clear\r\n\t}\r\n\r\n\t/**\r\n\t * before world::step\r\n\t * @param {number} stamp\r\n\t */\r\n\tStep(stamp) {\r\n\t\t// prepare contact\r\n\t\tthis.state._drop = false;\r\n\t\tthis._foothold = null;\r\n\t\tthis._foot_at = null;\r\n\r\n\t\t// apply state\r\n\t\tif (this.state.ladder) {\r\n\t\t\tthis.state.jump = false;\r\n\t\t\tthis.state.jump_count = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.state._begin_jump) {\r\n\t\t\t\tconst mass = this._getMass();\r\n\t\t\t\tconst force = new b2Vec2(0, -mass * this.jump_force);\r\n\t\t\t\tthis.body.ApplyForceToCenter(force);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.state.knockback > 0) {\r\n\t\t\t\tthis.state.knockback -= stamp;\r\n\r\n\t\t\t\tif (this.state.knockback > 0) {\r\n\t\t\t\t\tthis.state.outOfControl = true;\r\n\t\t\t\t\tthis.walker.EnableMotor(false);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.state.knockback = 0;\r\n\t\t\t\t\tthis.state.outOfControl = false;\r\n\t\t\t\t\tthis.walker.EnableMotor(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.state.invincible > 0) {\r\n\t\t\t\tthis.state.invincible -= stamp;\r\n\t\t\t\tif (this.state.invincible > 0) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.state.invincible = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.state.portal_cooldown) {\r\n\t\t\t\tthis.state.portal_cooldown -= stamp;\r\n\t\t\t\tif (this.state.portal_cooldown > 0) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.state.portal_cooldown = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * after world::step\r\n\t */\r\n\tAfterStep() {\r\n\t\t//this._endContactFoothold();\r\n\r\n\t\tif (this.state.ladder) {\r\n\t\t\tif (this.$ladder_pj) {\r\n\t\t\t\tconst upper = this.$ladder_pj.GetUpperLimit();\r\n\t\t\t\tconst lower =this.$ladder_pj.GetLowerLimit();\r\n\t\t\t\tconst translation = this.$ladder_pj.GetJointTranslation();\r\n\r\n\t\t\t\tif (this.state.ladder_move_dir > 0 && translation > upper) {//down\r\n\t\t\t\t\tthis.useLadder(false);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.state.ladder_move_dir < 0 && translation < lower) {//up\r\n\t\t\t\t\tthis.useLadder(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!this.state.dropDown) {\r\n\t\t\t\tif (this.body.m_awakeFlag && this.foot_walk.m_awakeFlag) {\r\n\t\t\t\t\tthis.$foothold = this._foothold;//set or clear\r\n\t\t\t\t}\r\n\t\t\t\tif (!this._foothold && this._foot_contact_list.length) {//目前沒用，永遠不會被執行 ??\r\n\t\t\t\t\tlet max = this._foot_contact_list.pop();\r\n\t\t\t\t\tthis.$foothold = max.foothold;\r\n\t\t\t\t\tthis._foothold = max.foothold;\r\n\t\t\t\t\tthis._foot_at = max.position;\r\n\t\t\t\t\tthis._foothold_priority = max.priority;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.$foothold) {\r\n\t\t\t\t//this.body.SetAwake(false);\r\n\t\t\t\t//this.foot_walk.SetAwake(false);\r\n\r\n\t\t\t\tthis.state.jump = false;\r\n\t\t\t\tthis.state.jump_count = 0;\r\n\t\t\t\tif (this.$foothold == this._foothold) {\r\n\t\t\t\t\t//console.log(\"stable contact\");\r\n\t\t\t\t\t//debugger;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._foot_contact_list.length = 0;\r\n\r\n\t\t\t\tthis.state.jump = true;\r\n\t\t\t\tthis.state._begin_jump = false;\r\n\t\t\t\t\r\n\t\t\t\tif (!this._foothold) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//console.log(\"no stable contact\");\r\n\t\t\t\t\t//debugger;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {number}\r\n\t */\r\n\tgetLayer() {\r\n\t\tlet layer = this.$foothold ? this.$foothold.layer : (this.prev_$fh ? this.prev_$fh.layer : (this.leave_$fh ? this.leave_$fh.layer : 5));\r\n\t\treturn this.state.ladder ? (layer + 1) : layer;\r\n\t}\r\n}\r\n\r\nclass PCharacter extends PCharacterBase {\r\n\tconstructor() {\r\n\t\tsuper(...arguments);\r\n\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tthis.chara = null;\r\n\t}\r\n\r\n\t/**\r\n\t * need set this.state.outOfControl = true\r\n\t * @param {number} moveX - unit is pixel\r\n\t * @param {number} moveY - unit is pixel\r\n\t */\r\n\tforceMove(moveX, moveY) {\r\n\t\t//TODO: calc move\r\n\t\tconst mass = this._getMass();\r\n\t\tconst move = new b2Vec2(moveX * mass, moveY * mass);\r\n\t\tthis.body.ApplyLinearImpulseToCenter(move);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} moveX - unit is pixel\r\n\t * @param {number} moveY - unit is pixel\r\n\t * @param {number} [kbTime=1000] - knockback time, unit is millisecond\r\n\t */\r\n\tknockback(moveX, moveY, kbTime = 1000) {\r\n\t\tconst front = this.state.front;\r\n\t\tlet fx, fy;\r\n\t\t\r\n\t\tfx = -moveX * front;\r\n\t\t//fy = this.state.jump ? moveY : -moveY;\r\n\t\tfy = -moveY;\r\n\r\n\t\tthis.forceMove(fx, fy);\r\n\t\tthis.state.knockback = kbTime;\r\n\t\tthis.state.outOfControl = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t */\r\n\t_create_anchor(world) {\r\n\t\tlet md = new b2MouseJointDef();\r\n\t\tmd.bodyA = world.ground.bodies[0];\r\n\t\tmd.bodyB = this.body;\r\n\t\tmd.target.Copy(this.getPosition());\r\n\t\tmd.maxForce = 1000 * this._getMass();\r\n\t\treturn world.CreateJoint(md);\r\n\t}\r\n\r\n\t/**\r\n\t * no anchor\r\n\t * experimental\r\n\t * @param {CharacterMoveElem} moveElem\r\n\t */\r\n\tmoveTo(moveElem) {\r\n\t\tconst body = this.body;\r\n\r\n\t\tif (moveElem.elapsed == 0) {\r\n\t\t\tbody.ConstantVelocityWorldCenter2(vx, vy);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst ALPHA = 0.7;\r\n\t\t\tconst ONE_MINUS_ALPHA = 1 - ALPHA;\r\n\t\t\tlet dx = moveElem.x - pos.x;\r\n\t\t\tlet dy = moveElem.y - pos.y;\r\n\t\t\tlet sx = dx / (moveElem.elapsed / $gv.FRAME_ELAPSED);//speed = pixel / second\r\n\t\t\tlet sy = dy / (moveElem.elapsed / $gv.FRAME_ELAPSED);\r\n\t\t\tlet oldVel = body.GetLinearVelocity();\r\n\r\n\t\t\tlet vx, vy;\r\n\r\n\t\t\tif (moveElem.pState.jump) {\r\n\t\t\t\tthis.setGravityScale(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setGravityScale(1);\r\n\t\t\t\t\r\n\t\t\t\tif (moveElem.pState.walk || sx) {\r\n\t\t\t\t\tthis.walker.EnableMotor(false);//this.$physics.walker.IsMotorEnabled() == true\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.walker.EnableMotor(true);//keep stop\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (sx) {\r\n\t\t\t\tif (moveElem.vx) {\r\n\t\t\t\t\tif (Math.sign(moveElem.vx) == Math.sign(sx)) {\r\n\t\t\t\t\t\tvx = oldVel.x * ONE_MINUS_ALPHA + moveElem.vx * ALPHA;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvx = oldVel.x * ONE_MINUS_ALPHA + sx * ALPHA;//修正座標\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvx = sx;//修正座標\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvx = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (sy) {\r\n\t\t\t\tif (moveElem.vy) {\r\n\t\t\t\t\tif (Math.sign(moveElem.vy) == Math.sign(sy)) {\r\n\t\t\t\t\t\tvy = oldVel.y * ONE_MINUS_ALPHA + moveElem.vy * ALPHA;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvy = oldVel.y * ONE_MINUS_ALPHA + sy * ALPHA;//修正座標\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvy = sy;//修正座標\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvy = 0;\r\n\t\t\t}\r\n\r\n\t\t\tbody.ConstantVelocityWorldCenter2(vx, vy);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (module.hot) {\r\n\t/** @type {PPlayer[]} */\r\n\tvar PPlayer_instance_list = window.PPlayer_instance_list || [];\r\n\r\n\tif (PPlayer_instance_list) {\r\n\t\tfor (let pl of PPlayer_instance_list) {\r\n\t\t\tpl.__proto__ = PPlayer.prototype;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PPlayer extends PCharacter {\r\n\tconstructor() {\r\n\t\tsuper(...arguments);\r\n\r\n\t\tif (module.hot) {\r\n\t\t\tPPlayer_instance_list.push(this);\r\n\r\n\t\t\tconst super_destroy = super._destroy;\r\n\r\n\t\t\tthis._destroy = function () {\r\n\t\t\t\tsuper_destroy();\r\n\t\t\t\tPPlayer_instance_list.splice(PPlayer_instance_list.indexOf(this), 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @returns {void}\r\n\t */\r\n\t_create(world) {\r\n\t\tsuper._create(world);\r\n\r\n\t\twindow.SCREEN_PRINTLN(() => \"x\", () => this.getPosition().x.toFixed(3) + \" * \" + $gv.CANVAS_SCALE + \" = \" + (this.getPosition().x * $gv.CANVAS_SCALE).toFixed(0));\r\n\t\twindow.SCREEN_PRINTLN(() => \"y\", () => this.getPosition().y.toFixed(3) + \" * \" + $gv.CANVAS_SCALE + \" = \" + (this.getPosition().y * $gv.CANVAS_SCALE).toFixed(0));\r\n\t\twindow.SCREEN_PRINTLN(() => \"jump\", () => this.state.jump);\r\n\t\twindow.SCREEN_PRINTLN(() => \"_drop\", () => this.state._drop);\r\n\t\twindow.SCREEN_PRINTLN(() => \"ddrop\", () => this.state.dropDown);\r\n\t\twindow.SCREEN_PRINTLN(() => \"$fh\", () => this.$foothold ? this.$foothold.id : null);\r\n\t\twindow.SCREEN_PRINTLN(() => \"$fh->c\", () => this.$foothold ? this.$foothold.chain.id : null);\r\n\t\twindow.SCREEN_PRINTLN(() => \"_fh\", () => this._foothold ? this._foothold.id : null);\r\n\t\twindow.SCREEN_PRINTLN(() => \"p$fh\", () => this.prev_$fh ? this.prev_$fh.id : null);\r\n\t\twindow.SCREEN_PRINTLN(() => \"leave_$fh\", () => this.leave_$fh ? this.leave_$fh.id : null);\r\n\r\n\t\twindow.SCREEN_PRINTLN(() => \"(jump && !$fh)\", () => this.state.jump && !this.$foothold);\r\n\r\n\t\twindow.SCREEN_PRINTLN(() => \"vel.x\", () => (this.body.m_linearVelocity.x * $gv.CANVAS_SCALE).toFixed(0));\r\n\t\twindow.SCREEN_PRINTLN(() => \"vel.y\", () => (this.body.m_linearVelocity.y * $gv.CANVAS_SCALE).toFixed(0));\r\n\t}\r\n\r\n\t/**\r\n\t * before world::step\r\n\t * @param {number} stamp\r\n\t */\r\n\tStep(stamp) {\r\n\t\tsuper.Step(stamp);\r\n\t\t\r\n\t\tif ($gv.input_keyDown['B'] == 1 && !$gv.mouse_dl) {\r\n\t\t\tconst px = $gv.m_viewRect.left + $gv.mouse_x;\r\n\t\t\tconst py = $gv.m_viewRect.top + $gv.mouse_y;\r\n\r\n\t\t\tthis.setPosition(px / $gv.CANVAS_SCALE, py / $gv.CANVAS_SCALE, true);\r\n\t\t}\r\n\t\telse if ($gv.input_keyDown['B'] > 0 && $gv.mouse_dl) {\r\n\t\t\tconst center = $gv.m_viewRect.center;\r\n\t\t\tconst px = $gv.m_viewRect.left + $gv.mouse_x - center.x;\r\n\t\t\tconst py = $gv.m_viewRect.top + $gv.mouse_y - center.y;\r\n\r\n\t\t\tthis.body.SetLinearVelocity(new b2Vec2(px / $gv.CANVAS_SCALE, py / $gv.CANVAS_SCALE));\r\n\t\t\tthis.foot_walk.SetLinearVelocity(new b2Vec2(px / $gv.CANVAS_SCALE, py / $gv.CANVAS_SCALE));\r\n\t\t}\r\n\t\telse if ($gv.mouse_dm && $gv.mouse_dm % 12 == 1) {\r\n\t\t\tconst px = $gv.m_viewRect.left + $gv.mouse_x;\r\n\t\t\tconst py = $gv.m_viewRect.top + $gv.mouse_y;\r\n\t\t\tthis.setPosition(px / $gv.CANVAS_SCALE, py / $gv.CANVAS_SCALE, true);\r\n\t\t}\r\n\t}\r\n\r\n\tget renderer() {\r\n\t\tdebugger\r\n\t\treturn this._$renderer;\r\n\t}\r\n\tset renderer(value) {\r\n\t\tthis._$renderer = value;\r\n\t}\r\n}\r\n\r\nif (module.hot) {\r\n\t/** @type {PRemoteCharacter[]} */\r\n\tvar PRemoteCharacter_instance_list = window.PRemoteCharacter_instance_list || [];\r\n\r\n\tif (PRemoteCharacter_instance_list) {\r\n\t\tfor (let pl of PRemoteCharacter_instance_list) {\r\n\t\t\tpl.__proto__ = PRemoteCharacter.prototype;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class PRemoteCharacter extends PCharacter {\r\n\tconstructor() {\r\n\t\tsuper(...arguments);\r\n\r\n\t\t/** @type {b2MouseJoint} */\r\n\t\tthis._anchor = null;\r\n\r\n\t\tif (module.hot) {\r\n\t\t\tPRemoteCharacter_instance_list.push(this);\r\n\r\n\t\t\tconst super_destroy = super._destroy;\r\n\r\n\t\t\tthis._destroy = function () {\r\n\t\t\t\tsuper_destroy();\r\n\t\t\t\tPRemoteCharacter_instance_list.splice(PRemoteCharacter_instance_list.indexOf(this), 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @returns {void}\r\n\t */\r\n\t_create(world) {\r\n\t\tsuper._create(world);\r\n\r\n\t\tif (window.$io) {\r\n\t\t\tthis._anchor = this._create_anchor(world);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.moveTo = super.moveTo;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CharacterMoveElem} moveElem\r\n\t */\r\n\tmoveTo(moveElem) {\r\n\t\t//if (this._anchor) {\r\n\t\t\tthis._anchor.m_targetA.x = moveElem.x;\r\n\t\t\tthis._anchor.m_targetA.y = moveElem.y;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\tsuper.moveTo(moveElem);\r\n\t\t//}\r\n\t}\r\n}\r\n\r\nif (module.hot) {\r\n\tmodule.hot.accept();\r\n}\r\n","﻿\r\n\r\nconst $failed_urls = [];\r\n\r\nconst $archive = {};\r\n\r\n\r\nwindow.character_emotion_list = [\"blink\", \"hit\", \"smile\", \"troubled\", \"cry\", \"angry\", \"bewildered\", \"stunned\",\r\n\t\"vomit\", \"oops\", \"cheers\", \"chu\", \"wink\", \"pain\", \"glitter\", \"despair\", \"love\", \"shine\", \"blaze\", \"hum\",\r\n\t\"bowing\", \"hot\", \"dam\", \"qBlue\"];\r\n\r\nwindow.character_action_list = [\"walk1\", \"walk2\", \"stand1\", \"stand2\", \"alert\", \"swingO1\", \"swingO2\", \"swingO3\", \"swingOF\", \"swingT1\",\r\n\t\"swingT2\", \"swingT3\", \"swingTF\", \"swingP1\", \"swingP2\", \"swingPF\", \"stabO1\", \"stabO2\", \"stabOF\", \"stabT1\",\r\n\t\"stabT2\", \"stabTF\", \"shoot1\", \"shoot2\", \"shootF\", \"proneStab\", \"prone\", \"heal\", \"fly\", \"jump\", \"sit\", \"ladder\",\r\n\t\"rope\"/*, \"dead\", \"ghostwalk\", \"ghoststand\", \"ghostjump\", \"ghostproneStab\", \"ghostladder\", \"ghostrope\", \"ghostfly\",\r\n\t\t\"ghostsit\"*/];\r\n\r\nexport class ItemCategoryInfo {\r\n\t/**\r\n\t * @param {string} id_prefix\r\n\t * @param {string} path\r\n\t * @param {boolean} isOnFace\r\n\t * @param {string} slot - property name\r\n\t * @param {string} categoryName\r\n\t */\r\n\tconstructor(id_prefix, imgDir, listPath, slot, categoryName, type = \"Equip\") {\r\n\t\tif (arguments.length !=5) {\r\n\t\t\talert(\"ItemCategoryInfo: \" + [...arguments].join(\",\"));\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tthis.id_prefix = id_prefix;\r\n\r\n\t\t/** data path */\r\n\t\tthis.path = imgDir;\r\n\r\n\t\t/** equip window */\r\n\t\tthis.slot = slot;\r\n\r\n\t\t/** item list file name */\r\n\t\tthis.listPath = listPath;\r\n\r\n\t\t/** display category name */\r\n\t\tthis.categoryName = categoryName;\r\n\r\n\t\t/** renderer */\r\n\t\tthis.fragmentType = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.dataDir = null;\r\n\t\t/** @type {string} */\r\n\t\tthis.iconPath = null;\r\n\t\t/** @type {string} */\r\n\t\tthis.iconRawPath = null;\r\n\t\t{\r\n\t\t\tlet dataDir, iconPath, iconRawPath;\r\n\r\n\t\t\tswitch (slot) {\r\n\t\t\t\tcase \"head\":\r\n\t\t\t\t\ticonPath = \"stand1/0/head\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/head\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"body\":\r\n\t\t\t\t\ticonPath = \"stand1/0/body\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/body\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"hair\":\r\n\t\t\t\t\ticonPath = \"stand1/0/hair\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/hair\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"face\":\r\n\t\t\t\t\ticonPath = \"blink/0/face\";\r\n\t\t\t\t\ticonRawPath = \"blink/0/face\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault://typeId: 0|1|2|3|4\r\n\t\t\t\t\ticonPath = \"info/icon\";\r\n\t\t\t\t\ticonRawPath = \"info/iconRaw\";\r\n\t\t\t}\r\n\r\n\t\t\tif (type == \"Equip\") {\r\n\t\t\t\tdataDir = `/Character/${imgDir + (imgDir ? \"/\" : \"\")}`;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//TODO: get item data dir\r\n\t\t\t\tconsole.error(\"未完成\");\r\n\t\t\t}\r\n\r\n\t\t\tObject.defineProperties(this, {\r\n\t\t\t\t'dataDir': {\r\n\t\t\t\t\tvalue: dataDir,\r\n\t\t\t\t},\r\n\t\t\t\t'iconPath': {\r\n\t\t\t\t\tvalue: iconPath,\r\n\t\t\t\t},\r\n\t\t\t\t'iconRawPath': {\r\n\t\t\t\t\tvalue: iconRawPath,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string|null}\r\n\t */\r\n\tstatic getDataPath(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tconst info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (id[0] == '0') {\r\n\t\t\treturn info.dataDir + id;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//TODO: get item data path\r\n\t\t\tthrow new Error(\"未完成\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string|null}\r\n\t */\r\n\tstatic getIconRawUrl(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (id[0] == '0') {\r\n\t\t\treturn $get.imageUrl(info.dataDir + id + \"/\" + info.iconRawPath);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string|null}\r\n\t */\r\n\tstatic getIconUrl(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (id[0] == '0') {\r\n\t\t\treturn $get.imageUrl(info.dataDir + id + \"/\" + info.iconPath);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * load name and desc\r\n\t * @param {string} id\r\n\t * @returns {{name:string,desc:string}}\r\n\t */\r\n\tstatic async loadString(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet url = `/String/Eqp/Eqp/${info.path + (info.path ? \"/\" : \"\")}${Number(id)}`;\r\n\t\tlet data = await $get.data(url);\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - 4+ digit string\r\n\t * @returns {ItemCategoryInfo}\r\n\t */\r\n\tstatic get(id) {\r\n\t\tlet info;\r\n\r\n\t\tif (id == null || id == \"\") {\r\n\t\t\tdebugger;\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\r\n\t\tif (id.length == 4) {\r\n\t\t\tinfo = ItemCategoryInfo._info[id];\r\n\t\t\tif (info) {\r\n\t\t\t\treturn info;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo = ItemCategoryInfo._info[id.slice(0, 4)];\r\n\t\t\tif (info) {\r\n\t\t\t\treturn info;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (id.length == 6) {\r\n\t\t\t\t\tinfo = ItemCategoryInfo._info[id];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinfo = ItemCategoryInfo._info[id.slice(0, 6)];\r\n\t\t\t\t}\r\n\t\t\t\tif (info) {\r\n\t\t\t\t\treturn info;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.warn(\"unknow item type, itemId: \" + id);\r\n\t\treturn null;\r\n\t}\r\n\r\n\tstatic getTypeId() {\r\n\t\treturn Math.trunc(_id / 1000000);\r\n\t}\r\n\r\n\tstatic getCategory() {\r\n\t\treturn Math.trunc(_id / 10000);// % 100;// 0105 // 01 + 05 // type + category\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - char[4]: type; char[4+]: itemId\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isItem(id) {\r\n\t\tlet type = Math.trunc(id / 1000000);//id.startsWith(\"00\");\r\n\t\treturn type != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - char[4]: type; char[4+]: itemId\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isEquip(id) {\r\n\t\tif (id == null || id == \"\") {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlet _id = Number(id);\r\n\r\n\t\t//let cate = Number(id.length == 4 ? id : id.slice(0, 4));\r\n\t\t//return (cate >= \"0100\" && cate < \"0180\");\r\n\r\n\t\tlet cate = Math.trunc(_id / 10000);\r\n\t\tif (cate > 180 && cate < 2000) {\r\n\t\t\tconsole.warn(\"?? equip: \" + id);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\r\n\t\tlet type = Math.trunc(_id / 1000000);\r\n\r\n\t\treturn type == 1;\r\n\t}\r\n\r\n\t/**\r\n\t * 1~4 digit number\r\n\t * @param {string} itemId\r\n\t */\r\n\tstatic getSubCategory(itemId) {\r\n\t\treturn Math.trunc(itemId / 10000);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} itemId\r\n\t */\r\n\tstatic isCashWeapon(itemId) {\r\n\t\treturn Math.trunc(itemId / 10000) == 170;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} job\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getJobWeaponCategory(job) {\r\n\t\t//TODO: getJobWeaponCategory\r\n\t\tconsole.warn(\"getJobWeaponCategory: 未完成\");\r\n\t}\r\n}\r\nItemCategoryInfo.type = {\r\n\tEquip: \"Equip\",\r\n\tConsume: \"Consume\",\r\n\tEtc: \"Etc\",\r\n\tInstall: \"Install\",\r\n\tCash: \"Cash\"\r\n};\r\nItemCategoryInfo.typeName = {\r\n\t0: \"Equip\",\r\n\t1: \"Consume\",\r\n\t2: \"Etc\",\r\n\t3: \"Install\",\r\n\t4: \"Cash\"\r\n};\r\nItemCategoryInfo.typeId = {\r\n\tEquip: 0,\r\n\tConsume: 1,\r\n\tEtc: 2,\r\n\tInstall: 3,\r\n\tCash: 4,\r\n};\r\nItemCategoryInfo._info = {\r\n\t'0000': new ItemCategoryInfo(\"0000\", \"\",\t\t\t\"body\",\t\t\t\t\"body\",\t\t\t\"<body>\"),\r\n\t'0001': new ItemCategoryInfo(\"0001\", \"\",\t\t\t\"head\",\t\t\t\t\"head\",\t\t\t\"<head>\"),\r\n\r\n\t'0002': new ItemCategoryInfo(\"0002\", \"Face\",\t\t\"Face\",\t\t\t\t\"face\",\t\t\t\"臉型\"),\r\n\t'0003': new ItemCategoryInfo(\"0003\", \"Hair\",\t\t\"Hair\",\t\t\t\t\"hair\",\t\t\t\"髮型\"),\r\n\t'0004': new ItemCategoryInfo(\"0004\", \"Hair\",\t\t\"Hair\",\t\t\t\t\"hair\",\t\t\t\"髮型\"),\r\n\r\n\t'0100': new ItemCategoryInfo(\"0100\", \"Cap\",\t\t\t\"Cap\",\t\t\t\t\"cap\",\t\t\t\"帽子\"),\r\n\t'0101': new ItemCategoryInfo(\"0101\", \"Accessory\",\t\"accessoryFace\",\t\"accessoryFace\", \"臉飾\"),\r\n\t'0102': new ItemCategoryInfo(\"0102\", \"Accessory\",\t\"accessoryEyes\",\t\"accessoryEyes\", \"眼飾\"),\r\n\t'0103': new ItemCategoryInfo(\"0103\", \"Accessory\",\t\"accessoryEars\",\t\"accessoryEars\", \"耳環\"),\r\n\t'0104': new ItemCategoryInfo(\"0104\", \"Coat\",\t\t\"Coat\",\t\t\t\t\"coat\",\t\t\t\"上衣\"),\r\n\t'0105': new ItemCategoryInfo(\"0105\", \"Longcoat\",\t\"Longcoat\",\t\t\t\"longcoat\",\t\t\"套服\"),\r\n\t'0106': new ItemCategoryInfo(\"0106\", \"Pants\",\t\t\"Pants\",\t\t\t\"pants\",\t\t\"褲子\"),\r\n\t'0107': new ItemCategoryInfo(\"0107\", \"Shoes\",\t\t\"Shoes\",\t\t\t\"shoes\",\t\t\"鞋子\"),\r\n\t'0108': new ItemCategoryInfo(\"0108\", \"Glove\",\t\t\"Glove\",\t\t\t\"glove\",\t\t\"手套\"),\r\n\t'0109': new ItemCategoryInfo(\"0109\", \"Shield\",\t\t\"Shield\",\t\t\t\"shield\",\t\t\"盾牌\"),\r\n\t'0110': new ItemCategoryInfo(\"0110\", \"Cape\",\t\t\"Cape\",\t\t\t\t\"cape\",\t\t\t\"披風\"),\r\n\r\n\t\"0121\": new ItemCategoryInfo(\"0121\", \"Weapon\", \"閃亮克魯\", \"weapon\", \"閃亮克魯\"),\r\n\t\"0122\": new ItemCategoryInfo(\"0122\", \"Weapon\", \"靈魂射手\", \"weapon\", \"靈魂射手\"),\r\n\t\"0123\": new ItemCategoryInfo(\"0123\", \"Weapon\", \"魔劍\", \"weapon\", \"魔劍\"),\r\n\t\"0124\": new ItemCategoryInfo(\"0124\", \"Weapon\", \"能量劍\", \"weapon\", \"能量劍\"),\r\n\t\"0125\": new ItemCategoryInfo(\"0125\", \"Weapon\", \"幻獸棒\", \"weapon\", \"幻獸棒\"),\r\n\t\"0126\": new ItemCategoryInfo(\"0126\", \"Weapon\", \"ESP限制器\", \"weapon\", \"ESP限制器\"),\r\n\t\"0127\": new ItemCategoryInfo(\"0127\", \"Weapon\", \"鎖鏈\", \"weapon\", \"鎖鏈\"),\r\n\t\"0128\": new ItemCategoryInfo(\"0128\", \"Weapon\", \"魔力護腕\", \"weapon\", \"魔力護腕\"),\r\n\r\n\t\"0130\": new ItemCategoryInfo(\"0130\", \"Weapon\", \"單手劍\", \"weapon\", \"單手劍\"),\r\n\t\"0131\": new ItemCategoryInfo(\"0131\", \"Weapon\", \"單手斧\", \"weapon\", \"單手斧\"),\r\n\t\"0132\": new ItemCategoryInfo(\"0132\", \"Weapon\", \"單手錘\", \"weapon\", \"單手錘\"),\r\n\t\"0133\": new ItemCategoryInfo(\"0133\", \"Weapon\", \"短劍\", \"weapon\", \"短劍\"),\r\n\t\"0134\": new ItemCategoryInfo(\"0134\", \"Weapon\", \"雙刀\", \"weapon\", \"雙刀\"),\r\n\t\"013526\": new ItemCategoryInfo(\"013526\", \"Weapon\", \"靈魂之環\", \"weapon\", \"靈魂之環\"),\r\n\t\"013530\": new ItemCategoryInfo(\"013530\", \"Weapon\", \"控制器\", \"weapon\", \"控制器\"),\r\n\t\"0136\": new ItemCategoryInfo(\"0136\", \"Weapon\", \"手杖\", \"weapon\", \"手杖\"),\r\n\t\"0137\": new ItemCategoryInfo(\"0137\", \"Weapon\", \"短杖\", \"weapon\", \"短杖\"),\r\n\t\"0138\": new ItemCategoryInfo(\"0138\", \"Weapon\", \"長杖\", \"weapon\", \"長杖\"),\r\n\t\r\n\t\"0140\": new ItemCategoryInfo(\"0140\", \"Weapon\", \"雙手劍\", \"weapon\", \"雙手劍\"),\r\n\t\"0141\": new ItemCategoryInfo(\"0141\", \"Weapon\", \"雙手斧\", \"weapon\", \"雙手斧\"),\r\n\t\"0142\": new ItemCategoryInfo(\"0142\", \"Weapon\", \"雙手棍\", \"weapon\", \"雙手棍\"),\r\n\t\"0143\": new ItemCategoryInfo(\"0143\", \"Weapon\", \"槍\", \"weapon\", \"槍\"),\r\n\t\"0144\": new ItemCategoryInfo(\"0144\", \"Weapon\", \"矛\", \"weapon\", \"矛\"),\r\n\t\"0145\": new ItemCategoryInfo(\"0145\", \"Weapon\", \"弓\", \"weapon\", \"弓\"),\r\n\t\"0146\": new ItemCategoryInfo(\"0146\", \"Weapon\", \"弩\", \"weapon\", \"弩\"),\r\n\t\"0147\": new ItemCategoryInfo(\"0147\", \"Weapon\", \"拳套\", \"weapon\", \"拳套\"),\r\n\t\"0148\": new ItemCategoryInfo(\"0148\", \"Weapon\", \"指虎\", \"weapon\", \"指虎\"),\r\n\t\"0149\": new ItemCategoryInfo(\"0149\", \"Weapon\", \"火槍\", \"weapon\", \"火槍\"),\r\n\t\"0150\": new ItemCategoryInfo(\"0150\", \"Weapon\", \"鏟\", \"weapon\", \"鏟\"),\r\n\t\"0151\": new ItemCategoryInfo(\"0151\", \"Weapon\", \"鎬\", \"weapon\", \"鎬\"),\r\n\t\"0152\": new ItemCategoryInfo(\"0152\", \"Weapon\", \"雙弩槍\", \"weapon\", \"雙弩槍\"),\r\n\t\"0153\": new ItemCategoryInfo(\"0153\", \"Weapon\", \"加農砲\", \"weapon\", \"加農砲\"),\r\n\t\"0154\": new ItemCategoryInfo(\"0154\", \"Weapon\", \"太刀\", \"weapon\", \"太刀\"),\r\n\t\"0155\": new ItemCategoryInfo(\"0155\", \"Weapon\", \"扇子\", \"weapon\", \"扇子\"),\r\n\t\"0156\": new ItemCategoryInfo(\"0156\", \"Weapon\", \"琉\", \"weapon\", \"琉\"),\r\n\t\"0157\": new ItemCategoryInfo(\"0157\", \"Weapon\", \"璃\", \"weapon\", \"璃\"),\r\n\t\"0158\": new ItemCategoryInfo(\"0158\", \"Weapon\", \"重拳槍\", \"weapon\", \"重拳槍\"),\r\n\t\"0170\": new ItemCategoryInfo(\"0170\", \"Weapon\", \"0170\", \"weapon\", \"點裝武器\"),\r\n};\r\nItemCategoryInfo._categoryList = (function (info_map) {\r\n\tlet list = [];\r\n\tlet set = new Set();\r\n\tfor (let i in info_map) {\r\n\t\tlet cat = info_map[i];\r\n\t\tlet key = cat.categoryName || cat.listPath;\r\n\r\n\t\tif (!set.has(key)) {\r\n\t\t\tset.add(key);\r\n\r\n\t\t\tlist.push({\r\n\t\t\t\tkey: key,\r\n\t\t\t\tvalue: i,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n})(ItemCategoryInfo._info);\r\n\r\nexport class ResourceManager {\r\n\tstatic isEquipExist(id, cateInfo) {\r\n\t\tconst dp = cateInfo.listPath;\r\n\t\tconst es = ResourceManager.equip_map[dp];\r\n\t\treturn !es || es.has(id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} url\r\n\t */\r\n\tstatic async loadArchive(url) {\r\n\t\t$setValue($archive, \"/\", JSON.parse(await ResourceManager.get(url)));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} url\r\n\t */\r\n\tstatic get(url) {\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tlet xhr = new XMLHttpRequest();\r\n\t\t\txhr.open(\"GET\", url, true);\r\n\r\n\t\t\txhr.timeout = 10 * 60 * 1000;//20000;\r\n\r\n\t\t\txhr.onload = function () {\r\n\t\t\t\tif (this.status == 404 || this.status == 500) {\r\n\t\t\t\t\t$failed_urls.push(url);\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t\t//resolve(null);\r\n\t\t\t\t\treject(this.status + \": \" + url);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.status == 200) {\r\n\t\t\t\t\tresolve(this.responseText);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.status == 304) {\r\n\t\t\t\t\tdebugger\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\txhr.ontimeout = function (e) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\t// XMLHttpRequest 超时。在此做某事。\r\n\t\t\t\t//resolve(null);\r\n\t\t\t\treject(\"timeout: \" + url);\r\n\t\t\t};\r\n\r\n\t\t\txhr.onabort = function (e) {\r\n\t\t\t\treject(\"abort: \" + url);\r\n\t\t\t};\r\n\r\n\t\t\txhr.send();\r\n\t\t});\r\n\t}\r\n\r\n\tstatic get root_path() {\r\n\t\treturn window.$ROOT_PATH;\r\n\t}\r\n\r\n\tstatic get archive() {\r\n\t\treturn $archive;\r\n\t}\r\n\r\n\tstatic get failed_urls() {\r\n\t\treturn $failed_urls;\r\n\t}\r\n}\r\nwindow.$ResourceManager = ResourceManager;\r\n\r\n/**\r\n * @param {{}} obj\r\n * @param {string} path\r\n * @param {any} value\r\n */\r\nfunction $setValue(obj, path, value) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\tlet ps = path.split(\"/\");\r\n\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\tlet key = ps[i];\r\n\t\tif (target[key] == null) {\r\n\t\t\ttarget[key] = {};\r\n\t\t}\r\n\t\ttarget = target[key];\r\n\t}\r\n\tlet origin_value = target[ps[lastIndex]];\r\n\tif (origin_value instanceof Promise) {\r\n\t\tdelete target[ps[lastIndex]];\r\n\t\ttarget[ps[lastIndex]] = value;\r\n\t}\r\n\telse if (origin_value && typeof origin_value == \"object\") {\r\n\t\t//if (value instanceof Promise) {\r\n\t\t//\tdebugger;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t\tfor (let key in value) {\r\n\t\t\t\torigin_value[key] = value[key] || origin_value[key];\r\n\t\t\t}\r\n\t\t//}\r\n\t}\r\n\telse if (typeof value != \"undefined\") {\r\n\t\ttarget[ps[lastIndex]] = value;\r\n\t}\r\n}\r\nfunction $getValue(obj, path) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\tlet ps = path.split(\"/\");\r\n\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\tlet key = ps[i];\r\n\t\tif (target[key]) {\r\n\t\t\t\ttarget = target[key];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\treturn target[ps[lastIndex]];\r\n}\r\n\r\nconst symbol_isPack = Symbol(\"$pack\");\r\n\r\nconst url_startsWith_protocol = RegExp.prototype.test.bind(/^(([a-zA-Z^\\:]+)(\\:.*)$|\\/\\/)/);\r\nfunction _setValueByPath(path, value, is_pack) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn;\r\n\t}\r\n\telse if (window.$ROOT_PATH != \"\" && path.startsWith(window.$ROOT_PATH)) {\r\n\t\tif (is_pack) {\r\n\t\t\tvalue[symbol_isPack] = true;\r\n\t\t}\r\n\t\tpath = path.slice(window.$ROOT_PATH.length);\r\n\t\treturn $setValue($archive, path, value);\r\n\t}\r\n\telse {\r\n\t\treturn $setValue($archive, path, value);\r\n\t}\r\n}\r\nfunction _getValueFromArchiveByPath(path, value) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tif (_path) {\r\n\t\treturn $getValue($archive, _path);\r\n\t}\r\n\treturn undefined;\r\n}\r\nfunction _getDataPathByUrl(path) {\r\n\tif (!url_startsWith_protocol(path)) {\r\n\t\tif (window.$ROOT_PATH != \"\" && path.startsWith(window.$ROOT_PATH)) {\r\n\t\t\treturn path.slice(window.$ROOT_PATH.length);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @returns {Promise<any>|any}\r\n */\r\nfunction $getValueAsync(obj, path) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\t\r\n\t// try get value sync\r\n\tlet value = $getValue(obj, path);\r\n\t\r\n\t// if value exist\r\n\tif (value) {\r\n\t\tif (value instanceof Promise) {\r\n\t\t\t// ??\r\n\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\tawait value;\r\n\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\telse {// if value not exist, try await parent node\r\n\t\tlet ps = path.split(\"/\");\r\n\t\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\t\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\t\tlet key = ps[i];\r\n\t\t\tif (target[key] instanceof Promise) {\r\n\t\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\t\tawait target[key];\r\n\t\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (target[key]) {\r\n\t\t\t\t\ttarget = target[key];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet result = target[ps[lastIndex]];\r\n\t\tif (result instanceof Promise) {\r\n\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\tawait result;\r\n\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} url\r\n * @returns {Promise<any>}\r\n */\r\nexport let $get = function $get(url) {\r\n\treturn ResourceManager.get(url);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.pack = async function $get_pack(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj && obj[symbol_isPack]) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (obj && !obj[symbol_isPack]) {\r\n\t\t\t\tthrow new TypeError(\"data: \" + path);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst url = $get.packUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, true);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, true);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.packSync = function get_packSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\treturn undefined;\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.data = async function $get_data(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tconst url = $get.dataUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, false);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, false);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {any}\r\n */\r\n$get.dataSync = function get_dataSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\treturn undefined;\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.list = async function $get_list(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tconst url = $get.listUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, false);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, false);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.listSync = function $get_listSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn Object.keys(obj);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.dataUrl = function $get_dataUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"data\")) {\r\n\t\treturn `${window.$ROOT_PATH}data${path}.json`;\r\n\t}\r\n\tthrow new Error(\"Not game data: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.packUrl = function $get_packUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"pack\")) {\r\n\t\treturn `${window.$ROOT_PATH}pack${path}.json`;\r\n\t}\r\n\tthrow new Error(\"Not game pack: \" + path);\r\n}\r\n$get.listUrl = function $get_listUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"ls\")) {\r\n\t\treturn `${window.$ROOT_PATH}ls${path}.json`;\r\n\t}\r\n\tthrow new Error(path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.imageUrl = function $get_imagesUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"images\")) {\r\n\t\treturn `${window.$ROOT_PATH}images${path}.png`;\r\n\t}\r\n\tthrow new Error(\"Not game images: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.soundMp3Url = function $get_soundMp3Url(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"sound\")) {\r\n\t\treturn `${window.$ROOT_PATH}sound${path}.mp3`;\r\n\t}\r\n\tthrow new Error(\"Not game sound: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.soundWavUrl = function $get_soundWavUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"sound\")) {\r\n\t\treturn `${window.$ROOT_PATH}sound${path}.wav`;\r\n\t}\r\n\tthrow new Error(\"Not game sound: \" + path);\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.assetUrl = function $get_assetUrl(path) {\r\n\treturn `${window.$ROOT_PATH}${path}`;\r\n}\r\n$get.asset = function $get_asset(path) {\r\n\treturn $get($get.assetUrl(path));\r\n}\r\n\r\nwindow.$get = $get;\r\n\r\n\r\nexport class ItemAttrNormalize {\r\n\tstatic head(item) {\r\n\t\titem.gender = 2;\r\n\t}\r\n\tstatic body(item) {\r\n\t\titem.gender = 2;\r\n\t}\r\n\tstatic Face(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 1 || g == 4 ? 1 : 0;\r\n\t}\r\n\tstatic Hair(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 1 || g == 2 || g == 4 || g == 7 ? 1 : 0;\r\n\t}\r\n\tstatic Cap(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryFace(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryEyes(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryEars(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Coat(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Longcoat(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Pants(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Shoes(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Glove(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Shield(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Cape(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic _equip(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 0 ? 0 : (g == 1 ? 1 : 2);\r\n\t}\r\n}\r\n\r\nconst regexp_getHairStyleID = /(\\d{4,7})\\d$/;\r\nconst regexp_getFaceStyleID = /(\\d{2,5})\\d(\\d{2})$/;\r\n\r\nconst regexp_getHairColor = /\\d{4,7}(\\d)$/;\r\nconst regexp_getFaceColor = /\\d{2,5}(\\d)\\d{2}$/;\r\n\r\nexport class CharacterRenderConfig {\r\n\t/**\r\n\t * @param {string} style id\r\n\t * @returns {string[]}\r\n\t */\r\n\tstatic * enumHairColor(style) {\r\n\t\tlet m = style.match(regexp_getHairStyleID);\r\n\t\tfor (let i = 0; i < 10; ++i) {\r\n\t\t\tlet id = m[1] + i;\r\n\t\t\tyield id;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} style id\r\n\t * @returns {string[]}\r\n\t */\r\n\tstatic * enumFaceColor(style) {\r\n\t\tlet m = style.match(regexp_getFaceStyleID);\r\n\t\tfor (let i = 0; i < 10; ++i) {\r\n\t\t\tlet id = m[1] + i + m[2];\r\n\t\t\tyield id;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} style\r\n\t * @param {number} color\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getColorHairID(style, color) {\r\n\t\tlet m = style.match(regexp_getHairStyleID);\r\n\t\tlet id = m[1] + (color % 10);\r\n\t\treturn id;\r\n\t}\r\n\t/**\r\n\t * @param {string} style\r\n\t * @param {number} color\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getColorFaceID(style, color) {\r\n\t\tlet m = style.match(regexp_getFaceStyleID);\r\n\t\tlet id = m[1] + (color % 10) + m[2];\r\n\t\treturn id;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id_1\r\n\t * @param {string} id_2\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isHairStyleEqual(id_1, id_2) {\r\n\t\treturn CharacterRenderConfig.getColorHairID(id_1, 0) == CharacterRenderConfig.getColorHairID(id_2, 0);\r\n\t}\r\n\t/**\r\n\t * @param {string} id_1\r\n\t * @param {string} id_2\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isFaceStyleEqual(id_1, id_2) {\r\n\t\treturn CharacterRenderConfig.getColorFaceID(id_1, 0) == CharacterRenderConfig.getColorFaceID(id_2, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getHairColor(id) {\r\n\t\tif (id) {\r\n\t\t\tid = String(id);\r\n\t\t\tlet m = id.match(regexp_getHairColor);\r\n\t\t\tif (m) {\r\n\t\t\t\treturn m[1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getFaceColor(id) {\r\n\t\tif (id) {\r\n\t\t\tid = String(id);\r\n\t\t\tlet m = id.match(regexp_getFaceColor);\r\n\t\t\tif (m) {\r\n\t\t\t\treturn m[1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar _external_data = {\r\n\t\"requiredJobs\": [\r\n\t\t\"Beginner\"\r\n\t],\r\n\t\"requiredLevel\": 0,\r\n\t\"isCash\": true,\r\n\t\"name\": \"Blue Beanie\",\r\n\t\"desc\": null,\r\n\t\"id\": 1000000,\r\n\t\"requiredGender\": 0,\r\n\t\"typeInfo\": {\r\n\t\t\"overallCategory\": \"Equip\",\r\n\t\t\"category\": \"Armor\",\r\n\t\t\"subCategory\": \"Hat\"\r\n\t}\r\n};\r\n\r\nvar ItemTypeInfo = {\r\n\t\"Equip\": {\r\n\t\t\"Hat\": \"Cap\",\r\n\t\t\"Cape\": \"Cape\",\r\n\t\t\"Top\": \"Coat\",\r\n\t\t\"Overall\": \"Longcoat\",\r\n\t\t\"Glove\": \"Glove\",\r\n\t\t\"Bottom\": \"Pants\",\r\n\r\n\t\t\"Shield\": \"Shield\",\r\n\t\t\"Shoes\": \"Shoes\",\r\n\t\t\"Eye Decoration\": \"accessoryEyes\",\r\n\t\t\"Earrings\": \"accessoryEars\",\r\n\t\t//\"Ring\": \"\",\r\n\r\n\t\t//\"Pendant\": \"\",\r\n\t\t\"Face Accessory\": \"accessoryFace\",\r\n\t\t//\"Belt\": \"\",\r\n\t\t//\"Medal\": \"\",\r\n\t\t//\"Shoulder Accessory\": \"\",\r\n\t\t//\"Badge\": \"\",\r\n\r\n\t\t//\"Dragon Equipment\": \"\",\r\n\t\t//\"Mechanic Equipment\": \"\",\r\n\t\t//\"Pet Equipment\": \"\",\r\n\t\t//\"Android\": \"\",\r\n\t\t//\"Mechanical Heart\": \"\",\r\n\t\t//\"Bits\": \"\",\r\n\r\n\t\t\"Face\": \"Face\",\r\n\t\t\"Hair\": \"Hair\",\r\n\t},\r\n};\r\n\r\nResourceManager.external = {\r\n\tequip: {\r\n\t},\r\n};\r\n\r\nResourceManager.equip_map = {\r\n};\r\n\r\nfor (let i in ItemTypeInfo.Equip) {\r\n\tlet cate = ItemTypeInfo.Equip[i];\r\n\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\nfor (let i = 0; i < 9; ++i) {\r\n\tlet cate = \"Face\" + i;\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\nfor (let i = 0; i < 8; ++i) {\r\n\tlet cate = \"Hair\" + i;\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\n\r\nasync function load_external_resource(url) {\r\n\turl = url || \"/items.json\";\r\n\tlet raw;\r\n\r\n\ttry {\r\n\t\traw = ResourceManager._external_raw = JSON.parse(await $get.asset(\"equip.json\"));\r\n\t\tif (!raw) {\r\n\t\t\tdebugger;\r\n\t\t\tthrow Error(\"'/equip' is empty\");\r\n\t\t}\r\n\t}\r\n\tcatch (ex) {\r\n\t\traw = ResourceManager._external_raw = JSON.parse(await $get(\"//labs.maplestory.io/api/gms/latest/item/category/equip\"));\r\n\t\tif (!raw) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (let i = 0; i < raw.length; ++i) {\r\n\t\tconst item = raw[i];\r\n\t\tconst id = String(item.id).padStart(8, \"0\");\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif (!(item.typeInfo && ItemTypeInfo[item.typeInfo.overallCategory])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet clz = item.typeInfo.overallCategory.toLowerCase();\r\n\t\t\tlet cate = ItemTypeInfo[item.typeInfo.overallCategory][item.typeInfo.subCategory];\r\n\t\t\tif (!cate) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse if (cate == \"Face\") {\r\n\t\t\t\tcate += CharacterRenderConfig.getFaceColor(id);\r\n\t\t\t}\r\n\t\t\telse if (cate == \"Hair\") {\r\n\t\t\t\tcate += CharacterRenderConfig.getHairColor(id);\r\n\t\t\t}\r\n\r\n\t\t\tlet it = {\r\n\t\t\t\tid: id,\r\n\t\t\t\tname: item.name,\r\n\t\t\t\tdesc: item.desc,\r\n\t\t\t\tcash: item.isCash ? 1 : 0,\r\n\t\t\t\ticon: {\r\n\t\t\t\t\t\"\": `//labs.maplestory.io/api/gms/latest/item/${item.id}/icon`,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tResourceManager.external[clz][cate].push(it);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(\"external resource: id(\" + id + \")\");\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction update_external_equip_list() {\r\n\tconst url = \"https://labs.maplestory.io/api/gms/latest/item/category/equip\";\r\n\tload_external_resource(url).then(() => {\r\n\t\t_concat_external_resource(category, origin_data);\r\n\t\tconcat_external_resource = _concat_external_resource;\r\n\t\tconsole.log(\"done: update_external_equip_list\");\r\n\t});\r\n}\r\n\r\nlet external_resource_promise = load_external_resource();\r\n\r\nwindow.concat_external_resource = _concat_external_resource_p;\r\n\r\nwindow.trigger_update_external_equip_list = function () {\r\n\texternal_resource_promise = load_external_resource();\r\n\twindow.concat_external_resource = _concat_external_resource_p;\r\n}\r\n\r\nasync function _concat_external_resource_p(category, origin_data) {\r\n\tawait external_resource_promise;\r\n\t_concat_external_resource(category, origin_data);\r\n\tconcat_external_resource = _concat_external_resource;\r\n}\r\n\r\nfunction _concat_external_resource(category, origin_data) {\r\n\ttry {\r\n\t\tconst list = ResourceManager.external.equip[category];\r\n\t\tif (!list) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet id_map = ResourceManager.equip_map[category];\r\n\r\n\t\tif (!id_map) {\r\n\t\t\tid_map = new Map();\r\n\t\t\t\r\n\t\t\torigin_data.forEach(item => {\r\n\t\t\t\tid_map.set(item.id, item);\r\n\t\t\t});\r\n\r\n\t\t\tResourceManager.equip_map[category] = id_map;\r\n\t\t}\r\n\r\n\t\tlist.forEach((item) => {\r\n\t\t\tlet id = item.id;\r\n\t\t\tif (!id_map.has(id)) {\r\n\t\t\t\titem.$foreign = true;\r\n\t\t\t\torigin_data.push(item);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet ori_item = id_map.get(id);\r\n\t\t\t\tori_item._name = item.name || \"\";\r\n\t\t\t\tori_item._desc = item.desc || \"\";\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tcatch (ex) {\r\n\t\tconsole.error(ex);\r\n\t\tdebugger;\r\n\t}\r\n}\r\n\r\nwindow.load_extern_item_data = async function (id) {\r\n\tlet _raw = JSON.parse(await $get(`//labs.maplestory.io/api/gms/latest/item/${id}`));\r\n\tlet raw = {};\r\n\r\n\tlet default_ = _raw.frameBooks.default ? _raw.frameBooks.default.frames[0]:null;\r\n\r\n\tfor (let i in _raw.frameBooks) {\r\n\t\tlet _act = _raw.frameBooks[i];\r\n\t\tlet act = [];\r\n\r\n\t\tfor (let j = 0; j < _act.frames.length; ++j) {\r\n\t\t\tlet frame = _act.frames[j] || default_;\r\n\t\t\tif (!frame || !frame.effects) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet _frags = frame.effects;\r\n\t\t\tlet frags = {};\r\n\t\t\tfor (let k in _frags) {\r\n\t\t\t\tlet _frag = _frags[k];\r\n\t\t\t\tif (_frag.image) {\r\n\t\t\t\t\tfrags[k] = {\r\n\t\t\t\t\t\t\"\": \"data:image/png;base64,\" + _frag.image,\r\n\t\t\t\t\t\t\"origin\": _frag.originOrZero || _frag.origin || _frag.center,\r\n\t\t\t\t\t\t\"map\": _frag.mapOffset,\r\n\t\t\t\t\t\t\"z\": _frag.position\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tact[j] = frags;\r\n\t\t}\r\n\r\n\t\traw[i] = act;\r\n\t}\r\n\r\n\traw.info = {\r\n\t\tislot: _raw.metaInfo.equip.islot,\r\n\t\tvslot: _raw.metaInfo.equip.vslot,\r\n\t\ticon: _raw.metaInfo.icon ? (\"data:image/png;base64,\" + _raw.metaInfo.icon.iconRaw) : \"\",\r\n\t\tcash: (_raw.metaInfo.cash && _raw.metaInfo.cash.cash) ? 1 : 0,\r\n\t};\r\n\r\n\treturn raw;\r\n}\r\n","﻿\r\nimport { IRenderer } from './IRenderer.js';\r\nimport { PPlayer } from './Physics/PPlayer';\r\n\r\n/**\r\n * Game object\r\n */\r\nexport class SceneObject {\r\n\tconstructor() {\r\n\t\t/** @type {string|number} */\r\n\t\tthis.$objectid = null;\t// playerName or objectID; ?? null if not in scene\r\n\r\n\t\t/** @type {number} - layer id */\r\n\t\tthis.$layer = null;\t//maybe override\r\n\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis.$physics = null;\r\n\t\tObject.defineProperty(this, \"$physics\", {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: false,\r\n\t\t\twritable: true,\r\n\t\t\tvalue: null,\r\n\t\t});\r\n\r\n\t\tthis.renderer = null;\r\n\t}\r\n\t\r\n\t/** create physics, load resource, ... */\r\n\tcreate() {\r\n\t}\r\n\t/** destroy physics, ... */\r\n\tdestroy() {\r\n\t}\r\n\t\r\n\tset enablePhysics(value) {\r\n\t\tif (this.$physics) {\r\n\t\t\tthis.$physics.enable = value;\r\n\t\t\tthis.$physics.state.freeze = !value;\r\n\t\t}\r\n\t}\r\n\tget enablePhysics() {\r\n\t\tif (this.$physics) {\r\n\t\t\treturn this.$physics.enable;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_applyState() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis.renderer.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\tthis.renderer.render(renderer);\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @param {SceneObject|null} chara - 被 chara 攻擊\r\n\t * @param {number} damage - 傷害\r\n\t */\r\n\tdamage(chara, damage) {\r\n\t\tconsole.log(this.$objectid + \" 被 \" + chara.$objectid + \" 攻擊，減少 \" + damage + \" HP\");\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * if (chara == null) ??\r\n\t * @param {SceneObject|null} chara - 被 chara 攻擊\r\n\t * @param {number} moveX - unit is pixel\r\n\t * @param {number} moveY - unit is pixel\r\n\t */\r\n\tknockback(chara, moveX, moveY) {\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {string} name\r\n\t */\r\n\t__drawName(renderer, name) {\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tconst crr = this.renderer;\r\n\r\n\t\tctx.font = \"12px 微軟正黑體\";//新細明體\r\n\t\tctx.textBaseline = \"middle\";\r\n\t\tctx.textAlign = \"start\";\r\n\r\n\t\tconst r = 2, h = 12;\r\n\t\tconst w = ctx.measureText(name).width + 3;\r\n\t\tconst x = Math.trunc(crr.x/* + crr.tx*/) - w * 0.5;//TODO: crr.tx and crr.ty ??\r\n\t\tconst y = Math.trunc(crr.y/* + crr.ty*/);\r\n\r\n\t\tconst left = x + r;\r\n\t\tconst _left = x;\r\n\t\tconst top = y;\r\n\t\tconst _top = y + r;\r\n\t\tconst _right = x + w;\r\n\t\tconst right = _right + r;\r\n\t\tconst bottom = y + r + h + r;\r\n\t\tconst _bottom = y + r + h;\r\n\r\n\t\tctx.fillStyle = \"rgba(0,0,0,0.7)\";\r\n\t\tctx.strokeStyle = \"rgba(0,0,0,0.7)\";\r\n\t\tctx.beginPath();\r\n\t\t{\r\n\t\t\tctx.moveTo(left, top);\r\n\r\n\t\t\tctx.lineTo(_right, top);\r\n\t\t\tctx.arcTo(right, top, right, _top, r);\r\n\r\n\t\t\tctx.lineTo(right, _bottom);\r\n\t\t\tctx.arcTo(right, bottom, _right, bottom, r);\r\n\r\n\t\t\tctx.lineTo(left, bottom);\r\n\t\t\tctx.arcTo(_left, bottom, _left, _bottom, r);\r\n\r\n\t\t\tctx.lineTo(_left, _top);\r\n\t\t\tctx.arcTo(_left, top, left, top, r);\r\n\t\t}\r\n\t\tctx.fill();\r\n\r\n\t\tif (0) {//inner\r\n\t\t\tctx.fillStyle = \"yellow\";\r\n\t\t\tctx.strokeStyle = \"yellow\";\r\n\t\t\tctx.beginPath();\r\n\t\t\t{\r\n\t\t\t\tctx.moveTo(left, _top);\r\n\r\n\t\t\t\tctx.lineTo(_right, _top);\r\n\r\n\t\t\t\tctx.lineTo(_right, _bottom);\r\n\r\n\t\t\t\tctx.lineTo(left, _bottom);\r\n\r\n\t\t\t\tctx.closePath();\r\n\t\t\t}\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t\tctx.fillStyle = \"white\";\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.fillText(name, left, (top + bottom) * 0.5);\r\n\t}\r\n}\r\n\r\n\r\n","﻿\r\nconst box2d = require(\"../../Box2D/build/Box2D/Box2D/Box2D.js\");\r\n\r\nconst { FilterHelper } = require(\"./Filter.js\");\r\n\r\nconst {\r\n\tb2Vec2,\r\n\tb2Body, b2Fixture,\r\n\tb2Contact, b2Manifold, b2ContactImpulse,\r\n\tb2ContactListener\r\n} = box2d;\r\n\r\n\r\nwindow.$box2d = box2d;\r\n\r\nlet b2Vec2_temp = new b2Vec2();\r\n\r\n/** @type {string} */\r\nb2Body.prototype.$type = null;\r\n\r\nb2Body.prototype.Step = function (stamp) {\r\n\tif (this._on_step) {\r\n\t\tfor (let fn of this._on_step) {\r\n\t\t\tfn(stamp);\r\n\t\t}\r\n\t}\r\n}\r\nb2Body.prototype.AfterStep = function (stamp) {\r\n\tif (this._on_after_step) {\r\n\t\tfor (let fn of this._on_after_step) {\r\n\t\t\tfn(stamp);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {function():void} func\r\n */\r\nb2Body.prototype.addStep = function (func) {\r\n\tthis._on_step = this._on_step || [];\r\n\tthis._on_step.push(func);\r\n}\r\n\r\n/**\r\n * @param {function():void} func\r\n */\r\nb2Body.prototype.addAfterStep = function (func) {\r\n\tthis._on_after_step = this._on_after_step || [];\r\n\tthis._on_after_step.push(func);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.SetLinearVelocity2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.SetLinearVelocity(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.ApplyForceToCenter2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.ApplyForceToCenter(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.ApplyLinearImpulseToCenter2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.ApplyLinearImpulseToCenter(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVel)快速加速到'指定速度'(desiredVel)\r\n * @param {b2Vec2} desiredVel\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.Acceleration = function (desiredVel, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, b2Vec2_temp);\r\n\tlet m = this.GetMass();\r\n\tlet ix = m * velChange.x;\r\n\tlet iy = m * velChange.y;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(ix, iy);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVelX)快速加速到'指定速度'(desiredVel)\r\n * @param {number} desiredVelX\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.AccelerationX = function (desiredVelX, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChangeX = desiredVelX - sourceVel.x;\r\n\tlet m = this.GetMass();\r\n\tlet ix = m * velChangeX;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(ix, 0);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVelY)快速加速到'指定速度'(desiredVel)\r\n * @param {number} desiredVelY\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.AccelerationY = function (desiredVelY, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChangeY = desiredVelY - sourceVel.y;\r\n\tlet m = this.GetMass();\r\n\tlet iy = m * velChangeY;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(0, iy);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * 等速度運動\r\n * @param {b2Vec2} desiredVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocity = function (desiredVel, point) {\r\n\tthis.Acceleration(desiredVel, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * @param {number} desiredVelX\r\n * @param {number} desiredVelY\r\n * @param {number} pointX\r\n * @param {number} pointY\r\n */\r\nb2Body.prototype.ConstantVelocity2 = function (desiredVelX, desiredVelY, pointX, pointY) {\r\n\tconst desiredVel = new b2Vec2(desiredVelX, desiredVelY);\r\n\tconst point = new b2Vec2(pointX, pointY);\r\n\r\n\tconst sourceVel = this.GetLinearVelocity();\r\n\tconst m = this.GetMass();\r\n\r\n\tlet impulse = new b2Vec2();\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, impulse);\r\n\timpulse.x = m * velChange.x;\r\n\timpulse.y = m * velChange.y;\r\n\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * @param {number} desiredVelX\r\n * @param {number} desiredVelY\r\n */\r\nb2Body.prototype.ConstantVelocityWorldCenter2 = function (desiredVelX, desiredVelY) {\r\n\tconst desiredVel = new b2Vec2(desiredVelX, desiredVelY);\r\n\r\n\tconst sourceVel = this.GetLinearVelocity();\r\n\tconst m = this.GetMass();\r\n\r\n\tlet impulse = new b2Vec2();\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, impulse);\r\n\timpulse.x = m * velChange.x;\r\n\timpulse.y = m * velChange.y;\r\n\r\n\tthis.ApplyLinearImpulseToCenter(impulse, true);\r\n}\r\n\r\n/**\r\n * 等速度運動 X\r\n * @param{number} desiredVelX\r\n * @param{b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocityX = function (desiredVelX, point) {\r\n\tthis.AccelerationX(desiredVelX, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * 等速度運動 Y\r\n * @param {number} desiredVelY\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocityY = function (desiredVelY, point) {\r\n\tthis.AccelerationY(desiredVelY, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.beginContact = function (contact, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.endContact = function (contact, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Manifold} oldManifold\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.preSolve = function (contact, oldManifold, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2ContactImpulse} impulse\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.postSolve = function (contact, impulse, fa, fb) {\r\n}\r\n\r\n/** @returns {string} */\r\nb2Fixture.prototype.getOwnerID = function () {\r\n\tlet host = this.GetUserData();\r\n\tif (host && host.owner) {\r\n\t\treturn host.owner.id;\r\n\t}\r\n}\r\n\r\nclass FixtureContactListener {\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tbeginContact (contact, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tendContact (contact, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Manifold} oldManifold\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tpreSolve (contact, oldManifold, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2ContactImpulse} impulse\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tpostSolve (contact, impulse, fa, fb) {\r\n\t}\r\n}\r\n\r\n\r\n\r\nmodule.exports = Object.assign(box2d, {\r\n\tFixtureContactListener, FilterHelper\r\n});\r\n","﻿\r\nimport { b2Filter } from \"../../Box2D/build/Box2D/Box2D/Dynamics/b2Fixture\";\r\nimport { b2ContactFilter } from \"../../Box2D/build/Box2D/Box2D/Box2D\";\r\n\r\n\r\n/** @type {{[string]:FilterHelper}} */\r\nlet filter_preset = {\r\n};\r\n\r\nlet next_category = 1;\r\n\r\nexport class FilterHelper extends b2Filter {\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\tignore(categoryName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.maskBits = (this.maskBits & ~preset.categoryBits) >>> 0;\r\n\r\n\t\tpreset.maskBits = (preset.maskBits & ~this.categoryBits) >>> 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\taddCategory(categoryName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.categoryBits = this.categoryBits | preset.categoryBits;\r\n\t}\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @param {T extends keyof filter_preset} categoryName\r\n\t * @param {string} debugName\r\n\t */\r\n\tstatic get(categoryName, debugName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\treturn filter_preset.s_default;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (debugName) {\r\n\t\t\tlet debugCategory = filter_preset[\"s_\" + debugName];\r\n\t\t\tconsole.warn(\"filter: \" + debugName + \"%o\", debugCategory);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn preset;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\tstatic registerCategory(categoryName) {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (filter_preset[\"s_\" + categoryName]) {\r\n\t\t\t\tlet msg = \"exist filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (next_category > 0x80000000) {\r\n\t\t\t\tlet msg = \"no empty filter preset\";\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName] = new FilterHelper();\r\n\r\n\t\tpreset.groupIndex = 0;\r\n\t\tpreset.categoryBits = next_category;\r\n\t\tpreset.maskBits = 0xFFFFFFFF;//all\r\n\r\n\t\tpreset.name = categoryName;\r\n\r\n\t\tnext_category = next_category << 1;\r\n\r\n\t\treturn preset;\r\n\t}\r\n\r\n\tstatic get next_category() {\r\n\t\treturn filter_preset;\r\n\t}\r\n\tstatic get filter_preset() {\r\n\t\treturn filter_preset;\r\n\t}\r\n}\r\n\r\nconst filter_table = [\r\n/*                 default  body  foothold  foot  bullet  pvp_bullet  mob  mob_bullet  portal  ladder  map_obj  map_border */\r\n/* default */    [ 1,       1,    1,        1,    1,      1,          1,   1,          1,      1,      1,       1,     ],\r\n/* body */       [ 1,       0,    0,        0,    0,      1,          1,   1,          0,      1,      1,       1,     ],\r\n/* foothold */   [ 1,       0,    0,        1,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* foot */       [ 1,       0,    1,        0,    0,      0,          0,   0,          1,      0,      0,       1,     ],\r\n/* bullet */     [ 1,       0,    0,        0,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/* pvp_bullet */ [ 1,       1,    0,        0,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/* mob */        [ 1,       1,    0,        0,    1,      1,          0,   0,          0,      0,      0,       0,     ],\r\n/* mob_bullet */ [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* portal */     [ 1,       0,    0,        1,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* ladder */     [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* map_obj */    [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* map_border */ [ 1,       1,    0,        1,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/*  */\r\n];\r\n\r\n(function init() {\r\n\tlet filter_list = [\r\n\t\tFilterHelper.registerCategory(\"default\"),\r\n\t\tFilterHelper.registerCategory(\"body\"),\r\n\t\tFilterHelper.registerCategory(\"foothold\"),\r\n\t\tFilterHelper.registerCategory(\"foot\"),\r\n\t\tFilterHelper.registerCategory(\"bullet\"),\r\n\t\tFilterHelper.registerCategory(\"pvp_bullet\"),\r\n\t\tFilterHelper.registerCategory(\"mob\"),\r\n\t\tFilterHelper.registerCategory(\"mob_bullet\"),\r\n\t\tFilterHelper.registerCategory(\"portal\"),\r\n\t\tFilterHelper.registerCategory(\"ladder\"),\r\n\t\tFilterHelper.registerCategory(\"map_obj\"),\r\n\t\tFilterHelper.registerCategory(\"map_border\"),\r\n\t];\r\n\r\n\tfor (let i = 0; i < filter_table.length; ++i) {\r\n\t\tfor (let j = 0; j < filter_table[i].length; ++j) {\r\n\t\t\tif (!filter_table[i][j]) {\r\n\t\t\t\tfilter_list[i].maskBits = (filter_list[i].maskBits & ~(1 << j)) >>> 0;//uint32\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})();\r\n\r\n(function test() {\r\n\tlet contactFilter = new b2ContactFilter();\r\n\t\r\n\tfunction Fixture(filterName) {\r\n\t\treturn {\r\n\t\t\tGetFilterData: () => FilterHelper.get(filterName),\r\n\t\t\tGetBody: () => { return {\r\n\t\t\t\tGetType: () => 2,\r\n\t\t\t\tShouldCollideConnected: () => true,\r\n\t\t\t} },\r\n\t\t};\r\n\t}\r\n\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"body\"), Fixture(\"ladder\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"ladder\"), Fixture(\"body\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"foot\"), Fixture(\"portal\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"portal\"), Fixture(\"foot\"))) {\r\n\t\tdebugger;\r\n\t}\r\n})();\r\n\r\n","﻿\r\nimport {\r\n\tb2Vec2, b2AABB,\r\n\tb2World,\r\n\tb2Body,\r\n\tb2BodyType, b2BodyDef, b2FixtureDef,\r\n\tb2EdgeShape, b2PolygonShape, b2CircleShape,\r\n\tb2MouseJointDef,\r\n\tb2ContactListener, b2Contact,\r\n\tb2ParticleSystemDef, b2ParticleSystem, b2ParticleFlag, b2ParticleGroupDef\r\n} from \"./Physics.js\";\r\n\r\nimport DebugDraw from \"./DebugDraw.js\";\r\nimport { Ground } from \"./Ground.js\";\r\nimport { LadderRope, MapLadderRopeLoader } from \"./LadderRope.js\";\r\nimport { PPlayer, PRemoteCharacter } from \"./PPlayer.js\";\r\nimport { PMob } from \"./PMob.js\";\r\n\r\nimport { CharacterAnimationBase } from \"../Renderer/CharacterRenderer\";\r\n\r\nimport { IRenderer } from \"../IRenderer.js\";\r\nimport { FilterHelper } from \"./Filter.js\";\r\n\r\n\r\nwindow.$gravityAcc = 2000;\r\n\r\nwindow.$positionIterations = 3;\r\nwindow.$velocityIterations = 8;\r\nwindow.$particleIterations = 1;\r\n\r\nwindow.$particleRadius = 10;//unit is pixel\r\n\r\nexport const GRAVITY = new b2Vec2(0, window.$gravityAcc / $gv.CANVAS_SCALE);\r\n\r\n\r\nclass ContactListener extends b2ContactListener {\r\n\t/** @param {b2Contact} contact */\r\n\tBeginContact(contact) {\r\n\t\tconst fa = contact.m_fixtureA;\r\n\t\tconst fb = contact.m_fixtureB;\r\n\t\tconst childIndexA = contact.m_indexA;\r\n\t\tconst childIndexB = contact.m_indexB;\r\n\r\n\t\tfa.beginContact.call(fa.m_userData, contact, fa, fb, childIndexA, childIndexB);\r\n\t\tfb.beginContact.call(fb.m_userData, contact, fb, fa, childIndexB, childIndexA);\r\n\t}\r\n\t/** @param {b2Contact} contact */\r\n\tEndContact(contact) {\r\n\t\tconst fa = contact.m_fixtureA;\r\n\t\tconst fb = contact.m_fixtureB;\r\n\t\tconst childIndexA = contact.m_indexA;\r\n\t\tconst childIndexB = contact.m_indexB;\r\n\r\n\t\tfa.endContact.call(fa.m_userData, contact, fa, fb, childIndexA, childIndexB);\r\n\t\tfb.endContact.call(fb.m_userData, contact, fb, fa, childIndexB, childIndexA);\r\n\t}\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Manifold} oldManifold\r\n\t */\r\n\tPreSolve(contact, oldManifold) {\r\n\t\tconst fa = contact.m_fixtureA;\r\n\t\tconst fb = contact.m_fixtureB;\r\n\t\tconst childIndexA = contact.m_indexA;\r\n\t\tconst childIndexB = contact.m_indexB;\r\n\r\n\t\tfa.preSolve.call(fa.m_userData, contact, oldManifold, fa, fb, childIndexA, childIndexB);\r\n\t\tfb.preSolve.call(fb.m_userData, contact, oldManifold, fb, fa, childIndexB, childIndexA);\r\n\t}\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2ContactImpulse} impulse\r\n\t */\r\n\tPostSolve(contact, impulse) {\r\n\t\tconst fa = contact.m_fixtureA;\r\n\t\tconst fb = contact.m_fixtureB;\r\n\t\tconst childIndexA = contact.m_indexA;\r\n\t\tconst childIndexB = contact.m_indexB;\r\n\r\n\t\tfa.postSolve.call(fa.m_userData, contact, impulse, fa, fb, childIndexA, childIndexB);\r\n\t\tfb.postSolve.call(fb.m_userData, contact, impulse, fb, fa, childIndexB, childIndexA);\r\n\t}\r\n}\r\n\r\nexport class World extends b2World {\r\n\tconstructor() {\r\n\t\tsuper(GRAVITY);\r\n\r\n\t\t/** @type {DebugDraw} */\r\n\t\tthis.m_debugDraw = $gv.m_debugDraw;\r\n\t\tthis.SetDebugDraw(this.m_debugDraw);\r\n\r\n\t\tthis.SetContactListener(new ContactListener());\r\n\r\n\t\t//if (!window.io) {\r\n\t\t//\tthis.player = null;\r\n\t\t//\tthis._player_rebirth();\r\n\t\t//\tthis.player.setPosition(0, 0, true);\r\n\t\t//}\r\n\r\n\t\tthis.ground = new Ground();\r\n\r\n\t\t/** @type {LadderRope[]} */\r\n\t\tthis.ladderRope = [];\r\n\t\t\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.mapBound_body = null;\r\n\t\t\r\n\t\tthis.stop = false;\r\n\t\t\r\n\t\tthis.$_mouseJoint = null;\r\n\r\n\t\t/** @type {(function():void)[]} */\r\n\t\tthis._onceAfterStep = [];\r\n\r\n\t\t/** @type {b2Body[]} */\r\n\t\tthis._destryBodyList = [];\r\n\r\n\t\tthis._DestroyBody = this.DestroyBody;\r\n\r\n\t\t/**\r\n\t\t * @param {b2Body} b\r\n\t\t */\r\n\t\tthis.DestroyBody = b => {\r\n\t\t\tif (this.m_locked) {\r\n\t\t\t\tthis._destryBodyList.push(b);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._DestroyBody(b);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.draw_foothold_path_count = 1;\r\n\t}\r\n\r\n\t$test_b2ParticleSystem() {\r\n\t\tconst particleType = b2ParticleFlag.b2_elasticParticle;//b2_waterParticle;\r\n\t\tconst particleSystemDef = new b2ParticleSystemDef();\r\n\t\t\r\n\t\t/** @type {b2ParticleSystem} */\r\n\t\tthis.m_particleSystem = this.CreateParticleSystem(particleSystemDef);\r\n\t\t\r\n\t\tthis.m_particleSystem.SetGravityScale(0);\r\n\t\tthis.m_particleSystem.SetRadius(10 / $gv.CANVAS_SCALE);\r\n\t\tthis.m_particleSystem.SetDamping(0.2);\r\n\t\t{\r\n\t\t\tconst shape = new b2CircleShape();\r\n\t\t\tshape.m_p.Set(0, 2);\r\n\t\t\tshape.m_radius = 3;\r\n\t\t\tconst pd = new b2ParticleGroupDef();\r\n\t\t\tpd.flags = particleType;\r\n\t\t\tpd.shape = shape;\r\n\t\t\tconst group = this.m_particleSystem.CreateParticleGroup(pd);\r\n\t\t\tif (pd.flags & b2ParticleFlag.b2_colorMixingParticle) {\r\n\t\t\t\tthis.ColorParticleGroup(group, 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.m_particleSystem = this.m_particleSystem;\r\n\t\t\r\n\t\tthis.$vbo_ps = null;\r\n\t}\r\n\r\n\t/**\r\n\t * after load map\r\n\t */\r\n\tasync load(map_raw_data) {\r\n\t\tthis.ground.load(map_raw_data, this);\r\n\t\tthis.ladderRope = MapLadderRopeLoader.load(map_raw_data, this);\r\n\t}\r\n\tunload() {\r\n\t\tif (this.IsLocked()) {\r\n\t\t\tdebugger;\r\n\t\t\tconsole.error(\"world is locked, world can not unload\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.ground.unload(this);\r\n\t\t\tthis.ladderRope.length = 0;\r\n\t\t\tthis.DestroyBody(this.mapBound_body);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {MapMob} mapMob\r\n\t */\r\n\tcreateMob(mapMob) {\r\n\t\tlet mob = new PMob(mapMob);\r\n\t\tmob._create(this);\r\n\t\treturn mob;\r\n\t}\r\n\tdestroyMob(mapMob) {\r\n\t\t//if (this != mapMob.$physics) {\r\n\t\t//\tdebugger;\r\n\t\t//\treturn false;\r\n\t\t//}\r\n\t\t\r\n\t\tmapMob.$physics._destroy(this);\r\n\t\tmapMob.$physics = null;\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tcreateNpc(mapNpc) {\r\n\t\treturn null;\r\n\t}\r\n\tdestroyNpc(mapNpc) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tcreatePortal(portal) {\r\n\t\tconst rect = portal.compute_rectangle(0);\r\n\t\tif (rect) {\r\n\t\t\tconst width = rect.width / 2 / $gv.CANVAS_SCALE * 0.4;\r\n\t\t\tconst height = rect.height / 2 / $gv.CANVAS_SCALE * 0.2;\r\n\r\n\t\t\tlet bdef = new b2BodyDef();\r\n\t\t\tlet fdef = new b2FixtureDef();\r\n\t\t\tlet shape;\r\n\r\n\t\t\tfdef.filter.Copy(FilterHelper.get(\"portal\"));\r\n\r\n\t\t\tbdef.userData = portal;\r\n\t\t\tbdef.type = b2BodyType.b2_staticBody;//b2_staticBody//b2_kinematicBody//b2_dynamicBody\r\n\t\t\tbdef.position.Set(\r\n\t\t\t\tportal.x / $gv.CANVAS_SCALE,\r\n\t\t\t\tportal.y / $gv.CANVAS_SCALE);\r\n\r\n\t\t\tlet body = this.CreateBody(bdef);\r\n\t\t\tbody.$type = \"portal\";\r\n\r\n\t\t\tshape = new b2PolygonShape();\r\n\r\n\t\t\tif (window.MAP_PORTAL_FULL_SIZE) {\r\n\t\t\t\tshape.SetAsBox(\r\n\t\t\t\t\trect.width / 2 / $gv.CANVAS_SCALE,\r\n\t\t\t\t\trect.height / 2 / $gv.CANVAS_SCALE,\r\n\t\t\t\t\tnew b2Vec2(-portal.textures[0].x / $gv.CANVAS_SCALE, -portal.textures[0].y / $gv.CANVAS_SCALE),\r\n\t\t\t\t\t0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshape.SetAsBox(\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\theight,\r\n\t\t\t\t\tnew b2Vec2(0, -height),\r\n\t\t\t\t\t0);\r\n\t\t\t}\r\n\r\n\t\t\tfdef.isSensor = true;\r\n\t\t\tfdef.shape = shape;\r\n\t\t\tfdef.filter = FilterHelper.get(\"portal\");\r\n\t\t\tfdef.userData = portal;\r\n\t\t\tfdef.$type = \"portal\";\r\n\r\n\t\t\tlet fixture = body.CreateFixture(fdef);\r\n\r\n\t\t\tportal.body = body;\r\n\r\n\t\t\treturn body;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {Rectangle} rect\r\n\t */\r\n\t_createMapBound(rect) {\r\n\t\tlet { left, top, right, bottom } = rect;\r\n\t\t\r\n\t\tleft /= $gv.CANVAS_SCALE;\r\n\t\tright /= $gv.CANVAS_SCALE;\r\n\t\ttop /= $gv.CANVAS_SCALE;\r\n\t\tbottom /= $gv.CANVAS_SCALE;\r\n\t\t\r\n\t\tlet bdef = new b2BodyDef();\r\n\t\t//bdef.type = b2BodyType.b2_dynamicBody;\r\n\t\tlet fdef = new b2FixtureDef();\r\n\t\tlet shape = new b2EdgeShape();\r\n\r\n\t\tfdef.$type = \"MapBorder\";\r\n\t\tfdef.shape = shape;\r\n\t\tfdef.filter.Copy(FilterHelper.get(\"map_border\"));\r\n\r\n\t\tlet bb = this.CreateBody(bdef);\r\n\t\tbb.$type = \"MapBorder\";\r\n\t\t\r\n\t\tshape.m_vertex1.Set(left, top);\r\n\t\tshape.m_vertex2.Set(right, top);\r\n\t\tbb.CreateFixture(fdef);\r\n\t\t\r\n\t\tshape.m_vertex1.Set(left, bottom);\r\n\t\tshape.m_vertex2.Set(right, bottom);\r\n\t\tbb.CreateFixture(fdef);\r\n\t\t\r\n\t\tshape.m_vertex1.Set(left, top);\r\n\t\tshape.m_vertex2.Set(left, bottom);\r\n\t\tbb.CreateFixture(fdef);\r\n\r\n\t\tshape.m_vertex1.Set(right, top);\r\n\t\tshape.m_vertex2.Set(right, bottom);\r\n\t\tbb.CreateFixture(fdef);\r\n\t\t\r\n\t\tif (this.player) {\r\n\t\t\tthis.player.setPosition((right + left) * 0.5, (bottom + top) * 0.5, true);\r\n\t\t}\r\n\r\n\t\tthis.mapBound_body = bb;\r\n\t}\r\n\r\n\t//_player_rebirth() {\r\n\t//\twindow.$player = this.player = new PPlayer(window.chara ? window.chara.renderer:null);\r\n\t//\tthis.player._create(this);\r\n\t//\r\n\t//\tdelete this.player.renderer;\r\n\t//\tObject.defineProperty(this.player, \"renderer\", {\r\n\t//\t\tget: function () {\r\n\t//\t\t\treturn window.chara ? window.chara.renderer : null;\r\n\t//\t\t}\r\n\t//\t});\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {SceneObject} sceneObject\r\n\t * @param {CharacterAnimationBase} renderer\r\n\t */\r\n\t$createPlayer(sceneObject, renderer) {\r\n\t\tif (!sceneObject || !renderer) {\r\n\t\t\tdebugger;\r\n\t\t\talert(\"$createPlayer(sceneObject, renderer)\");\r\n\t\t}\r\n\t\tlet player = new PPlayer();\r\n\r\n\t\tplayer._create(this);\r\n\r\n\t\t//init ?\r\n\t\tplayer.chara = sceneObject;\r\n\t\tplayer.renderer = renderer;//??\r\n\r\n\t\tthis.player = player;\r\n\r\n\t\treturn player;\r\n\t}\r\n\t/**\r\n\t * @param {SceneObject} sceneObject\r\n\t * @param {CharacterAnimationBase} renderer\r\n\t */\r\n\t$createRemotePlayer(sceneObject, renderer) {\r\n\t\tif (!sceneObject || !renderer) {\r\n\t\t\tdebugger;\r\n\t\t\talert(\"$createRemotePlayer(sceneObject, renderer)\");\r\n\t\t}\r\n\t\tlet player = new PRemoteCharacter();\r\n\r\n\t\tplayer._create(this);\r\n\r\n\t\t//init ?\r\n\t\tplayer.renderer = renderer;\r\n\r\n\t\treturn player;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function():void} func\r\n\t */\r\n\tonceUnlock(func) {\r\n\t\tif (this.m_locked) {\r\n\t\t\tthis._onceAfterStep.push(func);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfunc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * do once AfterStep\r\n\t * @param {function():void} func\r\n\t */\r\n\tdoAfterStep(func) {\r\n\t\tthis._onceAfterStep.push(func);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {b2Vec2} p\r\n\t */\r\n\t$_mouseDown(p) {\r\n\t\tif (this.$_mouseJoint != null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Make a small box.\r\n\t\tlet aabb = new b2AABB();\r\n\t\tlet d = new b2Vec2();\r\n\t\td.Set(0.001, 0.001);\r\n\t\tb2Vec2.SubVV(p, d, aabb.lowerBound);\r\n\t\tb2Vec2.AddVV(p, d, aabb.upperBound);\r\n\r\n\t\tlet that = this;\r\n\t\tlet hit_fixture = null;\r\n\r\n\t\t// Query the world for overlapping shapes.\r\n\t\tthis.QueryAABB(function (fixture) {\r\n\t\t\tlet body = fixture.GetBody();\r\n\t\t\tif (body.GetType() != b2BodyType.b2_staticBody) {\r\n\t\t\t\tlet inside = fixture.TestPoint(p);\r\n\t\t\t\tif (inside) {\r\n\t\t\t\t\thit_fixture = fixture;\r\n\r\n\t\t\t\t\t// We are done, terminate the query.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Continue the query.\r\n\t\t\treturn true;\r\n\t\t}, aabb);\r\n\r\n\t\tif (hit_fixture) {\r\n\t\t\tlet body = hit_fixture.GetBody();\r\n\t\t\tlet md = new b2MouseJointDef();\r\n\t\t\tmd.bodyA = this.ground.bodies[0];\r\n\t\t\tmd.bodyB = body;\r\n\t\t\tmd.target.Copy(p);\r\n\t\t\tmd.maxForce = 1000 * body.GetMass();\r\n\t\t\tthis.$_mouseJoint = this.CreateJoint(md);\r\n\t\t\tbody.SetAwake(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {b2Vec2} p\r\n\t */\r\n\t$_mouseUp(p) {\r\n\t\tif (this.$_mouseJoint) {\r\n\t\t\tthis.DestroyJoint(this.$_mouseJoint);\r\n\t\t\tthis.$_mouseJoint = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {b2Vec2} p\r\n\t */\r\n\t$_mouseMove(p) {\r\n\t\tif (this.$_mouseJoint) {\r\n\t\t\tthis.$_mouseJoint.SetTarget(p);\r\n\t\t}\r\n\t}\r\n\t\r\n\t$_onMouseEvent() {\r\n\t\tconst x = ($gv.m_viewRect.left + $gv.mouse_x) / $gv.CANVAS_SCALE;\r\n\t\tconst y = ($gv.m_viewRect.top + $gv.mouse_y) / $gv.CANVAS_SCALE;\r\n\t\tconst p = new b2Vec2(x, y);\r\n\t\t\r\n\t\tif ($gv.mouse_dl) {\r\n\t\t\tthis.$_mouseDown(p);\r\n\t\t}\r\n\t\tif ($gv.mouse_ul) {\r\n\t\t\t$gv.mouse_ul = 0;\r\n\t\t\tthis.$_mouseUp(p);\r\n\t\t}\r\n\t\tif ($gv.mouse_move) {\r\n\t\t\t$gv.mouse_move = 0;\r\n\t\t\tthis.$_mouseMove(p);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.stop) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.$_onMouseEvent();\r\n\t\t\r\n\t\tfor (let body = this.GetBodyList(); body; body = body.m_next) {\r\n\t\t\tbody.Step(stamp);\r\n\t\t}\r\n\r\n\t\tsuper.Step(1 / $gv.MAX_FPS, window.$velocityIterations, window.$positionIterations, window.$particleIterations);\r\n\t\tfor (let body = this.GetBodyList(); body; body = body.m_next) {\r\n\t\t\tbody.AfterStep(stamp);\r\n\t\t}\r\n\t\tif (this._onceAfterStep) {\r\n\t\t\tthis._onceAfterStep.forEach(f => f());\r\n\t\t\tthis._onceAfterStep.length = 0;\r\n\t\t}\r\n\t\tif (this._destryBodyList) {\r\n\t\t\tthis._destryBodyList.forEach(b => this._DestroyBody(b));\r\n\t\t\tthis._destryBodyList.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = renderer.ctx;\r\n\r\n\t\t/** @type {PPlayer} */\r\n\t\tconst player = window.chara ? window.chara.$physics : this.player;\r\n\r\n\t\tif ($gv.m_display_physics_debug) {\r\n\t\t\tconst debugDraw = this.m_debugDraw;\r\n\t\t\tthis.m_debugDraw.m_ctx = ctx;\r\n\r\n\t\t\tconst w = ctx.canvas.width;\r\n\t\t\tconst h = ctx.canvas.height;\r\n\r\n\t\t\tctx.save();\r\n\t\t\t\r\n\t\t\tctx.scale(debugDraw.canvasScale, debugDraw.canvasScale);\r\n\t\t\tctx.lineWidth /= debugDraw.canvasScale;\r\n\r\n\t\t\t// apply camera\r\n\t\t\tctx.scale(debugDraw.viewZoom, debugDraw.viewZoom);\r\n\t\t\tctx.lineWidth /= debugDraw.viewZoom;\r\n\r\n\t\t\tthis.DrawDebugData();\r\n\r\n\t\t\t//display player's front\r\n\t\t\tif (player && player.body) {\r\n\t\t\t\tconst pos = player.getPosition();\r\n\t\t\t\tctx.fillStyle = \"#F00A\";\r\n\t\t\t\t\r\n\t\t\t\t//test debugDraw.canvasScale\r\n\t\t\t\tif (player.state.front > 0) {\r\n\t\t\t\t\tctx.fillRect(pos.x, pos.y, 1, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse if (player.state.front < 0) {\r\n\t\t\t\t\tctx.fillRect(pos.x - 1, pos.y, 1, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tctx.fillRect(pos.x - 0.5, pos.y, 1, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\r\n\t\tif ($gv.m_display_particleSystem) {\r\n\t\t\tif (renderer.gl) {\r\n\t\t\t\t/** @type {WebGLRenderingContext} */\r\n\t\t\t\tconst gl = this.gl;\r\n\r\n\t\t\t\tif (!this.$vbo_ps) {\r\n\t\t\t\t\tlet vbo = gl.createBuffer();\r\n\r\n\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vbo);\r\n\r\n\t\t\t\t\tconst count = this.m_particleSystem.GetParticleCount();\r\n\t\t\t\t\tconst buf = this.m_particleSystem.GetPositionBuffer();\r\n\r\n\t\t\t\t\tlet vertices = new Float32Array(count * 2);\r\n\r\n\t\t\t\t\tfor (let i = 0; i < count; i += 2) {\r\n\t\t\t\t\t\tvertices[i + 0] = buf[i].x;\r\n\t\t\t\t\t\tvertices[i + 1] = buf[i].y;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\r\n\r\n\t\t\t\t\tthis.$vbo_ps = vbo;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst count = this.m_particleSystem.GetParticleCount();\r\n\t\t\t\t\tconst buf = this.m_particleSystem.GetPositionBuffer();\r\n\r\n\t\t\t\t\tlet vertices = new Float32Array(count * 2);\r\n\r\n\t\t\t\t\tfor (let i = 0; i < count; i += 2) {\r\n\t\t\t\t\t\tvertices[i + 0] = buf[i].x;\r\n\t\t\t\t\t\tvertices[i + 1] = buf[i].y;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let group = this.m_particleSystem.m_groupList; group; group = group.m_next) {\r\n\t\t\t\t\tlet particleCount = group.GetParticleCount();\r\n\t\t\t\t\tlet instanceOffset = group.GetBufferIndex();\r\n\t\t\t\t\tgl.drawArrays(gl.POINTS, instanceOffset, particleCount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (ctx) {\r\n\t\t\t\tif ($gv.func) {\r\n\t\t\t\t\t$gv.func.call(this, ctx, renderer);\r\n\t\t\t\t\t//$gv.func = function (ctx) {\r\n\t\t\t\t\t//\tctx = ctx || $engine.ctx;\r\n\t\t\t\t\t//\tconst vertices = this.m_particleSystem.m_positionBuffer.data;\r\n\t\t\t\t\t//\tconst colorBuffer = this.m_particleSystem.m_colorBuffer.data;\r\n\t\t\t\t\t//\tconst weightBuffer = this.m_particleSystem.m_weightBuffer;\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//\tlet minWeight = Math.min.apply(this, weightBuffer.slice(0, 128));\r\n\t\t\t\t\t//\tlet maxWeight = Math.max.apply(this, weightBuffer.slice(0, 128)) - minWeight;\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//\tif (vertices.length > 2) {\r\n\t\t\t\t\t//\t\tlet length = vertices.length / 2;\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//\t\tctx.fillStyle = \"#0747\";\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//\t\tfor (let i = 0; i < length - 2; i += 1) {\r\n\t\t\t\t\t//\t\t\tctx.beginPath();\r\n\t\t\t\t\t//\t\t\tctx.moveTo(vertices[i + 0].x * $gv.CANVAS_SCALE, vertices[i + 0].y * $gv.CANVAS_SCALE);\r\n\t\t\t\t\t//\t\t\tctx.lineTo(vertices[i + 1].x * $gv.CANVAS_SCALE, vertices[i + 1].y * $gv.CANVAS_SCALE);\r\n\t\t\t\t\t//\t\t\tctx.lineTo(vertices[i + 2].x * $gv.CANVAS_SCALE, vertices[i + 2].y * $gv.CANVAS_SCALE);\r\n\t\t\t\t\t//\t\t\tctx.fillStyle = `hsla(87deg,${(weightBuffer[i] / maxWeight * 100).toFixed(0)}%,${(weightBuffer[i] / maxWeight * 50).toFixed(0)}%,${(weightBuffer[i] / maxWeight / 2).toFixed(2)})`\r\n\t\t\t\t\t//\t\t\t//ctx.fillStyle = colorBuffer[i].MakeStyleString();\r\n\t\t\t\t\t//\t\t\tctx.fill();\r\n\t\t\t\t\t//\t\t}\r\n\t\t\t\t\t//\t}\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconst vertices = this.m_particleSystem.m_positionBuffer.data;\r\n\t\t\t\t\tconst colorBuffer = this.m_particleSystem.m_colorBuffer.data;\r\n\t\t\t\t\tconst weightBuffer = this.m_particleSystem.m_weightBuffer.data;\r\n\r\n\t\t\t\t\trenderer.pushMatrix();\r\n\r\n\t\t\t\t\tconst r = window.$particleRadius;\r\n\t\t\t\t\tconst r2 = r * 2;\r\n\r\n\t\t\t\t\tif (!this.$particle_grd) {\r\n\t\t\t\t\t\tlet grd = ctx.createRadialGradient(r, r, 0, r, r, r2);\r\n\t\t\t\t\t\tgrd.addColorStop(0, \"#0744\");\r\n\t\t\t\t\t\tgrd.addColorStop(1, \"#07440\");\r\n\t\t\t\t\t\tthis.$particle_grd = grd;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let group = this.m_particleSystem.m_groupList; group; group = group.m_next) {\r\n\t\t\t\t\t\tfor (let i = group.m_firstIndex; i < group.m_lastIndex; ++i) {\r\n\t\t\t\t\t\t\tlet x1 = vertices[i].x * $gv.CANVAS_SCALE - r;\r\n\t\t\t\t\t\t\tlet y1 = vertices[i].y * $gv.CANVAS_SCALE - r;\r\n\r\n\t\t\t\t\t\t\trenderer.setTransform(1, 0, 0, 1, $gv.m_viewRect.left + x1, $gv.m_viewRect.top + y1);\r\n\r\n\t\t\t\t\t\t\tctx.beginPath();\r\n\r\n\t\t\t\t\t\t\t//texture\r\n\r\n\t\t\t\t\t\t\t//ctx.arc(0, 0, r2, 0, 2 * Math.PI);\r\n\t\t\t\t\t\t\t//ctx.fillStyle = this.$particle_grd;\r\n\t\t\t\t\t\t\t//ctx.fill();\r\n\r\n\t\t\t\t\t\t\tctx.fillStyle = this.$particle_grd;\r\n\t\t\t\t\t\t\tctx.fillRect(r, r, r2 * 2, r2 * 2);\r\n\r\n\t\t\t\t\t\t\t//center\r\n\t\t\t\t\t\t\t//ctx.fillStyle = \"red\";\r\n\t\t\t\t\t\t\t//ctx.fillRect(0, 0, 1, 1);\r\n\r\n\t\t\t\t\t\t\t//border\r\n\t\t\t\t\t\t\t//ctx.strokeRect(-r, -r, r2, r2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\trenderer.popMatrix();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif ($gv.m_display_foothold) {\r\n\t\t\tctx.save();\r\n\t\t\tthis.ground.$drawDebugInfo(renderer);\r\n\t\t\tif (player && player._foothold) {\r\n\t\t\t\tplayer._foothold.$drawDebugInfo2(renderer, \"#FF0\");\r\n\t\t\t}\r\n\r\n\t\t\tlet $foothold, $ladderRope;\r\n\t\t\tif (player) {\r\n\t\t\t\t$foothold = player.$foothold;\r\n\t\t\t\t$ladderRope = player.ladder;\r\n\t\t\t}\r\n\t\t\tif ($foothold && this.draw_foothold_path_count) {\r\n\t\t\t\t$foothold.$drawDebugInfo2(renderer, \"#F00\");\r\n\r\n\t\t\t\t//draw path\r\n\t\t\t\tlet count = this.draw_foothold_path_count;\r\n\t\t\t\tctx.lineWidth = 2.5;\r\n\t\t\t\tctx.strokeStyle = \"#00FE\";\r\n\t\t\t\tif (player.state.front > 0) {\r\n\t\t\t\t\t$foothold = this.ground.footholds[$foothold.next];\r\n\t\t\t\t\tfor (; $foothold; $foothold = this.ground.footholds[$foothold.next]) {\r\n\t\t\t\t\t\t$foothold._drawLine(ctx);\r\n\t\t\t\t\t\tif ((--count) <= 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (player.state.front < 0) {\r\n\t\t\t\t\t$foothold = this.ground.footholds[$foothold.prev];\r\n\t\t\t\t\tfor (; $foothold; $foothold = this.ground.footholds[$foothold.prev]) {\r\n\t\t\t\t\t\t$foothold._drawLine(ctx);\r\n\t\t\t\t\t\tif ((--count) <= 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.ladderRope.forEach(lr => {\r\n\t\t\t\tconst width = lr.calcWidth();\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.rect(lr.x - width * 0.5, lr.y1, width, lr.y2 - lr.y1);\r\n\t\t\t\tctx.fillStyle = lr == $ladderRope ? \"#E117\":\"#EB17\";\r\n\t\t\t\tctx.fill();\r\n\t\t\t});\r\n\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * https://github.com/google/LiquidFunPaint/blob/develop/src/com/google/fpl/liquidfunpaint/ParticleRenderer.java#L43\r\n * Renderer to draw particle water, objects, and wall. It draws particles as\r\n * fluid (or objects) by following three steps:\r\n * 1) Draws particles to a texture\r\n * 2) Blurs it out\r\n * 3) Applies threshold.\r\n */\r\n\r\n","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_maxFloat, b2_epsilon, b2_epsilon_sq } from \"../Common/b2Settings\";\r\nimport { b2Max, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\n/// A distance proxy is used by the GJK algorithm.\r\n/// It encapsulates any shape.\r\nexport class b2DistanceProxy {\r\n    constructor() {\r\n        this.m_buffer = b2Vec2.MakeArray(2);\r\n        this.m_vertices = this.m_buffer;\r\n        this.m_count = 0;\r\n        this.m_radius = 0;\r\n    }\r\n    Reset() {\r\n        this.m_vertices = this.m_buffer;\r\n        this.m_count = 0;\r\n        this.m_radius = 0;\r\n        return this;\r\n    }\r\n    SetShape(shape, index) {\r\n        shape.SetupDistanceProxy(this, index);\r\n    }\r\n    GetSupport(d) {\r\n        let bestIndex = 0;\r\n        let bestValue = b2Vec2.DotVV(this.m_vertices[0], d);\r\n        for (let i = 1; i < this.m_count; ++i) {\r\n            const value = b2Vec2.DotVV(this.m_vertices[i], d);\r\n            if (value > bestValue) {\r\n                bestIndex = i;\r\n                bestValue = value;\r\n            }\r\n        }\r\n        return bestIndex;\r\n    }\r\n    GetSupportVertex(d) {\r\n        let bestIndex = 0;\r\n        let bestValue = b2Vec2.DotVV(this.m_vertices[0], d);\r\n        for (let i = 1; i < this.m_count; ++i) {\r\n            const value = b2Vec2.DotVV(this.m_vertices[i], d);\r\n            if (value > bestValue) {\r\n                bestIndex = i;\r\n                bestValue = value;\r\n            }\r\n        }\r\n        return this.m_vertices[bestIndex];\r\n    }\r\n    GetVertexCount() {\r\n        return this.m_count;\r\n    }\r\n    GetVertex(index) {\r\n        ///b2Assert(0 <= index && index < this.m_count);\r\n        return this.m_vertices[index];\r\n    }\r\n}\r\nexport class b2SimplexCache {\r\n    constructor() {\r\n        this.metric = 0;\r\n        this.count = 0;\r\n        this.indexA = [0, 0, 0];\r\n        this.indexB = [0, 0, 0];\r\n    }\r\n    Reset() {\r\n        this.metric = 0;\r\n        this.count = 0;\r\n        return this;\r\n    }\r\n}\r\nexport class b2DistanceInput {\r\n    constructor() {\r\n        this.proxyA = new b2DistanceProxy();\r\n        this.proxyB = new b2DistanceProxy();\r\n        this.transformA = new b2Transform();\r\n        this.transformB = new b2Transform();\r\n        this.useRadii = false;\r\n    }\r\n    Reset() {\r\n        this.proxyA.Reset();\r\n        this.proxyB.Reset();\r\n        this.transformA.SetIdentity();\r\n        this.transformB.SetIdentity();\r\n        this.useRadii = false;\r\n        return this;\r\n    }\r\n}\r\nexport class b2DistanceOutput {\r\n    constructor() {\r\n        this.pointA = new b2Vec2();\r\n        this.pointB = new b2Vec2();\r\n        this.distance = 0;\r\n        this.iterations = 0; ///< number of GJK iterations used\r\n    }\r\n    Reset() {\r\n        this.pointA.SetZero();\r\n        this.pointB.SetZero();\r\n        this.distance = 0;\r\n        this.iterations = 0;\r\n        return this;\r\n    }\r\n}\r\nexport let b2_gjkCalls = 0;\r\nexport let b2_gjkIters = 0;\r\nexport let b2_gjkMaxIters = 0;\r\nexport function b2_gjk_reset() {\r\n    b2_gjkCalls = 0;\r\n    b2_gjkIters = 0;\r\n    b2_gjkMaxIters = 0;\r\n}\r\nexport class b2SimplexVertex {\r\n    constructor() {\r\n        this.wA = new b2Vec2(); // support point in proxyA\r\n        this.wB = new b2Vec2(); // support point in proxyB\r\n        this.w = new b2Vec2(); // wB - wA\r\n        this.a = 0; // barycentric coordinate for closest point\r\n        this.indexA = 0; // wA index\r\n        this.indexB = 0; // wB index\r\n    }\r\n    Copy(other) {\r\n        this.wA.Copy(other.wA); // support point in proxyA\r\n        this.wB.Copy(other.wB); // support point in proxyB\r\n        this.w.Copy(other.w); // wB - wA\r\n        this.a = other.a; // barycentric coordinate for closest point\r\n        this.indexA = other.indexA; // wA index\r\n        this.indexB = other.indexB; // wB index\r\n        return this;\r\n    }\r\n}\r\nexport class b2Simplex {\r\n    constructor() {\r\n        this.m_v1 = new b2SimplexVertex();\r\n        this.m_v2 = new b2SimplexVertex();\r\n        this.m_v3 = new b2SimplexVertex();\r\n        this.m_vertices = [ /*3*/];\r\n        this.m_count = 0;\r\n        this.m_vertices[0] = this.m_v1;\r\n        this.m_vertices[1] = this.m_v2;\r\n        this.m_vertices[2] = this.m_v3;\r\n    }\r\n    ReadCache(cache, proxyA, transformA, proxyB, transformB) {\r\n        ///b2Assert(0 <= cache.count && cache.count <= 3);\r\n        // Copy data from cache.\r\n        this.m_count = cache.count;\r\n        const vertices = this.m_vertices;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const v = vertices[i];\r\n            v.indexA = cache.indexA[i];\r\n            v.indexB = cache.indexB[i];\r\n            const wALocal = proxyA.GetVertex(v.indexA);\r\n            const wBLocal = proxyB.GetVertex(v.indexB);\r\n            b2Transform.MulXV(transformA, wALocal, v.wA);\r\n            b2Transform.MulXV(transformB, wBLocal, v.wB);\r\n            b2Vec2.SubVV(v.wB, v.wA, v.w);\r\n            v.a = 0;\r\n        }\r\n        // Compute the new simplex metric, if it is substantially different than\r\n        // old metric then flush the simplex.\r\n        if (this.m_count > 1) {\r\n            const metric1 = cache.metric;\r\n            const metric2 = this.GetMetric();\r\n            if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < b2_epsilon) {\r\n                // Reset the simplex.\r\n                this.m_count = 0;\r\n            }\r\n        }\r\n        // If the cache is empty or invalid ...\r\n        if (this.m_count === 0) {\r\n            const v = vertices[0];\r\n            v.indexA = 0;\r\n            v.indexB = 0;\r\n            const wALocal = proxyA.GetVertex(0);\r\n            const wBLocal = proxyB.GetVertex(0);\r\n            b2Transform.MulXV(transformA, wALocal, v.wA);\r\n            b2Transform.MulXV(transformB, wBLocal, v.wB);\r\n            b2Vec2.SubVV(v.wB, v.wA, v.w);\r\n            v.a = 1;\r\n            this.m_count = 1;\r\n        }\r\n    }\r\n    WriteCache(cache) {\r\n        cache.metric = this.GetMetric();\r\n        cache.count = this.m_count;\r\n        const vertices = this.m_vertices;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            cache.indexA[i] = vertices[i].indexA;\r\n            cache.indexB[i] = vertices[i].indexB;\r\n        }\r\n    }\r\n    GetSearchDirection(out) {\r\n        switch (this.m_count) {\r\n            case 1:\r\n                return b2Vec2.NegV(this.m_v1.w, out);\r\n            case 2: {\r\n                const e12 = b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);\r\n                const sgn = b2Vec2.CrossVV(e12, b2Vec2.NegV(this.m_v1.w, b2Vec2.s_t0));\r\n                if (sgn > 0) {\r\n                    // Origin is left of e12.\r\n                    return b2Vec2.CrossOneV(e12, out);\r\n                }\r\n                else {\r\n                    // Origin is right of e12.\r\n                    return b2Vec2.CrossVOne(e12, out);\r\n                }\r\n            }\r\n            default:\r\n                ///b2Assert(false);\r\n                return out.SetZero();\r\n        }\r\n    }\r\n    GetClosestPoint(out) {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                ///b2Assert(false);\r\n                return out.SetZero();\r\n            case 1:\r\n                return out.Copy(this.m_v1.w);\r\n            case 2:\r\n                return out.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);\r\n            case 3:\r\n                return out.SetZero();\r\n            default:\r\n                ///b2Assert(false);\r\n                return out.SetZero();\r\n        }\r\n    }\r\n    GetWitnessPoints(pA, pB) {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                ///b2Assert(false);\r\n                break;\r\n            case 1:\r\n                pA.Copy(this.m_v1.wA);\r\n                pB.Copy(this.m_v1.wB);\r\n                break;\r\n            case 2:\r\n                pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\r\n                pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\r\n                pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\r\n                pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\r\n                break;\r\n            case 3:\r\n                pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;\r\n                pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;\r\n                break;\r\n            default:\r\n                ///b2Assert(false);\r\n                break;\r\n        }\r\n    }\r\n    GetMetric() {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                ///b2Assert(false);\r\n                return 0;\r\n            case 1:\r\n                return 0;\r\n            case 2:\r\n                return b2Vec2.DistanceVV(this.m_v1.w, this.m_v2.w);\r\n            case 3:\r\n                return b2Vec2.CrossVV(b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, b2Vec2.s_t0), b2Vec2.SubVV(this.m_v3.w, this.m_v1.w, b2Vec2.s_t1));\r\n            default:\r\n                ///b2Assert(false);\r\n                return 0;\r\n        }\r\n    }\r\n    Solve2() {\r\n        const w1 = this.m_v1.w;\r\n        const w2 = this.m_v2.w;\r\n        const e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\r\n        // w1 region\r\n        const d12_2 = (-b2Vec2.DotVV(w1, e12));\r\n        if (d12_2 <= 0) {\r\n            // a2 <= 0, so we clamp it to 0\r\n            this.m_v1.a = 1;\r\n            this.m_count = 1;\r\n            return;\r\n        }\r\n        // w2 region\r\n        const d12_1 = b2Vec2.DotVV(w2, e12);\r\n        if (d12_1 <= 0) {\r\n            // a1 <= 0, so we clamp it to 0\r\n            this.m_v2.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v2);\r\n            return;\r\n        }\r\n        // Must be in e12 region.\r\n        const inv_d12 = 1 / (d12_1 + d12_2);\r\n        this.m_v1.a = d12_1 * inv_d12;\r\n        this.m_v2.a = d12_2 * inv_d12;\r\n        this.m_count = 2;\r\n    }\r\n    Solve3() {\r\n        const w1 = this.m_v1.w;\r\n        const w2 = this.m_v2.w;\r\n        const w3 = this.m_v3.w;\r\n        // Edge12\r\n        // [1      1     ][a1] = [1]\r\n        // [w1.e12 w2.e12][a2] = [0]\r\n        // a3 = 0\r\n        const e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\r\n        const w1e12 = b2Vec2.DotVV(w1, e12);\r\n        const w2e12 = b2Vec2.DotVV(w2, e12);\r\n        const d12_1 = w2e12;\r\n        const d12_2 = (-w1e12);\r\n        // Edge13\r\n        // [1      1     ][a1] = [1]\r\n        // [w1.e13 w3.e13][a3] = [0]\r\n        // a2 = 0\r\n        const e13 = b2Vec2.SubVV(w3, w1, b2Simplex.s_e13);\r\n        const w1e13 = b2Vec2.DotVV(w1, e13);\r\n        const w3e13 = b2Vec2.DotVV(w3, e13);\r\n        const d13_1 = w3e13;\r\n        const d13_2 = (-w1e13);\r\n        // Edge23\r\n        // [1      1     ][a2] = [1]\r\n        // [w2.e23 w3.e23][a3] = [0]\r\n        // a1 = 0\r\n        const e23 = b2Vec2.SubVV(w3, w2, b2Simplex.s_e23);\r\n        const w2e23 = b2Vec2.DotVV(w2, e23);\r\n        const w3e23 = b2Vec2.DotVV(w3, e23);\r\n        const d23_1 = w3e23;\r\n        const d23_2 = (-w2e23);\r\n        // Triangle123\r\n        const n123 = b2Vec2.CrossVV(e12, e13);\r\n        const d123_1 = n123 * b2Vec2.CrossVV(w2, w3);\r\n        const d123_2 = n123 * b2Vec2.CrossVV(w3, w1);\r\n        const d123_3 = n123 * b2Vec2.CrossVV(w1, w2);\r\n        // w1 region\r\n        if (d12_2 <= 0 && d13_2 <= 0) {\r\n            this.m_v1.a = 1;\r\n            this.m_count = 1;\r\n            return;\r\n        }\r\n        // e12\r\n        if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\r\n            const inv_d12 = 1 / (d12_1 + d12_2);\r\n            this.m_v1.a = d12_1 * inv_d12;\r\n            this.m_v2.a = d12_2 * inv_d12;\r\n            this.m_count = 2;\r\n            return;\r\n        }\r\n        // e13\r\n        if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\r\n            const inv_d13 = 1 / (d13_1 + d13_2);\r\n            this.m_v1.a = d13_1 * inv_d13;\r\n            this.m_v3.a = d13_2 * inv_d13;\r\n            this.m_count = 2;\r\n            this.m_v2.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // w2 region\r\n        if (d12_1 <= 0 && d23_2 <= 0) {\r\n            this.m_v2.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v2);\r\n            return;\r\n        }\r\n        // w3 region\r\n        if (d13_1 <= 0 && d23_1 <= 0) {\r\n            this.m_v3.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // e23\r\n        if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\r\n            const inv_d23 = 1 / (d23_1 + d23_2);\r\n            this.m_v2.a = d23_1 * inv_d23;\r\n            this.m_v3.a = d23_2 * inv_d23;\r\n            this.m_count = 2;\r\n            this.m_v1.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // Must be in triangle123\r\n        const inv_d123 = 1 / (d123_1 + d123_2 + d123_3);\r\n        this.m_v1.a = d123_1 * inv_d123;\r\n        this.m_v2.a = d123_2 * inv_d123;\r\n        this.m_v3.a = d123_3 * inv_d123;\r\n        this.m_count = 3;\r\n    }\r\n}\r\nb2Simplex.s_e12 = new b2Vec2();\r\nb2Simplex.s_e13 = new b2Vec2();\r\nb2Simplex.s_e23 = new b2Vec2();\r\nconst b2Distance_s_simplex = new b2Simplex();\r\nconst b2Distance_s_saveA = [0, 0, 0];\r\nconst b2Distance_s_saveB = [0, 0, 0];\r\nconst b2Distance_s_p = new b2Vec2();\r\nconst b2Distance_s_d = new b2Vec2();\r\nconst b2Distance_s_normal = new b2Vec2();\r\nconst b2Distance_s_supportA = new b2Vec2();\r\nconst b2Distance_s_supportB = new b2Vec2();\r\nexport function b2Distance(output, cache, input) {\r\n    ++b2_gjkCalls;\r\n    const proxyA = input.proxyA;\r\n    const proxyB = input.proxyB;\r\n    const transformA = input.transformA;\r\n    const transformB = input.transformB;\r\n    // Initialize the simplex.\r\n    const simplex = b2Distance_s_simplex;\r\n    simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\r\n    // Get simplex vertices as an array.\r\n    const vertices = simplex.m_vertices;\r\n    const k_maxIters = 20;\r\n    // These store the vertices of the last simplex so that we\r\n    // can check for duplicates and prevent cycling.\r\n    const saveA = b2Distance_s_saveA;\r\n    const saveB = b2Distance_s_saveB;\r\n    let saveCount = 0;\r\n    let distanceSqr1 = b2_maxFloat;\r\n    let distanceSqr2 = distanceSqr1;\r\n    // Main iteration loop.\r\n    let iter = 0;\r\n    while (iter < k_maxIters) {\r\n        // Copy simplex so we can identify duplicates.\r\n        saveCount = simplex.m_count;\r\n        for (let i = 0; i < saveCount; ++i) {\r\n            saveA[i] = vertices[i].indexA;\r\n            saveB[i] = vertices[i].indexB;\r\n        }\r\n        switch (simplex.m_count) {\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                simplex.Solve2();\r\n                break;\r\n            case 3:\r\n                simplex.Solve3();\r\n                break;\r\n            default:\r\n                ///b2Assert(false);\r\n                break;\r\n        }\r\n        // If we have 3 points, then the origin is in the corresponding triangle.\r\n        if (simplex.m_count === 3) {\r\n            break;\r\n        }\r\n        // Compute closest point.\r\n        const p = simplex.GetClosestPoint(b2Distance_s_p);\r\n        distanceSqr2 = p.LengthSquared();\r\n        // Ensure progress\r\n        /*\r\n        TODO: to fix compile warning\r\n        if (distanceSqr2 > distanceSqr1) {\r\n          //break;\r\n        }\r\n        */\r\n        distanceSqr1 = distanceSqr2;\r\n        // Get search direction.\r\n        const d = simplex.GetSearchDirection(b2Distance_s_d);\r\n        // Ensure the search direction is numerically fit.\r\n        if (d.LengthSquared() < b2_epsilon_sq) {\r\n            // The origin is probably contained by a line segment\r\n            // or triangle. Thus the shapes are overlapped.\r\n            // We can't return zero here even though there may be overlap.\r\n            // In case the simplex is a point, segment, or triangle it is difficult\r\n            // to determine if the origin is contained in the CSO or very close to it.\r\n            break;\r\n        }\r\n        // Compute a tentative new simplex vertex using support points.\r\n        const vertex = vertices[simplex.m_count];\r\n        vertex.indexA = proxyA.GetSupport(b2Rot.MulTRV(transformA.q, b2Vec2.NegV(d, b2Vec2.s_t0), b2Distance_s_supportA));\r\n        b2Transform.MulXV(transformA, proxyA.GetVertex(vertex.indexA), vertex.wA);\r\n        vertex.indexB = proxyB.GetSupport(b2Rot.MulTRV(transformB.q, d, b2Distance_s_supportB));\r\n        b2Transform.MulXV(transformB, proxyB.GetVertex(vertex.indexB), vertex.wB);\r\n        b2Vec2.SubVV(vertex.wB, vertex.wA, vertex.w);\r\n        // Iteration count is equated to the number of support point calls.\r\n        ++iter;\r\n        ++b2_gjkIters;\r\n        // Check for duplicate support points. This is the main termination criteria.\r\n        let duplicate = false;\r\n        for (let i = 0; i < saveCount; ++i) {\r\n            if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\r\n                duplicate = true;\r\n                break;\r\n            }\r\n        }\r\n        // If we found a duplicate support point we must exit to avoid cycling.\r\n        if (duplicate) {\r\n            break;\r\n        }\r\n        // New vertex is ok and needed.\r\n        ++simplex.m_count;\r\n    }\r\n    b2_gjkMaxIters = b2Max(b2_gjkMaxIters, iter);\r\n    // Prepare output.\r\n    simplex.GetWitnessPoints(output.pointA, output.pointB);\r\n    output.distance = b2Vec2.DistanceVV(output.pointA, output.pointB);\r\n    output.iterations = iter;\r\n    // Cache the simplex.\r\n    simplex.WriteCache(cache);\r\n    // Apply radii if requested.\r\n    if (input.useRadii) {\r\n        const rA = proxyA.m_radius;\r\n        const rB = proxyB.m_radius;\r\n        if (output.distance > (rA + rB) && output.distance > b2_epsilon) {\r\n            // Shapes are still no overlapped.\r\n            // Move the witness points to the outer surface.\r\n            output.distance -= rA + rB;\r\n            const normal = b2Vec2.SubVV(output.pointB, output.pointA, b2Distance_s_normal);\r\n            normal.Normalize();\r\n            output.pointA.SelfMulAdd(rA, normal);\r\n            output.pointB.SelfMulSub(rB, normal);\r\n        }\r\n        else {\r\n            // Shapes are overlapped when radii are considered.\r\n            // Move the witness points to the middle.\r\n            const p = b2Vec2.MidVV(output.pointA, output.pointB, b2Distance_s_p);\r\n            output.pointA.Copy(p);\r\n            output.pointB.Copy(p);\r\n            output.distance = 0;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2AABB } from \"../Collision/b2Collision\";\r\nimport { b2MassData } from \"../Collision/Shapes/b2Shape\";\r\n/// This holds contact filtering data.\r\nexport class b2Filter {\r\n    constructor() {\r\n        /// The collision category bits. Normally you would just set one bit.\r\n        this.categoryBits = 0x0001;\r\n        /// The collision mask bits. This states the categories that this\r\n        /// shape would accept for collision.\r\n        this.maskBits = 0xFFFF;\r\n        /// Collision groups allow a certain group of objects to never collide (negative)\r\n        /// or always collide (positive). Zero means no collision group. Non-zero group\r\n        /// filtering always wins against the mask bits.\r\n        this.groupIndex = 0;\r\n    }\r\n    Clone() {\r\n        return new b2Filter().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        ///b2Assert(this !== other);\r\n        this.categoryBits = other.categoryBits;\r\n        this.maskBits = other.maskBits;\r\n        this.groupIndex = other.groupIndex;\r\n        return this;\r\n    }\r\n}\r\n/// A fixture definition is used to create a fixture. This class defines an\r\n/// abstract fixture definition. You can reuse fixture definitions safely.\r\nexport class b2FixtureDef {\r\n    constructor() {\r\n        /// The shape, this must be set. The shape will be cloned, so you\r\n        /// can create the shape on the stack.\r\n        this.shape = null;\r\n        /// Use this to store application specific fixture data.\r\n        this.userData = null;\r\n        /// The friction coefficient, usually in the range [0,1].\r\n        this.friction = 0.2;\r\n        /// The restitution (elasticity) usually in the range [0,1].\r\n        this.restitution = 0;\r\n        /// The density, usually in kg/m^2.\r\n        this.density = 0;\r\n        /// A sensor shape collects contact information but never generates a collision\r\n        /// response.\r\n        this.isSensor = false;\r\n        /// Contact filtering data.\r\n        this.filter = new b2Filter();\r\n    }\r\n}\r\n/// This proxy is used internally to connect fixtures to the broad-phase.\r\nexport class b2FixtureProxy {\r\n    // public static MakeArray(length: number): b2FixtureProxy[] {\r\n    //   return b2MakeArray(length, (i) => new b2FixtureProxy());\r\n    // }\r\n    constructor(fixture) {\r\n        this.aabb = new b2AABB();\r\n        this.childIndex = 0;\r\n        this.treeNode = null;\r\n        this.fixture = fixture;\r\n    }\r\n}\r\n/// A fixture is used to attach a shape to a body for collision detection. A fixture\r\n/// inherits its transform from its parent. Fixtures hold additional non-geometric data\r\n/// such as friction, collision filters, etc.\r\n/// Fixtures are created via b2Body::CreateFixture.\r\n/// @warning you cannot reuse fixtures.\r\nexport class b2Fixture {\r\n    constructor(def, body) {\r\n        this.m_density = 0;\r\n        this.m_next = null;\r\n        this.m_friction = 0;\r\n        this.m_restitution = 0;\r\n        this.m_proxies = null;\r\n        this.m_proxyCount = 0;\r\n        this.m_filter = new b2Filter();\r\n        this.m_isSensor = false;\r\n        this.m_userData = null;\r\n        this.m_body = body;\r\n        this.m_shape = def.shape.Clone();\r\n    }\r\n    /// Get the type of the child shape. You can use this to down cast to the concrete shape.\r\n    /// @return the shape type.\r\n    GetType() {\r\n        return this.m_shape.GetType();\r\n    }\r\n    /// Get the child shape. You can modify the child shape, however you should not change the\r\n    /// number of vertices because this will crash some collision caching mechanisms.\r\n    /// Manipulating the shape may lead to non-physical behavior.\r\n    GetShape() {\r\n        return this.m_shape;\r\n    }\r\n    /// Set if this fixture is a sensor.\r\n    SetSensor(sensor) {\r\n        if (sensor !== this.m_isSensor) {\r\n            this.m_body.SetAwake(true);\r\n            this.m_isSensor = sensor;\r\n        }\r\n    }\r\n    /// Is this fixture a sensor (non-solid)?\r\n    /// @return the true if the shape is a sensor.\r\n    IsSensor() {\r\n        return this.m_isSensor;\r\n    }\r\n    /// Set the contact filtering data. This will not update contacts until the next time\r\n    /// step when either parent body is active and awake.\r\n    /// This automatically calls Refilter.\r\n    SetFilterData(filter) {\r\n        this.m_filter.Copy(filter);\r\n        this.Refilter();\r\n    }\r\n    /// Get the contact filtering data.\r\n    GetFilterData() {\r\n        return this.m_filter;\r\n    }\r\n    /// Call this if you want to establish collision that was previously disabled by b2ContactFilter::ShouldCollide.\r\n    Refilter() {\r\n        if (this.m_body) {\r\n            return;\r\n        }\r\n        // Flag associated contacts for filtering.\r\n        let edge = this.m_body.GetContactList();\r\n        while (edge) {\r\n            const contact = edge.contact;\r\n            const fixtureA = contact.GetFixtureA();\r\n            const fixtureB = contact.GetFixtureB();\r\n            if (fixtureA === this || fixtureB === this) {\r\n                contact.FlagForFiltering();\r\n            }\r\n            edge = edge.next;\r\n        }\r\n        const world = this.m_body.GetWorld();\r\n        if (world === null) {\r\n            return;\r\n        }\r\n        // Touch each proxy so that new pairs may be created\r\n        const broadPhase = world.m_contactManager.m_broadPhase;\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            broadPhase.TouchProxy(this.m_proxies[i].treeNode);\r\n        }\r\n    }\r\n    /// Get the parent body of this fixture. This is NULL if the fixture is not attached.\r\n    /// @return the parent body.\r\n    GetBody() {\r\n        return this.m_body;\r\n    }\r\n    /// Get the next fixture in the parent body's fixture list.\r\n    /// @return the next shape.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data that was assigned in the fixture definition. Use this to\r\n    /// store your application specific data.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data. Use this to store your application specific data.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Test a point for containment in this fixture.\r\n    /// @param p a point in world coordinates.\r\n    TestPoint(p) {\r\n        return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ComputeDistance(p, normal, childIndex) {\r\n        return this.m_shape.ComputeDistance(this.m_body.GetTransform(), p, normal, childIndex);\r\n    }\r\n    // #endif\r\n    /// Cast a ray against this shape.\r\n    /// @param output the ray-cast results.\r\n    /// @param input the ray-cast input parameters.\r\n    RayCast(output, input, childIndex) {\r\n        return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex);\r\n    }\r\n    /// Get the mass data for this fixture. The mass data is based on the density and\r\n    /// the shape. The rotational inertia is about the shape's origin. This operation\r\n    /// may be expensive.\r\n    GetMassData(massData = new b2MassData()) {\r\n        this.m_shape.ComputeMass(massData, this.m_density);\r\n        return massData;\r\n    }\r\n    /// Set the density of this fixture. This will _not_ automatically adjust the mass\r\n    /// of the body. You must call b2Body::ResetMassData to update the body's mass.\r\n    SetDensity(density) {\r\n        this.m_density = density;\r\n    }\r\n    /// Get the density of this fixture.\r\n    GetDensity() {\r\n        return this.m_density;\r\n    }\r\n    /// Get the coefficient of friction.\r\n    GetFriction() {\r\n        return this.m_friction;\r\n    }\r\n    /// Set the coefficient of friction. This will _not_ change the friction of\r\n    /// existing contacts.\r\n    SetFriction(friction) {\r\n        this.m_friction = friction;\r\n    }\r\n    /// Get the coefficient of restitution.\r\n    GetRestitution() {\r\n        return this.m_restitution;\r\n    }\r\n    /// Set the coefficient of restitution. This will _not_ change the restitution of\r\n    /// existing contacts.\r\n    SetRestitution(restitution) {\r\n        this.m_restitution = restitution;\r\n    }\r\n    /// Get the fixture's AABB. This AABB may be enlarge and/or stale.\r\n    /// If you need a more accurate AABB, compute it using the shape and\r\n    /// the body transform.\r\n    GetAABB(childIndex) {\r\n        ///b2Assert(0 <= childIndex && childIndex < this.m_proxyCount);\r\n        return this.m_proxies[childIndex].aabb;\r\n    }\r\n    /// Dump this fixture to the log file.\r\n    Dump(log, bodyIndex) {\r\n        log(\"    const fd: b2FixtureDef = new b2FixtureDef();\\n\");\r\n        log(\"    fd.friction = %.15f;\\n\", this.m_friction);\r\n        log(\"    fd.restitution = %.15f;\\n\", this.m_restitution);\r\n        log(\"    fd.density = %.15f;\\n\", this.m_density);\r\n        log(\"    fd.isSensor = %s;\\n\", (this.m_isSensor) ? (\"true\") : (\"false\"));\r\n        log(\"    fd.filter.categoryBits = %d;\\n\", this.m_filter.categoryBits);\r\n        log(\"    fd.filter.maskBits = %d;\\n\", this.m_filter.maskBits);\r\n        log(\"    fd.filter.groupIndex = %d;\\n\", this.m_filter.groupIndex);\r\n        this.m_shape.Dump(log);\r\n        log(\"\\n\");\r\n        log(\"    fd.shape = shape;\\n\");\r\n        log(\"\\n\");\r\n        log(\"    bodies[%d].CreateFixture(fd);\\n\", bodyIndex);\r\n    }\r\n    // We need separation create/destroy functions from the constructor/destructor because\r\n    // the destructor cannot access the allocator (no destructor arguments allowed by C++).\r\n    Create(/*body: b2Body,*/ def) {\r\n        this.m_userData = def.userData;\r\n        this.m_friction = def.friction;\r\n        this.m_restitution = def.restitution;\r\n        // this.m_body = body;\r\n        this.m_next = null;\r\n        this.m_filter.Copy(def.filter);\r\n        this.m_isSensor = def.isSensor;\r\n        // this.m_shape = def.shape.Clone();\r\n        // Reserve proxy space\r\n        // const childCount = m_shape->GetChildCount();\r\n        // m_proxies = (b2FixtureProxy*)allocator->Allocate(childCount * sizeof(b2FixtureProxy));\r\n        // for (int32 i = 0; i < childCount; ++i)\r\n        // {\r\n        //   m_proxies[i].fixture = NULL;\r\n        //   m_proxies[i].proxyId = b2BroadPhase::e_nullProxy;\r\n        // }\r\n        // this.m_proxies = b2FixtureProxy.MakeArray(this.m_shape.GetChildCount());\r\n        this.m_proxies = b2MakeArray(this.m_shape.GetChildCount(), (i) => new b2FixtureProxy(this));\r\n        this.m_proxyCount = 0;\r\n        this.m_density = def.density;\r\n    }\r\n    Destroy() {\r\n        // The proxies must be destroyed before calling this.\r\n        ///b2Assert(this.m_proxyCount === 0);\r\n        // Free the proxy array.\r\n        // int32 childCount = m_shape->GetChildCount();\r\n        // allocator->Free(m_proxies, childCount * sizeof(b2FixtureProxy));\r\n        // m_proxies = NULL;\r\n        // this.m_shape = null;\r\n    }\r\n    // These support body activation/deactivation.\r\n    CreateProxies(broadPhase, xf) {\r\n        ///b2Assert(this.m_proxyCount === 0);\r\n        // Create proxies in the broad-phase.\r\n        this.m_proxyCount = this.m_shape.GetChildCount();\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i] = new b2FixtureProxy(this);\r\n            this.m_shape.ComputeAABB(proxy.aabb, xf, i);\r\n            proxy.treeNode = broadPhase.CreateProxy(proxy.aabb, proxy);\r\n            // proxy.fixture = this;\r\n            proxy.childIndex = i;\r\n        }\r\n    }\r\n    DestroyProxies(broadPhase) {\r\n        // Destroy proxies in the broad-phase.\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i];\r\n            proxy.treeNode.userData = null;\r\n            broadPhase.DestroyProxy(proxy.treeNode);\r\n            proxy.treeNode = null;\r\n        }\r\n        this.m_proxyCount = 0;\r\n    }\r\n    Synchronize(broadPhase, transform1, transform2) {\r\n        if (this.m_proxyCount === 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i];\r\n            // Compute an AABB that covers the swept shape (may miss some rotation effect).\r\n            const aabb1 = b2Fixture.Synchronize_s_aabb1;\r\n            const aabb2 = b2Fixture.Synchronize_s_aabb2;\r\n            this.m_shape.ComputeAABB(aabb1, transform1, i);\r\n            this.m_shape.ComputeAABB(aabb2, transform2, i);\r\n            proxy.aabb.Combine2(aabb1, aabb2);\r\n            const displacement = b2Vec2.SubVV(transform2.p, transform1.p, b2Fixture.Synchronize_s_displacement);\r\n            broadPhase.MoveProxy(proxy.treeNode, proxy.aabb, displacement);\r\n        }\r\n    }\r\n}\r\nb2Fixture.Synchronize_s_aabb1 = new b2AABB();\r\nb2Fixture.Synchronize_s_aabb2 = new b2AABB();\r\nb2Fixture.Synchronize_s_displacement = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJGaXh0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvRHluYW1pY3MvYjJGaXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxrQkFBa0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUsTUFBTSxFQUFtQyxNQUFNLDBCQUEwQixDQUFDO0FBRW5GLE9BQU8sRUFBd0IsVUFBVSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHL0Usc0NBQXNDO0FBQ3RDLE1BQU07SUFBTjtRQUNFLHFFQUFxRTtRQUM5RCxpQkFBWSxHQUFXLE1BQU0sQ0FBQztRQUVyQyxpRUFBaUU7UUFDakUscUNBQXFDO1FBQzlCLGFBQVEsR0FBVyxNQUFNLENBQUM7UUFFakMsaUZBQWlGO1FBQ2pGLCtFQUErRTtRQUMvRSxnREFBZ0Q7UUFDekMsZUFBVSxHQUFXLENBQUMsQ0FBQztJQWFoQyxDQUFDO0lBWFEsS0FBSztRQUNWLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFlO1FBQ3pCLDRCQUE0QjtRQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELDJFQUEyRTtBQUMzRSwwRUFBMEU7QUFDMUUsTUFBTTtJQUFOO1FBQ0UsaUVBQWlFO1FBQ2pFLHNDQUFzQztRQUMvQixVQUFLLEdBQVksSUFBSSxD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","﻿\r\n//import BigInt from \"big-integer\";//bitwise operation\r\n\r\nimport { SkillAnimation } from \"../game/Skill.js\";\r\nimport { SceneObject } from \"../game/SceneObject.js\";\r\n\r\n\r\nexport class AttackInfo {\r\n\tconstructor() {\r\n\t\t/** @type {AttackPair[]} - { objectid, attack }[each monster] */\r\n\t\tthis.allAttack = [];\r\n\r\n\t\t/** @type {SkillAnimation} */\r\n\t\tthis.skill = null;\r\n\t}\r\n\t///**\r\n\t// * @param {number} objectid\r\n\t// * @returns {AttackPair}\r\n\t// */\r\n\t//addAttack(objectid) {\r\n\t//\tlet attack = new AttackPair();\r\n\t//\tattack.objectid = objectid;\r\n\t//\tthis.allAttack.push(attack);\r\n\t//}\r\n}\r\n\r\nconst symbol_targetObject = Symbol(\"targetObject\");\r\n\r\nexport class AttackPair {\r\n\tconstructor() {\r\n\t\t/** @type {SceneObject} */\r\n\t\tthis[symbol_targetObject] = null;\r\n\r\n\t\t///** @type {number} */\r\n\t\t//this.objectid = null;\r\n\r\n\t\t/** @type {DamagePair[]} - { realDamage, critical }[attackCount] */\r\n\t\tthis.allDamage = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {SceneObject}\r\n\t */\r\n\tgetTargetObject() {\r\n\t\treturn this[symbol_targetObject];\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneObject} targetObject\r\n\t */\r\n\tsetTargetObject(targetObject) {\r\n\t\tthis[symbol_targetObject] = targetObject;\r\n\t}\r\n\r\n\t/**\r\n\t * targetObject # $objectid\r\n\t * @returns {number}\r\n\t */\r\n\tget objectid() {\r\n\t\t/** @type {SceneObject} */\r\n\t\tlet obj = this[symbol_targetObject];\r\n\t\treturn obj.$objectid;\r\n\t}\r\n\t/**\r\n\t * set targetObject by objectid\r\n\t * @param {number} objectid\r\n\t */\r\n\tset objectid(objectid) {\r\n\t\tif (Number.isSafeInteger(objectid)) {\r\n\t\t\t/** @type {SceneObject} */\r\n\t\t\tlet obj = scene_map.lifeMgr.entities[objectid];\r\n\r\n\t\t\tthis.setTargetObject(obj);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//TODO: targetObject is player's character\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} realDamage\r\n\t * @param {boolean} critical\r\n\t * @returns {DamagePair}\r\n\t */\r\n\taddDamage(realDamage, critical) {\r\n\t\tthis.allDamage.push(new DamagePair(realDamage, critical));\r\n\t}\r\n}\r\n\r\nexport class DamagePair {\r\n\t/**\r\n\t * @param {number} realDamage\r\n\t * @param {boolean} critical\r\n\t */\r\n\tconstructor(realDamage, critical) {\r\n\t\t/** @type {number} */\r\n\t\tthis.realDamage = realDamage;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.critical = critical;\r\n\t}\r\n\r\n\t_validating() {\r\n\t\treturn Number.isSafeInteger(this.realDamage);\r\n\t}\r\n\r\n\t/** @param {IRenderer} */\r\n\t_draw(renderer) {\r\n\t\t/** @type {CanvasRenderingContext2D} */\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tif (Number.isSafeInteger(this.realDamage)) {\r\n\t\t\t//draw\r\n\t\t}\r\n\t\telse {// debug, invalid damage\r\n\t\t\tctx.filter = \"gray-scale(1)\";\r\n\t\t\t//draw\r\n\t\t\tctx.filter = \"none\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","﻿\r\nimport { LifeRenderer } from \"./LifeRenderer.js\";\r\n\r\n\r\nwindow.MobAnimationSpeed = 1;\r\n\r\nwindow.$mob_name = {};\r\n\r\n/**\r\n * Mob basic infomation\r\n * Mob antion(animation) collection\r\n */\r\nexport class MobRenderer extends LifeRenderer {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t//[\"info\",\"stand\",\"hit1\",\"die1\",\"skill1\",\"skill2\",\"skill3\",\"skill4\",\"skill5\",\"attack1\",\"attack2\",\"attack3\",\"attack4\",\"attack5\"]\r\n\t}\r\n\r\n\tstatic get __info() {\r\n\t\treturn {\r\n\t\t\t\"noFlip\": 1,\r\n\t\t\t\"level\": 230,\r\n\t\t\t\"maxHP\": \"??????\",\r\n\t\t\t\"maxMP\": 100000,\r\n\t\t\t\"speed\": 0,\r\n\t\t\t\"PADamage\": 22000,\r\n\t\t\t\"PDRate\": 300,\r\n\t\t\t\"MADamage\": 24000,\r\n\t\t\t\"MDRate\": 30,\r\n\t\t\t\"acc\": 9999,\r\n\t\t\t\"eva\": 750,\r\n\t\t\t\"pushed\": 1000000000,\r\n\t\t\t\"fs\": 10,\r\n\t\t\t\"summonType\": 1,\r\n\t\t\t\"category\": 1,\r\n\t\t\t\"elemAttr\": \"P2H2F2I2S2L2D2\",\r\n\t\t\t\"mobType\": \"3N\",\r\n\t\t\t\"firstAttack\": 1,\r\n\t\t\t\"hideHP\": 1,\r\n\t\t\t\"boss\": 1,\r\n\t\t\t\"hpTagColor\": 1,\r\n\t\t\t\"hpTagBgcolor\": 5,\r\n\t\t\t\"showNotRemoteDam\": 1,\r\n\t\t\t\"defaultHP\": \"측정불가\",\r\n\t\t\t\"defaultMP\": \"측정불가\",\r\n\t\t\t\"ignoreMoveImpact\": 1\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t */\r\n\tstatic async loadDescription(id) {\r\n\t\tif (!MobRenderer._desc[id]) {\r\n\t\t\tlet base = MobRenderer._get_desc_base_path();\r\n\t\t\tlet url = [base, Number(id)].join(\"/\");\r\n\t\t\tlet desc = await $get.data(url);\r\n\t\t\tMobRenderer._desc[id] = desc;\r\n\t\t\treturn desc;\r\n\t\t}\r\n\t\treturn MobRenderer._desc[id];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t * @param {!string} id\r\n\t */\r\n\tasync load(id) {\r\n\t\tdebugger\r\n\t\tlet result = await super.load.apply(this, arguments);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tisFlyMob() {\r\n\t\treturn !!this._raw.flySpeed;\r\n\t}\r\n\t//get info() {\r\n\t//\treturn this._raw.info;\r\n\t//}\r\n\t\r\n\t_getFirstAttackName() {\r\n\t\tconst firstAttack = this._raw.info.firstAttack;\r\n\t\treturn \"skill\" + firstAttack;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tstamp *= window.MobAnimationSpeed;\r\n\t\tsuper.update(stamp);\r\n\t}\r\n\t\r\n\tstatic get _animations() {\r\n\t\treturn ['\"stand\"', '\"fly\"', '\"move\"', '\"jump\"', \"`hit${$index}`\", \"`die${$index}`\", \"`skill${$index}`\"/*, \"`attack${$index}`\"*/];\r\n\t}\r\n\t\r\n\tstatic _get_desc_base_path() {\r\n\t\treturn \"/String/Mob\";\r\n\t}\r\n\r\n\tstatic get _base_path() {\r\n\t\treturn \"/Mob\";\r\n\t}\r\n}\r\nMobRenderer._desc = {};\r\n\r\n","﻿\r\nimport { LifeRenderer } from './LifeRenderer.js';\r\n\r\nwindow.NpcAnimationSpeed = 1;\r\n\r\n//Npc: 9090004 => ad-tv\r\n\r\nexport class NpcRenderer extends LifeRenderer {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t */\r\n\tstatic async loadDescription(id) {\r\n\t\tif (!NpcRenderer._desc[id]) {\r\n\t\t\tlet base = NpcRenderer._get_desc_base_path();\r\n\t\t\tlet url = [base, Number(id)].join(\"/\");\r\n\t\t\tlet desc = await $get.data(url);\r\n\t\t\tNpcRenderer._desc[id] = desc;\r\n\t\t\treturn desc;\r\n\t\t}\r\n\t\treturn NpcRenderer._desc[id];\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tstamp *= window.NpcAnimationSpeed;\r\n\t\tsuper.update(stamp);\r\n\t}\r\n\r\n\tstatic get _animations() {\r\n\t\treturn ['\"stand\"'/*, \"`condition${$index}`\"*/];\r\n\t}\r\n\t\r\n\tstatic _get_desc_base_path() {\r\n\t\treturn \"/String/Npc\";\r\n\t}\r\n\r\n\tstatic get _base_path() {\r\n\t\treturn \"/Npc\";\r\n\t}\r\n};\r\nNpcRenderer._desc = {};\r\n","\r\nimport { ColorRGB, ImageDataHelper } from \"../IRenderer.js\";\r\nimport { Vec2, Rectangle } from \"../math.js\";\r\nimport { Sprite } from \"../Sprite.js\";\r\n\r\n\r\n/**\r\n * @param {HTMLImageElement} image\r\n */\r\nfunction whiteToRed(image) {\r\n\tlet helper = new ImageDataHelper();\r\n\tlet imagedata = helper.imageToImagedata(image);\r\n\r\n\tfor (let y = 0; y < imagedata.height; ++y) {\r\n\t\tfor (let x = 0; x < imagedata.width * 4; ++x) {\r\n\t\t\t//imagedata.data[y * imagedata.width * 4 + x * 4 + 0] = 0;\r\n\t\t\timagedata.data[y * imagedata.width * 4 + x * 4 + 1] = 0;\r\n\t\t\timagedata.data[y * imagedata.width * 4 + x * 4 + 2] = 0;\r\n\t\t\t//imagedata.data[y * imagedata.width * 4 + x * 4 + 3] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treturn helper.imagedataToDataURL(imagedata);\r\n}\r\n\r\n/**\r\n * @param {number} min\r\n * @param {number} range\r\n * @returns {number} min + Random(-1, 1) * range\r\n */\r\nfunction rand_r(min, range) {\r\n\treturn min - range + Math.random() * range * 2;\r\n}\r\n\r\n/**\r\n * @param {ColorRGB} color\r\n * @param {ColorRGB} colorVar\r\n * @returns {ColorRGB}\r\n */\r\nfunction rand_color2i(color, colorVar) {\r\n\tconst col = ColorRGB.fromInt24(color);\r\n\tconst cv = ColorRGB.fromInt24(colorVar);\r\n\tconst r = Math.max(0, Math.min(rand_r(col.r, cv.r), 255));\r\n\tconst g = Math.max(0, Math.min(rand_r(col.g, cv.g), 255));\r\n\tconst b = Math.max(0, Math.min(rand_r(col.b, cv.b), 255));\r\n\t\r\n\treturn new ColorRGB(r, g, b);\r\n}\r\nfunction _rand_color2i(color, colorVar) {\r\n\treturn ColorRGB.fromInt24(Math.max(0, Math.min(rand_r(color, colorVar), 255)));\r\n}\r\n\r\nexport class Particle {\r\n\t/** @param {ParticleSystem} ps */\r\n\tconstructor(ps) {\r\n\t\tthis._initParam(ps);\r\n\r\n\t\tthis.life = 0;\r\n\r\n\t\t/** @type {Vec2} */\r\n\t\tthis.pos = new Vec2(0, 0);\r\n\t\t\r\n\t\tthis.opacity = 1;\r\n\t\tthis.scale = this.startScale;\r\n\t\tthis.color = new ColorRGB(255, 255, 255);\r\n\t}\r\n\r\n\t/** @param {ParticleSystem} ps */\r\n\t_initParam(ps) {\r\n\t\tthis.lifeMax = rand_r(ps.life, ps.lifeVar);\r\n\r\n\t\tconst angle = rand_r(ps.angle, ps.angleVar) * Math.PI / 180;//?rand_r\r\n\r\n\t\tif (1) {\r\n\t\t\tthis.startColor = rand_color2i(ps.startColor, ps.startColorVar);\r\n\t\t\tthis.color_d = rand_color2i(ps.endColor, ps.endColorVar).selfSub(this.startColor);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.startColor = _rand_color2i(ps.startColor, ps.startColorVar);\r\n\t\t\tthis.color_d = _rand_color2i(ps.endColor, ps.endColorVar).selfSub(this.startColor);\r\n\t\t}\r\n\r\n\t\t//unit: px\r\n\t\tconst sizeX = Math.max(1, ps.texture.width);\r\n\t\tconst sizeY = Math.max(1, ps.texture.height);\r\n\t\t//const size = Math.sqrt(sizeX ** 2 + sizeY ** 2);\r\n\t\tconst size = sizeX == 1 ? sizeY:(sizeY == 1 ? 1 : Math.min(sizeX, sizeY));\r\n\r\n\t\tthis.startScale = rand_r(ps.startSize, ps.startSizeVar) / size;\r\n\t\tconst endScale = rand_r(ps.endSize, ps.endSizeVar) / size;\r\n\t\tthis.scale_d = endScale - this.startScale;\r\n\r\n\t\tthis.startX = rand_r(ps.posX, ps.posVarX);\r\n\t\tthis.startY = rand_r(ps.posY, ps.posVarY);\r\n\r\n\t\tthis.emitterMode = ps.emitterType ? 1 : 0;\r\n\r\n\t\t// Mode A: Gravity + tangential accel + radial accel\r\n\t\tif (!this.emitterMode) {//Particle.EMITTER_MODE.GRAVITY\r\n\t\t\t// gravity\r\n\t\t\tthis.gravity = new Vec2(ps.GRAVITY.x, ps.GRAVITY.y);\r\n\r\n\t\t\t// speed\r\n\t\t\tconst speed = rand_r(ps.GRAVITY.speed, ps.GRAVITY.speedVar);\r\n\t\t\t\r\n\t\t\t/** @type {Vec2} - velocity */\r\n\t\t\tthis.dir = new Vec2(Math.cos(angle) * speed, -Math.sin(angle) * speed);\r\n\r\n\t\t\t// radial acceleration\r\n\t\t\tthis.radialAccel = rand_r(ps.GRAVITY.radialAccel || 0, ps.GRAVITY.radialAccelVar || 0);\r\n\r\n\t\t\t// tangential acceleration\r\n\t\t\tthis.tangentialAccel = rand_r(ps.GRAVITY.tangentialAccel || 0, ps.GRAVITY.tangentialAccelVar || 0);\r\n\r\n\t\t\t// rotation is dir\r\n\t\t\tthis.rotationIsDir = ps.GRAVITY.rotationIsDir ? true : false;\r\n\t\t}\r\n\t\telse if (this.emitterMode == 1) {\r\n\t\t\talert(\"Particle.EMITTER_MODE.RADIUS\");\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {number} stamp - time in millisecond */\r\n\tupdate(stamp) {\r\n\t\tconst dt = stamp / 1000;\r\n\t\tconst tp = Math.max(0, Math.min(this.life / this.lifeMax, 1));\r\n\r\n\t\t// update position\r\n\t\t{\r\n\t\t\tlet radial;\r\n\r\n\t\t\t// radial acceleration\r\n\t\t\tif (this.pos.x || this.pos.y) {\r\n\t\t\t\tradial = (new Vec2(this.pos.x, this.pos.y)).normalize();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tradial = new Vec2(0, 0);\r\n\t\t\t}\r\n\r\n\t\t\tlet tangential = radial.clone();\r\n\t\t\tradial = radial.mul(this.radialAccel);\r\n\r\n\t\t\t// tangential acceleration\r\n\t\t\tlet newy = tangential.x;\r\n\t\t\ttangential.x = -tangential.y;\r\n\t\t\ttangential.y = newy;\r\n\r\n\t\t\ttangential = tangential.mul(this.tangentialAccel);\r\n\r\n\t\t\tlet _radial = radial.add(tangential);\r\n\t\t\t_radial = _radial.add(this.gravity);\r\n\t\t\t_radial = _radial.mul(dt);\r\n\t\t\t\r\n\t\t\tthis.dir = this.dir.add(_radial);\r\n\r\n\t\t\tlet _dir = this.dir.mul(dt);\r\n\t\t\tthis.pos = this.pos.add(_dir);\r\n\t\t}\r\n\r\n\t\tthis.scale = Math.max(0, this.startScale + this.scale_d * tp);\r\n\t\tthis.color = ColorRGB.add(this.startColor, ColorRGB.scale(this.color_d, tp));\r\n\t\tthis.opacity = 1 - tp;\r\n\t\t\r\n\t\tthis.life += stamp;\r\n\t}\r\n\tisEnd() {\r\n\t\treturn this.life >= this.lifeMax;\r\n\t}\r\n\tdraw(renderer, texture, mx, my) {\r\n\t\tconst scale = this.scale;\r\n\t\tconst x = (this.startX + this.pos.x + mx);\r\n\t\tconst y = (this.startY + this.pos.y + my);\r\n\t\t\r\n\t\trenderer.globalAlpha = this.opacity;\r\n\r\n\t\tlet color = this.color.toHSV();\r\n\t\trenderer.drawColoredGraph2(texture, x, y, scale, scale, color);\r\n\t}\r\n}\r\n\r\nclass _ParticleGroupData {\r\n\tconstructor() {\r\n\t\tthis.GRAVITY = new Vec2();\r\n\t\tthis.life = 0;\r\n\t\tthis.lifeVar = 0;\r\n\t\tthis.duration = 0;\r\n\t\tthis.totalParticle = 0;\r\n\t}\r\n}\r\n\r\nexport class ParticleGroup extends _ParticleGroupData {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\r\n\t\t/** @type {Particle[]} */\r\n\t\tthis.particles = [];\r\n\r\n\t\t/** @type {number} time_in_ms:float */\r\n\t\tthis.time = 0;\r\n\r\n\t\t/** @type {number} timeElapsed_in_ms:float */\r\n\t\tthis.delta = 0;\r\n\t\t\r\n\t\t/** @type {number} */\r\n\t\tthis.delay = Infinity;\r\n\t\t\r\n\t\tthis.duration = -1;//Infinity\r\n\t}\r\n\t\r\n\tclone() {\r\n\t\tlet pg = new ParticleGroup();\r\n\t\tObject.assign(pg, this);\r\n\t\tpg.particles = [];\r\n\t\tpg.time = 0;\r\n\t\tpg.delta = 0;\r\n\t\treturn pg;\r\n\t}\r\n\r\n\tevaluate() {\r\n\t\tlet totalTime = this.totalParticle * this.delay;\r\n\r\n\t\tfor (let i = 0; i < this.totalParticle; ++i) {\r\n\t\t\tconst particle = new Particle(this);\r\n\t\t\tconst t = totalTime - i * this.delay;\r\n\t\t\tparticle.life += t;\r\n\t\t\tparticle.update(t);\r\n\t\t\tparticle.life = t;\r\n\t\t\tthis.particles.push(particle);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync load(particle_name) {\r\n\t\tthis.particleName = particle_name;\r\n\r\n\t\t/** @type ParticleGroupData */\r\n\t\tlet data = await $get.data(this._particle_path);\r\n\t\t\r\n\t\tObject.assign(this, data);\r\n\r\n\t\tthis.GRAVITY.x = data.GRAVITY.x;\r\n\t\tthis.GRAVITY.y = data.GRAVITY.y;\r\n\r\n\t\tthis.life = data.life * 1000;\r\n\t\tthis.lifeVar = data.lifeVar * 1000;\r\n\t\tthis.duration = data.duration * 1000;\r\n\r\n\t\t//this.totalParticle = 2;//debug\r\n\t\tthis.delay = this.life / this.totalParticle;\r\n\r\n\t\tif (_experimental_particle) {\r\n\t\t\tconst that = this;\r\n\t\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\t\tlet image = new Image();\r\n\t\t\t\timage.onload = function () {\r\n\t\t\t\t\tlet texture = new Sprite(data.texture);\r\n\t\t\t\t\tif (_experimental_particle === true) {\r\n\t\t\t\t\t\ttexture._url = whiteToRed(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttexture._url = \"data:image/svg+xml;utf-8,\" + encodeURIComponent(`\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${this.naturalWidth}\" height=\"${this.naturalHeight}\">\r\n\t<defs>\r\n\t\t<mask id=\"Mask\">\r\n\t\t\t<image xlink:href=\"${new URL(\"images\" + that._texture_base_path, window.location).href}\"/>\r\n\t\t</mask>\r\n\t</defs>\r\n\t<g>\r\n\t\t<rect width=\"${this.naturalWidth}\" height=\"${this.naturalHeight}\" fill=\"red\" mask=\"url(#Mask)\"/>\r\n\t</g>\r\n</svg>`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthat.texture = texture;\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t\timage.src = \"images\" + that._texture_base_path;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.texture = new Sprite(data.texture);\r\n\t\t\tthis.texture._url = \"images\" + this._texture_base_path;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @param {number} stamp - time in millisecond */\r\n\tupdate(stamp) {\r\n\t\tif (this.particles.length < this.totalParticle && (!this.time || this.time > this.delay)) {\r\n\t\t\tthis.particles.push(new Particle(this));\r\n\t\t\tthis.time = 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.particles.length; ++i) {\r\n\t\t\tconst particle = this.particles[i];\r\n\t\t\tif (particle.isEnd()) {\r\n\t\t\t\tthis.particles.splice(i, 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparticle.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.time += stamp;\r\n\t\tthis.delta += stamp;\r\n\t}\r\n\t\r\n\tisEnd() {\r\n\t\treturn (this.delta > this.duration && this.duration != -1);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Rectangle} viewRect\r\n\t * @param {number} mx - translate x\r\n\t * @param {number} my - translate y\r\n\t */\r\n\trender(renderer, viewRect, mx, my) {\r\n\t\tconst ctx = renderer.ctx;\r\n\r\n\t\trenderer.ctx.setTransform(1, 0, 0, 1, Math.trunc(-$gv.m_viewRect.x), Math.trunc(-$gv.m_viewRect.y));\r\n\t\tif (this.blendFuncDst != 6 || this.blendFuncSrc != 5) {\r\n\t\t\tctx.globalCompositeOperation = \"lighter\";\r\n\t\t}\r\n\t\t\r\n\t\tfor (let i = 0; i < this.particles.length; ++i) {\r\n\t\t\tconst particle = this.particles[i];\r\n\t\t\tconst x = this.x + mx;\r\n\t\t\tconst y = this.y + my;\r\n\t\t\tconst hw = this.texture.width * particle.scale;\r\n\t\t\tconst hh = this.texture.height * particle.scale;\r\n\t\t\t\r\n\t\t\tif (!viewRect || viewRect.collide4f2(x + particle.startX + particle.pos.x, y + particle.startY + particle.pos.y, hw, hh)) {\r\n\t\t\t\tparticle.draw(renderer, this.texture, x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//reset\r\n\t\tctx.globalCompositeOperation = \"source-over\";\r\n\t\trenderer.globalAlpha = 1;\r\n\t}\r\n\t\r\n\tget _particle_path() {\r\n\t\treturn [\"/Effect/particle\", this.particleName].join(\"/\");\r\n\t}\r\n\tget _texture_base_path() {\r\n\t\treturn [this._particle_path, \"texture\"].join(\"/\");\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","﻿\r\nimport { AddInitTask } from \"../init.js\";\r\n\r\nimport { Vec2, Rectangle } from \"./math.js\";\r\nimport { IGraph, IRenderer } from \"./IRenderer.js\";\r\nimport { engine, Graph } from \"./Engine.js\";\r\n\r\nimport { Sprite } from \"./Sprite.js\";\r\nimport { LifeRenderer } from \"./Renderer/LifeRenderer.js\";\r\nimport { MobRenderer } from \"./Renderer/MobRenderer.js\";\r\nimport { NpcRenderer } from \"./Renderer/NpcRenderer.js\";\r\n\r\nimport { ParticleGroup } from \"./Renderer/ParticleSystem.js\";\r\n\r\nimport { World } from \"./Physics/World.js\";\r\nimport { Ground } from \"./Physics/Ground.js\";\r\nimport { PMob } from \"./Physics/PMob.js\";\r\nimport { SceneObject } from \"./SceneObject.js\";\r\n\r\n\r\nwindow.enable_skeletal_anim = true;\r\n\r\n/**\r\n * map sprite data\r\n */\r\nconst map_sprite = {\r\n\tBack: {},\r\n\tObj: {},\r\n\tTile: {},\r\n};\r\n\r\nwindow.$map_sprite = map_sprite;\r\n\r\n$gv.allQuest = {};\r\n\r\nasync function map_load_package(cat, pack) {\r\n\tif (!cat || !pack) {\r\n\t\tdebugger;\r\n\t}\r\n\tif (!map_sprite[cat][pack]) {\r\n\t\tlet url = `/Map/${cat}/${pack}`;\r\n\t\t\r\n\t\tmap_sprite[cat][pack] = await $get.data(url);\r\n\r\n\t\tif (map_sprite[cat][pack] == null) {\r\n\t\t\tconsole.warn(\"Empty package: \" + url);\r\n\t\t}\r\n\t}\r\n\tif (map_sprite[cat][pack]) {\r\n\t\treturn map_sprite[cat][pack];\r\n\t}\r\n\t//throw new Error();\r\n}\r\n\r\n\r\n/**\r\n * Map texture\r\n */\r\nclass MapTexture extends Sprite {\r\n\t/**\r\n\t * @param {!any} raw\r\n\t * @param {!string} url\r\n\t * @param {!MapTexture} texture0\r\n\t */\r\n\tconstructor(_raw, url, texture0) {\r\n\t\tsuper(_raw, url);\r\n\t\t//this.className = _path;\r\n\r\n\t\ttexture0 = texture0 || MapTexture.raw_default;\r\n\t\t\r\n\t\tthis.a0 = this._get(-1, \"a0\", Number);\r\n\t\tthis.a1 = this._get(-1, \"a1\", Number);\r\n\r\n\t\tthis.movetype = this._get(texture0.movetype, \"moveType\", Number);\r\n\t\tthis.movew = this._get(texture0.movew, \"moveW\", Number);\r\n\t\tthis.moveh = this._get(texture0.moveh, \"moveH\", Number);\r\n\t\tthis.movep = this._get(texture0.movep, \"moveP\", Number);\r\n\t\tthis.mover = this._get(texture0.mover, \"moveR\", Number);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {boolean} f - flip\r\n\t * @param {number} px - position.x:int\r\n\t * @param {number} py - position.y:int\r\n\t * @param {number} time - movement_animation:float\r\n\t * @param {number} delta - graph_animation:float\r\n\t * @param {maple_scene_label} border\r\n\t */\r\n\tdraw(renderer, f, px, py, time, delta) {\r\n\t\tlet ratio = time / this.delay;\r\n\t\tlet alpha = (0 <= this.a0 || 0 <= this.a1 ? ((0 > this.a0 ? 0 : this.a0) * (1.0 - ratio) + (0 > this.a1 ? 0 : this.a1) * ratio) : 255.0);\r\n\t\tlet angle = 0;\r\n\r\n\t\tswitch (this.movetype) {\r\n\t\t\tcase 1: px = px + this.movew * Math.sin(0 == this.movep ? (delta / 1000.0) : (delta * 2.0 * Math.PI / this.movep)); break;\r\n\t\t\tcase 2: py = py + this.moveh * Math.sin(0 == this.movep ? (delta / 1000.0) : (delta * 2.0 * Math.PI / this.movep)); break;\r\n\t\t\tcase 3: if (0 != this.mover) angle = delta / this.mover; break;\r\n\t\t}\r\n\t\t\r\n\t\tlet ctx = renderer.ctx;\r\n\t\tfunction axis(x, y, w, h, c1, c2) {\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(x, y);\r\n\t\t\tctx.lineTo(x + w, y);\r\n\t\t\tstroke(c1, c2);\r\n\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(x, y);\r\n\t\t\tctx.lineTo(x, y + h);\r\n\t\t\tstroke(c2, c1);\r\n\t\t}\r\n\t\tfunction stroke(c1, c2) {\r\n\t\t\tctx.lineWidth = 3;\r\n\t\t\tctx.strokeStyle = c1;\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\r\n\t\trenderer.loadIdentity();\r\n\t\trenderer.translate(Math.trunc(-$gv.m_viewRect.x + 0.5), Math.trunc(-$gv.m_viewRect.y + 0.5));\r\n\t\t{\r\n\t\t\trenderer.globalAlpha = Math.max(0, Math.min(alpha / 255, 1));\r\n\r\n\t\t\trenderer._drawRotaGraph(this, px, py, angle, f);\r\n\t\t}\r\n\t}\r\n}\r\nMapTexture.raw_default = {\r\n\ta0: -1,\r\n\ta1: -1,\r\n\tmovetype: 0,\r\n\tmovew: 0,\r\n\tmoveh: 0,\r\n\tmovep: 0,\r\n\tmover: 0,\r\n};\r\n\r\n/**\r\n * Map clip-texture\r\n */\r\nclass MapTextureClip extends MapTexture {\r\n\tconstructor(_raw, url) {\r\n\t\tsuper(_raw, url);\r\n\r\n\t\t/** @type {Rectangle} */\r\n\t\tthis.clip = new Rectangle();//zero Rectangle\r\n\t}\r\n}\r\n\r\nclass MapObjectBase {\r\n\tconstructor(_raw) {\r\n\t\tif (_raw == null) {\r\n\t\t\tdebugger;\r\n\t\t\tconsole.error(_raw);\r\n\t\t}\r\n\t\tthis._raw = _raw;\r\n\r\n\r\n\t\t/** @type {MapTexture[]} */\r\n\t\tthis.textures = [];\r\n\r\n\t\t/** @type {number} int */\r\n\t\tthis.frame = 0;\r\n\r\n\t\t/** @type {number} time_in_ms:float */\r\n\t\tthis.time = 0;\r\n\r\n\t\t/** @type {number} timeElapsed_in_ms:float */\r\n\t\tthis.delta = 0;\r\n\r\n\r\n\t\t/** @type {{[questId:string]: number}} */\r\n\t\tthis.quest = _raw.quest;\r\n\r\n\t\tfor (let qid in _raw.quest) {\r\n\t\t\tif (!$gv.allQuest[qid]) {\r\n\t\t\t\t$gv.allQuest[qid] = new Set();\r\n\t\t\t}\r\n\t\t\t$gv.allQuest[qid].add(_raw.quest[qid]);\r\n\t\t}\r\n\t\t\r\n\t\tthis._load_object_info();\r\n\t\tthis._load_back_info();\r\n\t\tthis._load_tile_info();\r\n\r\n\t\tthis.aabb = null;\r\n\t\tthis.display_aabb = false;\r\n\t\tthis.aabb_color = null;\r\n\t\t\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tthis.__max_repeat_count = 1;\r\n\t\t}\r\n\t}\r\n\t\r\n\t_load_object_info() {\r\n\t\t/** @type{number} obj-type */\r\n\t\tthis.type = this._get(0, \"sign\", Number);\r\n\r\n\t\t/** @type{number} x */\r\n\t\tthis.x = this._get(0, \"x\", Number);\r\n\r\n\t\t/** @type{number} y */\r\n\t\tthis.y = this._get(0, \"y\", Number);\r\n\r\n\t\t/** @type{number} z */\r\n\t\tthis.z = this._get(0, \"z\", Number);\r\n\r\n\t\t/** @type{number} zM */\r\n\t\tthis.zM = this._get(0, \"zM\", Number);\r\n\r\n\t\t/** @type{number} flip */\r\n\t\tthis.f = this._get(0, \"f\", Number);\r\n\t\t\r\n\t\t/** @type{name} named object */\r\n\t\tthis.name = this._raw.name;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._url = null;//data url //debug\r\n\t}\r\n\t_load_back_info() {\r\n\t\t/** @type {number} move type */\r\n\t\tthis.typeb = this._get(0, \"type\", Number);\r\n\t\tif (this.typeb < 0 || this.typeb > 7) {\r\n\t\t\talert(\"MapBackBase.typeb: \" + this.typeb);\r\n\t\t\tconsole.warn(\"MapBackBase.typeb: \" + this.typeb);\r\n\t\t}\r\n\r\n\t\t/** @type {number} a */\r\n\t\tthis.a = this._get(0, \"a\", Number);\r\n\r\n\t\t/** @type {number} rx */\r\n\t\tthis.rx = this._get(0, \"rx\", Number);\r\n\r\n\t\t/** @type {number} ry */\r\n\t\tthis.ry = this._get(0, \"ry\", Number);\r\n\r\n\t\t/** @type {number} center y */\r\n\t\tthis.cx = this._get(0, \"cx\", Number);\r\n\r\n\t\t/** @type {number} center y */\r\n\t\tthis.cy = this._get(0, \"cy\", Number);\r\n\t\t\r\n\t\t/** @type {string} */\r\n\t\tthis.backTags = this._raw.backTags;\r\n\t}\r\n\t_load_tile_info() {\r\n\t\t/** @type{number} flow */\r\n\t\tthis.flow = this._get(0, \"flow\", Number);\r\n\t\t\r\n\t\tif (this.flow & 1 && !this.cx) {\r\n\t\t\tthis.cx = 1000;\r\n\t\t}\r\n\t\tif (this.flow & 2 && !this.cy) {\r\n\t\t\tthis.cy = 1000;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @returns {Promise}\r\n\t */\r\n\tload() {\r\n\t\tlet texture0 = this._load_texture(0, null);\r\n\t\tthis.textures[0] = texture0;\r\n\r\n\t\tfor (let i = 1; i in this._texture_raw; ++i) {//not array\r\n\t\t\tthis.textures[i] = this._load_texture(i, texture0);\r\n\t\t}\r\n\t\tthis.__calc_aabb();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @virtual\r\n\t * @param {number} i - texture index\r\n\t * @param {MapTexture} texture0\r\n\t */\r\n\t_load_texture() {\r\n\t\t//nothing\r\n\t}\r\n\t\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\tunload() {\r\n\t\tthis.textures = [];\r\n\t}\r\n\t\r\n\t__calc_aabb() {\r\n\t\tif (this.textures.length >= 1) {\r\n\t\t\tlet mover = 0;\r\n\t\t\tfor (let i = 0; i < this.textures.length; ++i) {\r\n\t\t\t\tlet texture = this.textures[i];\r\n\t\t\t\tmover = mover | texture.mover;\r\n\t\t\t}\r\n\t\t\tconst aabb = this.compute_max_rectangle();\r\n\t\t\tif (mover) {\r\n\t\t\t\tconst r = Math.round(Math.sqrt(aabb.width ** 2 + aabb.height ** 2));\r\n\t\t\t\tconst hr = Math.round(r * 0.5);\r\n\t\t\t\tthis.aabb = new Rectangle(this.x - hr, this.y - hr, r, r);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.aabb = aabb;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {T} defaultValue\r\n\t * @param {string} propertyName\r\n\t * @param {function(any):T} constructor\r\n\t * @returns {T}\r\n\t * @template T\r\n\t */\r\n\t_get(defaultValue, propertyName, converter) {\r\n\t\tif (propertyName in this._raw) {\r\n\t\t\tif (converter) {\r\n\t\t\t\treturn converter(this._raw[propertyName]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._raw[propertyName];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t}\r\n\r\n\tupdate(stamp) {\r\n\t\tconst fc = this.textures.length;\r\n\r\n\t\tif (fc > 1) {\r\n\t\t\tthis.time = this.time + stamp;\r\n\r\n\t\t\tif (this.time > this.textures[this.frame].delay) {\r\n\t\t\t\tthis.frame = ++this.frame;\r\n\r\n\t\t\t\tthis.time = 0;\r\n\r\n\t\t\t\tif (this.frame >= fc) {\r\n\t\t\t\t\tthis.frame = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//this.frame = Math.trunc(this.time / 1000) % fc;\r\n\t\t}\r\n\r\n\t\tthis.delta += stamp;\r\n\r\n\t\tif ($gv.m_editor_mode && this.aabb) {\r\n\t\t\tthis.$editor_mouse();\r\n\t\t}\r\n\t}\r\n\t_update_and_preload(stamp) {\r\n\t\tconst fc = this.textures.length;\r\n\t\t\r\n\t\tif (fc > 1) {\r\n\t\t\tconst texture = this.textures[this.frame];\r\n\r\n\t\t\tthis.time = this.time + stamp;\r\n\t\t\t\r\n\t\t\tif (!texture.isLoaded()) {\r\n\t\t\t\ttexture.__loadTexture();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.time > texture.delay) {\r\n\t\t\t\tthis.frame = ++this.frame;\r\n\r\n\t\t\t\tthis.time = 0;\r\n\r\n\t\t\t\tif (this.frame >= fc) {\r\n\t\t\t\t\tthis.frame = 0;\r\n\r\n\t\t\t\t\tdelete this.update;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst next_texture = this.textures[this.frame + 1];\r\n\t\t\tif (next_texture && !next_texture.isLoaded()) {\r\n\t\t\t\tnext_texture.__loadTexture();\r\n\t\t\t}\r\n\r\n\t\t\t//this.frame = Math.trunc(this.time / 1000) % fc;\r\n\t\t}\r\n\t\t\r\n\t\tthis.delta += stamp;\r\n\t\t\r\n\t\tif ($gv.m_editor_mode && this.aabb) {\r\n\t\t\tthis.$editor_mouse();\r\n\t\t}\r\n\t}\r\n\t$editor_mouse() {\r\n\t\tconst vrect = $gv.m_viewRect;\r\n\t\tconst mcx = $gv.m_viewRect.left + $gv.mouse_x;\r\n\t\tconst mcy = $gv.m_viewRect.top + $gv.mouse_y;\r\n\t\tif (this.typeb == 0 && this.aabb.collide4f2(mcx, mcy, 1, 1))\r\n\t\t{\r\n\t\t\tthis.display_aabb = true;\r\n\t\t\tif ($gv.mouse_dl == 1 && (window.m_selected_object != this || window.m_selected_object == null)) {\r\n\t\t\t\tthis.$select();\r\n\t\t\t}\r\n\t\t\telse if (window.m_hover_object == null) {\r\n\t\t\t\twindow.m_hover_object = this;\r\n\t\t\t\tthis.aabb_color = \"rgba(0,255,0,0.25)\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.aabb_color = \"rgba(0,0,255,0.25)\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.$unselect();\r\n\t\t}\r\n\t\tif (window.m_selected_object == this) {\r\n\t\t\tthis.display_aabb = true;\r\n\t\t\tthis.aabb_color = \"rgba(255,0,0,0.5)\";\r\n\t\t}\r\n\t}\r\n\t$select() {\r\n\t\tif (window.m_selected_object) {\r\n\t\t\twindow.m_selected_object.$unselect();//prev\r\n\t\t}\r\n\t\twindow.m_selected_object = this;\r\n\t\twindow.m_hover_object = null;\r\n\t\t$gv.mouse_dl = 0;\r\n\t}\r\n\t$unselect() {\r\n\t\tthis.display_aabb = false;\r\n\t}\r\n\t$isRepeatX() {\r\n\t\treturn this.typeb == 1 || this.typeb == 4;\r\n\t}\r\n\t$isRepeatY() {\r\n\t\treturn this.typeb == 2 || this.typeb == 5;\r\n\t}\r\n\t\r\n\tcompute_rectangle(index) {\r\n\t\tconst texture = this.textures[index];\r\n\t\tif (texture) {\r\n\t\t\tconst width = texture.width;\r\n\t\t\tconst height = texture.height;\r\n\r\n\t\t\treturn new Rectangle(this.x - (this.f ? -texture.x + width : texture.x), this.y - texture.y, width, height);\r\n\t\t}\r\n\t}\r\n\tcompute_max_rectangle() {\r\n\t\tif (this.textures.length > 0) {\r\n\t\t\tlet { left, top, right, bottom } = this.compute_rectangle(0);\r\n\t\t\t\t\r\n\t\t\tfor (let j = 1; j < this.textures.length; ++j) {\r\n\t\t\t\tlet rect = this.compute_rectangle(j);\r\n\t\t\t\t\r\n\t\t\t\tleft = Math.min(left, rect.left);\r\n\t\t\t\ttop = Math.min(top, rect.top);\r\n\t\t\t\tright = Math.max(right, rect.right);\r\n\t\t\t\tbottom = Math.max(bottom, rect.bottom);\r\n\t\t\t}\r\n\t\t\treturn Rectangle.parse(left, top, right, bottom);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @param {IRenderer} renderer\r\n\t * @param {number} index_of_texture\r\n\t * @param {number} mx - move x\r\n\t * @param {number} my - move x\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\t__draw_texture(renderer, index_of_texture, mx, my, viewRect) {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif ((--this.__max_repeat_count) <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (this.typeb != 0 || (!this.aabb || this.aabb.collide(viewRect))) {\r\n\t\t\tlet texture = this.textures[index_of_texture];\r\n\r\n\t\t\tif (index_of_texture && !texture.isLoaded()) {\r\n\t\t\t\t// find loaded texture\r\n\t\t\t\tfor (let i = index_of_texture - 1; i >= 0; --i) {\r\n\t\t\t\t\ttexture = this.textures[index_of_texture];\r\n\t\t\t\t\tif (texture.isLoaded()) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttexture.draw(renderer, this.f, this.x + mx, this.y + my, this.time, this.delta);//MapleSceneTexture#draw\r\n\t\t}\r\n\t\t\r\n\t\tif ($gv.m_display_selected_object && $gv.m_editor_mode && this.aabb && this.display_aabb) {\r\n\t\t\tconst ctx = renderer.ctx;\r\n\t\t\tconst x = Math.trunc((-viewRect.left + 0.5) + this.aabb.left);\r\n\t\t\tconst y = Math.trunc((-viewRect.top + 0.5) + this.aabb.top);\r\n\t\t\t\r\n\t\t\trenderer.loadIdentity();\r\n\r\n\t\t\trenderer.globalAlpha = 1;\r\n\t\t\t\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.rect(x, y, this.aabb.width, this.aabb.height);\r\n\t\t\tctx.fillStyle = this.aabb_color || \"rgba(20,255,20,0.5)\";//\r\n\t\t\tctx.fill();\r\n\t\t\t\r\n\t\t\tctx.lineWidth = 3;\r\n\t\t\t//ctx.lineCap = \"round\";\r\n\r\n\t\t\tctx.setLineDash([3, 3]);\r\n\t\t\tctx.lineDashOffset = 0;\r\n\t\t\tctx.strokeStyle = \"rgba(0,0,0,0.5)\";\r\n\t\t\tctx.stroke();\r\n\r\n\t\t\tctx.setLineDash([3, 3]);\r\n\t\t\tctx.lineDashOffset = 3;\r\n\t\t\tctx.strokeStyle = \"rgba(255,255,255,0.5)\";\r\n\t\t\tctx.stroke();\r\n\r\n\t\t\tctx.setLineDash([]);\r\n\t\t\tctx.lineWidth = 1;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @protected\r\n\t * @param {IRenderer} renderer\r\n\t * @param {int} mx\r\n\t * @param {int} my\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\t__draw(renderer, mx, my, viewRect) {\r\n\t\tthis.__draw_texture(renderer, this.frame, mx, my, viewRect);//MapleSceneTexture#draw\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {boolean} horizontal\r\n\t * @param {boolean} vertical\r\n\t * @param {number} mx - int\r\n\t * @param {number} my - int\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\t_draw(renderer, horizontal, vertical, mx, my, viewRect) {\r\n\t\tlet texture = this.textures[this.frame];\r\n\t\tif (texture == null) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// viewRect - canvas rectangle\r\n\t\tlet { left, top, right, bottom } = viewRect;\r\n\t\t// image position\r\n\t\tlet ix = this.x - (this.f ? -texture.x + texture.width : texture.x);\r\n\t\tlet iy = this.y - texture.y;\r\n\t\t// tile size\r\n\t\tlet tw = 0 == this.cx ? texture.width : this.cx;\r\n\t\tlet th = 0 == this.cy ? texture.height : this.cy;\r\n\t\t// tile area\r\n\t\tlet x1 = left - (tw + (left - mx - ix) % tw);\r\n\t\tlet y1 = top - (th + (top - my - iy) % th);\r\n\t\tlet x2 = right + (tw - (right - mx - ix) % tw);\r\n\t\tlet y2 = bottom + (th - (bottom - my - iy) % th);\r\n\t\t\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tthis.__max_repeat_count = 1024;\r\n\t\t}\r\n\r\n\t\tif (horizontal)\r\n\t\t\tif (vertical)\r\n\t\t\t\tfor (let yy = y1; yy < y2; yy = yy + th)\r\n\t\t\t\t\tfor (let xx = x1; xx < x2; xx = xx + tw)\r\n\t\t\t\t\t\tthis.__draw(renderer, xx - ix, yy - iy, viewRect);\r\n\t\t\telse\r\n\t\t\t\tfor (let xx = x1; xx < x2; xx = xx + tw)\r\n\t\t\t\t\tthis.__draw(renderer, xx - ix, my, viewRect);\r\n\t\telse if (vertical)\r\n\t\t\tfor (let yy = y1; yy < y2; yy = yy + th)\r\n\t\t\t\tthis.__draw(renderer, mx, yy - iy, viewRect);\r\n\t\telse\r\n\t\t\tthis.__draw(renderer, mx, my, viewRect);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tif (!this.textures.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet mrx = (this.rx + 100) * center.x / 100;\r\n\t\tlet mry = (this.ry + 100) * center.y / 100;\r\n\r\n\t\tswitch (this.typeb) {\r\n\t\t\tcase 0: this._draw(renderer, false, false, mrx, mry, viewRect); break;\r\n\t\t\tcase 1: this._draw(renderer, true, false, mrx, mry, viewRect); break;\r\n\t\t\tcase 2: this._draw(renderer, false, true, mrx, mry, viewRect); break;\r\n\t\t\tcase 3: this._draw(renderer, true, true, mrx, mry, viewRect); break;\r\n\t\t\tcase 4: this._draw(renderer, true, false, Math.trunc(this.delta / 200 * this.rx), mry, viewRect); break;\r\n\t\t\tcase 5: this._draw(renderer, false, true, mrx, Math.trunc(this.delta / 200 * this.ry), viewRect); break;\r\n\t\t\tcase 6: this._draw(renderer, true, true, Math.trunc(this.delta / 200 * this.rx), mry, viewRect); break;\r\n\t\t\tcase 7: this._draw(renderer, true, true, mrx, Math.trunc(this.delta / 200 * this.ry), viewRect); break;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\tget _texture_base_path() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n}\r\n\r\nclass MapObject extends MapObjectBase {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t\t\r\n\t\tif (this._raw.cx != null && (!this._raw.ry || this._raw.ry == -100)) {\r\n\t\t\tif (this._raw.rx) {//!= null && != 0\r\n\t\t\t\tif (this._raw.cy != null) {\r\n\t\t\t\t\tthis.typeb = 6;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.typeb = 4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.typeb = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this._raw.cy != null && (!this._raw.rx || this._raw.rx == -100)) {\r\n\t\t\tif (this._raw.ry) {//!= null && != 0\r\n\t\t\t\tif (this._raw.cx != null) {\r\n\t\t\t\t\tthis.typeb = 7;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.typeb = 5;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.typeb = 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.update = this._update_and_preload;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} i - texture index\r\n\t * @param {MapTexture} texture0\r\n\t * @returns {MapTexture}\r\n\t */\r\n\t_load_texture(i, texture0) {\r\n\t\tconst null_url = undefined;\r\n\t\tlet path = [\"/Map\", \"Obj\", this._texture_base_path, i].join(\"/\");\r\n\r\n\t\tlet texture = new MapTexture(this._texture_raw[i], null_url, texture0);\r\n\t\ttexture._url = path;\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tget _texture_base_path() {\r\n\t\treturn [this._raw.oS, this._raw.l0, this._raw.l1, this._raw.l2].join(\"/\");\r\n\t}\r\n\r\n\t/**\r\n\t * raw data\r\n\t * textures; info & data\r\n\t */\r\n\tget _texture_raw() {\r\n\t\ttry {\r\n\t\t\treturn map_sprite.Obj[this._raw.oS][this._raw.l0][this._raw.l1][this._raw.l2];\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nclass MapParticle extends MapObject {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t\t/** @type {ParticleGroup[]} */\r\n\t\tthis.groups = [];\r\n\t}\r\n\t\r\n\tasync load(particle_name) {\r\n\t\tlet pg = new ParticleGroup();\r\n\t\t\r\n\t\tawait pg.load(particle_name);\r\n\r\n\t\tlet keys = Object.keys(this._raw)\r\n\t\t\t.map(i => {\r\n\t\t\t\tlet n = parseInt(i, 10);\r\n\t\t\t\tif (Number.isSafeInteger(n)) {\r\n\t\t\t\t\treturn n;\r\n\t\t\t\t}\r\n\t\t\t\tconsole.warn(\"MapParticle.\" + particle_name + \".id: \" + i);\r\n\t\t\t\treturn null;\r\n\t\t\t})\r\n\t\t\t.filter(i => i != null);\r\n\t\t\t\r\n\t\tfor (let i of keys) {\r\n\t\t\tthis.groups[i] = pg.clone();\r\n\t\t\tthis.groups[i].x = this._raw[i].x;\r\n\t\t\tthis.groups[i].y = this._raw[i].y;\r\n\t\t\tthis.groups[i].evaluate();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @param {number} stamp - time in millisecond */\r\n\tupdate(stamp) {\r\n\t\tfor (let i = 0; i < this.groups.length; ++i) {\r\n\t\t\tconst pg = this.groups[i];\r\n\t\t\tpg.update(stamp);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tfor (let i = 0; i < this.groups.length; ++i) {\r\n\t\t\tconst pg = this.groups[i];\r\n\t\t\tlet mx = (this.rx + 100) * center.x / 100;\r\n\t\t\tlet my = (this.ry + 100) * center.y / 100;\r\n\t\t\tpg.render(renderer, viewRect, mx, my);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{particle:{[name:string]:{}}}} mapRawData\r\n\t * @param {SceneMap} sceneMap\r\n\t */\r\n\tstatic construct(mapRawData, sceneMap) {\r\n\t\tlet tasks = [];\r\n\t\tlet particleList = [];\r\n\t\tfor (let particleName in mapRawData.particle) {\r\n\t\t\tlet particleRaw = mapRawData.particle[particleName];\r\n\t\t\tlet mpp = new MapParticle(particleRaw);\r\n\t\t\ttasks.push(mpp.load(particleName));\r\n\t\t\tparticleList.push(mpp);\r\n\t\t}\r\n\t\tsceneMap.particleList = particleList;\r\n\t\treturn tasks;\r\n\t}\r\n}\r\n\r\nclass MapObjectSkeletalAnim extends MapObject {\r\n\tconstructor(_raw, url) {\r\n\t\tsuper(_raw);\r\n\t\t/** @type {SSAnim} */\r\n\t\tthis.ssanim = null;\r\n\t\t/** @type {string} */\r\n\t\tthis._fname = null;\r\n\t\t\r\n\t\t///** @type{number} tags */\r\n\t\t//this._tags = this._get(0, \"tags\", String);\r\n\t}\r\n\t/** @type {string} */\r\n\tget _folder() {\r\n\t\tconst raw = this._raw;\r\n\t\t//[\"Obj\"\t ][obj.oS][obj.l0][obj.l1][obj.l2][0    ][\"\"]\r\n\t\treturn `/Map/Obj/${raw.oS}/${raw.l0}/${raw.l1}/${raw.l2}`;\r\n\t}\r\n\tasync load() {\r\n\t\tif (SSAnim) {\r\n\t\t\tconst raw = this._raw;\r\n\t\t\tlet ssanim;\r\n\t\t\t\r\n\t\t\tssanim = new SSAnim();\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tawait ssanim.load(this._folder);\r\n\t\t\t\tssanim.update(0);//init pos data\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (raw.spineRandomStart) {\r\n\t\t\t\tlet t = ssanim.anim_length * Math.random();\r\n\t\t\t\tssanim.setAnimTime(t);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst r = Math.round(Math.sqrt(ssanim.width ** 2 + ssanim.height ** 2));\r\n\t\t\tconst hr = Math.round(r * 0.5);\r\n\t\t\tthis.aabb = new Rectangle(this.x - hr, this.y - hr, r, r);\r\n\t\t\t\r\n\t\t\tthis.ssanim = ssanim;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\tunload() {\r\n\t\tif (this.ssanim) {\r\n\t\t\tthis.ssanim.unload();\r\n\t\t\tthis.ssanim = null;\r\n\t\t}\r\n\t}\r\n\tupdate(stamp) {\r\n\t\tthis.delta += stamp;\r\n\t\t\r\n\t\tif (this.ssanim && window.enable_skeletal_anim) {\r\n\t\t\tthis.ssanim.update(stamp);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect - ?? no use\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tif ($gv.m_display_skeletal_anim) {\r\n\t\t\tconst x = Math.trunc((-$gv.m_viewRect.x + 0.5) + this.x);\r\n\t\t\tconst y = Math.trunc((-$gv.m_viewRect.y + 0.5) + this.y);\r\n\r\n\t\t\trenderer.ctx.setTransform(1, 0, 0, -1, x, y);\r\n\r\n\t\t\tif (this.ssanim) {\r\n\t\t\t\tthis.ssanim.render();\r\n\t\t\t}\r\n\t\t\tif (this.display_aabb) {\r\n\t\t\t\tconst ctx = renderer.ctx;\r\n\r\n\t\t\t\trenderer.ctx.setTransform(1, 0, 0, 1, Math.trunc(-$gv.m_viewRect.x + 0.5), Math.trunc(-$gv.m_viewRect.y + 0.5));\r\n\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.rect(this.x - this.ssanim.width * 0.5, this.y - this.ssanim.height, this.ssanim.width, this.ssanim.height);\r\n\t\t\t\tctx.fillStyle = \"rgba(20,255,20,0.5)\";\r\n\t\t\t\tctx.fill();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass MapTile extends MapObject {\r\n\tconstructor(_raw, info) {\r\n\t\tsuper(_raw);\r\n\t\tthis._info = info;\r\n\t\tthis.update = this._update_and_preload;\r\n\t}\r\n\tload() {\r\n\t\tlet texture = new MapTexture(this._texture_raw);\r\n\r\n\t\tthis.textures[0] = texture;\r\n\t\tthis.textures[0]._url = [\"/Map\", \"Tile\", this._info.tS, this._raw.u, this._raw.no].join(\"/\");\r\n\r\n\t\tthis.__calc_aabb();\r\n\t}\r\n\r\n\t/**\r\n\t * raw data\r\n\t * textures; info & data\r\n\t */\r\n\tget _texture_raw() {\r\n\t\ttry{\r\n\t\t\treturn map_sprite.Tile[this._info.tS][this._raw.u][this._raw.no];\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tget _texture_base_path() {\r\n\t\treturn [this._info.tS, this._raw.u, this._raw.no].join(\"/\");\r\n\t}\r\n}\r\n\r\n/**\r\n * MapEditor: Map Portal\r\n * Map graph (struct): \"Map/Map/Graph/\"\r\n */\r\nclass MapPortal extends MapObject {\r\n\tconstructor(_raw, mapRenderer) {\r\n\t\tsuper(_raw);//load x, y\r\n\t\t\r\n\t\tthis.mapRenderer = mapRenderer;\r\n\t\t\r\n\t\t/** @type {number} - to mapId */\r\n\t\tthis.tm = null;\r\n\t\t\r\n\t\t/** @type {string} - tn to pn */\r\n\t\tthis.tn = null;\r\n\r\n\t\t/** @type {string} - pn to tn */\r\n\t\tthis.pn = null;\r\n\t\t\r\n\t\t/** @type {string} */\r\n\t\tthis.script = null;\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis.enable = null;\r\n\t\t\r\n\t\t/** @type {\"portalStart\"|\"portalContinue\"|\"portalExit\"} */\r\n\t\tthis.state = null;\r\n\r\n\t\t/** @type {[\"portalStart\",\"portalContinue\",\"portalExit\"]} */\r\n\t\tthis.states = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.skin = null;\r\n\r\n\t\tthis.update = this._update_and_preload;\r\n\t}\r\n\t\r\n\t//sync\r\n\tload() {\r\n\t\tthis.tm = this._get(\"\", \"tm\", String).padStart(9, \"0\");//??\r\n\t\tthis.tn = this._get(\"\", \"tn\", String);//??\r\n\t\tthis.pn = this._get(\"\", \"pn\", String);//pt_go01 => goto portal_01\r\n\t\tthis.script = this._get(null, \"script\", String);\r\n\t\t\r\n\t\tthis.enable = this.tm != \"\" && this.tm != \"999999999\";\r\n\r\n\t\tthis._loadTexture();\r\n\t}\r\n\tunload() {\r\n\t\tif (this.body) {\r\n\t\t\tthis.body.GetWorld().DestroyBody(this.body);\r\n\t\t\tthis.body = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetMap() {\r\n\t\tif (this.enable) {\r\n\t\t\treturn this.tm;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tif (this.enable) {\r\n\t\t\tsuper.draw(renderer, center, viewRect);\r\n\t\t}\r\n\t\telse if (this.__display_mode) {\r\n\t\t\tsuper.draw(renderer, center, viewRect);\r\n\t\t}\r\n\t}\r\n\r\n\t_loadTexture() {\r\n\t\t///** @type {number} */\r\n\t\t//let type = this._raw.pt;\r\n\t\t//\r\n\t\t//let skins = this._loaded_portals[this.__display_mode][type];\r\n\t\t//\r\n\t\t//this.textures = skins.default || skins[0];\r\n\r\n\t\t//MapObject::type\r\n\t\tif (this.__display_mode == \"game\") {\r\n\t\t\tthis.type = \"p\";//??\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.type = \"q\";//??\r\n\t\t}\r\n\r\n\t\tconst _raw = MapPortal._portals_raw;\r\n\r\n\t\tthis.textures.length = 0;//clear\r\n\r\n\t\tconst type = MapPortal._type_map[this._raw.pt];\r\n\t\t\r\n\t\tif (this.__display_mode == \"editor\") {\r\n\t\t\tlet texture = new MapTexture(_raw.editor[type]);\r\n\t\t\ttexture._url = [this._texture_base_path, this.__display_mode, type].join(\"/\");\r\n\t\t\tthis.textures[0] = texture;\r\n\t\t}\r\n\t\telse if (_raw.game[type]) {\r\n\t\t\tlet skin = this.skin != null ? this.skin : \"default\";\r\n\t\t\tif (\"0\" in _raw.game[type][skin]) {//is animation frames\r\n\t\t\t\tlet textures = _raw.game[type][skin];\r\n\t\t\t\tfor (let i in textures) {\r\n\t\t\t\t\tlet texture = new MapTexture(textures[i]);\r\n\t\t\t\t\ttexture._url = [this._texture_base_path, this.__display_mode, type, skin, i].join(\"/\");\r\n\t\t\t\t\tthis.textures.push(texture);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//TODO: need default state\r\n\t\t\t\tthis.states = Object.keys(_raw.game[type][skin]);\r\n\t\t\t\tthis.state = this.states[1 % this.states.length];\r\n\r\n\t\t\t\tlet textures = _raw.game[type][skin][this.state];\r\n\t\t\t\tfor (let i in textures) {\r\n\t\t\t\t\tlet texture = new MapTexture(textures[i]);\r\n\t\t\t\t\ttexture._url = [this._texture_base_path, this.__display_mode, type, skin, this.state, i].join(\"/\");\r\n\t\t\t\t\tthis.textures.push(texture);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//reset\r\n\t\tthis.delta = 0;\r\n\t\tthis.time = 0;\r\n\t\tthis.frame = 0;\r\n\t}\r\n\r\n\tget _texture_base_path() {\r\n\t\treturn \"/Map/MapHelper/portal\";\r\n\t}\r\n\tget _getTexturePath() {\r\n\t\tif (this.__display_mode == \"editor\") {\r\n\t\t\treturn [\"/Map/MapHelper/portal\", this.__display_mode].join(\"/\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn [\"/Map/MapHelper/portal\", this.__display_mode].join(\"/\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @returns {\"editor\"|\"game\"}\r\n\t */\r\n\tget __display_mode() {\r\n\t\treturn $gv.m_editor_mode ? \"editor\" : \"game\";\r\n\t}\r\n\r\n\t///**\r\n\t// * @type {{editor:{[pt:number]:{[skin:number]:MapTexture}},game:{[pt:number]:{[skin:number]:MapTexture[],default:MapTexture[]}}}}\r\n\t// */\r\n\t//get _loaded_portals() {\r\n\t//\treturn MapPortal._portals;\r\n\t//}\r\n\t\r\n\tstatic async Init() {\r\n\t\tMapPortal._portals_raw = await $get.data(\"/Map/MapHelper/portal\");\r\n\r\n\t\tMapPortal._type_map = Object.keys(MapPortal._portals_raw.editor);\r\n\t}\r\n}\r\nMapPortal._portals_raw = {};\r\nMapPortal._type_map = {};\r\n//MapPortal._portals = {};\r\nMapPortal._script = {};\r\n\r\nclass MapPortalManager {\r\n\tconstructor() {\r\n\t\t/** @type {MapPortal[]} */\r\n\t\tthis.portals = null;\r\n\r\n\t\tthis.__display_mode = this.__display_mode;\r\n\t}\r\n\t\r\n\tasync load(map_raw_data, mapRenderer) {\r\n\t\tlet portals = [];\r\n\t\tfor (let i = 0; i in map_raw_data.portal; ++i) {\r\n\t\t\tlet raw = map_raw_data.portal[i];\r\n\t\t\tlet pt = new MapPortal(raw, mapRenderer);\r\n\t\t\t\r\n\t\t\tpt.load();//sync\r\n\t\t\t\r\n\t\t\t//if (pt.enable) {\r\n\t\t\t\tmapRenderer.controller.createPortal(pt);//inject body\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\tportals.push(pt);\r\n\t\t}\r\n\t\tthis.portals = portals;\r\n\t}\r\n\tunload() {\r\n\t\tfor (let i = 0; i < this.portals.length; ++i) {\r\n\t\t\tlet ptl = this.portals[i];\r\n\t\t\tptl.unload();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.__display_mode != $gv.m_editor_mode) {\r\n\t\t\tthis.__display_mode = $gv.m_editor_mode;\r\n\r\n\t\t\tfor (let i = 0; i < this.portals.length; ++i) {\r\n\t\t\t\tlet portal = this.portals[i];\r\n\t\t\t\tportal._loadTexture();\r\n\t\t\t\tportal.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (let i = 0; i < this.portals.length; ++i) {\r\n\t\t\t\tlet portal = this.portals[i];\r\n\t\t\t\tportal.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tfor (let i = 0; i < this.portals.length; ++i) {\r\n\t\t\tlet portal = this.portals[i];\r\n\t\t\tportal.draw(renderer, center, viewRect);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//          [category][source]\r\n//\r\n//static back\r\n//imgBack = [category][source][class ][number][\"\"]\r\n//imgBack = [\"Back\"  ][obj.bS][\"bacK\"][obj.no][\"\"]\r\n//\r\n//animation back\r\n//imgBack = [category][source][class ][number][frame][\"\"]\r\n//imgBack = [\"Back\"  ][obj.bS][\"ani\" ][obj.no][0    ][\"\"]\r\n//\r\n//object\r\n//imgObj  = [category][source][path_0][path_1][path_2][frame][\"\"]\r\n//imgObj  = [\"Obj\"\t ][obj.oS][obj.l0][obj.l1][obj.l2][0    ][\"\"]\r\n\r\nclass MapBackBase extends MapObjectBase {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t}\r\n}\r\n\r\n/**\r\n * @implements {IAsyncLoading}\r\n */\r\nclass MapBack extends MapBackBase {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t\tthis.update = this._update_and_preload;\r\n\t}\r\n\r\n\tload() {\r\n\t\tlet path = [\"/Map\", \"Back\", this._texture_base_path].join(\"/\");\r\n\r\n\t\tif (this._raw.bS) {\r\n\t\t\tconst raw = this._texture_raw;\r\n\t\t\tif (raw) {\r\n\t\t\t\tthis.textures[0] = new MapTexture(this._texture_raw);\r\n\t\t\t\tthis.textures[0]._url = path;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn(\"MapBack path ?: \" + path);\r\n\t\t}\r\n\t}\r\n\t\r\n\tget _texture_base_path() {\r\n\t\treturn [this._raw.bS, \"back\", this._raw.no].join(\"/\");\r\n\t}\r\n\r\n\t/**\r\n\t * raw data\r\n\t * texture; info & data\r\n\t */\r\n\tget _texture_raw() {\r\n\t\tif (this._raw.bS && this._raw.no) {\r\n\t\t\treturn map_sprite.Back[this._raw.bS][\"back\"][this._raw.no];\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * @implements {IAsyncLoading}\r\n */\r\nclass MapBackAnimation extends MapBackBase {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t\tthis.update = this._update_and_preload;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} i - texture index\r\n\t * @param {MapTexture} texture0\r\n\t * @returns {MapTexture}\r\n\t */\r\n\t_load_texture(i, texture0) {\r\n\t\tlet path = [\"/Map\", \"Back\", this._texture_base_path, i].join(\"/\");\r\n\r\n\t\tlet texture = new MapTexture(this._texture_raw[i]);\r\n\t\ttexture._url = path;\r\n\r\n\t\treturn texture;\r\n\t}\r\n\t\r\n\tget _texture_base_path() {\r\n\t\treturn [this._raw.bS, \"ani\", this._raw.no].join(\"/\");\r\n\t}\r\n\r\n\t/**\r\n\t * raw data\r\n\t * texture set; info & data\r\n\t * not array\r\n\t */\r\n\tget _texture_raw() {\r\n\t\ttry {\r\n\t\t\treturn map_sprite.Back[this._raw.bS][\"ani\"][this._raw.no];\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nclass MapBackSkeletalAnim extends MapBackBase {\r\n\tconstructor(_raw) {\r\n\t\tsuper(_raw);\r\n\t\t/** @type {SSAnim} */\r\n\t\tthis.ssanim = null;\r\n\t}\r\n\t/** @type {string} */\r\n\tget _folder() {\r\n\t\tconst ob = this._raw;\r\n\t\t//[\"Back\"  ][obj.bS][\"ani\" ][obj.no][0    ][\"\"]\r\n\t\treturn `/Map/Back/${ob.bS}/spine/${ob.no}`;\r\n\t}\r\n\tasync load() {\r\n\t\tif (SSAnim) {\r\n\t\t\tlet ssanim = new SSAnim();\r\n\t\t\ttry {\r\n\t\t\t\tawait ssanim.load(this._folder);\r\n\t\t\t\tssanim.update(0);//init pos data\r\n\t\t\t}\r\n\t\t\tcatch (ex) {\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.ssanim = ssanim;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\tunload() {\r\n\t\tif (this.ssanim) {\r\n\t\t\tthis.ssanim.unload();\r\n\t\t\tthis.ssanim = null;\r\n\t\t}\r\n\t}\r\n\tupdate(stamp) {\r\n\t\tif (this.ssanim && window.enable_skeletal_anim) {\r\n\t\t\tthis.ssanim.update(stamp);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect - ?? no use\r\n\t */\r\n\tdraw(renderer, center, viewRect) {\r\n\t\tif ($gv.m_display_skeletal_anim) {\r\n\t\t\tif (this.ssanim) {\r\n\t\t\t\tconst x = Math.trunc((-$gv.m_viewRect.x + 0.5) + this.x);\r\n\t\t\t\tconst y = Math.trunc((-$gv.m_viewRect.y + 0.5) + this.y);\r\n\r\n\t\t\t\trenderer.ctx.setTransform(1, 0, 0, -1, x, y);\r\n\r\n\t\t\t\tthis.ssanim.render();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport class LifeSpawnPoint {\r\n\t/**\r\n\t * @param {object} raw\r\n\t * @param {string} spawnId - spawn index\r\n\t */\r\n\tconstructor(raw, spawnId) {\r\n\t\tObject.assign(this, raw);\r\n\t\t\r\n\t\tthis.spawnId = spawnId;\r\n\t\t\r\n\t\t/**\r\n\t\t * millisecond elapsed after life spawn\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.time = 0;\r\n\r\n\t\t/**\r\n\t\t * now count of life was spawn\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.count = 0;\r\n\r\n\t\tif (!(raw instanceof LifeSpawnPoint)) {\r\n\t\t\tthis.fh = raw.fh - 1;\r\n\t\t}\r\n\t}\r\n\tincreaseLife() {\r\n\t\t++this.count;\r\n\t\tthis.time = 0;\r\n\t}\r\n\tdecreaseLife() {\r\n\t\t--this.count;\r\n\t\tthis.time = 0;\r\n\t}\r\n\tgetTimeElapsedAfterLifeSpawn() {\r\n\t\treturn this.time;\r\n\t}\r\n\tgetNowCountOfLifeWasSpawn() {\r\n\t\treturn this.count;\r\n\t}\r\n\t/**\r\n\t * @returns {LifeSpawnPoint}\r\n\t */\r\n\tclone() {\r\n\t\treturn new this.constructor(this);\r\n\t}\r\n}\r\n\r\n/**\r\n * Mob / NPC controller\r\n */\r\nexport class MapLifeEntity extends SceneObject {\r\n\t/**\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint\r\n\t * @param {number} lifeId - life index\r\n\t */\r\n\tconstructor(lifeSpawnPoint, lifeId) {\r\n\t\tsuper();\r\n\t\tlet a = {\r\n\t\t\ttype: \"m\",\r\n\t\t\tid: 8643000,\r\n\t\t\tx: 720,\r\n\t\t\ty: -771,\r\n\t\t\tmobTime: 0,\r\n\t\t\tf: 0,\r\n\t\t\thide: 0,\r\n\t\t\tfh: 41 - 1,\r\n\t\t\tcy: -761,\r\n\t\t\trx0: 647,\r\n\t\t\trx1: 720,\r\n\t\t};\r\n\r\n\t\t/** @type {LifeRenderer} LifeRenderer|MobRenderer|NpcRenderer */\r\n\t\tthis.renderer = null;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.is_dead = false;\r\n\r\n\t\t/** @type {LifeSpawnPoint} */\r\n\t\tthis.spawn = lifeSpawnPoint;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.x = lifeSpawnPoint.x;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.y = lifeSpawnPoint.cy;//lifeSpawnPoint.y\r\n\t\t\r\n\t\tthis.z = 5;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.angle = 0;\r\n\t\t\r\n\t\t/** @type {number} */\r\n\t\tthis.front = Number(lifeSpawnPoint.f) ? 1 : -1;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.opacity = Number(lifeSpawnPoint.hide) ? 0.5 : 1;\r\n\t\t\r\n\t\tthis.lifeId = lifeId;\r\n\r\n\t\t///** @type {string} */\r\n\t\t//this.type = lifeSpawnPoint.type;\r\n\r\n\t\t///** @type {string} */\r\n\t\t//this.id = lifeSpawnPoint.id;\r\n\r\n\t\t///** @type {number} */\r\n\t\t//this.mobTime = lifeSpawnPoint.mobTime;\r\n\r\n\t\t/////** @type {number} */\r\n\t\t////this.cy = lifeSpawnPoint.cy;\r\n\r\n\t\t///** @type {number} */\r\n\t\t//this.rx0 = lifeSpawnPoint.rx0;\r\n\r\n\t\t///** @type {number} */\r\n\t\t//this.rx1 = lifeSpawnPoint.rx1;\r\n\t}\r\n\r\n\t//AfterStep\r\n\t//get x() {\r\n\t//\treturn this._x;\r\n\t//}\r\n\t//set x(x) {\r\n\t//\tthis._x = x;\r\n\t//}\r\n\t//get y() {\r\n\t//\treturn this._y;\r\n\t//}\r\n\t//set y(y) {\r\n\t//\tthis._y = y;\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint\r\n\t * @param {World} mapController\r\n\t * @param {number} lifeId - life index\r\n\t */\r\n\tstatic Create(lifeSpawnPoint, mapController, lifeId) {\r\n\t\tlet life;\r\n\r\n\t\tif (lifeSpawnPoint.type == \"m\") {\r\n\t\t\tlife = new MapMob(lifeSpawnPoint, lifeId);\r\n\t\t}\r\n\t\telse if (lifeSpawnPoint.type == \"n\") {\r\n\t\t\tlife = new MapNpc(lifeSpawnPoint, lifeId);\r\n\t\t\t//return;\r\n\t\t}\r\n\t\telse {\r\n\t\t\talert(\"map life type: \" + lifeSpawnPoint.type);\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (life) {\r\n\t\t\tlife.load(lifeSpawnPoint.id, mapController);\r\n\t\t}\r\n\r\n\t\treturn life;\r\n\t}\r\n\t\r\n\t/**\r\n\t * load life description\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint - {id: string, type:\"m\"||\"n\"}\r\n\t */\r\n\tstatic async loadLifeDesc(lifeSpawnPoint) {\r\n\t\tlet desc, id = lifeSpawnPoint.id;\r\n\t\t\r\n\t\tswitch (lifeSpawnPoint.type) {\r\n\t\t\tcase \"m\":\r\n\t\t\t\tdesc = MobRenderer.loadDescription(id);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"n\":\r\n\t\t\t\tdesc = NpcRenderer.loadDescription(id);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\talert(\"map life type: \" + lifeSpawnPoint.type);\r\n\t\t\t\tdebugger;\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\treturn desc;\r\n\t}\r\n\r\n\t/**\r\n\t * create entity, load data\r\n\t * @param {string} id -  npc or mob id\r\n\t * @param {World} mapController - no use\r\n\t */\r\n\tasync load(id, mapController) {//??: rename to create\r\n\t\tif (this.renderer) {\r\n\t\t\tawait this.renderer.load(id);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdebugger;\r\n\t\t\talert(\"Unknow type of life in map\");\r\n\t\t}\r\n\t}\r\n\t\r\n\t_destroy(mapController) {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\r\n\t/**\r\n\t * set die animation\r\n\t * @param {number} type\r\n\t */\r\n\tdie(type) {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t\tthis.is_dead = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis.renderer.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tdraw(renderer) {\r\n\t\trenderer.globalAlpha = Math.max(0, Math.min(this.opacity, 1));\r\n\t\tthis.renderer.draw(renderer, this.x, this.y, this.angle, this.front < 0);\r\n\t}\r\n}\r\nclass MapMob extends MapLifeEntity {\r\n\t/**\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint\r\n\t * @param {number} lifeId - life index\r\n\t */\r\n\tconstructor(lifeSpawnPoint, lifeId) {\r\n\t\tsuper(lifeSpawnPoint, lifeId);\r\n\t\tthis.renderer = new MobRenderer();\r\n\r\n\t\t/** @type {PMob} */\r\n\t\tthis.$physics = null;\r\n\t\t\r\n\t\t/** @type {{[x:string]: object}} - {[level]: skill} */\r\n\t\tthis.skills = {};\r\n\r\n\t\t//TODO: load mob info\r\n\t\tthis.hp = 100000;\r\n\t}\r\n\t/**\r\n\t * @param {string} id mobId\r\n\t * @param {World} mapController\r\n\t */\r\n\tasync load(id, mapController) {//??: rename to create\r\n\t\tawait super.load(id);\r\n\r\n\t\tthis.$physics = mapController.createMob(this);\r\n\t\tthis.$physics._loadAction(this.renderer.actions);\r\n\t\t\r\n\t\tawait this._load_skill_by_mob_id(id);\r\n\r\n\t\t// experiment\r\n\t\ttry {\r\n\t\t\tthis._load_skill_info();\r\n\r\n\t\t\tconst firstAttack = this.renderer._raw.info.attack[this.renderer._raw.info.firstAttack].info;\r\n\t\t\tif (this.skill_map[firstAttack]) {\r\n\t\t\t\tconst firstSkillInfo = this.skill_map[firstAttack].skill_list[0];\r\n\r\n\t\t\t\tthis.invokeSkill(firstSkillInfo.skill, firstSkillInfo.level);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\t//not thing\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {SceneObject} chara - 被 chara 攻擊\r\n\t * @param {number} damage - 傷害\r\n\t */\r\n\tdamage(chara, damage) {\r\n\t\tif (!this.is_dead) {\r\n\t\t\tthis.hp -= damage;\r\n\r\n\t\t\tconsole.log(`Mob(${this.$objectid}) 被 ${chara.$objectid} 攻擊，減少 ${damage} HP，剩下 ${this.hp}`);\r\n\t\t\t\r\n\t\t\tif (this.hp <= 0) {\r\n\t\t\t\tthis.die();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * if (chara == null) ??\r\n\t * @param {SceneObject|null} chara - 被 chara 攻擊\r\n\t * @param {number} moveX - unit is pixel\r\n\t * @param {number} moveY - unit is pixel\r\n\t */\r\n\tknockback(chara, moveX, moveY) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PPlayerState} pState\r\n\t */\r\n\t_applyState(pState) {\r\n\t\t//move stand jump hit1 die1\r\n\r\n\t\tif (pState.jump) {\r\n\t\t\tthis.renderer.action = \"jump\";\r\n\t\t}\r\n\t\telse if (pState.walk) {\r\n\t\t\tthis.renderer.action = \"move\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.renderer.action = \"stand\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.$physics) {\r\n\t\t\tif (!this.is_dead) {\r\n\t\t\t\tthis._applyState(this.$physics.state);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.$physics.stop();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.renderer.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tdraw(renderer) {\r\n\t\tif ($gv.m_display_mob) {\r\n\t\t\tsuper.draw(renderer);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* skill need map to action */\r\n\t_load_skill_info() {\r\n\t\tconst _raw = this.renderer._raw;\r\n\t\tlet attack = _raw.info.attack;\r\n\t\tlet skill = _raw.info.skill;\r\n\t\t\r\n\t\tattack[1].info == _raw.info.skill[0].info\r\n\t\tattack[1].info == _raw.skill1.info\r\n\t\t\r\n\t\tvar skill_map = {};\r\n\t\tfor (let i = 1, sname; (sname = \"skill\" + i) in _raw; ++i) {\r\n\t\t\tlet s = _raw[sname];\r\n\t\t\tif (s.info) {\r\n\t\t\t\tskill_map[s.info] = {\r\n\t\t\t\t\tanim: sname,\r\n\t\t\t\t\tskill_list: [],\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar skill_info = {};\r\n\t\tfor (let i in _raw.info.skill) {\r\n\t\t\tlet si = _raw.info.skill[i];\r\n\t\t\tskill_info[si.skill + \".\" + si.level] = si;\r\n\t\t\tif (skill_map[si.info]) {\r\n\t\t\t\tskill_info[si.skill + \".\" + si.level].$anim = skill_map[si.info].anim;\r\n\t\t\t\tskill_map[si.info].skill_list.push(si);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.skill_map = skill_map;\r\n\t\tthis.skill_info = skill_info;\r\n\t}\r\n\t\r\n\t_load_skill_by_mob_id(mob_id) {\r\n\t\tlet tasks = [];\r\n\t\tswitch(mob_id) {\r\n\t\t\tcase \"8880140\":\r\n\t\t\tcase \"8880141\": {\r\n\t\t\t\t\tconst FlowerTrap = require(\"./MobSkill/238.FlowerTrap.js\").FlowerTrap;\r\n\t\t\t\t\tconst FairyDust = require(\"./MobSkill/238.FairyDust.js\").FairyDust;\r\n\t\t\t\t\tthis.skills = {\r\n\t\t\t\t\t\t[1]: new FlowerTrap(),\r\n\t\t\t\t\t\t[2]: new FlowerTrap(),\r\n\t\t\t\t\t\t[3]: new FlowerTrap(),\r\n\t\t\t\t\t\t[4]: new FairyDust(null, null),\r\n\t\t\t\t\t\t[5]: { load() {}, invoke: function (level) { console.info(\"invoke LaserRain\"); } },\r\n\t\t\t\t\t\t[6]: { load() {}, invoke: function (level) { console.info(\"invoke ForcedTelepor\"); } },\r\n\t\t\t\t\t\t[7]: { load() {}, invoke: function (level) { console.info(\"invoke Dragon\"); } },\r\n\t\t\t\t\t\t[8]: { load() {}, invoke: function (level) { console.info(\"invoke Rush\"); } },\r\n\t\t\t\t\t\t[9]: { load() {}, invoke: function (level) { console.info(\"invoke WelcomeBarrage\"); } },\r\n\t\t\t\t\t\t[10]: new FairyDust(null, null),\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.skill_map_action = [];\r\n\t\t\t\t\tfor (let i = 1; i <= 10; ++i) {\r\n\t\t\t\t\t\tswitch (i) {\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tcase 10:\r\n\t\t\t\t\t\t\t\tthis.skill_map_action[i] = \"skill1\";\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 5:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\t\tthis.skill_map_action[i] = \"skill4\";\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\t\tthis.skill_map_action[i] = \"skill2\";\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 8:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 9:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tfor (let lev in this.skills) {\r\n\t\t\tconst skill = this.skills[lev];\r\n\t\t\ttasks.push(skill.load(lev));\r\n\t\t}\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n\t\r\n\tinvokeSkill(skill_id, level) {\r\n\t\tconst skill = this.skills[level];\r\n\t\tif (skill) {\r\n\t\t\tconst anim = this.skill_map_action[level];\r\n\t\t\tif (anim) {\r\n\t\t\t\tthis.renderer.action = anim;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tskill.invoke(level);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.warn({ \"unknow skill\": skill_id, \"level\": level });\r\n\t\t}\r\n\t}\r\n\t\r\n\t_destroy(mapController) {\r\n\t\tlet lifeSpawnPoint = this.spawn;\r\n\t\tif (lifeSpawnPoint instanceof LifeSpawnPoint) {\r\n\t\t\tlifeSpawnPoint.decreaseLife();\r\n\t\t}\r\n\t\tmapController.destroyMob(this);\r\n\t\tthis.renderer = null;\r\n\t}\r\n\r\n\t/**\r\n\t * set die animation\r\n\t * @param {number=1} type\r\n\t */\r\n\tdie(type = 1) {\r\n\t\tthis.renderer.action = \"die\" + type;\r\n\t\tthis.is_dead = true;\r\n\t}\r\n}\r\n\r\nclass MapNpc extends MapLifeEntity {\r\n\t/**\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint\r\n\t * @param {number} lifeId - life index\r\n\t */\r\n\tconstructor(lifeSpawnPoint, lifeId) {\r\n\t\tsuper(lifeSpawnPoint, lifeId);\r\n\t\tthis.renderer = new NpcRenderer();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tdraw(renderer) {\r\n\t\tif ($gv.m_display_npc) {\r\n\t\t\tsuper.draw(renderer);\r\n\t\t}\r\n\t}\r\n\r\n\t_destroy(mapController) {\r\n\t\tlet lifeSpawnPoint = this.spawn;\r\n\t\tlifeSpawnPoint.decreaseLife();\r\n\t\tmapController.destroyNpc(this);\r\n\t\tthis.renderer = null;\r\n\t}\r\n\r\n\t/**\r\n\t * set die animation\r\n\t * @param {number} type\r\n\t */\r\n\tdie(type) {\r\n\t\t//TODO: npc die ??\r\n\t\tthis.is_dead = true;\r\n\t}\r\n}\r\n\r\nlet MapLifeEntityCapacityRate = 1;\r\n\r\nclass MapLifeManager {\r\n\t/**\r\n\t * @param {World} mapController\r\n\t */\r\n\tconstructor(mapController) {\r\n\t\t/** @type {object} */\r\n\t\tthis._raw = null;\r\n\r\n\t\t/** @type {LifeSpawnPoint[]} */\r\n\t\tthis.spawnPoints = [];\r\n\r\n\t\t/** @type {MapMob[]} */\r\n\t\tthis.entities = [];\r\n\r\n\t\t/** @type {World} */\r\n\t\tthis.mapController = mapController;\r\n\t}\r\n\r\n\t/**\r\n\t * @async\r\n\t * @param {{life:{[spawnId:number]:{}}}} mapRawData\r\n\t * @returns {Promise<undefined[]>}\r\n\t */\r\n\tload(mapRawData) {\r\n\t\tlet tasks = [];\r\n\t\tthis._raw = mapRawData.life;\r\n\r\n\t\tlet keys = Object.keys(this._raw)\r\n\t\t\t.map(i => {\r\n\t\t\t\tlet n = parseInt(i, 10);\r\n\t\t\t\tif (Number.isSafeInteger(n)) {\r\n\t\t\t\t\treturn n;\r\n\t\t\t\t}\r\n\t\t\t\tconsole.warn(\"MapLife.spawnId: \" + i);\r\n\t\t\t\treturn null;\r\n\t\t\t})\r\n\t\t\t.filter(i => i != null);\r\n\r\n\t\tfor (let spawnId of keys) {\r\n\t\t\tlet d = new LifeSpawnPoint(this._raw[spawnId], spawnId);\r\n\t\t\ttasks.push(MapLifeEntity.loadLifeDesc(d));\r\n\t\t\tthis.spawnPoints.push(d);\r\n\t\t}\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n\r\n\tunload() {\r\n\t\tfor (let i = 0; i < this.entities.length; ++i) {\r\n\t\t\tconst entity = this.entities[i];\r\n\t\t\tif (entity.spawn.type == \"m\") {\r\n\t\t\t\tentity.$physics._destroy(this.mapController);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.spawnPoints = [];\r\n\t\tthis.entities = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tfor (let i = 0; i < this.spawnPoints.length; ++i) {\r\n\t\t\tlet lifeSpawnPoint = this.spawnPoints[i];\r\n\r\n\t\t\tlifeSpawnPoint.time += stamp;\r\n\r\n\t\t\tif (lifeSpawnPoint.time >= 1000 && lifeSpawnPoint.count < MapLifeEntityCapacityRate) {\r\n\t\t\t\tlifeSpawnPoint.increaseLife();\r\n\t\t\t\tthis.spawn(lifeSpawnPoint);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.entities.length; ++i) {\r\n\t\t\tlet entity = this.entities[i];\r\n\t\t\tif (entity) {\r\n\t\t\t\tif (entity.renderer.action && entity.renderer.action.startsWith(\"die\")) {\r\n\t\t\t\t\tconst act = entity.renderer.actions[entity.renderer.action];\r\n\t\t\t\t\tif (act && act.isEnd()) {\r\n\t\t\t\t\t\tthis.destroyLife(entity);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tentity.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * spawn life(npc / mob) by spawner\r\n\t * @param {LifeSpawnPoint} lifeSpawnPoint\r\n\t */\r\n\tspawn(lifeSpawnPoint) {\r\n\t\tlet lifeId = 0;\r\n\r\n\t\tfor (; lifeId < this.entities.length; ++lifeId) {\r\n\t\t\tif (!this.entities[lifeId]) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet entity = MapLifeEntity.Create(lifeSpawnPoint, this.mapController, lifeId);\r\n\t\t\r\n\t\tif (lifeId < this.entities.length) {\r\n\t\t\tthis.entities[lifeId] = entity;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.entities.push(entity);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * directly spawn npc\r\n\t * @param {string} npcID\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tspawnNpc(npcID, x, y, flip=false, fh=0) {\r\n\t\tlet lifeSpawnPoint = new LifeSpawnPoint({\r\n\t\t\ttype: \"n\",\r\n\t\t\tx: x | 0, y: y | 0, cy: y | 0,\r\n\t\t\tid: npcID,\r\n\t\t\tfh: fh,\r\n\t\t\tis_dummy: true,\r\n\t\t});\r\n\t\tthis.spawn(lifeSpawnPoint);\r\n\t}\r\n\t/**\r\n\t * directly spawn mob\r\n\t * @param {string} mobID\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t */\r\n\tspawnMob(mobID, x, y, flip=false, fh=0) {\r\n\t\tlet lifeSpawnPoint = new LifeSpawnPoint({\r\n\t\t\ttype: \"m\",\r\n\t\t\tx: x | 0, y: y | 0, cy: y | 0,\r\n\t\t\tid: mobID,\r\n\t\t\tfh: fh,\r\n\t\t\tis_dummy: true,\r\n\t\t});\r\n\t\tthis.spawn(lifeSpawnPoint);\r\n\t}\r\n\t\r\n\tdestroyLife(entity) {\r\n\t\tif (!(entity instanceof MapLifeEntity)) {\r\n\t\t\talert(\"MapLifeManager.killLife: can't kill non life\");\r\n\t\t\tconsole.error(\"MapLifeManager.killLife: can't kill non life\");\r\n\t\t}\r\n\t\tentity._destroy(this.mapController);\r\n\t\tdelete this.entities[entity.lifeId];\r\n\t}\r\n\tdestroyAll() {\r\n\t\tthis.entities.forEach(a => this.destroyLife(a))\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {Vec2} center\r\n\t * @param {Rectangle} viewRect\r\n\t * @param {number} whereLayer - where layer index\r\n\t */\r\n\tdraw(renderer, center, viewRect, whereLayer) {\r\n\t\tfor (let i = 0; i < this.entities.length; ++i) {\r\n\t\t\tlet entity = this.entities[i];\r\n\t\t\tif (entity && ((entity.z != null && entity.z == whereLayer) || whereLayer == null)) {\r\n\t\t\t\tentity.draw(renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * require Renderer\r\n * @implements {IAsyncLoading}\r\n */\r\nexport class SceneMap {\r\n\tconstructor() {\r\n\t\t/** @type {number} */\r\n\t\tthis.stamp = 0;\r\n\r\n\t\t/** @type {MapBack[]} */\r\n\t\tthis.background = [];\r\n\r\n\t\t/** @type {MapBack[]} */\r\n\t\tthis.frontground = [];\r\n\r\n\t\t/** @type {MapObject[]} */\r\n\t\tthis.layeredObject = [];\r\n\r\n\t\t/** @type {MapTile[]} */\r\n\t\tthis.layeredTile = [];\r\n\t\t\r\n\t\t/** @type {{[tag:string]:MapBackBase}} */\r\n\t\tthis.backTags = {};\r\n\t\t\r\n\t\t/** @type {{[name:string]:MapObject}} */\r\n\t\tthis.namedObject = {};\r\n\r\n\t\t/** @type {World} */\r\n\t\tthis.controller = new World();\r\n\r\n\t\t/** @type {MapLifeManager} */\r\n\t\tthis.lifeMgr = new MapLifeManager(this.controller);\r\n\t\t\r\n\t\t/** @type {MapPortalManager} */\r\n\t\tthis.portalMgr = new MapPortalManager();\r\n\t\t\r\n\t\t/** @type {MapParticle[]} */\r\n\t\tthis.particleList = null;\r\n\r\n\t\t/** @type {Rectangle} */\r\n\t\tthis.mapBound = null;\r\n\r\n\t\t/** @type {{[questId:string]: number}} */\r\n\t\tthis.quest = {};\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._url = null;//data url //debug\r\n\r\n\t\t/** @type {Promise<any>[]} */\r\n\t\tthis.$load_tasks = [];\r\n\r\n\t\t/** @type {Promise<any>} */\r\n\t\tthis.$promise = null;\r\n\r\n\t\tthis.$loading_status = \"loading\";\r\n\t\t\r\n\t\tthis.onload = null;\r\n\t}\r\n\r\n\tstatic async _Init() {\r\n\t\tlet $_mapString = null;\r\n\t\tlet $mapString = {};\r\n\r\n\t\t$_mapString = await $get.data(\"/String/Map\");\r\n\r\n\t\tfor (let i in $_mapString) {\r\n\t\t\tfor (let j in $_mapString[i]) {\r\n\t\t\t\t$mapString[j] = $_mapString[i][j];\r\n\t\t\t\t$mapString[j].$region = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tSceneMap._map_names = $mapString;\r\n\r\n\t\twindow.$MapNames = SceneMap._map_names;\r\n\t}\r\n\tstatic Init() {\r\n\t\treturn Promise.all([\r\n\t\t\tthis._Init(),\r\n\t\t\tMapPortal.Init(),\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {{[questId:string]: number}} quest\r\n\t */\r\n\tisActivated(quest) {\r\n\t\tif (quest) {\r\n\t\t\tfor (let id in quest) {\r\n\t\t\t\tif (this.quest[id] != quest[id]) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tget $map_sprite() {\r\n\t\treturn window.$map_sprite;\r\n\t}\r\n\r\n\t/**\r\n\t * load map from loaded data\r\n\t * @param {{back:{[backId:string]:any}}} raw\r\n\t */\r\n\tasync _constructBack(raw) {\r\n\t\tif (!(\"back\" in raw)) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet loading_task_map = new Map();\r\n\t\tfor (let i = 0; i in raw.back; ++i) {\r\n\t\t\tlet ob = raw.back[i];\r\n\t\t\tconst url = this._url + `back/${i}`;\r\n\r\n\t\t\t/** @type {MapBack|MapBackAnimation} */\r\n\t\t\tlet back;\r\n\r\n\t\t\tif (ob.ani == 0) {\r\n\t\t\t\tback = new MapBack(ob);\r\n\t\t\t}\r\n\t\t\telse if (ob.ani == 1) {\r\n\t\t\t\tback = new MapBackAnimation(ob);\r\n\t\t\t}\r\n\t\t\telse if (ob.ani == 2) {//Spine skeletal animation\r\n\t\t\t\tback = new MapBackSkeletalAnim(ob);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow new Error(\"ob.ani: \" + ob.ani);\r\n\t\t\t}\r\n\t\t\tback._url = url;\r\n\t\t\tif (back.backTags != null) {\r\n\t\t\t\tthis.backTags[back.backTags] = back;\r\n\t\t\t}\r\n\r\n\t\t\tif (ob.ani != 2) {\r\n\t\t\t\t// add loading task\r\n\t\t\t\tif (back._raw.bS) {\r\n\t\t\t\t\tlet ps = \"Back/\" + back._raw.bS;\r\n\t\t\t\t\tif (!loading_task_map.has(ps)) {\r\n\t\t\t\t\t\tloading_task_map.set(ps, map_load_package(\"Back\", back._raw.bS));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.warn(\"MapBack: map.back[\" + i + \"].bS = \" + back._raw.bS);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (ob.front != 0) {\r\n\t\t\t\tthis.frontground.push(back);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.background.push(back);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tawait Promise.all([...loading_task_map.values()]);\r\n\r\n\t\tfor (let i = 0; i < this.frontground.length; ++i) {\r\n\t\t\tlet back = this.frontground[i];\r\n\t\t\tback.load();\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.background.length; ++i) {\r\n\t\t\tlet back = this.background[i];\r\n\t\t\tback.load();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * load map from loaded data\r\n\t * @param {{[layer:number]:{objs:{},tiles:{},info:{}}}} mapRawData\r\n\t */\r\n\tasync _constructLayeredObject(mapRawData) {\r\n\t\tlet loading_task_map = new Map();\r\n\r\n\t\tfor (let i = 0, layer = mapRawData[i]; !objIsEmpty(layer); i++ , layer = mapRawData[i]) {//layer[1...8]\r\n\t\t\tlet objs = this.__constructLayeredObject_obj(i, layer, loading_task_map);\r\n\t\t\tlet tiles = this.__constructLayeredObject_tile(i, layer, loading_task_map);\r\n\r\n\t\t\t// ?? map:867116550 雷射在 tiles 前面\r\n\t\t\ttiles.sort((a, b) => { return a.z - b.z; });\r\n\t\t\tobjs.sort((a, b) => { return a.z - b.z; });\r\n\r\n\t\t\t//this.layeredObject[i] = objs.concat(tiles);//(objs.concat(tiles)).sort(function (a, b) { return a.z - b.z; });\r\n\t\t\t\r\n\t\t\tthis.layeredObject[i] = objs;\r\n\t\t\tthis.layeredTile[i] = tiles;\r\n\t\t}\r\n\r\n\t\t//wait all texture package loaded\r\n\t\tawait Promise.all([...loading_task_map.values()]);\r\n\r\n\t\tfor (let i = 0; i < this.layeredObject.length; ++i) {\r\n\t\t\tconst objs = this.layeredObject[i];\r\n\t\t\tfor (let j = 0; j < objs.length; ++j) {\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {MapObject}\r\n\t\t\t\t */\r\n\t\t\t\tlet obj = objs[j];\r\n\t\t\t\tif (process.env.NODE_ENV !== 'production') {//is debug\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tobj.load();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (ex) {\r\n\t\t\t\t\t\tconsole.error(\"load textures failed: \" + new URL(\"xml2\" + obj._url, window.location).href);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tobj.load();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.layeredTile.length; ++i) {\r\n\t\t\tconst tiles = this.layeredTile[i];\r\n\t\t\tfor (let j = 0; j < tiles.length; ++j) {\r\n\t\t\t\tlet tile = tiles[j];\r\n\t\t\t\ttile.load();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t__constructLayeredObject_tile(i, layer, loading_task_map) {\r\n\t\tconst info = layer.info;\r\n\t\tlet tiles = [];\r\n\r\n\t\tif (info.tS) {\r\n\t\t\tlet ps = \"Tile/\" + info.tS;\r\n\t\t\tif (!loading_task_map.has(ps)) {\r\n\t\t\t\tloading_task_map.set(ps, map_load_package(\"Tile\", info.tS));\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (Object.keys(layer.tile).length) {\r\n\t\t\tdebugger;\r\n\t\t\tconsole.warn(\"[\" + i + \"].tile = \" + JSON.stringify(layer.tile));\r\n\t\t}\r\n\t\tfor (let j = 0, ti = layer.tile[j]; !objIsEmpty(ti); j++ , ti = layer.tile[j]) {\r\n\t\t\tlet tile = new MapTile(ti, info);\r\n\r\n\t\t\ttile._url = this._url + `${i}/tile/${j}`;\r\n\r\n\t\t\ttiles.push(tile);\r\n\t\t}\r\n\r\n\t\treturn tiles;\r\n\t}\r\n\t__constructLayeredObject_obj(i, layer, loading_task_map) {\r\n\t\tlet objs = [];\r\n\r\n\t\tfor (let j = 0, raw = layer.obj[j]; !objIsEmpty(raw); j++ , raw = layer.obj[j]) {\r\n\t\t\tlet obj;\r\n\r\n\t\t\tif (raw.spineAni) {\r\n\t\t\t\tswitch (raw.spineAni) {\r\n\t\t\t\t\tcase \"animation\":\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"idle\":\r\n\t\t\t\t\t\tconsole.warn(\"spine animation: idle ??\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.groupCollapsed(\"unknow spine:\" + raw.spineAni);\r\n\t\t\t\t\t\tconsole.warn(`LayeredObject[${i}][${j}]`);\r\n\t\t\t\t\t\tconsole.warn(raw);\r\n\t\t\t\t\t\tconsole.groupEnd();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tobj = new MapObjectSkeletalAnim(raw);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tobj = new MapObject(raw);\r\n\r\n\t\t\t\tlet ps = \"Obj/\" + obj._raw.oS;\r\n\t\t\t\tif (!loading_task_map.has(ps)) {\r\n\t\t\t\t\tloading_task_map.set(ps, map_load_package(\"Obj\", obj._raw.oS));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tobj._url = this._url + `${i}/obj/${j}`;\r\n\t\t\t\r\n\t\t\tif (obj.name != null) {\r\n\t\t\t\tthis.namedObject[obj.name] = obj;\r\n\t\t\t}\r\n\r\n\t\t\tobjs.push(obj);\r\n\t\t}\r\n\r\n\t\treturn objs;\r\n\t}\r\n\r\n\t/**\r\n\t * top-bottom-border compute by visible mapObject\r\n\t */\r\n\t__compute_top_bottom_border(layeredObject) {\r\n\t\tlet top = null, bottom = null;//left, right,\r\n\t\t//let i = 0;\r\n\t\t\r\n\t\tfor (let i = 0; i < layeredObject.length; ++i) {\r\n\t\t\tconst objs = layeredObject[i];\r\n\t\t\tfor (let j = 0; j < objs.length; ++j) {\r\n\t\t\t\tconst obj = objs[j];\r\n\t\t\t\tlet rect = obj.compute_max_rectangle();\r\n\t\t\t\tif (rect && top != null && bottom != null) {\r\n\t\t\t\t\t//left = Math.min(left, rect.left);\r\n\t\t\t\t\ttop = Math.min(top, rect.top);\r\n\t\t\t\t\t//right = Math.max(right, rect.right);\r\n\t\t\t\t\tbottom = Math.max(bottom, rect.bottom);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//left = rect.left;\r\n\t\t\t\t\ttop = rect.top;\r\n\t\t\t\t\t//right = rect.right;\r\n\t\t\t\t\tbottom = rect.bottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn { top, bottom };\r\n\t}\r\n\t\r\n\t/**\r\n\t * top-bottom-border compute by visible mapObject\r\n\t */\r\n\t_compute_top_bottom_border() {\r\n\t\tlet objtb = this.__compute_top_bottom_border(this.layeredObject);\r\n\t\tlet tiletb = this.__compute_top_bottom_border(this.layeredTile);\r\n\t\tlet top = Math.min(objtb.top, tiletb.top);\r\n\t\tlet bottom = Math.max(objtb.bottom, tiletb.bottom);\r\n\t\treturn { top, bottom };\r\n\t}\r\n\r\n\t//_compute_view_rectangle\r\n\t\r\n\t_compute_map_bound(reCalc) {\r\n\t\tif (this.mapBound && !reCalc) {\r\n\t\t\treturn this.mapBound;\r\n\t\t}\r\n\r\n\t\tconst info = this._raw.info;\r\n\t\tlet top, bottom;\r\n\r\n\t\tif (info.VRLeft != null && info.VRTop != null && info.VRRight != null && info.VRBottom != null) {\r\n\t\t\ttop = info.VRTop;\r\n\t\t\tbottom = info.VRBottom;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tb = this._compute_top_bottom_border();\r\n\t\t\ttop = tb.top;\r\n\t\t\tbottom = tb.bottom;\r\n\t\t}\r\n\r\n\t\tconst lr = this.controller.ground._compute_left_right_border();\r\n\r\n\t\tlet rect = Rectangle.parse(lr.left, top, lr.right, bottom);\r\n\t\tthis.mapBound = rect;//store\r\n\r\n\t\treturn rect;\r\n\t}\r\n\t\r\n\tget _window_title() {\r\n\t\tif (this.mapName) {\r\n\t\t\treturn `${[this.mapName, this.streetName].join(\"·\")} (${this.map_id})`;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn `${this.map_id}`;\r\n\t\t}\r\n\t}\r\n\t\r\n\t_get_map_data_url(map_id) {\r\n\t\treturn `/Map/Map/Map${map_id.slice(0, 1)}/${map_id}`;\r\n\t}\r\n\r\n\t/**\r\n\t * loading: map data\r\n\t * @param {string} map_id\r\n\t * @param {boolean} reload - download\r\n\t */\r\n\tasync load(map_id, reload) {\r\n\t\tif (!reload && map_id != null && this.map_id == map_id && this._raw != null) {\r\n\t\t\tif (this.isLoaded()) {\r\n\t\t\t\tthis.unload();\r\n\t\t\t}\r\n\t\t\tthis._load(this._raw);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst url = this._get_map_data_url(map_id);\r\n\r\n\t\tlet raw = await $get.data(url);\r\n\t\tif (!raw) {\r\n\t\t\talert(\"map not exit\");\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (raw.info && raw.info.link) {\r\n\t\t\tconst url2 = this._get_map_data_url(raw.info.link);\r\n\t\t\t\t\r\n\t\t\traw = await $get.data(url2);\r\n\t\t\tif (!raw) {\r\n\t\t\t\talert(\"map-link not exit\");\r\n\t\t\t\tdebugger;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.isLoaded()) {\r\n\t\t\tthis.unload();\r\n\t\t}\r\n\t\tthis._url = url;\r\n\t\tthis.map_id = map_id;\r\n\t\t\r\n\t\tthis._load(raw);\r\n\t}\r\n\t/**\r\n\t * load map from loaded data\r\n\t * @param {{[prop:string]:{}}} raw\r\n\t */\r\n\t_load(raw) {\r\n\t\tconst map_id = this.map_id;\r\n\r\n\t\tthis.$loading_status = \"loading\";\r\n\r\n\t\t$gv.allQuest = {};\r\n\t\t\r\n\t\tthis.controller.stop = true;//begin load\r\n\t\t\r\n\t\tif (SceneMap._map_names[map_id]) {\r\n\t\t\tthis.mapName = SceneMap._map_names[map_id].mapName;\r\n\t\t\tthis.streetName = SceneMap._map_names[map_id].streetName;\r\n\t\t}\r\n\r\n\t\tthis.$load_tasks = [];\r\n\r\n\t\tthis._loadBgm(raw);\r\n\r\n\t\tthis.$load_tasks.push(this._constructBack(raw, this));\r\n\t\t\r\n\t\tthis.$load_tasks.push(this._constructLayeredObject(raw, this).then((mapobj) => {\r\n\t\t\t//this.layeredObject\r\n\t\t\t//this.layeredTile\r\n\t\t}));\r\n\t\t\r\n\t\tthis.$load_tasks.push(this.portalMgr.load(raw, this).then((portals) => {\r\n\t\t}));\r\n\t\t\r\n\t\tthis.$load_tasks.push(this.__constructMiniMap(raw, this));\r\n\r\n\t\tthis.$load_tasks.push(this.controller.load(raw, this));//load foothold...\r\n\t\tthis.$load_tasks.push(this.lifeMgr.load(raw, this));\r\n\t\t\r\n\t\tthis.$load_tasks.push(MapParticle.construct(raw, this));\r\n\r\n\t\tthis.$promise = Promise.all(this.$load_tasks);\r\n\t\tthis.$promise.then((results) => {\r\n\t\t\tconst viewRect = this._compute_map_bound();\r\n\t\t\tconst viewCenter = viewRect.center;\r\n\t\t\t\r\n\t\t\t$gv.m_viewRect.setCenter(viewCenter.x, viewCenter.y);\r\n\t\t\t\r\n\t\t\tthis.controller._createMapBound(viewRect);\r\n\t\t\t\r\n\t\t\tthis.controller.stop = false;//end load\r\n\t\t\t\r\n\t\t\tthis.$load_tasks = [];\r\n\t\t\tthis.$promise = null;\r\n\t\t\tdelete this.$loading_status;\r\n\t\t\tconsole.log(\"completed scene_map.waitLoaded: [...]\");\r\n\t\t});\r\n\t\t\r\n\t\tthis._raw = raw;\r\n\t\t\r\n\t\tthis._script();\r\n\t\t\r\n\t\tif (this.onload) {\r\n\t\t\tthis.onload.call(this);//history.pushState\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(\"End scene_map.load\");\r\n\t}\r\n\t_script() {\r\n\t\tswitch (this.map_id) {\r\n\t\t\tcase \"450004150\":\r\n\t\t\tcase \"450004450\":\r\n\t\t\tcase \"450004750\":\r\n\t\t\t\tthis.lifeMgr.spawnMob(\"8880166\", 1000, 47, false, 0);//from /Etc/BossLucid\r\n\t\t\t\tthis.lifeMgr.spawnMob(\"8880140\", 1000, 47, false, 0);//from /Etc/BossLucid\r\n\t\t\t\t//this.lifeMgr.spawnMob(\"8880176\", 1000, 47, false, 0);\r\n\t\t\t\t//this.lifeMgr.spawnMob(\"8880141\", 1000, 47, false, 0);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treload() {\r\n\t\tthis.unload();\r\n\t\tthis._load(this._raw);\r\n\t}\r\n\t\r\n\tunload() {\r\n\t\tthis.$loading_status = \"loading\";\r\n\t\t\r\n\t\tfor (let i = 0; i < this.background.length; ++i) {\r\n\t\t\tthis.background[i].unload();\r\n\t\t}\r\n\t\tthis.background = [];\r\n\t\t\r\n\t\tfor (let i = 0; i < this.frontground.length; ++i) {\r\n\t\t\tthis.frontground[i].unload();\r\n\t\t}\r\n\t\tthis.frontground = [];\r\n\t\t\r\n\t\tfor (let i = 0; i < this.layeredObject.length; ++i) {\r\n\t\t\tlet objs = this.layeredObject[i];\r\n\t\t\tfor (let j = 0; j < objs.length; ++j) {\r\n\t\t\t\tobjs[j].unload();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.layeredObject = [];\r\n\t\t\r\n\t\tfor (let i = 0; i < this.layeredTile.length; ++i) {\r\n\t\t\tlet tiles = this.layeredTile[i];\r\n\t\t\tfor (let j = 0; j < tiles.length; ++j) {\r\n\t\t\t\ttiles[j].unload();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.layeredTile = [];\r\n\t\t\r\n\t\tthis.backTags = {};\r\n\t\t\r\n\t\tthis.particleList = null;\r\n\t\t\r\n\t\tthis.controller.unload();\r\n\t\tthis.lifeMgr.unload();\r\n\t\tthis.portalMgr.unload();\r\n\t\t\r\n\t\tmap_sprite.Back = {};\r\n\t\tmap_sprite.Obj = {};\r\n\t\tmap_sprite.Tile = {};\r\n\t}\r\n\r\n\t/**\r\n\t * load map from loaded data\r\n\t * @param {{info:{bgm:string}}} mapRawData\r\n\t */\r\n\t_getBgmPath(mapRawData) {\r\n\t\tlet bgmPath = mapRawData.info.bgm;\r\n\t\tlet i = bgmPath.indexOf(\"/\"), path = bgmPath.slice(0, i) + bgmPath.slice(i);\r\n\t\t//let m = bgmPath.match(/([^\\/]+)(\\/.*)/), path = [m[1], m[2]].join(\"/\");\r\n\t\treturn [\"\", \"Sound\", path].join(\"/\");\r\n\t}\r\n\r\n\t/**\r\n\t * load map from loaded data\r\n\t * @param {{info:{bgm:string}}} mapRawData\r\n\t */\r\n\t_loadBgm(mapRawData) {\r\n\t\tconst elem_bgm = document.getElementById(\"bgm\");\r\n\t\tif (elem_bgm) {\r\n\t\t\tconst path = this._getBgmPath(mapRawData);\r\n\t\t\tthis._bgm_path = path;\r\n\r\n\t\t\tconst url = $get.soundMp3Url(path);\r\n\t\t\t\r\n\t\t\telem_bgm.innerHTML = `<source src=\"${url}\" type=\"audio/mpeg\">`;\r\n\t\t\t\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\telem_bgm.autoplay = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\telem_bgm.autoplay = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconsole.error(new TypeError(\"#bgm\"));\r\n\t\t}\r\n\t}\r\n\r\n\tplayBgm() {\r\n\t\tdocument.getElementById(\"bgm\").play();\r\n\t}\r\n\r\n\tpauseBgm() {\r\n\t\tdocument.getElementById(\"bgm\").pause();\r\n\t}\r\n\t\r\n\t__constructMiniMap(raw) {\r\n\t\tif (raw.miniMap) {\r\n\t\t\t//const hw = raw.miniMap.width * 0.5;\r\n\t\t\t//const hh = raw.miniMap.height * 0.5;\r\n\t\t\t//const cx = raw.miniMap.centerX;\r\n\t\t\t//const cy = raw.miniMap.centerY;\r\n\t\t\tthis.width = raw.miniMap.width;\r\n\t\t\tthis.height = raw.miniMap.height;\r\n\t\t\tthis.centerX = raw.miniMap.centerX;\r\n\t\t\tthis.centerY = raw.miniMap.centerY;\r\n\t\t\t//this.boundRect = new Rectangle(cx - hw, cy - hh, raw.miniMap.width, raw.miniMap.height);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t\tthis.centerX = 0;\r\n\t\t\tthis.centerY = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t_miniMap_src() {\r\n\t\treturn this._url + \"miniMap/canvas\";\r\n\t\tconst a = {\r\n\t\t\t\"canvas\": {\r\n\t\t\t\t\"\": \"\"\r\n\t\t\t},\r\n\t\t\t\"width\": 4483,\r\n\t\t\t\"height\": 1244,\r\n\t\t\t\"centerX\": 1030,\r\n\t\t\t\"centerY\": 781,\r\n\t\t\t\"mag\": 4\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * wait all task: return true if nothing to loading else list of loaded object\r\n\t * loading: texture...\r\n\t * @returns {Promise<true>|Promise<any[]>}\r\n\t */\r\n\tasync waitLoaded() {\r\n\t\tawait this.$promise;\r\n\t}\r\n\r\n\tisLoaded() {\r\n\t\treturn ((!this.$load_tasks || !this.$load_tasks.length) && this._raw && !this.$loading_status);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\twindow.m_hover_object = null;\r\n\t\tif ($gv.mouse_dm || $gv.mouse_dr) {\r\n\t\t\twindow.m_selected_object = null;\r\n\t\t}\r\n\t\t\r\n\t\tif (stamp != null) {\r\n\t\t\tthis.stamp = stamp;\r\n\r\n\t\t\tthis.lifeMgr.update(stamp);\r\n\r\n\t\t\tif (this.isLoaded()) {\r\n\t\t\t\tthis.controller.update(stamp);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t */\r\n\t_addChara(chara) {\r\n\t\ttry {\r\n\t\t\tlet player_spawns = this.portalMgr.portals.filter(a => a.pn == \"sp\");\r\n\t\t\tlet spawn = player_spawns[Math.trunc(Math.random() * 100) % player_spawns.length];\r\n\t\t\tconst $physics = chara.$physics;\r\n\t\t\tconst x = spawn.x / $gv.CANVAS_SCALE;\r\n\t\t\tconst y = spawn.y / $gv.CANVAS_SCALE;\r\n\t\t\t$physics.setPosition(x, y);\r\n\t\t\t$physics.body.SetAwake(true);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(ex);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {SceneCharacter} chara\r\n\t */\r\n\taddChara(chara) {\r\n\t\tif (this.$promise) {\r\n\t\t\tthis.$promise.then(() => {\r\n\t\t\t\tthis._addChara(chara);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._addChara(chara);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tapplyCamera(renderer) {\r\n\t\trenderer.ctx.setTransform(1, 0, 0, 1, Math.trunc(-$gv.m_viewRect.x), Math.trunc(-$gv.m_viewRect.y));\r\n\t}\r\n\r\n\t/**\r\n\t * pushGlobalAlpha\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tbeginRender(renderer) {\r\n\t\trenderer.pushGlobalAlpha();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tendRender(renderer) {\r\n\t\trenderer.popGlobalAlpha();\r\n\t\t//renderer.popMatrix();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {number} whereLayer - where layer index\r\n\t */\r\n\trenderLife(renderer, whereLayer) {\r\n\t\tif (!$gv.m_display_life) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = Vec2.empty;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tthis.lifeMgr.draw(renderer, center, viewRect, whereLayer);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderPortal(renderer) {\r\n\t\tif (!$gv.m_display_portal) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = Vec2.empty;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\r\n\t\tthis.portalMgr.update(this.stamp);\r\n\t\tthis.portalMgr.draw(renderer, center, viewRect);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderFrontground(renderer) {\r\n\t\tif (!$gv.m_display_front) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = $gv.m_viewRect.center;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tfor (let i = 0; i < this.frontground.length; ++i) {\r\n\t\t\tlet back = this.frontground[i];\r\n\t\t\tif (this.isActivated(back.quest)) {\r\n\t\t\t\tback.update(this.stamp);\r\n\t\t\t\tback.draw(renderer, center, viewRect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderLayeredObject(renderer, layerIndex) {\r\n\t\tif (!$gv.m_display_mapobj) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = Vec2.empty;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tconst objs = this.layeredObject[layerIndex];\r\n\t\tfor (let j = 0; j < objs.length; ++j) {\r\n\t\t\tlet obj = objs[j];\r\n\t\t\tif (this.isActivated(obj.quest)) {\r\n\t\t\t\tobj.update(this.stamp);\r\n\t\t\t\tobj.draw(renderer, center, viewRect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderLayeredTile(renderer, layerIndex) {\r\n\t\tif (!$gv.m_display_maptile) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = Vec2.empty;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tconst tiles = this.layeredTile[layerIndex];\r\n\t\tfor (let j = 0; j < tiles.length; ++j) {\r\n\t\t\tlet tile = tiles[j];\r\n\t\t\tif (this.isActivated(tile.quest)) {\r\n\t\t\t\ttile.update(this.stamp);\r\n\t\t\t\ttile.draw(renderer, center, viewRect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderBackground(renderer) {\r\n\t\tif (!$gv.m_display_back) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst center = $gv.m_viewRect.center;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tfor (let i = 0; i < this.background.length; ++i) {\r\n\t\t\tlet back = this.background[i];\r\n\t\t\tif (this.isActivated(back.quest)) {\r\n\t\t\t\tback.update(this.stamp);\r\n\t\t\t\tback.draw(renderer, center, viewRect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trenderParticle(renderer) {\r\n\t\tif (!$gv.m_display_particle_system) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//const center = Vec2.empty;\r\n\t\tconst center = $gv.m_viewRect.center;\r\n\t\tconst viewRect = $gv.m_viewRect;\r\n\t\t\r\n\t\tfor (let i = 0; i < this.particleList.length; ++i) {\r\n\t\t\tlet particle = this.particleList[i];\r\n\t\t\tif (this.isActivated(particle.quest)) {\r\n\t\t\t\tparticle.update(this.stamp);\r\n\t\t\t\tparticle.draw(renderer, center, viewRect);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nAddInitTask(SceneMap.Init());\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction objIsEmpty(x) {\r\n\tif (typeof x == 'object' && x == null)\r\n\t\tthrow new Error();\r\n\treturn typeof x == 'undefined' || x == null;\r\n}\r\n","﻿\r\nimport { KeySlotData } from \"./KeySlotData\";\r\nimport { ItemSlot } from \"../../game/Item\";\r\n\r\n\r\nexport class KeySlot {\r\n\t/**\r\n\t * @param {\"Command\"|\"Action\"|\"Item\"|\"Skill\"} type\r\n\t * @param {KeySlotData} data\r\n\t */\r\n\tconstructor(type, data) {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif ((type + \"Slot\") != data.constructor.name) {\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.type = type;\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * open/close ui, command...\r\n */\r\nexport class CommandSlot extends KeySlotData {\r\n\t/**\r\n\t * @param {string} command\r\n\t */\r\n\tconstructor(command) {\r\n\t\tsuper();\r\n\t\tthis.command = command;\r\n\t}\r\n}\r\n\r\n/**\r\n * charaction action key\r\n */\r\nexport class ActionSlot extends KeySlotData {\r\n\t/**\r\n\t * @param {string} action\r\n\t */\r\n\tconstructor(action) {\r\n\t\tsuper();\r\n\t\tthis.action = action;\r\n\t}\r\n}\r\n\r\n\r\n//TODO: SkillSlot.js 未完成\r\nexport class SkillSlot extends KeySlotData {\r\n\t/**\r\n\t * @param {string} skill_id\r\n\t */\r\n\tconstructor(skill_id) {\r\n\t\tsuper();\r\n\t\tthis.skill_id = skill_id;\r\n\t}\r\n}\r\n\r\n\r\n\r\n","﻿\r\nimport { ItemCategoryInfo } from '../../public/javascripts/resource.js';\r\n\r\nimport { IRenderer } from './IRenderer.js';\r\n\r\nimport { SceneObject } from \"./SceneObject.js\";\r\nimport { CharacterRenderer } from \"./Renderer/CharacterRenderer.js\";\r\nimport { ChatBalloon } from \"./Renderer/ChatBalloon.js\";\r\nimport { PPlayer, PPlayerState } from \"./Physics/PPlayer.js\";\r\n\r\nimport { $createItem, ItemEquip, ItemSlot, ItemBase } from \"./Item.js\";\r\nimport { SceneSkill } from \"./Skill.js\";\r\n\r\nimport { CharacterStat } from \"../Common/PlayerData.js\";\r\nimport { CharacterMoveElem } from \"../Client/PMovePath.js\";\r\nimport { $Packet_CharacterMove } from \"../Common/Packet\";\r\nimport { AttackInfo, DamagePair } from \"../Common/AttackInfo.js\";\r\n\r\nimport { KeySlot, CommandSlot, ActionSlot, SkillSlot } from '../ui/Basic/KeySlot.js';\r\n\r\nimport { SceneMap } from './Map.js';\r\nimport { damageNumberLayer } from './Renderer/DamageNumber.js';\r\n\r\n\r\n// SceneCharacter的更新流程\r\n//\r\n// chatCtrl.update (順序無關)\r\n//\r\n// <...controller>\r\n// activeSkills.forEach(skill => skill.update)\r\n// chara._handleAttack\r\n// chara._player_control => { inputKey.forEach(key => key ? activeSkills.forEach(skill => skill.control)); ... }\r\n// chara._applyState\r\n//\r\n// <renderer>\r\n// set chara.renderer.position\r\n// chara.renderer.update\r\n\r\n\r\nclass TimeElapsed {\r\n\tconstructor() {\r\n\t\t/** @type {Date} */\r\n\t\tthis._date = new Date();\r\n\t}\r\n\treset() {\r\n\t\tthis._date = new Date();\r\n\t}\r\n\tget elapsed() {\r\n\t\tconst elapsed = (new Date()).getMilliseconds() - this._date.getMilliseconds();\r\n\t\treturn elapsed;\r\n\t}\r\n}\r\n\r\nwindow.$addItem_repeatEquip = false;\r\n\r\nclass ChatController {\r\n\tconstructor() {\r\n\t\t/** @type {number} */\r\n\t\tthis.style = 0;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.text = \"\";\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.$outputText = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.elapsed = 0;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis._isDisplay = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t */\r\n\tenter(text) {\r\n\t\tthis.text = String(text);\r\n\t\tthis.$outputText = null;\r\n\t\tthis.isDisplay = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tconst $displayDuration = this.displayDuration;\r\n\r\n\t\tif (this.elapsed > $displayDuration) {\r\n\t\t\tthis.isDisplay = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.elapsed += stamp;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {BaseSceneCharacter} chara\r\n\t */\r\n\tasync draw(renderer, chara) {\r\n\t\tif (this._isDisplay) {\r\n\t\t\tconst style = this.style || $gv.ChatBalloon_default_style;\r\n\r\n\t\t\t/** @type {ChatBalloon} */\r\n\t\t\tlet cb = ChatBalloon.cache[style];\r\n\t\t\tif (!cb) {\r\n\t\t\t\tcb = new ChatBalloon();\r\n\t\t\t\tawait cb.load(style);\r\n\t\t\t}\r\n\r\n\t\t\tconst $colon = this.colon;\r\n\t\t\tconst crr = chara.renderer;\r\n\t\t\tconst boundBox = crr._boundBox;\r\n\r\n\t\t\tif (!this.$outputText) {\r\n\t\t\t\tthis.$outputText = chara.id + $colon + this.text;\r\n\t\t\t}\r\n\t\t\tcb.draw(renderer, this.$outputText, crr.x, crr.y - boundBox.height);\r\n\t\t}\r\n\t}\r\n\r\n\tget isDisplay() {\r\n\t\treturn this._isDisplay;\r\n\t}\r\n\tset isDisplay(value) {\r\n\t\tthis._isDisplay = !!value;\r\n\t\tthis.elapsed = 0;\r\n\t}\r\n\r\n\t/** @type {\" : \"} */\r\n\tget colon() {\r\n\t\treturn \" : \";\r\n\t}\r\n\tget $maxLength() {\r\n\t\treturn 70;\r\n\t}\r\n\tget displayDuration() {\r\n\t\treturn $gv.ChatBalloon_display_duration;\r\n\t}\r\n}\r\n\r\n\r\nconst keyboard_map = [\r\n\t{\r\n\t\tArrowUp: new KeySlot(\"Action\", new ActionSlot(\"up\")),\r\n\t\tArrowLeft: new KeySlot(\"Action\", new ActionSlot(\"left\")),\r\n\t\tArrowDown: new KeySlot(\"Action\", new ActionSlot(\"down\")),\r\n\t\tArrowRight: new KeySlot(\"Action\", new ActionSlot(\"right\")),\r\n\t\t//z: new KeySlot(\"Action\", new ActionSlot(\"jump\")),\r\n\t\tz: new KeySlot(\"Skill\", new SkillSlot(\"23001002\")),//二段跳取代跳躍鍵\r\n\t\tx: new KeySlot(\"Skill\", new SkillSlot(\"1001005\")),\r\n\t\tc: new KeySlot(\"Skill\", new SkillSlot(\"64120000\")),\r\n\t\tv: new KeySlot(\"Skill\", new SkillSlot(\"23121000\")),//152001001\r\n\t},\r\n\t{//editor mode\r\n\t\tw: new KeySlot(\"Action\", new ActionSlot(\"up\")),\r\n\t\ta: new KeySlot(\"Action\", new ActionSlot(\"left\")),\r\n\t\ts: new KeySlot(\"Action\", new ActionSlot(\"down\")),\r\n\t\td: new KeySlot(\"Action\", new ActionSlot(\"right\")),\r\n\t\tq: new KeySlot(\"Action\", new ActionSlot(\"jump\")),\r\n\t\tf: new KeySlot(\"Skill\", new SkillSlot(\"23001002\")),//debug\r\n\t\tx: new KeySlot(\"Skill\", new SkillSlot(\"1001005\")),\r\n\t\tc: new KeySlot(\"Skill\", new SkillSlot(\"64120000\")),\r\n\t\tv: new KeySlot(\"Skill\", new SkillSlot(\"23121000\")),//152001001\r\n\t}\r\n];\r\n\r\n\r\nexport class BaseSceneCharacter extends SceneObject {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t///** @type {PPlayer} */\r\n\t\t//this.$physics = null;//new PPlayer();\r\n\r\n\t\t/** @type {CharacterRenderer} */\r\n\t\tthis.renderer = null;\r\n\r\n\t\tthis.$layer = 5;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.name = null;\r\n\r\n\t\tthis.stat = new CharacterStat();\r\n\r\n\t\t/** @type {Map<string,SceneSkill>} */\r\n\t\tthis.activeSkills = new Map();\r\n\r\n\t\t/** @type {ChatController} */\r\n\t\tthis.chatCtrl = new ChatController();\r\n\r\n\t\t/** @type {{move:$Packet_CharacterMove}} */\r\n\t\tthis.$inPacket = {};\r\n\t\tthis.$inPacket.move = null;\r\n\r\n\t\t/** @type {{move:$Packet_CharacterMove}} */\r\n\t\tthis.$outPacket = {};\r\n\t\tthis.$outPacket.move = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @alias name\r\n\t * @type {string}\r\n\t */\r\n\tget id() {\r\n\t\treturn this.name;\r\n\t}\r\n\tset id(value) {\r\n\t\tthis.name = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @alias name\r\n\t * @type {string}\r\n\t */\r\n\tget $objectid() {\r\n\t\treturn this.name;\r\n\t}\r\n\tset $objectid(value) {\r\n\t\tthis.name = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BaseSceneCharacter|null} chara - 被 chara 攻擊\r\n\t * @param {number} damage - 傷害\r\n\t */\r\n\tdamage(chara, damage) {\r\n\t\tconsole.log(\"Player(\" + this.$objectid + \") 被 \" + chara.$objectid + \" 攻擊，減少 \" + damage + \" HP\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BaseSceneCharacter|null} chara - 被 chara 攻擊\r\n\t * @param {number} moveX - unit is pixel\r\n\t * @param {number} moveY - unit is pixel\r\n\t */\r\n\tknockback(chara, moveX, moveY) {\r\n\t\tthis.$physics.knockback(moveX, moveY, 1000);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {$Packet_CharacterMove} move\r\n\t */\r\n\t$move(_move) {\r\n\t\tlet move = _move || this.$inPacket.move;\r\n\t\tthis.$inPacket.move = move;\r\n\t}\r\n\r\n\t_remote_control() {\r\n\t\tlet move = this.$inPacket.move;\r\n\r\n\t\tif (move && move.path && move.path.length) {\r\n\t\t\tconst crr = this.renderer;\r\n\t\t\tlet elem = move.path.shift();\r\n\r\n\t\t\tif (elem.isAwake) {\r\n\t\t\t\tthis.$physics.moveTo(elem);\r\n\t\t\t\tthis.$physics.state = elem.pState;//??\r\n\r\n\t\t\t\tcrr.front = elem.pState.front;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (elem.action) {\r\n\t\t\t\tcrr.action = elem.action;\r\n\t\t\t\t//crr.action_frame = elem.action_frame;\r\n\t\t\t}\r\n\t\t\tif (elem.emotion) {\r\n\t\t\t\tcrr.emotion = elem.emotion;\r\n\t\t\t\t//crr.emotion_frame = elem.emotion_frame;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} itemSN\r\n\t * @param {number} from\r\n\t * @param {number} to\r\n\t */\r\n\t$moveItem(equipId, from, to) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} skillId\r\n\t * @returns {SceneSkill]\r\n\t */\r\n\tinvokeSkill(skillId) {\r\n\t\tlet skill = new SceneSkill();\r\n\t\tskill.load(skillId, this);\r\n\t\tthis.activeSkills.set(skillId, skill);\r\n\t\treturn skill;\r\n\t}\r\n\r\n\t/**\r\n\t * after step, before rendering\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tconst renderer = this.renderer;\r\n\r\n\t\tthis.chatCtrl.update(stamp);\r\n\r\n\t\tthis.activeSkills.forEach(skill => {\r\n\t\t\tif (skill) {\r\n\t\t\t\tif (skill.isEnd()) {\r\n\t\t\t\t\tthis.activeSkills.delete(skill.skillId);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tskill.update(stamp, this);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//TODO: 結算攻擊傷害，skill.attackInfo\r\n\t\t\t\tthis._handleAttack();\r\n\r\n\t\t\t\t//clear all attack\r\n\t\t\t\tskill.attackInfo.allAttack.length = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._player_control();\r\n\r\n\t\tif ($gv.m_editor_mode) {\r\n\t\t\tif (renderer.speed > 0 && this.$physics && this.enablePhysics) {\r\n\t\t\t\tthis._applyState({\r\n\t\t\t\t\tfront: this.$physics.state.front,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.$physics) {\r\n\t\t\tthis._applyState(this.$physics.state);\r\n\t\t}\r\n\r\n\t\tif (this.$physics) {\r\n\t\t\tif (renderer && this.enablePhysics) {\r\n\t\t\t\tconst pos = this.$physics.getPosition();\r\n\t\t\t\tconst px = Math.trunc(pos.x * $gv.CANVAS_SCALE + 0.5);\r\n\t\t\t\tconst py = Math.trunc(pos.y * $gv.CANVAS_SCALE + 0.5);\r\n\r\n\t\t\t\t//position\r\n\t\t\t\trenderer.x = px;\r\n\t\t\t\trenderer.y = py;\r\n\t\t\t\t\r\n\t\t\t\t//rotate\r\n\t\t\t\tif (this.$physics.body.GetAngle() || this.$physics.body.GetAngularVelocity()) {\r\n\t\t\t\t\trenderer.angle = this.$physics.body.GetAngle();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.angle = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//layer\r\n\t\t\t\tthis.$layer = this.$physics.getLayer();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trenderer.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\t_$drawName(renderer) {\r\n\t\tconst name = this.id;\r\n\t\tthis.__drawName(renderer, name);\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\t_$drawChatBalloon(renderer) {\r\n\t\tthis.chatCtrl.draw(renderer, this);//this.chatText || \"123451234512345123451234512345123451234512345123451234512345123451234512345123451234\", 84\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\t_player_control() {\r\n\t}\r\n\r\n\t/**\r\n\t * 'character physics state' to 'character renderer state'\r\n\t * @param {PPlayerState} player_state\r\n\t */\r\n\t_applyState(player_state) {\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst pState = this.$physics.state;\r\n\r\n\t\t// renderer: apply default action\r\n\t\tif (!pState.invokeSkill) {\r\n\t\t\tconst { front, jump, walk, prone, fly, ladder } = player_state;\r\n\t\t\tconst enablePhysics = chara.enablePhysics;\r\n\r\n\t\t\tif (front != null) {\r\n\t\t\t\trenderer.front = front;\r\n\t\t\t}\r\n\r\n\t\t\tif (ladder) {\r\n\t\t\t\tif (enablePhysics && this.$physics.ladder) {\r\n\t\t\t\t\tif (this.$physics.ladder.isLadder()) {\r\n\t\t\t\t\t\trenderer.action = \"ladder\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\trenderer.action = \"rope\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (pState.ladder_move_dir) {\r\n\t\t\t\t\t\tif (chara.renderer.actani.isEnd()) {\r\n\t\t\t\t\t\t\tchara.renderer.actani.reset();\r\n\t\t\t\t\t\t\trenderer.actani.loop = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\trenderer.actani._is_end = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (jump) {\r\n\t\t\t\trenderer.action = \"jump\";\r\n\t\t\t\trenderer.actani.loop = false;\r\n\t\t\t}\r\n\t\t\telse if (walk) {\r\n\t\t\t\trenderer.action = \"walk1\";\r\n\t\t\t\trenderer.actani.loop = true;\r\n\t\t\t}\r\n\t\t\telse if (prone) {\r\n\t\t\t\trenderer.action = \"prone\";\r\n\t\t\t\trenderer.actani.loop = false;\r\n\t\t\t}\r\n\t\t\telse if (fly) {\r\n\t\t\t\trenderer.action = \"fly\";\r\n\t\t\t\trenderer.actani.loop = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.action = \"stand1\";\r\n\t\t\t\trenderer.actani.loop = true;\r\n\t\t\t}\r\n\r\n\t\t\t//TODO: keyboard: emotion key\r\n\t\t\tfor (let i = 0; i <= 9; ++i) {\r\n\t\t\t\tif ($gv.input_keyDown[i]) {\r\n\t\t\t\t\tlet a = [\r\n\t\t\t\t\t\t\"blink\", \"hit\", \"smile\",\r\n\t\t\t\t\t\t\"troubled\", \"cry\", \"angry\",\r\n\t\t\t\t\t\t\"bewildered\", \"stunned\", \"vomit\",\r\n\t\t\t\t\t\t\"oops\"\r\n\t\t\t\t\t];\r\n\t\t\t\t\tlet e = a[i % a.length];\r\n\t\t\t\t\trenderer.emotion = e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 結算攻擊傷害\r\n\t */\r\n\t_handleAttack() {\r\n\t\tif (window.$io) {\r\n\t\t\tthrow new Error(\"未完成\");\r\n\r\n\t\t\tlet attackInfoList = [];\r\n\r\n\t\t\tthis.activeSkills.forEach(skill => {\r\n\t\t\t\tattackInfoList.push(skill.attackInfo);\r\n\t\t\t});\r\n\r\n\t\t\twindow.$io\r\n\t\t\t\t.emit(\"attack\", {\r\n\t\t\t\t\t//TODO: online mode: packet_attack\r\n\t\t\t\t\tattack: attackInfoList\r\n\t\t\t\t})\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t//TODO: online mode: attack ??\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.activeSkills.forEach(skill => {\r\n\t\t\t\tconst attackInfo = skill.attackInfo;\r\n\r\n\t\t\t\tfor (let i = 0; i < attackInfo.allAttack.length; ++i) {\r\n\t\t\t\t\tconst attack = attackInfo.allAttack[i];\r\n\r\n\t\t\t\t\tconst targetObject = attack.getTargetObject();\r\n\r\n\t\t\t\t\tfor (let j = 0; j < attack.allDamage.length; ++j) {\r\n\t\t\t\t\t\tlet damVar = this.stat.getCurrentMaxBaseDamage() - this.stat.getCurrentMinBaseDamage();\r\n\t\t\t\t\t\tlet realDamage = this.stat.getCurrentMinBaseDamage() + Math.random() * damVar;\r\n\t\t\t\t\t\tlet damage = attack.allDamage[j] = new DamagePair();\r\n\t\t\t\t\t\tlet style;\r\n\r\n\t\t\t\t\t\tif (Math.trunc(Math.random() * 100) < this.stat.critRate) {\r\n\t\t\t\t\t\t\trealDamage = realDamage * (1 + this.stat.critDamage / 100);\r\n\t\t\t\t\t\t\tdamage.critical = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\trealDamage = Math.trunc(realDamage);\r\n\t\t\t\t\t\tdamage.realDamage = realDamage;\r\n\r\n\t\t\t\t\t\ttargetObject.damage(this, realDamage);\r\n\r\n\t\t\t\t\t\tif (damage.critical) {\r\n\t\t\t\t\t\t\tstyle = \"NoCri\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tstyle = \"NoRed\";\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//TODO: ?? target position\r\n\t\t\t\t\t\tdamageNumberLayer.addDamagePair(this.m_damageSkin || \"default\", style, damage, targetObject.x + (attack.allDamage.length > 1 ? (25 - (1 - j & 1) * 25) : 0), targetObject.y, j * 100);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//\r\n\t\t\t\t\ttargetObject.knockback(this, 16, 16);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * client player\r\n */\r\nexport class SceneCharacter extends BaseSceneCharacter {\r\n\t/**\r\n\t * @param {SceneMap} scene\r\n\t */\r\n\tconstructor(scene) {\r\n\t\tsuper();\r\n\r\n\t\t/** @type {CharacterRenderer} */\r\n\t\tthis.renderer = new CharacterRenderer();\r\n\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis.$physics = scene.controller.$createPlayer(this, this.renderer);//new PPlayer();\r\n\r\n\t\tthis.$layer = 5;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.id = null;\r\n\r\n\t\t/** @type {ItemSlot[][]} - item inventory */\r\n\t\tthis.items = new Array(5);\r\n\t\tfor (let i = 0; i < 5; ++i) {\r\n\t\t\tthis.items[i] = new Array(128);\r\n\t\t\tfor (let j = 0; j < 128; ++j) {\r\n\t\t\t\tthis.items[i][j] = new ItemSlot(j, null, null, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//this.addItem(\"01005177\", 1);\r\n\t\t//this.addItem(\"01053322\", 1);\r\n\t\t//this.addItem(\"01073284\", 1);\r\n\r\n\t\tthis.stat.onJobChange(this._onJobChange.bind(this));\r\n\t}\r\n\r\n\t_onJobChange() {\r\n\t\t//TODO: register buf, debuf, autofire skill\r\n\t\t//TODO: 二段跳取代跳躍鍵\r\n\t\tconst newJob = this.stat.job;\r\n\r\n\t\tconsole.log(\"Player(\" + this.$objectid + \") change job: \" + newJob);\r\n\t}\r\n\r\n\t/**\r\n\t * 'character physics state' to 'character renderer state'\r\n\t * @param {PPlayerState} player_state\r\n\t */\r\n\t_applyState(player_state) {\r\n\t\tsuper._applyState(player_state);\r\n\r\n\t\tthis.$recMove();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_player_control() {\r\n\t\tif (!this.$physics) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//if (!this.$physics.state.jump && this.$$jump_state) {\r\n\t\t//\tdelete this.$$jump_state;\r\n\t\t//}\r\n\t\tconst key_map = keyboard_map[$gv.m_editor_mode ? 1 : 0];\r\n\t\t/** @type {{[key:string]:number}} */\r\n\t\tlet ikey = {};\r\n\r\n\t\tlet can_use_skill = this.activeSkills.size == 0;//TODO: 以查表法檢查不同技能是否可以同時使用\r\n\r\n\t\tfor (let keyName in key_map) {\r\n\t\t\t/** @type {KeySlot} */\r\n\t\t\tconst keySlot = key_map[keyName];\r\n\t\t\tif (!keySlot) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst keyDown = $gv.input_keyDown[keyName];\r\n\t\t\tconst keyUp = $gv.input_keyUp[keyName];\r\n\r\n\t\t\tswitch (keySlot.type) {\r\n\t\t\t\tcase \"Command\"://open or close UI, ...\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Action\":\r\n\t\t\t\t\tif (keyDown) {\r\n\t\t\t\t\t\t/** @type {ActionSlot} */\r\n\t\t\t\t\t\tconst ck = keySlot.data;\r\n\t\t\t\t\t\tikey[ck.action] = keyDown;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Item\":\r\n\t\t\t\t\tif (keyDown) {\r\n\t\t\t\t\t\t/** @type {ItemSlot} */\r\n\t\t\t\t\t\tconst itemSlot = keySlot.data;\r\n\t\t\t\t\t\tthis.useItem(itemSlot.data.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\tfor (let keyName in key_map) {\r\n\t\t\t/** @type {KeySlot} */\r\n\t\t\tconst keySlot = key_map[keyName];\r\n\t\t\tif (!keySlot) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst keyDown = $gv.input_keyDown[keyName];\r\n\t\t\tconst keyUp = $gv.input_keyUp[keyName];\r\n\r\n\t\t\tif (keySlot.type == \"Skill\") {\r\n\t\t\t\t/** @type {SkillSlot} */\r\n\t\t\t\tconst sk = keySlot.data;\r\n\t\t\t\tconst skill_id = sk.skill_id;\r\n\t\t\t\tlet skill = this.activeSkills.get(skill_id);\r\n\t\t\t\tif (keyDown && can_use_skill) {\r\n\t\t\t\t\tskill = this.invokeSkill(sk.skill_id);\r\n\t\t\t\t}\r\n\t\t\t\tif (skill) {\r\n\t\t\t\t\tskill.control(ikey, keyDown, keyUp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.$physics.control(ikey);//apply action control\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} itemId\r\n\t * @param {number} amount\r\n\t */\r\n\taddItem(itemId, amount) {\r\n\t\tif (window.$io) {//TODO: online mode: addItem\r\n\t\t\tthrow new Error(\"未完成\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\t/** @type {Partial<ItemEquip>} */\r\n\t\t\tlet props = {//test attr\r\n\t\t\t\tincDEXr: Math.trunc(Math.random() * 3),\r\n\t\t\t\ttimeLimited: Date(),\r\n\t\t\t};\r\n\r\n\t\t\t$createItem(itemId, props).then(item => {\r\n\t\t\t\tthis._addItem(item, amount);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {T extends ItemBase ? T : never} itemData\r\n\t * @param {number} amount\r\n\t */\r\n\t_addItem(itemData, amount) {\r\n\t\tlet SN = 123;\r\n\t\tlet itemId = itemData.id;\r\n\t\tlet slotType;\r\n\t\tswitch (itemId[0]) {\r\n\t\t\tcase '0':\r\n\t\t\t\tslotType = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.info(`~give ${this.id}: ${itemId} * ${amount}`);\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (let i = 0; i < this.items[slotType].length; ++i) {\r\n\t\t\tif (this.items[slotType][i].isEmpty()) {\r\n\t\t\t\tif (window.$addItem_repeatEquip) {\r\n\t\t\t\t\tthis.items[slotType][i].assign(i, SN, itemData, slotType ? amount : 1);\r\n\t\t\t\t\tconsole.info(`give ${this.id}: ${itemId} * ${amount}`);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (slotType == 0) {\r\n\t\t\t\t\t\tthis.items[slotType][i].assign(i, SN, itemData, 1);\r\n\t\t\t\t\t\tamount--;\r\n\t\t\t\t\t\tif (amount == 0) {\r\n\t\t\t\t\t\t\tconsole.info(`repeat give ${this.id}: ${itemId}`);\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.items[slotType][i].assign(i, SN, itemData, amount);\r\n\t\t\t\t\t\tconsole.info(`give ${this.id}: ${itemId} * ${amount}`);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;//item inventory was full\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} type - item type\r\n\t * @param {number} slot\r\n\t */\r\n\tasync removeItem(type, slot) {\r\n\t\tif (window.$io) {//TODO: online mode: removeItem\r\n\t\t\tthrow new Error(\"未完成\");\r\n\r\n\t\t\tlet result = await window.$io.emit(\"removeItem\", {\r\n\t\t\t\ttype: type,\r\n\t\t\t\tslot: slot,\r\n\t\t\t});\r\n\t\t\tif (result) {\r\n\t\t\t\tthis._removeItem(type, slot);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._removeItem(type, slot);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} type - item type\r\n\t * @param {number} slot\r\n\t */\r\n\t_removeItem(type, slot) {\r\n\t\tthis.items[type][slot]._clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} from\r\n\t * @param {number} to\r\n\t */\r\n\tmoveItemToSlot(from, to) {\r\n\t\t//TODO: (\"./ui/Basic/UISlotItem.vue\").methods.drop\r\n\t\tdebugger;\r\n\t}\r\n\r\n\t///**\r\n\t// * @param {any} id\r\n\t// */\r\n\t//$getItem(id) {\r\n\t//\tthis.itemSlot\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {number} itemId\r\n\t */\r\n\tfindItem(itemId) {\r\n\t\tfor (let i = 0; i < this.items.length; ++i) {\r\n\t\t\tfor (let j = 0; j < this.items[i].length; ++j) {\r\n\t\t\t\tlet itemSlot = this.items[i][j];\r\n\r\n\t\t\t\tif (itemSlot && itemSlot.data && (itemSlot.data.id == itemId)) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttypeName: ItemCategoryInfo.typeName[i],\r\n\t\t\t\t\t\titemSlot: itemSlot,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttypeName: null,\r\n\t\t\titemSlot: null,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} itemId\r\n\t */\r\n\tuseItem(itemId) {\r\n\t\tif (window.$io) {\r\n\t\t\twindow.$io.emit(\"useItem\", {\r\n\t\t\t\titemId: itemId\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst args = arguments;\r\n\t\t\tlet existItem = this.findItem(itemId).itemSlot;\r\n\r\n\t\t\tif (existItem) {\r\n\t\t\t\tif (!$gv.m_editor_mode) {\r\n\t\t\t\t\tconsole.log(`消耗道具：${itemId}。未完成`);\r\n\t\t\t\t\tthis._consume(itemId, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(`使用道具：${itemId}。`);\r\n\t\t\t\t}\r\n\t\t\t\tupdate_renderer.call(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ($gv.m_editor_mode) {\r\n\t\t\t\t\tthis.addItem(itemId, 1);\r\n\t\t\t\t\tupdate_renderer.call(this);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"無法使用不存在的道具。\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction update_renderer() {\r\n\t\t\t\t//TODO: implement job\r\n\t\t\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\t\t\tconst category = args[1], equipInfo = args[2];\r\n\t\t\t\t\tthis.renderer.use(itemId, category, equipInfo);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.renderer.use(itemId);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t * @returns {Promise<boolean>}\r\n\t */\r\n\tasync say(text) {\r\n\t\tif (window.$io) {\r\n\t\t\tlet result = await window.$io.emit(\"chat\", {\r\n\t\t\t\t$style: this.chatCtrl.style,\r\n\t\t\t\ttext: text,\r\n\t\t\t});\r\n\t\t\tif (result) {\r\n\t\t\t\tthis.chatCtrl.enter(text);\r\n\t\t\t}\r\n\t\t\treturn result;//boolean\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chatCtrl.enter(text);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t$emit(socket) {\r\n\t\tif (this.$outPacket.move) {\r\n\t\t\tsocket.emit(\"charaMove\", this.$outPacket.move);\r\n\t\t\tthis.$outPacket.move = null;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet charaMove = new $Packet_CharacterMove();\r\n\r\n\t\t\tcharaMove.capture(this);\r\n\r\n\t\t\tsocket.emit(\"charaMove\", charaMove);\r\n\t\t}\r\n\r\n\t\tthis.$outPacket.move = null;\r\n\t}\r\n\t\r\n\t$recMove() {\r\n\t\tlet move = this.$outPacket.move || new $Packet_CharacterMove();\r\n\t\tmove.capture(this);\r\n\t\tthis.$outPacket.move = move;\r\n\t}\r\n}\r\n\r\n/**\r\n * remote player\r\n */\r\nexport class SceneRemoteCharacter extends BaseSceneCharacter {\r\n\t/**\r\n\t * @param {SceneMap} scene\r\n\t */\r\n\tconstructor(scene) {\r\n\t\tsuper();\r\n\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tdelete this.$physics;\r\n\t\t\tObject.defineProperty(this, \"$physics\", {\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tconfigurable: false,\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn this.$$physics;\r\n\t\t\t\t},\r\n\t\t\t\tset: function (value) {\r\n\t\t\t\t\tif (value == null) {\r\n\t\t\t\t\t\tconsole.error(\"can not set SceneRemoteCharacter.$physics = null;\");\r\n\t\t\t\t\t\talert(\"can not set SceneRemoteCharacter.$physics = null;\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.$$physics = value;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tdelete this.renderer;\r\n\t\t\tObject.defineProperty(this, \"renderer\", {\r\n\t\t\t\tenumerable: false,\r\n\t\t\t\tconfigurable: false,\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn this.$$renderer;\r\n\t\t\t\t},\r\n\t\t\t\tset: function (value) {\r\n\t\t\t\t\tif (value == null) {\r\n\t\t\t\t\t\tconsole.error(\"can not set SceneRemoteCharacter.renderer = null;\");\r\n\t\t\t\t\t\talert(\"can not set SceneRemoteCharacter.renderer = null;\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.$$renderer = value;\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/** @type {CharacterRenderer} */\r\n\t\tthis.renderer = new CharacterRenderer();\r\n\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis.$physics = scene.controller.$createPlayer(this, this.renderer);\r\n\t}\r\n\r\n\tget $remote() {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_player_control() {\r\n\t\tthis._remote_control();\r\n\t}\r\n}\r\n\r\n","﻿\r\nimport { PPlayerState } from \"../game/Physics/PPlayer.js\";//debug\r\n\r\n\r\nexport class BaseMoveElem {\r\n\tconstructor() {\r\n\t\t/** @type {number} */\r\n\t\tthis.x = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.y = null;\r\n\r\n\t\t/** @type {number} - linear velocity x */\r\n\t\tthis.vx = undefined;\r\n\r\n\t\t/** @type {number} - linear velocity y */\r\n\t\tthis.vy = undefined;\r\n\r\n\t\t/** @type {number} - force x */\r\n\t\tthis.fx = undefined;\r\n\r\n\t\t/** @type {number} - force y */\r\n\t\tthis.fy = undefined;\r\n\r\n\t\t/** @type {PPlayerState} - player physics state */\r\n\t\tthis.pState = null;\r\n\r\n\t\t/** @type {number} - time elapsed */\r\n\t\tthis.elapsed = 0;\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis.isAwake = undefined;// value = ?\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.action = undefined;\r\n\t\t/** @type {number} */\r\n\t\tthis.action_frame = undefined;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.emotion = undefined;\r\n\t\t/** @type {number} */\r\n\t\tthis.emotion_frame = undefined;\r\n\t}\r\n}\r\n\r\nexport class CharacterMoveElem extends BaseMoveElem {\r\n}\r\n\r\nexport class MobMoveElem extends BaseMoveElem {\r\n}\r\n\r\n","﻿\r\nimport { Sprite } from \"../Sprite.js\";\r\nimport { Animation } from \"../Animation.js\";\r\n\r\n\r\nexport class LifeRenderer /*extends SceneObject*/ {\r\n\tconstructor() {\r\n\t\t//super();\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._url = \"\";\r\n\t\t\r\n\t\t/** @type {string} */\r\n\t\tthis.id = null;\r\n\r\n\t\t/** @type {{[action:string]:Animation}} */\r\n\t\tthis.actions = {};\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._action = \"stand\";//static default\r\n\t\t\r\n\t\tthis._raw = null;\r\n\t}\r\n\t\r\n\tget name() {\r\n\t\treturn this.constructor._desc[this.id].name;\r\n\t}\r\n\t\r\n\tgetDefaultAction() {\r\n\t\tif (this.actions.stand) {\r\n\t\t\treturn \"stand\";\r\n\t\t}\r\n\t\telse if(this.actions.fly) {\r\n\t\t\treturn \"fly\";\r\n\t\t}\r\n\t\talert(this.constructor.name + \" (\" + this.id + \") default must is 'stand' or 'fly'\");\r\n\t\treturn new Error(this.constructor.name + \" (\" + this.id + \") default must is 'stand' or 'fly'\");\r\n\t}\r\n\t\r\n\t/** @type {string} */\r\n\tget action() {\r\n\t\treturn this._action;\r\n\t}\r\n\tset action(act) {\r\n\t\tif (this._action != act) {\r\n\t\t\tthis._action = act;\r\n\t\t\tif (this.actions[act]) {\r\n\t\t\t\tthis.actions[act].reset();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t///**\r\n\t// * @param {string} act\r\n\t// */\r\n\t//setAction(act) {\r\n\t//\tthrow new Error(\"Not implement\");\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t */\r\n\tasync load(id) {\r\n\t\tlet tasks = [];\r\n\t\tlet that = this;\r\n\t\tthis.id = id;//\"8880140\";//\"8880141\";//\"8880150\";//\"8880151\";\r\n\t\tthis._url = [this.constructor._base_path, this.id].join(\"/\");\r\n\t\t\r\n\t\tif (!this.constructor._desc[id]) {\r\n\t\t\tlet task = this.constructor.loadDescription(id);\r\n\t\t\ttasks.push(task);\r\n\t\t}\r\n\r\n\t\tlet task = $get.data(this._url).then(async function (raw) {\r\n\t\t\tthat._raw = raw;\r\n\t\t\tif (that._raw) {\r\n\t\t\t\tawait that._construct_actions();\r\n\t\t\t\t\r\n\t\t\t\tthat._action = that.getDefaultAction();//set default action; is fly mob ?\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t});\r\n\t\ttasks.push(task);\r\n\r\n\t\treturn Promise.all(tasks);\r\n\t}\r\n\tasync _construct_actions() {\r\n\t\tvar tasks = [];\r\n\r\n\t\tfor (var i = 0; i < this.constructor._animations.length; ++i) {\r\n\t\t\tvar t = this.constructor._animations[i];\r\n\r\n\t\t\tfor (var $index = 1; ; ++$index) {\r\n\t\t\t\tlet action;\r\n\t\t\t\tvar name = eval(t);\r\n\r\n\t\t\t\tif (!(name in this._raw)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\taction = new Animation(this._raw[name], [this._url, name].join(\"/\"));\r\n\t\t\t\taction.is_loop = false;\r\n\t\t\t\t\r\n\t\t\t\ttasks.push(action.load());\r\n\t\t\t\t\r\n\t\t\t\tthis.actions[name] = action;\r\n\r\n\t\t\t\tif (!name.endsWith($index)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tawait Promise.all(tasks);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.actions[this.action]) {\r\n\t\t\tconst ani = this.actions[this.action];\r\n\t\t\t\r\n\t\t\tani.update(stamp);\r\n\t\t\t\t\r\n\t\t\t//TODO: move this code to: MapLifeEntity.prototype._applyState\r\n\t\t\t//if (ani.isEnd()) {\r\n\t\t\t//\tthis.action = this.getDefaultAction();//default loop action: stand\r\n\t\t\t//\tthis.actions[this.action].update(stamp);\r\n\t\t\t//}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * paint\r\n\t * @param {Engine} engine\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {number} angle\r\n\t * @param {boolean} flip\r\n\t */\r\n\tdraw(engine, x, y, angle, flip) {\r\n\t\tif (this.actions[this.action]) {\r\n\t\t\t/** @type {Animation} */\r\n\t\t\tconst act = this.actions[this.action];\r\n\t\t\tact.draw(engine, x, y, angle, flip);\r\n\t\t}\r\n\t}\r\n\tpaint(engine) {\r\n\t\tdebugger;\r\n\t\talert(\"Not Implement\");\r\n\t\trender(engine);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} id\r\n\t */\r\n\tstatic async loadDescription(id) {\r\n\t\talert(\"Not Implement\");\r\n\t}\r\n\r\n\tstatic get _animations() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\t\r\n\tstatic _get_desc_base_path() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\r\n\tstatic get _base_path() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n}\r\n","/*\r\n* Copyright (c) 2011 Erin Catto http://box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/// Color for debug drawing. Each value has the range [0,1].\r\nexport class b2Color {\r\n    constructor(rr = 0.5, gg = 0.5, bb = 0.5, aa = 1.0) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        this.a = aa;\r\n    }\r\n    Clone() {\r\n        return new b2Color().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.r = other.r;\r\n        this.g = other.g;\r\n        this.b = other.b;\r\n        this.a = other.a;\r\n        return this;\r\n    }\r\n    IsEqual(color) {\r\n        return (this.r === color.r) && (this.g === color.g) && (this.b === color.b) && (this.a === color.a);\r\n    }\r\n    IsZero() {\r\n        return (this.r === 0) && (this.g === 0) && (this.b === 0) && (this.a === 0);\r\n    }\r\n    GetColor(out) {\r\n        out.Copy(this);\r\n        return out;\r\n    }\r\n    SetColor(color) {\r\n        this.Copy(color);\r\n    }\r\n    Set(a0, a1, a2, a3 = 1.0) {\r\n        if (a0 instanceof b2Color) {\r\n            this.Copy(a0);\r\n        }\r\n        else {\r\n            this.SetRGBA(a0, a1, a2, a3);\r\n        }\r\n    }\r\n    SetByteRGB(r, g, b) {\r\n        this.r = r / 0xff;\r\n        this.g = g / 0xff;\r\n        this.b = b / 0xff;\r\n        return this;\r\n    }\r\n    SetByteRGBA(r, g, b, a) {\r\n        this.r = r / 0xff;\r\n        this.g = g / 0xff;\r\n        this.b = b / 0xff;\r\n        this.a = a / 0xff;\r\n        return this;\r\n    }\r\n    SetRGB(rr, gg, bb) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        return this;\r\n    }\r\n    SetRGBA(rr, gg, bb, aa) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        this.a = aa;\r\n        return this;\r\n    }\r\n    SelfAdd(color) {\r\n        this.r += color.r;\r\n        this.g += color.g;\r\n        this.b += color.b;\r\n        this.a += color.a;\r\n        return this;\r\n    }\r\n    Add(color, out) {\r\n        out.r = this.r + color.r;\r\n        out.g = this.g + color.g;\r\n        out.b = this.b + color.b;\r\n        out.a = this.a + color.a;\r\n        return out;\r\n    }\r\n    SelfSub(color) {\r\n        this.r -= color.r;\r\n        this.g -= color.g;\r\n        this.b -= color.b;\r\n        this.a -= color.a;\r\n        return this;\r\n    }\r\n    Sub(color, out) {\r\n        out.r = this.r - color.r;\r\n        out.g = this.g - color.g;\r\n        out.b = this.b - color.b;\r\n        out.a = this.a - color.a;\r\n        return out;\r\n    }\r\n    SelfMul_0_1(s) {\r\n        this.r *= s;\r\n        this.g *= s;\r\n        this.b *= s;\r\n        this.a *= s;\r\n        return this;\r\n    }\r\n    Mul_0_1(s, out) {\r\n        out.r = this.r * s;\r\n        out.g = this.g * s;\r\n        out.b = this.b * s;\r\n        out.a = this.a * s;\r\n        return this;\r\n    }\r\n    Mix(mixColor, strength) {\r\n        b2Color.MixColors(this, mixColor, strength);\r\n    }\r\n    static MixColors(colorA, colorB, strength) {\r\n        const dr = (strength * (colorB.r - colorA.r));\r\n        const dg = (strength * (colorB.g - colorA.g));\r\n        const db = (strength * (colorB.b - colorA.b));\r\n        const da = (strength * (colorB.a - colorA.a));\r\n        colorA.r += dr;\r\n        colorA.g += dg;\r\n        colorA.b += db;\r\n        colorA.a += da;\r\n        colorB.r -= dr;\r\n        colorB.g -= dg;\r\n        colorB.b -= db;\r\n        colorB.a -= da;\r\n    }\r\n    MakeStyleString(alpha = this.a) {\r\n        return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);\r\n    }\r\n    static MakeStyleString(r, g, b, a = 1.0) {\r\n        // function clamp(x: number, lo: number, hi: number) { return x < lo ? lo : hi < x ? hi : x; }\r\n        r *= 255; // r = clamp(r, 0, 255);\r\n        g *= 255; // g = clamp(g, 0, 255);\r\n        b *= 255; // b = clamp(b, 0, 255);\r\n        // a = clamp(a, 0, 1);\r\n        if (a < 1) {\r\n            return `rgba(${r},${g},${b},${a})`;\r\n        }\r\n        else {\r\n            return `rgb(${r},${g},${b})`;\r\n        }\r\n    }\r\n}\r\nb2Color.RED = new b2Color(1, 0, 0);\r\nb2Color.GREEN = new b2Color(0, 1, 0);\r\nb2Color.BLUE = new b2Color(0, 0, 1);\r\nexport var b2DrawFlags;\r\n(function (b2DrawFlags) {\r\n    b2DrawFlags[b2DrawFlags[\"e_none\"] = 0] = \"e_none\";\r\n    b2DrawFlags[b2DrawFlags[\"e_shapeBit\"] = 1] = \"e_shapeBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_jointBit\"] = 2] = \"e_jointBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_aabbBit\"] = 4] = \"e_aabbBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_pairBit\"] = 8] = \"e_pairBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_centerOfMassBit\"] = 16] = \"e_centerOfMassBit\";\r\n    // #if B2_ENABLE_PARTICLE\r\n    b2DrawFlags[b2DrawFlags[\"e_particleBit\"] = 32] = \"e_particleBit\";\r\n    // #endif\r\n    b2DrawFlags[b2DrawFlags[\"e_controllerBit\"] = 64] = \"e_controllerBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_all\"] = 63] = \"e_all\";\r\n})(b2DrawFlags || (b2DrawFlags = {}));\r\n/// Implement and register this class with a b2World to provide debug drawing of physics\r\n/// entities in your game.\r\nexport class b2Draw {\r\n    constructor() {\r\n        this.m_drawFlags = 0;\r\n    }\r\n    SetFlags(flags) {\r\n        this.m_drawFlags = flags;\r\n    }\r\n    GetFlags() {\r\n        return this.m_drawFlags;\r\n    }\r\n    AppendFlags(flags) {\r\n        this.m_drawFlags |= flags;\r\n    }\r\n    ClearFlags(flags) {\r\n        this.m_drawFlags &= ~flags;\r\n    }\r\n    PushTransform(xf) { }\r\n    PopTransform(xf) { }\r\n    DrawPolygon(vertices, vertexCount, color) { }\r\n    DrawSolidPolygon(vertices, vertexCount, color) { }\r\n    DrawCircle(center, radius, color) { }\r\n    DrawSolidCircle(center, radius, axis, color) { }\r\n    // #if B2_ENABLE_PARTICLE\r\n    DrawParticles(centers, radius, colors, count) { }\r\n    // #endif\r\n    DrawSegment(p1, p2, color) { }\r\n    DrawTransform(xf) { }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2011 Erin Catto http://box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/// Timer for profiling. This has platform specific code and may\r\n/// not work on every platform.\r\nexport class b2Timer {\r\n    constructor() {\r\n        this.m_start = Date.now();\r\n    }\r\n    /// Reset the timer.\r\n    Reset() {\r\n        this.m_start = Date.now();\r\n        return this;\r\n    }\r\n    /// Get the time since construction or the last reset.\r\n    GetMilliseconds() {\r\n        return Date.now() - this.m_start;\r\n    }\r\n}\r\nexport class b2Counter {\r\n    constructor() {\r\n        this.m_count = 0;\r\n        this.m_min_count = 0;\r\n        this.m_max_count = 0;\r\n    }\r\n    GetCount() {\r\n        return this.m_count;\r\n    }\r\n    GetMinCount() {\r\n        return this.m_min_count;\r\n    }\r\n    GetMaxCount() {\r\n        return this.m_max_count;\r\n    }\r\n    ResetCount() {\r\n        const count = this.m_count;\r\n        this.m_count = 0;\r\n        return count;\r\n    }\r\n    ResetMinCount() {\r\n        this.m_min_count = 0;\r\n    }\r\n    ResetMaxCount() {\r\n        this.m_max_count = 0;\r\n    }\r\n    Increment() {\r\n        this.m_count++;\r\n        if (this.m_max_count < this.m_count) {\r\n            this.m_max_count = this.m_count;\r\n        }\r\n    }\r\n    Decrement() {\r\n        this.m_count--;\r\n        if (this.m_min_count > this.m_count) {\r\n            this.m_min_count = this.m_count;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJUaW1lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbW1vbi9iMlRpbWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsZ0VBQWdFO0FBQ2hFLCtCQUErQjtBQUMvQixNQUFNO0lBQU47UUFDUyxZQUFPLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBWXRDLENBQUM7SUFWQyxvQkFBb0I7SUFDYixLQUFLO1FBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsc0RBQXNEO0lBQy9DLGVBQWU7UUFDcEIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNO0lBQU47UUFDUyxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBQ3BCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO0lBMkNqQyxDQUFDO0lBekNRLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVNLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sVUFBVTtRQUNmLE1BQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU0sYUFBYTtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sYUFBYTtRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sU0FBUztRQUNkLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVmLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNqQztJQUNILENBQUM7SUFFTSxTQUFTO1FBQ2QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWYsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/// This is a growable LIFO stack with an initial capacity of N.\r\n/// If the stack size exceeds the initial capacity, the heap is used\r\n/// to increase the size of the stack.\r\nexport class b2GrowableStack {\r\n    constructor(N) {\r\n        this.m_stack = [];\r\n        this.m_count = 0;\r\n        this.m_stack = [ /*N*/];\r\n        this.m_count = 0;\r\n    }\r\n    Reset() {\r\n        this.m_count = 0;\r\n        return this;\r\n    }\r\n    Push(element) {\r\n        this.m_stack[this.m_count] = element;\r\n        this.m_count++;\r\n    }\r\n    Pop() {\r\n        ///b2Assert(this.m_count > 0);\r\n        this.m_count--;\r\n        const element = this.m_stack[this.m_count];\r\n        this.m_stack[this.m_count] = null;\r\n        return element;\r\n    }\r\n    GetCount() {\r\n        return this.m_count;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJHcm93YWJsZVN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvQ29tbW9uL2IyR3Jvd2FibGVTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLGdFQUFnRTtBQUNoRSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE1BQU07SUFJSixZQUFZLENBQVM7UUFIZCxZQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2xCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFHekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFTSxLQUFLO1FBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQVU7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sR0FBRztRQUNSLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZixNQUFNLE9BQU8sR0FBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport class b2BlockAllocator {\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCbG9ja0FsbG9jYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbW1vbi9iMkJsb2NrQWxsb2NhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTTtDQUEwQiJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport class b2StackAllocator {\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTdGFja0FsbG9jYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbW1vbi9iMlN0YWNrQWxsb2NhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTTtDQUEwQiJ9","/*\r\n* Copyright (c) 2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_aabbExtension, b2_aabbMultiplier } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2GrowableStack } from \"../Common/b2GrowableStack\";\r\nimport { b2AABB, b2RayCastInput, b2TestOverlapAABB } from \"./b2Collision\";\r\nfunction verify(value) {\r\n    if (value === null) {\r\n        throw new Error();\r\n    }\r\n    return value;\r\n}\r\n/// A node in the dynamic tree. The client does not interact with this directly.\r\nexport class b2TreeNode {\r\n    constructor(id = 0) {\r\n        this.m_id = 0;\r\n        this.aabb = new b2AABB();\r\n        this.userData = null;\r\n        this.parent = null; // or next\r\n        this.child1 = null;\r\n        this.child2 = null;\r\n        this.height = 0; // leaf = 0, free node = -1\r\n        this.m_id = id;\r\n    }\r\n    IsLeaf() {\r\n        return this.child1 === null;\r\n    }\r\n}\r\nexport class b2DynamicTree {\r\n    constructor() {\r\n        this.m_root = null;\r\n        // b2TreeNode* public m_nodes;\r\n        // int32 public m_nodeCount;\r\n        // int32 public m_nodeCapacity;\r\n        this.m_freeList = null;\r\n        this.m_path = 0;\r\n        this.m_insertionCount = 0;\r\n    }\r\n    GetUserData(proxy) {\r\n        ///b2Assert(proxy !== null);\r\n        return proxy.userData;\r\n    }\r\n    GetFatAABB(proxy) {\r\n        ///b2Assert(proxy !== null);\r\n        return proxy.aabb;\r\n    }\r\n    Query(callback, aabb) {\r\n        if (this.m_root === null)\r\n            return;\r\n        const stack = b2DynamicTree.s_stack.Reset();\r\n        stack.Push(this.m_root);\r\n        while (stack.GetCount() > 0) {\r\n            const node = stack.Pop();\r\n            if (node === null) {\r\n                continue;\r\n            }\r\n            if (node.aabb.TestOverlap(aabb)) {\r\n                if (node.IsLeaf()) {\r\n                    const proceed = callback(node);\r\n                    if (!proceed) {\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    stack.Push(node.child1);\r\n                    stack.Push(node.child2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    RayCast(callback, input) {\r\n        if (this.m_root === null)\r\n            return;\r\n        const p1 = input.p1;\r\n        const p2 = input.p2;\r\n        const r = b2Vec2.SubVV(p2, p1, b2DynamicTree.s_r);\r\n        ///b2Assert(r.LengthSquared() > 0);\r\n        r.Normalize();\r\n        // v is perpendicular to the segment.\r\n        const v = b2Vec2.CrossOneV(r, b2DynamicTree.s_v);\r\n        const abs_v = b2Vec2.AbsV(v, b2DynamicTree.s_abs_v);\r\n        // Separating axis for segment (Gino, p80).\r\n        // |dot(v, p1 - c)| > dot(|v|, h)\r\n        let maxFraction = input.maxFraction;\r\n        // Build a bounding box for the segment.\r\n        const segmentAABB = b2DynamicTree.s_segmentAABB;\r\n        let t_x = p1.x + maxFraction * (p2.x - p1.x);\r\n        let t_y = p1.y + maxFraction * (p2.y - p1.y);\r\n        segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\r\n        segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\r\n        segmentAABB.upperBound.x = b2Max(p1.x, t_x);\r\n        segmentAABB.upperBound.y = b2Max(p1.y, t_y);\r\n        const stack = b2DynamicTree.s_stack.Reset();\r\n        stack.Push(this.m_root);\r\n        while (stack.GetCount() > 0) {\r\n            const node = stack.Pop();\r\n            if (node === null) {\r\n                continue;\r\n            }\r\n            if (!b2TestOverlapAABB(node.aabb, segmentAABB)) {\r\n                continue;\r\n            }\r\n            // Separating axis for segment (Gino, p80).\r\n            // |dot(v, p1 - c)| > dot(|v|, h)\r\n            const c = node.aabb.GetCenter();\r\n            const h = node.aabb.GetExtents();\r\n            const separation = b2Abs(b2Vec2.DotVV(v, b2Vec2.SubVV(p1, c, b2Vec2.s_t0))) - b2Vec2.DotVV(abs_v, h);\r\n            if (separation > 0) {\r\n                continue;\r\n            }\r\n            if (node.IsLeaf()) {\r\n                const subInput = b2DynamicTree.s_subInput;\r\n                subInput.p1.Copy(input.p1);\r\n                subInput.p2.Copy(input.p2);\r\n                subInput.maxFraction = maxFraction;\r\n                const value = callback(subInput, node);\r\n                if (value === 0) {\r\n                    // The client has terminated the ray cast.\r\n                    return;\r\n                }\r\n                if (value > 0) {\r\n                    // Update segment bounding box.\r\n                    maxFraction = value;\r\n                    t_x = p1.x + maxFraction * (p2.x - p1.x);\r\n                    t_y = p1.y + maxFraction * (p2.y - p1.y);\r\n                    segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\r\n                    segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\r\n                    segmentAABB.upperBound.x = b2Max(p1.x, t_x);\r\n                    segmentAABB.upperBound.y = b2Max(p1.y, t_y);\r\n                }\r\n            }\r\n            else {\r\n                stack.Push(node.child1);\r\n                stack.Push(node.child2);\r\n            }\r\n        }\r\n    }\r\n    AllocateNode() {\r\n        // Expand the node pool as needed.\r\n        if (this.m_freeList) {\r\n            const node = this.m_freeList;\r\n            this.m_freeList = node.parent; // this.m_freeList = node.next;\r\n            node.parent = null;\r\n            node.child1 = null;\r\n            node.child2 = null;\r\n            node.height = 0;\r\n            node.userData = null;\r\n            return node;\r\n        }\r\n        return new b2TreeNode(b2DynamicTree.s_node_id++);\r\n    }\r\n    FreeNode(node) {\r\n        node.parent = this.m_freeList; // node.next = this.m_freeList;\r\n        node.child1 = null;\r\n        node.child2 = null;\r\n        node.height = -1;\r\n        node.userData = null;\r\n        this.m_freeList = node;\r\n    }\r\n    CreateProxy(aabb, userData) {\r\n        const node = this.AllocateNode();\r\n        // Fatten the aabb.\r\n        const r_x = b2_aabbExtension;\r\n        const r_y = b2_aabbExtension;\r\n        node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\r\n        node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\r\n        node.aabb.upperBound.x = aabb.upperBound.x + r_x;\r\n        node.aabb.upperBound.y = aabb.upperBound.y + r_y;\r\n        node.userData = userData;\r\n        node.height = 0;\r\n        this.InsertLeaf(node);\r\n        return node;\r\n    }\r\n    DestroyProxy(proxy) {\r\n        ///b2Assert(proxy.IsLeaf());\r\n        this.RemoveLeaf(proxy);\r\n        this.FreeNode(proxy);\r\n    }\r\n    MoveProxy(proxy, aabb, displacement) {\r\n        ///b2Assert(proxy.IsLeaf());\r\n        if (proxy.aabb.Contains(aabb)) {\r\n            return false;\r\n        }\r\n        this.RemoveLeaf(proxy);\r\n        // Extend AABB.\r\n        // Predict AABB displacement.\r\n        const r_x = b2_aabbExtension + b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));\r\n        const r_y = b2_aabbExtension + b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));\r\n        proxy.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\r\n        proxy.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\r\n        proxy.aabb.upperBound.x = aabb.upperBound.x + r_x;\r\n        proxy.aabb.upperBound.y = aabb.upperBound.y + r_y;\r\n        this.InsertLeaf(proxy);\r\n        return true;\r\n    }\r\n    InsertLeaf(leaf) {\r\n        ++this.m_insertionCount;\r\n        if (this.m_root === null) {\r\n            this.m_root = leaf;\r\n            this.m_root.parent = null;\r\n            return;\r\n        }\r\n        // Find the best sibling for this node\r\n        const leafAABB = leaf.aabb;\r\n        ///const center: b2Vec2 = leafAABB.GetCenter();\r\n        let index = this.m_root;\r\n        let child1;\r\n        let child2;\r\n        while (!index.IsLeaf()) {\r\n            child1 = index.child1;\r\n            child2 = index.child2;\r\n            const area = index.aabb.GetPerimeter();\r\n            const combinedAABB = b2DynamicTree.s_combinedAABB;\r\n            combinedAABB.Combine2(index.aabb, leafAABB);\r\n            const combinedArea = combinedAABB.GetPerimeter();\r\n            // Cost of creating a new parent for this node and the new leaf\r\n            const cost = 2 * combinedArea;\r\n            // Minimum cost of pushing the leaf further down the tree\r\n            const inheritanceCost = 2 * (combinedArea - area);\r\n            // Cost of descending into child1\r\n            let cost1;\r\n            const aabb = b2DynamicTree.s_aabb;\r\n            let oldArea;\r\n            let newArea;\r\n            if (child1.IsLeaf()) {\r\n                aabb.Combine2(leafAABB, child1.aabb);\r\n                cost1 = aabb.GetPerimeter() + inheritanceCost;\r\n            }\r\n            else {\r\n                aabb.Combine2(leafAABB, child1.aabb);\r\n                oldArea = child1.aabb.GetPerimeter();\r\n                newArea = aabb.GetPerimeter();\r\n                cost1 = (newArea - oldArea) + inheritanceCost;\r\n            }\r\n            // Cost of descending into child2\r\n            let cost2;\r\n            if (child2.IsLeaf()) {\r\n                aabb.Combine2(leafAABB, child2.aabb);\r\n                cost2 = aabb.GetPerimeter() + inheritanceCost;\r\n            }\r\n            else {\r\n                aabb.Combine2(leafAABB, child2.aabb);\r\n                oldArea = child2.aabb.GetPerimeter();\r\n                newArea = aabb.GetPerimeter();\r\n                cost2 = newArea - oldArea + inheritanceCost;\r\n            }\r\n            // Descend according to the minimum cost.\r\n            if (cost < cost1 && cost < cost2) {\r\n                break;\r\n            }\r\n            // Descend\r\n            if (cost1 < cost2) {\r\n                index = child1;\r\n            }\r\n            else {\r\n                index = child2;\r\n            }\r\n        }\r\n        const sibling = index;\r\n        // Create a parent for the siblings.\r\n        const oldParent = sibling.parent;\r\n        const newParent = this.AllocateNode();\r\n        newParent.parent = oldParent;\r\n        newParent.userData = null;\r\n        newParent.aabb.Combine2(leafAABB, sibling.aabb);\r\n        newParent.height = sibling.height + 1;\r\n        if (oldParent) {\r\n            // The sibling was not the root.\r\n            if (oldParent.child1 === sibling) {\r\n                oldParent.child1 = newParent;\r\n            }\r\n            else {\r\n                oldParent.child2 = newParent;\r\n            }\r\n            newParent.child1 = sibling;\r\n            newParent.child2 = leaf;\r\n            sibling.parent = newParent;\r\n            leaf.parent = newParent;\r\n        }\r\n        else {\r\n            // The sibling was the root.\r\n            newParent.child1 = sibling;\r\n            newParent.child2 = leaf;\r\n            sibling.parent = newParent;\r\n            leaf.parent = newParent;\r\n            this.m_root = newParent;\r\n        }\r\n        // Walk back up the tree fixing heights and AABBs\r\n        index = leaf.parent;\r\n        while (index !== null) {\r\n            index = this.Balance(index);\r\n            child1 = index.child1;\r\n            child2 = index.child2;\r\n            ///b2Assert(child1 !== null);\r\n            ///b2Assert(child2 !== null);\r\n            index.height = 1 + b2Max(child1.height, child2.height);\r\n            index.aabb.Combine2(child1.aabb, child2.aabb);\r\n            index = index.parent;\r\n        }\r\n        // this.Validate();\r\n    }\r\n    RemoveLeaf(leaf) {\r\n        if (leaf === this.m_root) {\r\n            this.m_root = null;\r\n            return;\r\n        }\r\n        const parent = leaf.parent;\r\n        const grandParent = parent && parent.parent;\r\n        let sibling;\r\n        if (parent.child1 === leaf) {\r\n            sibling = parent.child2;\r\n        }\r\n        else {\r\n            sibling = parent.child1;\r\n        }\r\n        if (grandParent) {\r\n            // Destroy parent and connect sibling to grandParent.\r\n            if (grandParent.child1 === parent) {\r\n                grandParent.child1 = sibling;\r\n            }\r\n            else {\r\n                grandParent.child2 = sibling;\r\n            }\r\n            sibling.parent = grandParent;\r\n            this.FreeNode(parent);\r\n            // Adjust ancestor bounds.\r\n            let index = grandParent;\r\n            while (index) {\r\n                index = this.Balance(index);\r\n                const child1 = index.child1;\r\n                const child2 = index.child2;\r\n                index.aabb.Combine2(child1.aabb, child2.aabb);\r\n                index.height = 1 + b2Max(child1.height, child2.height);\r\n                index = index.parent;\r\n            }\r\n        }\r\n        else {\r\n            this.m_root = sibling;\r\n            sibling.parent = null;\r\n            this.FreeNode(parent);\r\n        }\r\n        // this.Validate();\r\n    }\r\n    Balance(A) {\r\n        ///b2Assert(A !== null);\r\n        if (A.IsLeaf() || A.height < 2) {\r\n            return A;\r\n        }\r\n        const B = verify(A.child1);\r\n        const C = verify(A.child2);\r\n        const balance = C.height - B.height;\r\n        // Rotate C up\r\n        if (balance > 1) {\r\n            const F = verify(C.child1);\r\n            const G = verify(C.child2);\r\n            // Swap A and C\r\n            C.child1 = A;\r\n            C.parent = A.parent;\r\n            A.parent = C;\r\n            // A's old parent should point to C\r\n            if (C.parent !== null) {\r\n                if (C.parent.child1 === A) {\r\n                    C.parent.child1 = C;\r\n                }\r\n                else {\r\n                    ///b2Assert(C.parent.child2 === A);\r\n                    C.parent.child2 = C;\r\n                }\r\n            }\r\n            else {\r\n                this.m_root = C;\r\n            }\r\n            // Rotate\r\n            if (F.height > G.height) {\r\n                C.child2 = F;\r\n                A.child2 = G;\r\n                G.parent = A;\r\n                A.aabb.Combine2(B.aabb, G.aabb);\r\n                C.aabb.Combine2(A.aabb, F.aabb);\r\n                A.height = 1 + b2Max(B.height, G.height);\r\n                C.height = 1 + b2Max(A.height, F.height);\r\n            }\r\n            else {\r\n                C.child2 = G;\r\n                A.child2 = F;\r\n                F.parent = A;\r\n                A.aabb.Combine2(B.aabb, F.aabb);\r\n                C.aabb.Combine2(A.aabb, G.aabb);\r\n                A.height = 1 + b2Max(B.height, F.height);\r\n                C.height = 1 + b2Max(A.height, G.height);\r\n            }\r\n            return C;\r\n        }\r\n        // Rotate B up\r\n        if (balance < -1) {\r\n            const D = verify(B.child1);\r\n            const E = verify(B.child2);\r\n            // Swap A and B\r\n            B.child1 = A;\r\n            B.parent = A.parent;\r\n            A.parent = B;\r\n            // A's old parent should point to B\r\n            if (B.parent !== null) {\r\n                if (B.parent.child1 === A) {\r\n                    B.parent.child1 = B;\r\n                }\r\n                else {\r\n                    ///b2Assert(B.parent.child2 === A);\r\n                    B.parent.child2 = B;\r\n                }\r\n            }\r\n            else {\r\n                this.m_root = B;\r\n            }\r\n            // Rotate\r\n            if (D.height > E.height) {\r\n                B.child2 = D;\r\n                A.child1 = E;\r\n                E.parent = A;\r\n                A.aabb.Combine2(C.aabb, E.aabb);\r\n                B.aabb.Combine2(A.aabb, D.aabb);\r\n                A.height = 1 + b2Max(C.height, E.height);\r\n                B.height = 1 + b2Max(A.height, D.height);\r\n            }\r\n            else {\r\n                B.child2 = E;\r\n                A.child1 = D;\r\n                D.parent = A;\r\n                A.aabb.Combine2(C.aabb, D.aabb);\r\n                B.aabb.Combine2(A.aabb, E.aabb);\r\n                A.height = 1 + b2Max(C.height, D.height);\r\n                B.height = 1 + b2Max(A.height, E.height);\r\n            }\r\n            return B;\r\n        }\r\n        return A;\r\n    }\r\n    GetHeight() {\r\n        if (this.m_root === null) {\r\n            return 0;\r\n        }\r\n        return this.m_root.height;\r\n    }\r\n    static GetAreaNode(node) {\r\n        if (node === null) {\r\n            return 0;\r\n        }\r\n        if (node.IsLeaf()) {\r\n            return 0;\r\n        }\r\n        let area = node.aabb.GetPerimeter();\r\n        area += b2DynamicTree.GetAreaNode(node.child1);\r\n        area += b2DynamicTree.GetAreaNode(node.child2);\r\n        return area;\r\n    }\r\n    GetAreaRatio() {\r\n        if (this.m_root === null) {\r\n            return 0;\r\n        }\r\n        const root = this.m_root;\r\n        const rootArea = root.aabb.GetPerimeter();\r\n        const totalArea = b2DynamicTree.GetAreaNode(this.m_root);\r\n        /*\r\n        float32 totalArea = 0.0;\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          const b2TreeNode* node = m_nodes + i;\r\n          if (node.height < 0) {\r\n            // Free node in pool\r\n            continue;\r\n          }\r\n    \r\n          totalArea += node.aabb.GetPerimeter();\r\n        }\r\n        */\r\n        return totalArea / rootArea;\r\n    }\r\n    ComputeHeightNode(node) {\r\n        if (node.IsLeaf()) {\r\n            return 0;\r\n        }\r\n        const height1 = this.ComputeHeightNode(node.child1);\r\n        const height2 = this.ComputeHeightNode(node.child2);\r\n        return 1 + b2Max(height1, height2);\r\n    }\r\n    ComputeHeight() {\r\n        const height = this.ComputeHeightNode(this.m_root);\r\n        return height;\r\n    }\r\n    ValidateStructure(index) {\r\n        if (index === null) {\r\n            return;\r\n        }\r\n        if (index === this.m_root) {\r\n            ///b2Assert(index.parent === null);\r\n        }\r\n        const node = index;\r\n        const child1 = node.child1;\r\n        const child2 = node.child2;\r\n        if (node.IsLeaf()) {\r\n            ///b2Assert(child1 === null);\r\n            ///b2Assert(child2 === null);\r\n            ///b2Assert(node.height === 0);\r\n            return;\r\n        }\r\n        ///b2Assert(child1.parent === index);\r\n        ///b2Assert(child2.parent === index);\r\n        this.ValidateStructure(child1);\r\n        this.ValidateStructure(child2);\r\n    }\r\n    ValidateMetrics(index) {\r\n        if (index === null) {\r\n            return;\r\n        }\r\n        const node = index;\r\n        const child1 = node.child1;\r\n        const child2 = node.child2;\r\n        if (node.IsLeaf()) {\r\n            ///b2Assert(child1 === null);\r\n            ///b2Assert(child2 === null);\r\n            ///b2Assert(node.height === 0);\r\n            return;\r\n        }\r\n        ///const height1: number = child1.height;\r\n        ///const height2: number = child2.height;\r\n        ///const height: number = 1 + b2Max(height1, height2);\r\n        ///b2Assert(node.height === height);\r\n        const aabb = b2DynamicTree.s_aabb;\r\n        aabb.Combine2(child1.aabb, child2.aabb);\r\n        ///b2Assert(aabb.lowerBound === node.aabb.lowerBound);\r\n        ///b2Assert(aabb.upperBound === node.aabb.upperBound);\r\n        this.ValidateMetrics(child1);\r\n        this.ValidateMetrics(child2);\r\n    }\r\n    Validate() {\r\n        this.ValidateStructure(this.m_root);\r\n        this.ValidateMetrics(this.m_root);\r\n        // let freeCount: number = 0;\r\n        let freeIndex = this.m_freeList;\r\n        while (freeIndex !== null) {\r\n            freeIndex = freeIndex.parent; // freeIndex = freeIndex.next;\r\n            // ++freeCount;\r\n        }\r\n        ///b2Assert(this.GetHeight() === this.ComputeHeight());\r\n    }\r\n    static GetMaxBalanceNode(node, maxBalance) {\r\n        if (node === null) {\r\n            return maxBalance;\r\n        }\r\n        if (node.height <= 1) {\r\n            return maxBalance;\r\n        }\r\n        ///b2Assert(!node.IsLeaf());\r\n        const child1 = node.child1;\r\n        const child2 = node.child2;\r\n        const balance = b2Abs(child2.height - child1.height);\r\n        return b2Max(maxBalance, balance);\r\n    }\r\n    GetMaxBalance() {\r\n        const maxBalance = b2DynamicTree.GetMaxBalanceNode(this.m_root, 0);\r\n        /*\r\n        int32 maxBalance = 0;\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          const b2TreeNode* node = m_nodes + i;\r\n          if (node.height <= 1) {\r\n            continue;\r\n          }\r\n    \r\n          b2Assert(!node.IsLeaf());\r\n    \r\n          int32 child1 = node.child1;\r\n          int32 child2 = node.child2;\r\n          int32 balance = b2Abs(m_nodes[child2].height - m_nodes[child1].height);\r\n          maxBalance = b2Max(maxBalance, balance);\r\n        }\r\n        */\r\n        return maxBalance;\r\n    }\r\n    RebuildBottomUp() {\r\n        /*\r\n        int32* nodes = (int32*)b2Alloc(m_nodeCount * sizeof(int32));\r\n        int32 count = 0;\r\n    \r\n        // Build array of leaves. Free the rest.\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          if (m_nodes[i].height < 0) {\r\n            // free node in pool\r\n            continue;\r\n          }\r\n    \r\n          if (m_nodes[i].IsLeaf()) {\r\n            m_nodes[i].parent = b2_nullNode;\r\n            nodes[count] = i;\r\n            ++count;\r\n          } else {\r\n            FreeNode(i);\r\n          }\r\n        }\r\n    \r\n        while (count > 1) {\r\n          float32 minCost = b2_maxFloat;\r\n          int32 iMin = -1, jMin = -1;\r\n          for (int32 i = 0; i < count; ++i) {\r\n            b2AABB aabbi = m_nodes[nodes[i]].aabb;\r\n    \r\n            for (int32 j = i + 1; j < count; ++j) {\r\n              b2AABB aabbj = m_nodes[nodes[j]].aabb;\r\n              b2AABB b;\r\n              b.Combine(aabbi, aabbj);\r\n              float32 cost = b.GetPerimeter();\r\n              if (cost < minCost) {\r\n                iMin = i;\r\n                jMin = j;\r\n                minCost = cost;\r\n              }\r\n            }\r\n          }\r\n    \r\n          int32 index1 = nodes[iMin];\r\n          int32 index2 = nodes[jMin];\r\n          b2TreeNode* child1 = m_nodes + index1;\r\n          b2TreeNode* child2 = m_nodes + index2;\r\n    \r\n          int32 parentIndex = AllocateNode();\r\n          b2TreeNode* parent = m_nodes + parentIndex;\r\n          parent.child1 = index1;\r\n          parent.child2 = index2;\r\n          parent.height = 1 + b2Max(child1.height, child2.height);\r\n          parent.aabb.Combine(child1.aabb, child2.aabb);\r\n          parent.parent = b2_nullNode;\r\n    \r\n          child1.parent = parentIndex;\r\n          child2.parent = parentIndex;\r\n    \r\n          nodes[jMin] = nodes[count-1];\r\n          nodes[iMin] = parentIndex;\r\n          --count;\r\n        }\r\n    \r\n        m_root = nodes[0];\r\n        b2Free(nodes);\r\n        */\r\n        this.Validate();\r\n    }\r\n    static ShiftOriginNode(node, newOrigin) {\r\n        if (node === null) {\r\n            return;\r\n        }\r\n        if (node.height <= 1) {\r\n            return;\r\n        }\r\n        ///b2Assert(!node.IsLeaf());\r\n        const child1 = node.child1;\r\n        const child2 = node.child2;\r\n        b2DynamicTree.ShiftOriginNode(child1, newOrigin);\r\n        b2DynamicTree.ShiftOriginNode(child2, newOrigin);\r\n        node.aabb.lowerBound.SelfSub(newOrigin);\r\n        node.aabb.upperBound.SelfSub(newOrigin);\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        b2DynamicTree.ShiftOriginNode(this.m_root, newOrigin);\r\n        /*\r\n        // Build array of leaves. Free the rest.\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          m_nodes[i].aabb.lowerBound -= newOrigin;\r\n          m_nodes[i].aabb.upperBound -= newOrigin;\r\n        }\r\n        */\r\n    }\r\n}\r\nb2DynamicTree.s_stack = new b2GrowableStack(256);\r\nb2DynamicTree.s_r = new b2Vec2();\r\nb2DynamicTree.s_v = new b2Vec2();\r\nb2DynamicTree.s_abs_v = new b2Vec2();\r\nb2DynamicTree.s_segmentAABB = new b2AABB();\r\nb2DynamicTree.s_subInput = new b2RayCastInput();\r\nb2DynamicTree.s_combinedAABB = new b2AABB();\r\nb2DynamicTree.s_aabb = new b2AABB();\r\nb2DynamicTree.s_node_id = 0;\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2TestOverlapAABB } from \"./b2Collision\";\r\nimport { b2DynamicTree } from \"./b2DynamicTree\";\r\nexport class b2Pair {\r\n    constructor() {\r\n        this.proxyA = null;\r\n        this.proxyB = null;\r\n    }\r\n}\r\n/// The broad-phase is used for computing pairs and performing volume queries and ray casts.\r\n/// This broad-phase does not persist pairs. Instead, this reports potentially new pairs.\r\n/// It is up to the client to consume the new pairs and to track subsequent overlap.\r\nexport class b2BroadPhase {\r\n    constructor() {\r\n        this.m_tree = new b2DynamicTree();\r\n        this.m_proxyCount = 0;\r\n        // public m_moveCapacity: number = 16;\r\n        this.m_moveCount = 0;\r\n        this.m_moveBuffer = [];\r\n        // public m_pairCapacity: number = 16;\r\n        this.m_pairCount = 0;\r\n        this.m_pairBuffer = [];\r\n    }\r\n    // public m_queryProxyId: number = 0;\r\n    /// Create a proxy with an initial AABB. Pairs are not reported until\r\n    /// UpdatePairs is called.\r\n    CreateProxy(aabb, userData) {\r\n        const proxy = this.m_tree.CreateProxy(aabb, userData);\r\n        ++this.m_proxyCount;\r\n        this.BufferMove(proxy);\r\n        return proxy;\r\n    }\r\n    /// Destroy a proxy. It is up to the client to remove any pairs.\r\n    DestroyProxy(proxy) {\r\n        this.UnBufferMove(proxy);\r\n        --this.m_proxyCount;\r\n        this.m_tree.DestroyProxy(proxy);\r\n    }\r\n    /// Call MoveProxy as many times as you like, then when you are done\r\n    /// call UpdatePairs to finalized the proxy pairs (for your time step).\r\n    MoveProxy(proxy, aabb, displacement) {\r\n        const buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);\r\n        if (buffer) {\r\n            this.BufferMove(proxy);\r\n        }\r\n    }\r\n    /// Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.\r\n    TouchProxy(proxy) {\r\n        this.BufferMove(proxy);\r\n    }\r\n    /// Get the fat AABB for a proxy.\r\n    GetFatAABB(proxy) {\r\n        return this.m_tree.GetFatAABB(proxy);\r\n    }\r\n    /// Get user data from a proxy. Returns NULL if the id is invalid.\r\n    GetUserData(proxy) {\r\n        return this.m_tree.GetUserData(proxy);\r\n    }\r\n    /// Test overlap of fat AABBs.\r\n    TestOverlap(proxyA, proxyB) {\r\n        const aabbA = this.m_tree.GetFatAABB(proxyA);\r\n        const aabbB = this.m_tree.GetFatAABB(proxyB);\r\n        return b2TestOverlapAABB(aabbA, aabbB);\r\n    }\r\n    /// Get the number of proxies.\r\n    GetProxyCount() {\r\n        return this.m_proxyCount;\r\n    }\r\n    /// Update the pairs. This results in pair callbacks. This can only add pairs.\r\n    UpdatePairs(contactManager) {\r\n        // Reset pair buffer\r\n        this.m_pairCount = 0;\r\n        // Perform tree queries for all moving proxies.\r\n        for (let i = 0; i < this.m_moveCount; ++i) {\r\n            const queryProxy = this.m_moveBuffer[i];\r\n            if (queryProxy === null) {\r\n                continue;\r\n            }\r\n            // This is called from box2d.b2DynamicTree::Query when we are gathering pairs.\r\n            // boolean b2BroadPhase::QueryCallback(int32 proxyId);\r\n            const QueryCallback = (proxy) => {\r\n                // A proxy cannot form a pair with itself.\r\n                if (proxy.m_id === queryProxy.m_id) {\r\n                    return true;\r\n                }\r\n                // Grow the pair buffer as needed.\r\n                if (this.m_pairCount === this.m_pairBuffer.length) {\r\n                    this.m_pairBuffer[this.m_pairCount] = new b2Pair();\r\n                }\r\n                const pair = this.m_pairBuffer[this.m_pairCount];\r\n                // pair.proxyA = proxy < queryProxy ? proxy : queryProxy;\r\n                // pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;\r\n                if (proxy.m_id < queryProxy.m_id) {\r\n                    pair.proxyA = proxy;\r\n                    pair.proxyB = queryProxy;\r\n                }\r\n                else {\r\n                    pair.proxyA = queryProxy;\r\n                    pair.proxyB = proxy;\r\n                }\r\n                ++this.m_pairCount;\r\n                return true;\r\n            };\r\n            // We have to query the tree with the fat AABB so that\r\n            // we don't fail to create a pair that may touch later.\r\n            const fatAABB = this.m_tree.GetFatAABB(queryProxy);\r\n            // Query tree, create pairs and add them pair buffer.\r\n            this.m_tree.Query(QueryCallback, fatAABB);\r\n        }\r\n        // Reset move buffer\r\n        this.m_moveCount = 0;\r\n        // Sort the pair buffer to expose duplicates.\r\n        this.m_pairBuffer.length = this.m_pairCount;\r\n        this.m_pairBuffer.sort(b2PairLessThan);\r\n        // Send the pairs back to the client.\r\n        let i = 0;\r\n        while (i < this.m_pairCount) {\r\n            const primaryPair = this.m_pairBuffer[i];\r\n            const userDataA = this.m_tree.GetUserData(primaryPair.proxyA);\r\n            const userDataB = this.m_tree.GetUserData(primaryPair.proxyB);\r\n            contactManager.AddPair(userDataA, userDataB);\r\n            ++i;\r\n            // Skip any duplicate pairs.\r\n            while (i < this.m_pairCount) {\r\n                const pair = this.m_pairBuffer[i];\r\n                if (pair.proxyA.m_id !== primaryPair.proxyA.m_id || pair.proxyB.m_id !== primaryPair.proxyB.m_id) {\r\n                    break;\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n        // Try to keep the tree balanced.\r\n        // this.m_tree.Rebalance(4);\r\n    }\r\n    /// Query an AABB for overlapping proxies. The callback class\r\n    /// is called for each proxy that overlaps the supplied AABB.\r\n    Query(callback, aabb) {\r\n        this.m_tree.Query(callback, aabb);\r\n    }\r\n    /// Ray-cast against the proxies in the tree. This relies on the callback\r\n    /// to perform a exact ray-cast in the case were the proxy contains a shape.\r\n    /// The callback also performs the any collision filtering. This has performance\r\n    /// roughly equal to k * log(n), where k is the number of collisions and n is the\r\n    /// number of proxies in the tree.\r\n    /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\r\n    /// @param callback a callback class that is called for each proxy that is hit by the ray.\r\n    RayCast(callback, input) {\r\n        this.m_tree.RayCast(callback, input);\r\n    }\r\n    /// Get the height of the embedded tree.\r\n    GetTreeHeight() {\r\n        return this.m_tree.GetHeight();\r\n    }\r\n    /// Get the balance of the embedded tree.\r\n    GetTreeBalance() {\r\n        return this.m_tree.GetMaxBalance();\r\n    }\r\n    /// Get the quality metric of the embedded tree.\r\n    GetTreeQuality() {\r\n        return this.m_tree.GetAreaRatio();\r\n    }\r\n    /// Shift the world origin. Useful for large worlds.\r\n    /// The shift formula is: position -= newOrigin\r\n    /// @param newOrigin the new origin with respect to the old origin\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_tree.ShiftOrigin(newOrigin);\r\n    }\r\n    BufferMove(proxy) {\r\n        this.m_moveBuffer[this.m_moveCount] = proxy;\r\n        ++this.m_moveCount;\r\n    }\r\n    UnBufferMove(proxy) {\r\n        const i = this.m_moveBuffer.indexOf(proxy);\r\n        this.m_moveBuffer[i] = null;\r\n    }\r\n}\r\n/// This is used to sort pairs.\r\nexport function b2PairLessThan(pair1, pair2) {\r\n    if (pair1.proxyA.m_id === pair2.proxyA.m_id) {\r\n        return pair1.proxyB.m_id - pair2.proxyB.m_id;\r\n    }\r\n    return pair1.proxyA.m_id - pair2.proxyA.m_id;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCcm9hZFBoYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvQ29sbGlzaW9uL2IyQnJvYWRQaGFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUdGLE9BQU8sRUFBMEIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSTVELE1BQU07SUFBTjtRQUNTLFdBQU0sR0FBb0IsSUFBSSxDQUFDO1FBQy9CLFdBQU0sR0FBb0IsSUFBSSxDQUFDO0lBQ3hDLENBQUM7Q0FBQTtBQUVELDRGQUE0RjtBQUM1Rix5RkFBeUY7QUFDekYsb0ZBQW9GO0FBQ3BGLE1BQU07SUFBTjtRQUNTLFdBQU0sR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUM1QyxpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUNoQyxzQ0FBc0M7UUFDL0IsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsaUJBQVksR0FBaUIsRUFBRSxDQUFDO1FBQ3ZDLHNDQUFzQztRQUMvQixnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUN4QixpQkFBWSxHQUFhLEVBQUUsQ0FBQztJQXNMckMsQ0FBQztJQXJMQyxxQ0FBcUM7SUFFckMscUVBQXFFO0lBQ3JFLDBCQUEwQjtJQUNuQixXQUFXLENBQUMsSUFBWSxFQUFFLFFBQWE7UUFDNUMsTUFBTSxLQUFLLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELGdFQUFnRTtJQUN6RCxZQUFZLENBQUMsS0FBaUI7UUFDbkMsSUFBSSxDQUFD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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxPolygonVertices } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Max, b2Vec2, b2Rot, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2Distance, b2DistanceInput, b2DistanceOutput, b2DistanceProxy, b2SimplexCache } from \"./b2Distance\";\r\nexport let b2_toiTime = 0;\r\nexport let b2_toiMaxTime = 0;\r\nexport let b2_toiCalls = 0;\r\nexport let b2_toiIters = 0;\r\nexport let b2_toiMaxIters = 0;\r\nexport let b2_toiRootIters = 0;\r\nexport let b2_toiMaxRootIters = 0;\r\nexport function b2_toi_reset() {\r\n    b2_toiTime = 0;\r\n    b2_toiMaxTime = 0;\r\n    b2_toiCalls = 0;\r\n    b2_toiIters = 0;\r\n    b2_toiMaxIters = 0;\r\n    b2_toiRootIters = 0;\r\n    b2_toiMaxRootIters = 0;\r\n}\r\nconst b2TimeOfImpact_s_xfA = new b2Transform();\r\nconst b2TimeOfImpact_s_xfB = new b2Transform();\r\nconst b2TimeOfImpact_s_pointA = new b2Vec2();\r\nconst b2TimeOfImpact_s_pointB = new b2Vec2();\r\nconst b2TimeOfImpact_s_normal = new b2Vec2();\r\nconst b2TimeOfImpact_s_axisA = new b2Vec2();\r\nconst b2TimeOfImpact_s_axisB = new b2Vec2();\r\n/// Input parameters for b2TimeOfImpact\r\nexport class b2TOIInput {\r\n    constructor() {\r\n        this.proxyA = new b2DistanceProxy();\r\n        this.proxyB = new b2DistanceProxy();\r\n        this.sweepA = new b2Sweep();\r\n        this.sweepB = new b2Sweep();\r\n        this.tMax = 0; // defines sweep interval [0, tMax]\r\n    }\r\n}\r\nexport var b2TOIOutputState;\r\n(function (b2TOIOutputState) {\r\n    b2TOIOutputState[b2TOIOutputState[\"e_unknown\"] = 0] = \"e_unknown\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_failed\"] = 1] = \"e_failed\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_overlapped\"] = 2] = \"e_overlapped\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_touching\"] = 3] = \"e_touching\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_separated\"] = 4] = \"e_separated\";\r\n})(b2TOIOutputState || (b2TOIOutputState = {}));\r\nexport class b2TOIOutput {\r\n    constructor() {\r\n        this.state = b2TOIOutputState.e_unknown;\r\n        this.t = 0;\r\n    }\r\n}\r\nexport var b2SeparationFunctionType;\r\n(function (b2SeparationFunctionType) {\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_points\"] = 0] = \"e_points\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceA\"] = 1] = \"e_faceA\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceB\"] = 2] = \"e_faceB\";\r\n})(b2SeparationFunctionType || (b2SeparationFunctionType = {}));\r\nexport class b2SeparationFunction {\r\n    constructor() {\r\n        this.m_sweepA = new b2Sweep();\r\n        this.m_sweepB = new b2Sweep();\r\n        this.m_type = b2SeparationFunctionType.e_unknown;\r\n        this.m_localPoint = new b2Vec2();\r\n        this.m_axis = new b2Vec2();\r\n    }\r\n    Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1) {\r\n        this.m_proxyA = proxyA;\r\n        this.m_proxyB = proxyB;\r\n        const count = cache.count;\r\n        ///b2Assert(0 < count && count < 3);\r\n        this.m_sweepA.Copy(sweepA);\r\n        this.m_sweepB.Copy(sweepB);\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t1);\r\n        this.m_sweepB.GetTransform(xfB, t1);\r\n        if (count === 1) {\r\n            this.m_type = b2SeparationFunctionType.e_points;\r\n            const localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n            const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n            b2Vec2.SubVV(pointB, pointA, this.m_axis);\r\n            const s = this.m_axis.Normalize();\r\n            // #if B2_ENABLE_PARTICLE\r\n            this.m_localPoint.SetZero();\r\n            // #endif\r\n            return s;\r\n        }\r\n        else if (cache.indexA[0] === cache.indexA[1]) {\r\n            // Two points on B and one on A.\r\n            this.m_type = b2SeparationFunctionType.e_faceB;\r\n            const localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\r\n            b2Vec2.CrossVOne(b2Vec2.SubVV(localPointB2, localPointB1, b2Vec2.s_t0), this.m_axis).SelfNormalize();\r\n            const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n            b2Vec2.MidVV(localPointB1, localPointB2, this.m_localPoint);\r\n            const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n            const localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n            let s = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n            if (s < 0) {\r\n                this.m_axis.SelfNeg();\r\n                s = -s;\r\n            }\r\n            return s;\r\n        }\r\n        else {\r\n            // Two points on A and one or two points on B.\r\n            this.m_type = b2SeparationFunctionType.e_faceA;\r\n            const localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\r\n            b2Vec2.CrossVOne(b2Vec2.SubVV(localPointA2, localPointA1, b2Vec2.s_t0), this.m_axis).SelfNormalize();\r\n            const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n            b2Vec2.MidVV(localPointA1, localPointA2, this.m_localPoint);\r\n            const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n            const localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n            let s = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n            if (s < 0) {\r\n                this.m_axis.SelfNeg();\r\n                s = -s;\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n    FindMinSeparation(indexA, indexB, t) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t);\r\n        this.m_sweepB.GetTransform(xfB, t);\r\n        switch (this.m_type) {\r\n            case b2SeparationFunctionType.e_points: {\r\n                const axisA = b2Rot.MulTRV(xfA.q, this.m_axis, b2TimeOfImpact_s_axisA);\r\n                const axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(this.m_axis, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\r\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\r\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA[0]);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB[0]);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceA: {\r\n                const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n                const axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\r\n                indexA[0] = -1;\r\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB[0]);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceB: {\r\n                const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n                const axisA = b2Rot.MulTRV(xfA.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisA);\r\n                indexB[0] = -1;\r\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA[0]);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            default:\r\n                ///b2Assert(false);\r\n                indexA[0] = -1;\r\n                indexB[0] = -1;\r\n                return 0;\r\n        }\r\n    }\r\n    Evaluate(indexA, indexB, t) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t);\r\n        this.m_sweepB.GetTransform(xfB, t);\r\n        switch (this.m_type) {\r\n            case b2SeparationFunctionType.e_points: {\r\n                const localPointA = this.m_proxyA.GetVertex(indexA);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceA: {\r\n                const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceB: {\r\n                const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            default:\r\n                ///b2Assert(false);\r\n                return 0;\r\n        }\r\n    }\r\n}\r\nconst b2TimeOfImpact_s_timer = new b2Timer();\r\nconst b2TimeOfImpact_s_cache = new b2SimplexCache();\r\nconst b2TimeOfImpact_s_distanceInput = new b2DistanceInput();\r\nconst b2TimeOfImpact_s_distanceOutput = new b2DistanceOutput();\r\nconst b2TimeOfImpact_s_fcn = new b2SeparationFunction();\r\nconst b2TimeOfImpact_s_indexA = [0];\r\nconst b2TimeOfImpact_s_indexB = [0];\r\nconst b2TimeOfImpact_s_sweepA = new b2Sweep();\r\nconst b2TimeOfImpact_s_sweepB = new b2Sweep();\r\nexport function b2TimeOfImpact(output, input) {\r\n    const timer = b2TimeOfImpact_s_timer.Reset();\r\n    ++b2_toiCalls;\r\n    output.state = b2TOIOutputState.e_unknown;\r\n    output.t = input.tMax;\r\n    const proxyA = input.proxyA;\r\n    const proxyB = input.proxyB;\r\n    const sweepA = b2TimeOfImpact_s_sweepA.Copy(input.sweepA);\r\n    const sweepB = b2TimeOfImpact_s_sweepB.Copy(input.sweepB);\r\n    // Large rotations can make the root finder fail, so we normalize the\r\n    // sweep angles.\r\n    sweepA.Normalize();\r\n    sweepB.Normalize();\r\n    const tMax = input.tMax;\r\n    const totalRadius = proxyA.m_radius + proxyB.m_radius;\r\n    const target = b2Max(b2_linearSlop, totalRadius - 3 * b2_linearSlop);\r\n    const tolerance = 0.25 * b2_linearSlop;\r\n    ///b2Assert(target > tolerance);\r\n    let t1 = 0;\r\n    const k_maxIterations = 20; // TODO_ERIN b2Settings\r\n    let iter = 0;\r\n    // Prepare input for distance query.\r\n    const cache = b2TimeOfImpact_s_cache;\r\n    cache.count = 0;\r\n    const distanceInput = b2TimeOfImpact_s_distanceInput;\r\n    distanceInput.proxyA = input.proxyA;\r\n    distanceInput.proxyB = input.proxyB;\r\n    distanceInput.useRadii = false;\r\n    // The outer loop progressively attempts to compute new separating axes.\r\n    // This loop terminates when an axis is repeated (no progress is made).\r\n    for (;;) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        sweepA.GetTransform(xfA, t1);\r\n        sweepB.GetTransform(xfB, t1);\r\n        // Get the distance between shapes. We can also use the results\r\n        // to get a separating axis.\r\n        distanceInput.transformA.Copy(xfA);\r\n        distanceInput.transformB.Copy(xfB);\r\n        const distanceOutput = b2TimeOfImpact_s_distanceOutput;\r\n        b2Distance(distanceOutput, cache, distanceInput);\r\n        // If the shapes are overlapped, we give up on continuous collision.\r\n        if (distanceOutput.distance <= 0) {\r\n            // Failure!\r\n            output.state = b2TOIOutputState.e_overlapped;\r\n            output.t = 0;\r\n            break;\r\n        }\r\n        if (distanceOutput.distance < target + tolerance) {\r\n            // Victory!\r\n            output.state = b2TOIOutputState.e_touching;\r\n            output.t = t1;\r\n            break;\r\n        }\r\n        // Initialize the separating axis.\r\n        const fcn = b2TimeOfImpact_s_fcn;\r\n        fcn.Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\r\n        /*\r\n        #if 0\r\n            // Dump the curve seen by the root finder {\r\n              const int32 N = 100;\r\n              float32 dx = 1.0f / N;\r\n              float32 xs[N+1];\r\n              float32 fs[N+1];\r\n        \r\n              float32 x = 0.0f;\r\n        \r\n              for (int32 i = 0; i <= N; ++i) {\r\n                sweepA.GetTransform(&xfA, x);\r\n                sweepB.GetTransform(&xfB, x);\r\n                float32 f = fcn.Evaluate(xfA, xfB) - target;\r\n        \r\n                printf(\"%g %g\\n\", x, f);\r\n        \r\n                xs[i] = x;\r\n                fs[i] = f;\r\n        \r\n                x += dx;\r\n              }\r\n            }\r\n        #endif\r\n        */\r\n        // Compute the TOI on the separating axis. We do this by successively\r\n        // resolving the deepest point. This loop is bounded by the number of vertices.\r\n        let done = false;\r\n        let t2 = tMax;\r\n        let pushBackIter = 0;\r\n        for (;;) {\r\n            // Find the deepest point at t2. Store the witness point indices.\r\n            const indexA = b2TimeOfImpact_s_indexA;\r\n            const indexB = b2TimeOfImpact_s_indexB;\r\n            let s2 = fcn.FindMinSeparation(indexA, indexB, t2);\r\n            // Is the final configuration separated?\r\n            if (s2 > (target + tolerance)) {\r\n                // Victory!\r\n                output.state = b2TOIOutputState.e_separated;\r\n                output.t = tMax;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Has the separation reached tolerance?\r\n            if (s2 > (target - tolerance)) {\r\n                // Advance the sweeps\r\n                t1 = t2;\r\n                break;\r\n            }\r\n            // Compute the initial separation of the witness points.\r\n            let s1 = fcn.Evaluate(indexA[0], indexB[0], t1);\r\n            // Check for initial overlap. This might happen if the root finder\r\n            // runs out of iterations.\r\n            if (s1 < (target - tolerance)) {\r\n                output.state = b2TOIOutputState.e_failed;\r\n                output.t = t1;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Check for touching\r\n            if (s1 <= (target + tolerance)) {\r\n                // Victory! t1 should hold the TOI (could be 0.0).\r\n                output.state = b2TOIOutputState.e_touching;\r\n                output.t = t1;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Compute 1D root of: f(x) - target = 0\r\n            let rootIterCount = 0;\r\n            let a1 = t1;\r\n            let a2 = t2;\r\n            for (;;) {\r\n                // Use a mix of the secant rule and bisection.\r\n                let t = 0;\r\n                if (rootIterCount & 1) {\r\n                    // Secant rule to improve convergence.\r\n                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\r\n                }\r\n                else {\r\n                    // Bisection to guarantee progress.\r\n                    t = 0.5 * (a1 + a2);\r\n                }\r\n                ++rootIterCount;\r\n                ++b2_toiRootIters;\r\n                const s = fcn.Evaluate(indexA[0], indexB[0], t);\r\n                if (b2Abs(s - target) < tolerance) {\r\n                    // t2 holds a tentative value for t1\r\n                    t2 = t;\r\n                    break;\r\n                }\r\n                // Ensure we continue to bracket the root.\r\n                if (s > target) {\r\n                    a1 = t;\r\n                    s1 = s;\r\n                }\r\n                else {\r\n                    a2 = t;\r\n                    s2 = s;\r\n                }\r\n                if (rootIterCount === 50) {\r\n                    break;\r\n                }\r\n            }\r\n            b2_toiMaxRootIters = b2Max(b2_toiMaxRootIters, rootIterCount);\r\n            ++pushBackIter;\r\n            if (pushBackIter === b2_maxPolygonVertices) {\r\n                break;\r\n            }\r\n        }\r\n        ++iter;\r\n        ++b2_toiIters;\r\n        if (done) {\r\n            break;\r\n        }\r\n        if (iter === k_maxIterations) {\r\n            // Root finder got stuck. Semi-victory.\r\n            output.state = b2TOIOutputState.e_failed;\r\n            output.t = t1;\r\n            break;\r\n        }\r\n    }\r\n    b2_toiMaxIters = b2Max(b2_toiMaxIters, iter);\r\n    const time = timer.GetMilliseconds();\r\n    b2_toiMaxTime = b2Max(b2_toiMaxTime, time);\r\n    b2_toiTime += time;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","import { b2_maxFloat, b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ManifoldType } from \"./b2Collision\";\r\nconst b2CollideCircles_s_pA = new b2Vec2();\r\nconst b2CollideCircles_s_pB = new b2Vec2();\r\nexport function b2CollideCircles(manifold, circleA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    const pA = b2Transform.MulXV(xfA, circleA.m_p, b2CollideCircles_s_pA);\r\n    const pB = b2Transform.MulXV(xfB, circleB.m_p, b2CollideCircles_s_pB);\r\n    const distSqr = b2Vec2.DistanceSquaredVV(pA, pB);\r\n    const radius = circleA.m_radius + circleB.m_radius;\r\n    if (distSqr > radius * radius) {\r\n        return;\r\n    }\r\n    manifold.type = b2ManifoldType.e_circles;\r\n    manifold.localPoint.Copy(circleA.m_p);\r\n    manifold.localNormal.SetZero();\r\n    manifold.pointCount = 1;\r\n    manifold.points[0].localPoint.Copy(circleB.m_p);\r\n    manifold.points[0].id.key = 0;\r\n}\r\nconst b2CollidePolygonAndCircle_s_c = new b2Vec2();\r\nconst b2CollidePolygonAndCircle_s_cLocal = new b2Vec2();\r\nconst b2CollidePolygonAndCircle_s_faceCenter = new b2Vec2();\r\nexport function b2CollidePolygonAndCircle(manifold, polygonA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    // Compute circle position in the frame of the polygon.\r\n    const c = b2Transform.MulXV(xfB, circleB.m_p, b2CollidePolygonAndCircle_s_c);\r\n    const cLocal = b2Transform.MulTXV(xfA, c, b2CollidePolygonAndCircle_s_cLocal);\r\n    // Find the min separating edge.\r\n    let normalIndex = 0;\r\n    let separation = (-b2_maxFloat);\r\n    const radius = polygonA.m_radius + circleB.m_radius;\r\n    const vertexCount = polygonA.m_count;\r\n    const vertices = polygonA.m_vertices;\r\n    const normals = polygonA.m_normals;\r\n    for (let i = 0; i < vertexCount; ++i) {\r\n        const s = b2Vec2.DotVV(normals[i], b2Vec2.SubVV(cLocal, vertices[i], b2Vec2.s_t0));\r\n        if (s > radius) {\r\n            // Early out.\r\n            return;\r\n        }\r\n        if (s > separation) {\r\n            separation = s;\r\n            normalIndex = i;\r\n        }\r\n    }\r\n    // Vertices that subtend the incident face.\r\n    const vertIndex1 = normalIndex;\r\n    const vertIndex2 = (vertIndex1 + 1) % vertexCount;\r\n    const v1 = vertices[vertIndex1];\r\n    const v2 = vertices[vertIndex2];\r\n    // If the center is inside the polygon ...\r\n    if (separation < b2_epsilon) {\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        manifold.localNormal.Copy(normals[normalIndex]);\r\n        b2Vec2.MidVV(v1, v2, manifold.localPoint);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n        return;\r\n    }\r\n    // Compute barycentric coordinates\r\n    const u1 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v1, b2Vec2.s_t0), b2Vec2.SubVV(v2, v1, b2Vec2.s_t1));\r\n    const u2 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v2, b2Vec2.s_t0), b2Vec2.SubVV(v1, v2, b2Vec2.s_t1));\r\n    if (u1 <= 0) {\r\n        if (b2Vec2.DistanceSquaredVV(cLocal, v1) > radius * radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        b2Vec2.SubVV(cLocal, v1, manifold.localNormal).SelfNormalize();\r\n        manifold.localPoint.Copy(v1);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n    else if (u2 <= 0) {\r\n        if (b2Vec2.DistanceSquaredVV(cLocal, v2) > radius * radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        b2Vec2.SubVV(cLocal, v2, manifold.localNormal).SelfNormalize();\r\n        manifold.localPoint.Copy(v2);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n    else {\r\n        const faceCenter = b2Vec2.MidVV(v1, v2, b2CollidePolygonAndCircle_s_faceCenter);\r\n        separation = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, faceCenter, b2Vec2.s_t1), normals[vertIndex1]);\r\n        if (separation > radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();\r\n        manifold.localPoint.Copy(faceCenter);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb2xsaWRlQ2lyY2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvQ29sbGlzaW9uL2IyQ29sbGlkZUNpcmNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzRCxNQUFNLHFCQUFxQixHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7QUFDbkQsTUFBTSxxQkFBcUIsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ25ELE1BQU0sMkJBQTJCLFFBQW9CLEVBQUUsT0FBc0IsRUFBRSxHQUFnQixFQUFFLE9BQXNCLEVBQUUsR0FBZ0I7SUFDdkksUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFeEIsTUFBTSxFQUFFLEdBQVcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQzlFLE1BQU0sRUFBRSxHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUU5RSxNQUFNLE9BQU8sR0FBVyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sTUFBTSxHQUFXLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMzRCxJQUFJLE9BQU8sR0FBRyxNQUFNLEdBQUcsTUFBTSxFQUFFO1FBQzdCLE9BQU87S0FDUjtJQUVELFFBQVEsQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztJQUN6QyxRQUFR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","import { b2_maxFloat, b2_maxManifoldPoints } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ContactFeatureType } from \"./b2Collision\";\r\nimport { b2ManifoldType, b2ClipVertex, b2ClipSegmentToLine } from \"./b2Collision\";\r\nconst b2EdgeSeparation_s_normal1World = new b2Vec2();\r\nconst b2EdgeSeparation_s_normal1 = new b2Vec2();\r\nconst b2EdgeSeparation_s_v1 = new b2Vec2();\r\nconst b2EdgeSeparation_s_v2 = new b2Vec2();\r\nfunction b2EdgeSeparation(poly1, xf1, edge1, poly2, xf2) {\r\n    ///const count1: number = poly1.m_count;\r\n    const vertices1 = poly1.m_vertices;\r\n    const normals1 = poly1.m_normals;\r\n    const count2 = poly2.m_count;\r\n    const vertices2 = poly2.m_vertices;\r\n    ///b2Assert(0 <= edge1 && edge1 < count1);\r\n    // Convert normal from poly1's frame into poly2's frame.\r\n    const normal1World = b2Rot.MulRV(xf1.q, normals1[edge1], b2EdgeSeparation_s_normal1World);\r\n    const normal1 = b2Rot.MulTRV(xf2.q, normal1World, b2EdgeSeparation_s_normal1);\r\n    // Find support vertex on poly2 for -normal.\r\n    let index = 0;\r\n    let minDot = b2_maxFloat;\r\n    for (let i = 0; i < count2; ++i) {\r\n        const dot = b2Vec2.DotVV(vertices2[i], normal1);\r\n        if (dot < minDot) {\r\n            minDot = dot;\r\n            index = i;\r\n        }\r\n    }\r\n    const v1 = b2Transform.MulXV(xf1, vertices1[edge1], b2EdgeSeparation_s_v1);\r\n    const v2 = b2Transform.MulXV(xf2, vertices2[index], b2EdgeSeparation_s_v2);\r\n    const separation = b2Vec2.DotVV(b2Vec2.SubVV(v2, v1, b2Vec2.s_t0), normal1World);\r\n    return separation;\r\n}\r\nconst b2FindMaxSeparation_s_d = new b2Vec2();\r\nconst b2FindMaxSeparation_s_dLocal1 = new b2Vec2();\r\nfunction b2FindMaxSeparation(edgeIndex, poly1, xf1, poly2, xf2) {\r\n    const count1 = poly1.m_count;\r\n    const normals1 = poly1.m_normals;\r\n    // Vector pointing from the centroid of poly1 to the centroid of poly2.\r\n    const d = b2Vec2.SubVV(b2Transform.MulXV(xf2, poly2.m_centroid, b2Vec2.s_t0), b2Transform.MulXV(xf1, poly1.m_centroid, b2Vec2.s_t1), b2FindMaxSeparation_s_d);\r\n    const dLocal1 = b2Rot.MulTRV(xf1.q, d, b2FindMaxSeparation_s_dLocal1);\r\n    // Find edge normal on poly1 that has the largest projection onto d.\r\n    let edge = 0;\r\n    let maxDot = (-b2_maxFloat);\r\n    for (let i = 0; i < count1; ++i) {\r\n        const dot = b2Vec2.DotVV(normals1[i], dLocal1);\r\n        if (dot > maxDot) {\r\n            maxDot = dot;\r\n            edge = i;\r\n        }\r\n    }\r\n    // Get the separation for the edge normal.\r\n    let s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\r\n    // Check the separation for the previous edge normal.\r\n    const prevEdge = (edge + count1 - 1) % count1;\r\n    const sPrev = b2EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);\r\n    // Check the separation for the next edge normal.\r\n    const nextEdge = (edge + 1) % count1;\r\n    const sNext = b2EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);\r\n    // Find the best edge and the search direction.\r\n    let bestEdge = 0;\r\n    let bestSeparation = 0;\r\n    let increment = 0;\r\n    if (sPrev > s && sPrev > sNext) {\r\n        increment = -1;\r\n        bestEdge = prevEdge;\r\n        bestSeparation = sPrev;\r\n    }\r\n    else if (sNext > s) {\r\n        increment = 1;\r\n        bestEdge = nextEdge;\r\n        bestSeparation = sNext;\r\n    }\r\n    else {\r\n        edgeIndex[0] = edge;\r\n        return s;\r\n    }\r\n    // Perform a local search for the best edge normal.\r\n    while (true) {\r\n        if (increment === -1)\r\n            edge = (bestEdge + count1 - 1) % count1;\r\n        else\r\n            edge = (bestEdge + 1) % count1;\r\n        s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\r\n        if (s > bestSeparation) {\r\n            bestEdge = edge;\r\n            bestSeparation = s;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    edgeIndex[0] = bestEdge;\r\n    return bestSeparation;\r\n}\r\nconst b2FindIncidentEdge_s_normal1 = new b2Vec2();\r\nfunction b2FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\r\n    ///const count1: number = poly1.m_count;\r\n    const normals1 = poly1.m_normals;\r\n    const count2 = poly2.m_count;\r\n    const vertices2 = poly2.m_vertices;\r\n    const normals2 = poly2.m_normals;\r\n    ///b2Assert(0 <= edge1 && edge1 < count1);\r\n    // Get the normal of the reference edge in poly2's frame.\r\n    const normal1 = b2Rot.MulTRV(xf2.q, b2Rot.MulRV(xf1.q, normals1[edge1], b2Vec2.s_t0), b2FindIncidentEdge_s_normal1);\r\n    // Find the incident edge on poly2.\r\n    let index = 0;\r\n    let minDot = b2_maxFloat;\r\n    for (let i = 0; i < count2; ++i) {\r\n        const dot = b2Vec2.DotVV(normal1, normals2[i]);\r\n        if (dot < minDot) {\r\n            minDot = dot;\r\n            index = i;\r\n        }\r\n    }\r\n    // Build the clip vertices for the incident edge.\r\n    const i1 = index;\r\n    const i2 = (i1 + 1) % count2;\r\n    const c0 = c[0];\r\n    b2Transform.MulXV(xf2, vertices2[i1], c0.v);\r\n    const cf0 = c0.id.cf;\r\n    cf0.indexA = edge1;\r\n    cf0.indexB = i1;\r\n    cf0.typeA = b2ContactFeatureType.e_face;\r\n    cf0.typeB = b2ContactFeatureType.e_vertex;\r\n    const c1 = c[1];\r\n    b2Transform.MulXV(xf2, vertices2[i2], c1.v);\r\n    const cf1 = c1.id.cf;\r\n    cf1.indexA = edge1;\r\n    cf1.indexB = i2;\r\n    cf1.typeA = b2ContactFeatureType.e_face;\r\n    cf1.typeB = b2ContactFeatureType.e_vertex;\r\n}\r\nconst b2CollidePolygons_s_incidentEdge = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_clipPoints1 = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_clipPoints2 = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_edgeA = [0];\r\nconst b2CollidePolygons_s_edgeB = [0];\r\nconst b2CollidePolygons_s_localTangent = new b2Vec2();\r\nconst b2CollidePolygons_s_localNormal = new b2Vec2();\r\nconst b2CollidePolygons_s_planePoint = new b2Vec2();\r\nconst b2CollidePolygons_s_normal = new b2Vec2();\r\nconst b2CollidePolygons_s_tangent = new b2Vec2();\r\nconst b2CollidePolygons_s_ntangent = new b2Vec2();\r\nconst b2CollidePolygons_s_v11 = new b2Vec2();\r\nconst b2CollidePolygons_s_v12 = new b2Vec2();\r\nexport function b2CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\r\n    manifold.pointCount = 0;\r\n    const totalRadius = polyA.m_radius + polyB.m_radius;\r\n    const edgeA = b2CollidePolygons_s_edgeA;\r\n    edgeA[0] = 0;\r\n    const separationA = b2FindMaxSeparation(edgeA, polyA, xfA, polyB, xfB);\r\n    if (separationA > totalRadius)\r\n        return;\r\n    const edgeB = b2CollidePolygons_s_edgeB;\r\n    edgeB[0] = 0;\r\n    const separationB = b2FindMaxSeparation(edgeB, polyB, xfB, polyA, xfA);\r\n    if (separationB > totalRadius)\r\n        return;\r\n    let poly1; // reference polygon\r\n    let poly2; // incident polygon\r\n    let xf1, xf2;\r\n    let edge1 = 0; // reference edge\r\n    let flip = 0;\r\n    const k_relativeTol = 0.98;\r\n    const k_absoluteTol = 0.001;\r\n    if (separationB > k_relativeTol * separationA + k_absoluteTol) {\r\n        poly1 = polyB;\r\n        poly2 = polyA;\r\n        xf1 = xfB;\r\n        xf2 = xfA;\r\n        edge1 = edgeB[0];\r\n        manifold.type = b2ManifoldType.e_faceB;\r\n        flip = 1;\r\n    }\r\n    else {\r\n        poly1 = polyA;\r\n        poly2 = polyB;\r\n        xf1 = xfA;\r\n        xf2 = xfB;\r\n        edge1 = edgeA[0];\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        flip = 0;\r\n    }\r\n    const incidentEdge = b2CollidePolygons_s_incidentEdge;\r\n    b2FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\r\n    const count1 = poly1.m_count;\r\n    const vertices1 = poly1.m_vertices;\r\n    const iv1 = edge1;\r\n    const iv2 = (edge1 + 1) % count1;\r\n    const local_v11 = vertices1[iv1];\r\n    const local_v12 = vertices1[iv2];\r\n    const localTangent = b2Vec2.SubVV(local_v12, local_v11, b2CollidePolygons_s_localTangent);\r\n    localTangent.Normalize();\r\n    const localNormal = b2Vec2.CrossVOne(localTangent, b2CollidePolygons_s_localNormal);\r\n    const planePoint = b2Vec2.MidVV(local_v11, local_v12, b2CollidePolygons_s_planePoint);\r\n    const tangent = b2Rot.MulRV(xf1.q, localTangent, b2CollidePolygons_s_tangent);\r\n    const normal = b2Vec2.CrossVOne(tangent, b2CollidePolygons_s_normal);\r\n    const v11 = b2Transform.MulXV(xf1, local_v11, b2CollidePolygons_s_v11);\r\n    const v12 = b2Transform.MulXV(xf1, local_v12, b2CollidePolygons_s_v12);\r\n    // Face offset.\r\n    const frontOffset = b2Vec2.DotVV(normal, v11);\r\n    // Side offsets, extended by polytope skin thickness.\r\n    const sideOffset1 = -b2Vec2.DotVV(tangent, v11) + totalRadius;\r\n    const sideOffset2 = b2Vec2.DotVV(tangent, v12) + totalRadius;\r\n    // Clip incident edge against extruded edge1 side edges.\r\n    const clipPoints1 = b2CollidePolygons_s_clipPoints1;\r\n    const clipPoints2 = b2CollidePolygons_s_clipPoints2;\r\n    let np;\r\n    // Clip to box side 1\r\n    const ntangent = b2Vec2.NegV(tangent, b2CollidePolygons_s_ntangent);\r\n    np = b2ClipSegmentToLine(clipPoints1, incidentEdge, ntangent, sideOffset1, iv1);\r\n    if (np < 2)\r\n        return;\r\n    // Clip to negative box side 1\r\n    np = b2ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\r\n    if (np < 2) {\r\n        return;\r\n    }\r\n    // Now clipPoints2 contains the clipped points.\r\n    manifold.localNormal.Copy(localNormal);\r\n    manifold.localPoint.Copy(planePoint);\r\n    let pointCount = 0;\r\n    for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n        const cv = clipPoints2[i];\r\n        const separation = b2Vec2.DotVV(normal, cv.v) - frontOffset;\r\n        if (separation <= totalRadius) {\r\n            const cp = manifold.points[pointCount];\r\n            b2Transform.MulTXV(xf2, cv.v, cp.localPoint);\r\n            cp.id.Copy(cv.id);\r\n            if (flip) {\r\n                // Swap features\r\n                const cf = cp.id.cf;\r\n                cp.id.cf.indexA = cf.indexB;\r\n                cp.id.cf.indexB = cf.indexA;\r\n                cp.id.cf.typeA = cf.typeB;\r\n                cp.id.cf.typeB = cf.typeA;\r\n            }\r\n            ++pointCount;\r\n        }\r\n    }\r\n    manifold.pointCount = pointCount;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","import { b2_maxFloat, b2_angularSlop, b2_maxPolygonVertices, b2_polygonRadius, b2_maxManifoldPoints } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ContactFeatureType, b2ContactID } from \"./b2Collision\";\r\nimport { b2ManifoldType, b2ClipVertex, b2ClipSegmentToLine } from \"./b2Collision\";\r\nconst b2CollideEdgeAndCircle_s_Q = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_d = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e1 = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e2 = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_P = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_n = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_id = new b2ContactID();\r\nexport function b2CollideEdgeAndCircle(manifold, edgeA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    // Compute circle in frame of edge\r\n    const Q = b2Transform.MulTXV(xfA, b2Transform.MulXV(xfB, circleB.m_p, b2Vec2.s_t0), b2CollideEdgeAndCircle_s_Q);\r\n    const A = edgeA.m_vertex1;\r\n    const B = edgeA.m_vertex2;\r\n    const e = b2Vec2.SubVV(B, A, b2CollideEdgeAndCircle_s_e);\r\n    // Barycentric coordinates\r\n    const u = b2Vec2.DotVV(e, b2Vec2.SubVV(B, Q, b2Vec2.s_t0));\r\n    const v = b2Vec2.DotVV(e, b2Vec2.SubVV(Q, A, b2Vec2.s_t0));\r\n    const radius = edgeA.m_radius + circleB.m_radius;\r\n    // const cf: b2ContactFeature = new b2ContactFeature();\r\n    const id = b2CollideEdgeAndCircle_s_id;\r\n    id.cf.indexB = 0;\r\n    id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n    // Region A\r\n    if (v <= 0) {\r\n        const P = A;\r\n        const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n        const dd = b2Vec2.DotVV(d, d);\r\n        if (dd > radius * radius) {\r\n            return;\r\n        }\r\n        // Is there an edge connected to A?\r\n        if (edgeA.m_hasVertex0) {\r\n            const A1 = edgeA.m_vertex0;\r\n            const B1 = A;\r\n            const e1 = b2Vec2.SubVV(B1, A1, b2CollideEdgeAndCircle_s_e1);\r\n            const u1 = b2Vec2.DotVV(e1, b2Vec2.SubVV(B1, Q, b2Vec2.s_t0));\r\n            // Is the circle in Region AB of the previous edge?\r\n            if (u1 > 0) {\r\n                return;\r\n            }\r\n        }\r\n        id.cf.indexA = 0;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_circles;\r\n        manifold.localNormal.SetZero();\r\n        manifold.localPoint.Copy(P);\r\n        manifold.points[0].id.Copy(id);\r\n        // manifold.points[0].id.key = 0;\r\n        // manifold.points[0].id.cf = cf;\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        return;\r\n    }\r\n    // Region B\r\n    if (u <= 0) {\r\n        const P = B;\r\n        const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n        const dd = b2Vec2.DotVV(d, d);\r\n        if (dd > radius * radius) {\r\n            return;\r\n        }\r\n        // Is there an edge connected to B?\r\n        if (edgeA.m_hasVertex3) {\r\n            const B2 = edgeA.m_vertex3;\r\n            const A2 = B;\r\n            const e2 = b2Vec2.SubVV(B2, A2, b2CollideEdgeAndCircle_s_e2);\r\n            const v2 = b2Vec2.DotVV(e2, b2Vec2.SubVV(Q, A2, b2Vec2.s_t0));\r\n            // Is the circle in Region AB of the next edge?\r\n            if (v2 > 0) {\r\n                return;\r\n            }\r\n        }\r\n        id.cf.indexA = 1;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_circles;\r\n        manifold.localNormal.SetZero();\r\n        manifold.localPoint.Copy(P);\r\n        manifold.points[0].id.Copy(id);\r\n        // manifold.points[0].id.key = 0;\r\n        // manifold.points[0].id.cf = cf;\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        return;\r\n    }\r\n    // Region AB\r\n    const den = b2Vec2.DotVV(e, e);\r\n    ///b2Assert(den > 0);\r\n    const P = b2CollideEdgeAndCircle_s_P;\r\n    P.x = (1 / den) * (u * A.x + v * B.x);\r\n    P.y = (1 / den) * (u * A.y + v * B.y);\r\n    const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n    const dd = b2Vec2.DotVV(d, d);\r\n    if (dd > radius * radius) {\r\n        return;\r\n    }\r\n    const n = b2CollideEdgeAndCircle_s_n.Set(-e.y, e.x);\r\n    if (b2Vec2.DotVV(n, b2Vec2.SubVV(Q, A, b2Vec2.s_t0)) < 0) {\r\n        n.Set(-n.x, -n.y);\r\n    }\r\n    n.Normalize();\r\n    id.cf.indexA = 0;\r\n    id.cf.typeA = b2ContactFeatureType.e_face;\r\n    manifold.pointCount = 1;\r\n    manifold.type = b2ManifoldType.e_faceA;\r\n    manifold.localNormal.Copy(n);\r\n    manifold.localPoint.Copy(A);\r\n    manifold.points[0].id.Copy(id);\r\n    // manifold.points[0].id.key = 0;\r\n    // manifold.points[0].id.cf = cf;\r\n    manifold.points[0].localPoint.Copy(circleB.m_p);\r\n}\r\nclass b2EPAxis {\r\n    constructor() {\r\n        this.type = 0 /* e_unknown */;\r\n        this.index = 0;\r\n        this.separation = 0;\r\n    }\r\n}\r\nclass b2TempPolygon {\r\n    constructor() {\r\n        this.vertices = b2Vec2.MakeArray(b2_maxPolygonVertices);\r\n        this.normals = b2Vec2.MakeArray(b2_maxPolygonVertices);\r\n        this.count = 0;\r\n    }\r\n}\r\nclass b2ReferenceFace {\r\n    constructor() {\r\n        this.i1 = 0;\r\n        this.i2 = 0;\r\n        this.v1 = new b2Vec2();\r\n        this.v2 = new b2Vec2();\r\n        this.normal = new b2Vec2();\r\n        this.sideNormal1 = new b2Vec2();\r\n        this.sideOffset1 = 0;\r\n        this.sideNormal2 = new b2Vec2();\r\n        this.sideOffset2 = 0;\r\n    }\r\n}\r\nclass b2EPCollider {\r\n    constructor() {\r\n        this.m_polygonB = new b2TempPolygon();\r\n        this.m_xf = new b2Transform();\r\n        this.m_centroidB = new b2Vec2();\r\n        this.m_v0 = new b2Vec2();\r\n        this.m_v1 = new b2Vec2();\r\n        this.m_v2 = new b2Vec2();\r\n        this.m_v3 = new b2Vec2();\r\n        this.m_normal0 = new b2Vec2();\r\n        this.m_normal1 = new b2Vec2();\r\n        this.m_normal2 = new b2Vec2();\r\n        this.m_normal = new b2Vec2();\r\n        this.m_type1 = 0 /* e_isolated */;\r\n        this.m_type2 = 0 /* e_isolated */;\r\n        this.m_lowerLimit = new b2Vec2();\r\n        this.m_upperLimit = new b2Vec2();\r\n        this.m_radius = 0;\r\n        this.m_front = false;\r\n    }\r\n    Collide(manifold, edgeA, xfA, polygonB, xfB) {\r\n        b2Transform.MulTXX(xfA, xfB, this.m_xf);\r\n        b2Transform.MulXV(this.m_xf, polygonB.m_centroid, this.m_centroidB);\r\n        this.m_v0.Copy(edgeA.m_vertex0);\r\n        this.m_v1.Copy(edgeA.m_vertex1);\r\n        this.m_v2.Copy(edgeA.m_vertex2);\r\n        this.m_v3.Copy(edgeA.m_vertex3);\r\n        const hasVertex0 = edgeA.m_hasVertex0;\r\n        const hasVertex3 = edgeA.m_hasVertex3;\r\n        const edge1 = b2Vec2.SubVV(this.m_v2, this.m_v1, b2EPCollider.s_edge1);\r\n        edge1.Normalize();\r\n        this.m_normal1.Set(edge1.y, -edge1.x);\r\n        const offset1 = b2Vec2.DotVV(this.m_normal1, b2Vec2.SubVV(this.m_centroidB, this.m_v1, b2Vec2.s_t0));\r\n        let offset0 = 0;\r\n        let offset2 = 0;\r\n        let convex1 = false;\r\n        let convex2 = false;\r\n        // Is there a preceding edge?\r\n        if (hasVertex0) {\r\n            const edge0 = b2Vec2.SubVV(this.m_v1, this.m_v0, b2EPCollider.s_edge0);\r\n            edge0.Normalize();\r\n            this.m_normal0.Set(edge0.y, -edge0.x);\r\n            convex1 = b2Vec2.CrossVV(edge0, edge1) >= 0;\r\n            offset0 = b2Vec2.DotVV(this.m_normal0, b2Vec2.SubVV(this.m_centroidB, this.m_v0, b2Vec2.s_t0));\r\n        }\r\n        // Is there a following edge?\r\n        if (hasVertex3) {\r\n            const edge2 = b2Vec2.SubVV(this.m_v3, this.m_v2, b2EPCollider.s_edge2);\r\n            edge2.Normalize();\r\n            this.m_normal2.Set(edge2.y, -edge2.x);\r\n            convex2 = b2Vec2.CrossVV(edge1, edge2) > 0;\r\n            offset2 = b2Vec2.DotVV(this.m_normal2, b2Vec2.SubVV(this.m_centroidB, this.m_v2, b2Vec2.s_t0));\r\n        }\r\n        // Determine front or back collision. Determine collision normal limits.\r\n        if (hasVertex0 && hasVertex3) {\r\n            if (convex1 && convex2) {\r\n                this.m_front = offset0 >= 0 || offset1 >= 0 || offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else if (convex1) {\r\n                this.m_front = offset0 >= 0 || (offset1 >= 0 && offset2 >= 0);\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else if (convex2) {\r\n                this.m_front = offset2 >= 0 || (offset0 >= 0 && offset1 >= 0);\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset0 >= 0 && offset1 >= 0 && offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n        }\r\n        else if (hasVertex0) {\r\n            if (convex1) {\r\n                this.m_front = offset0 >= 0 || offset1 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset0 >= 0 && offset1 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n        }\r\n        else if (hasVertex3) {\r\n            if (convex2) {\r\n                this.m_front = offset1 >= 0 || offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset1 >= 0 && offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.m_front = offset1 >= 0;\r\n            if (this.m_front) {\r\n                this.m_normal.Copy(this.m_normal1);\r\n                this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n            }\r\n            else {\r\n                this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                this.m_lowerLimit.Copy(this.m_normal1);\r\n                this.m_upperLimit.Copy(this.m_normal1);\r\n            }\r\n        }\r\n        // Get polygonB in frameA\r\n        this.m_polygonB.count = polygonB.m_count;\r\n        for (let i = 0; i < polygonB.m_count; ++i) {\r\n            b2Transform.MulXV(this.m_xf, polygonB.m_vertices[i], this.m_polygonB.vertices[i]);\r\n            b2Rot.MulRV(this.m_xf.q, polygonB.m_normals[i], this.m_polygonB.normals[i]);\r\n        }\r\n        this.m_radius = 2 * b2_polygonRadius;\r\n        manifold.pointCount = 0;\r\n        const edgeAxis = this.ComputeEdgeSeparation(b2EPCollider.s_edgeAxis);\r\n        // If no valid normal can be found than this edge should not collide.\r\n        if (edgeAxis.type === 0 /* e_unknown */) {\r\n            return;\r\n        }\r\n        if (edgeAxis.separation > this.m_radius) {\r\n            return;\r\n        }\r\n        const polygonAxis = this.ComputePolygonSeparation(b2EPCollider.s_polygonAxis);\r\n        if (polygonAxis.type !== 0 /* e_unknown */ && polygonAxis.separation > this.m_radius) {\r\n            return;\r\n        }\r\n        // Use hysteresis for jitter reduction.\r\n        const k_relativeTol = 0.98;\r\n        const k_absoluteTol = 0.001;\r\n        let primaryAxis;\r\n        if (polygonAxis.type === 0 /* e_unknown */) {\r\n            primaryAxis = edgeAxis;\r\n        }\r\n        else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\r\n            primaryAxis = polygonAxis;\r\n        }\r\n        else {\r\n            primaryAxis = edgeAxis;\r\n        }\r\n        const ie = b2EPCollider.s_ie;\r\n        const rf = b2EPCollider.s_rf;\r\n        if (primaryAxis.type === 1 /* e_edgeA */) {\r\n            manifold.type = b2ManifoldType.e_faceA;\r\n            // Search for the polygon normal that is most anti-parallel to the edge normal.\r\n            let bestIndex = 0;\r\n            let bestValue = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[0]);\r\n            for (let i = 1; i < this.m_polygonB.count; ++i) {\r\n                const value = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[i]);\r\n                if (value < bestValue) {\r\n                    bestValue = value;\r\n                    bestIndex = i;\r\n                }\r\n            }\r\n            const i1 = bestIndex;\r\n            const i2 = (i1 + 1) % this.m_polygonB.count;\r\n            const ie0 = ie[0];\r\n            ie0.v.Copy(this.m_polygonB.vertices[i1]);\r\n            ie0.id.cf.indexA = 0;\r\n            ie0.id.cf.indexB = i1;\r\n            ie0.id.cf.typeA = b2ContactFeatureType.e_face;\r\n            ie0.id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n            const ie1 = ie[1];\r\n            ie1.v.Copy(this.m_polygonB.vertices[i2]);\r\n            ie1.id.cf.indexA = 0;\r\n            ie1.id.cf.indexB = i2;\r\n            ie1.id.cf.typeA = b2ContactFeatureType.e_face;\r\n            ie1.id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n            if (this.m_front) {\r\n                rf.i1 = 0;\r\n                rf.i2 = 1;\r\n                rf.v1.Copy(this.m_v1);\r\n                rf.v2.Copy(this.m_v2);\r\n                rf.normal.Copy(this.m_normal1);\r\n            }\r\n            else {\r\n                rf.i1 = 1;\r\n                rf.i2 = 0;\r\n                rf.v1.Copy(this.m_v2);\r\n                rf.v2.Copy(this.m_v1);\r\n                rf.normal.Copy(this.m_normal1).SelfNeg();\r\n            }\r\n        }\r\n        else {\r\n            manifold.type = b2ManifoldType.e_faceB;\r\n            const ie0 = ie[0];\r\n            ie0.v.Copy(this.m_v1);\r\n            ie0.id.cf.indexA = 0;\r\n            ie0.id.cf.indexB = primaryAxis.index;\r\n            ie0.id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n            ie0.id.cf.typeB = b2ContactFeatureType.e_face;\r\n            const ie1 = ie[1];\r\n            ie1.v.Copy(this.m_v2);\r\n            ie1.id.cf.indexA = 0;\r\n            ie1.id.cf.indexB = primaryAxis.index;\r\n            ie1.id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n            ie1.id.cf.typeB = b2ContactFeatureType.e_face;\r\n            rf.i1 = primaryAxis.index;\r\n            rf.i2 = (rf.i1 + 1) % this.m_polygonB.count;\r\n            rf.v1.Copy(this.m_polygonB.vertices[rf.i1]);\r\n            rf.v2.Copy(this.m_polygonB.vertices[rf.i2]);\r\n            rf.normal.Copy(this.m_polygonB.normals[rf.i1]);\r\n        }\r\n        rf.sideNormal1.Set(rf.normal.y, -rf.normal.x);\r\n        rf.sideNormal2.Copy(rf.sideNormal1).SelfNeg();\r\n        rf.sideOffset1 = b2Vec2.DotVV(rf.sideNormal1, rf.v1);\r\n        rf.sideOffset2 = b2Vec2.DotVV(rf.sideNormal2, rf.v2);\r\n        // Clip incident edge against extruded edge1 side edges.\r\n        const clipPoints1 = b2EPCollider.s_clipPoints1;\r\n        const clipPoints2 = b2EPCollider.s_clipPoints2;\r\n        let np = 0;\r\n        // Clip to box side 1\r\n        np = b2ClipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\r\n        if (np < b2_maxManifoldPoints) {\r\n            return;\r\n        }\r\n        // Clip to negative box side 1\r\n        np = b2ClipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\r\n        if (np < b2_maxManifoldPoints) {\r\n            return;\r\n        }\r\n        // Now clipPoints2 contains the clipped points.\r\n        if (primaryAxis.type === 1 /* e_edgeA */) {\r\n            manifold.localNormal.Copy(rf.normal);\r\n            manifold.localPoint.Copy(rf.v1);\r\n        }\r\n        else {\r\n            manifold.localNormal.Copy(polygonB.m_normals[rf.i1]);\r\n            manifold.localPoint.Copy(polygonB.m_vertices[rf.i1]);\r\n        }\r\n        let pointCount = 0;\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            let separation;\r\n            separation = b2Vec2.DotVV(rf.normal, b2Vec2.SubVV(clipPoints2[i].v, rf.v1, b2Vec2.s_t0));\r\n            if (separation <= this.m_radius) {\r\n                const cp = manifold.points[pointCount];\r\n                if (primaryAxis.type === 1 /* e_edgeA */) {\r\n                    b2Transform.MulTXV(this.m_xf, clipPoints2[i].v, cp.localPoint);\r\n                    cp.id = clipPoints2[i].id;\r\n                }\r\n                else {\r\n                    cp.localPoint.Copy(clipPoints2[i].v);\r\n                    cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\r\n                    cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\r\n                    cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\r\n                    cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\r\n                }\r\n                ++pointCount;\r\n            }\r\n        }\r\n        manifold.pointCount = pointCount;\r\n    }\r\n    ComputeEdgeSeparation(out) {\r\n        const axis = out;\r\n        axis.type = 1 /* e_edgeA */;\r\n        axis.index = this.m_front ? 0 : 1;\r\n        axis.separation = b2_maxFloat;\r\n        for (let i = 0; i < this.m_polygonB.count; ++i) {\r\n            const s = b2Vec2.DotVV(this.m_normal, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));\r\n            if (s < axis.separation) {\r\n                axis.separation = s;\r\n            }\r\n        }\r\n        return axis;\r\n    }\r\n    ComputePolygonSeparation(out) {\r\n        const axis = out;\r\n        axis.type = 0 /* e_unknown */;\r\n        axis.index = -1;\r\n        axis.separation = -b2_maxFloat;\r\n        const perp = b2EPCollider.s_perp.Set(-this.m_normal.y, this.m_normal.x);\r\n        for (let i = 0; i < this.m_polygonB.count; ++i) {\r\n            const n = b2Vec2.NegV(this.m_polygonB.normals[i], b2EPCollider.s_n);\r\n            const s1 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));\r\n            const s2 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v2, b2Vec2.s_t0));\r\n            const s = b2Min(s1, s2);\r\n            if (s > this.m_radius) {\r\n                // No collision\r\n                axis.type = 2 /* e_edgeB */;\r\n                axis.index = i;\r\n                axis.separation = s;\r\n                return axis;\r\n            }\r\n            // Adjacency\r\n            if (b2Vec2.DotVV(n, perp) >= 0) {\r\n                if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_upperLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) {\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_lowerLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (s > axis.separation) {\r\n                axis.type = 2 /* e_edgeB */;\r\n                axis.index = i;\r\n                axis.separation = s;\r\n            }\r\n        }\r\n        return axis;\r\n    }\r\n}\r\nb2EPCollider.s_edge1 = new b2Vec2();\r\nb2EPCollider.s_edge0 = new b2Vec2();\r\nb2EPCollider.s_edge2 = new b2Vec2();\r\nb2EPCollider.s_ie = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_rf = new b2ReferenceFace();\r\nb2EPCollider.s_clipPoints1 = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_clipPoints2 = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_edgeAxis = new b2EPAxis();\r\nb2EPCollider.s_polygonAxis = new b2EPAxis();\r\nb2EPCollider.s_n = new b2Vec2();\r\nb2EPCollider.s_perp = new b2Vec2();\r\nconst b2CollideEdgeAndPolygon_s_collider = new b2EPCollider();\r\nexport function b2CollideEdgeAndPolygon(manifold, edgeA, xfA, polygonB, xfB) {\r\n    const collider = b2CollideEdgeAndPolygon_s_collider;\r\n    collider.Collide(manifold, edgeA, xfA, polygonB, xfB);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_epsilon } from \"../../Common/b2Settings\";\r\nimport { b2Sq, b2Sqrt, b2Asin, b2Pow, b2Vec2, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A circle shape.\r\nexport class b2CircleShape extends b2Shape {\r\n    constructor(radius = 0) {\r\n        super(b2ShapeType.e_circleShape, radius);\r\n        this.m_p = new b2Vec2();\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2CircleShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        ///b2Assert(other instanceof b2CircleShape);\r\n        this.m_p.Copy(other.m_p);\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    TestPoint(transform, p) {\r\n        const center = b2Transform.MulXV(transform, this.m_p, b2CircleShape.TestPoint_s_center);\r\n        const d = b2Vec2.SubVV(p, center, b2CircleShape.TestPoint_s_d);\r\n        return b2Vec2.DotVV(d, d) <= b2Sq(this.m_radius);\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const center = b2Transform.MulXV(xf, this.m_p, b2CircleShape.ComputeDistance_s_center);\r\n        b2Vec2.SubVV(p, center, normal);\r\n        return normal.Normalize() - this.m_radius;\r\n    }\r\n    RayCast(output, input, transform, childIndex) {\r\n        const position = b2Transform.MulXV(transform, this.m_p, b2CircleShape.RayCast_s_position);\r\n        const s = b2Vec2.SubVV(input.p1, position, b2CircleShape.RayCast_s_s);\r\n        const b = b2Vec2.DotVV(s, s) - b2Sq(this.m_radius);\r\n        // Solve quadratic equation.\r\n        const r = b2Vec2.SubVV(input.p2, input.p1, b2CircleShape.RayCast_s_r);\r\n        const c = b2Vec2.DotVV(s, r);\r\n        const rr = b2Vec2.DotVV(r, r);\r\n        const sigma = c * c - rr * b;\r\n        // Check for negative discriminant and short segment.\r\n        if (sigma < 0 || rr < b2_epsilon) {\r\n            return false;\r\n        }\r\n        // Find the point of intersection of the line with the circle.\r\n        let a = (-(c + b2Sqrt(sigma)));\r\n        // Is the intersection point on the segment?\r\n        if (0 <= a && a <= input.maxFraction * rr) {\r\n            a /= rr;\r\n            output.fraction = a;\r\n            b2Vec2.AddVMulSV(s, a, r, output.normal).SelfNormalize();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ComputeAABB(aabb, transform, childIndex) {\r\n        const p = b2Transform.MulXV(transform, this.m_p, b2CircleShape.ComputeAABB_s_p);\r\n        aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius);\r\n        aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius);\r\n    }\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        const radius_sq = b2Sq(this.m_radius);\r\n        massData.mass = density * b2_pi * radius_sq;\r\n        massData.center.Copy(this.m_p);\r\n        // inertia about the local origin\r\n        massData.I = massData.mass * (0.5 * radius_sq + b2Vec2.DotVV(this.m_p, this.m_p));\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_p);\r\n        proxy.m_count = 1;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        const p = b2Transform.MulXV(xf, this.m_p, new b2Vec2());\r\n        const l = (-(b2Vec2.DotVV(normal, p) - offset));\r\n        if (l < (-this.m_radius) + b2_epsilon) {\r\n            // Completely dry\r\n            return 0;\r\n        }\r\n        if (l > this.m_radius) {\r\n            // Completely wet\r\n            c.Copy(p);\r\n            return b2_pi * this.m_radius * this.m_radius;\r\n        }\r\n        // Magic\r\n        const r2 = this.m_radius * this.m_radius;\r\n        const l2 = l * l;\r\n        const area = r2 * (b2Asin(l / this.m_radius) + b2_pi / 2) + l * b2Sqrt(r2 - l2);\r\n        const com = (-2 / 3 * b2Pow(r2 - l2, 1.5) / area);\r\n        c.x = p.x + normal.x * com;\r\n        c.y = p.y + normal.y * com;\r\n        return area;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2CircleShape = new b2CircleShape();\\n\");\r\n        log(\"    shape.m_radius = %.15f;\\n\", this.m_radius);\r\n        log(\"    shape.m_p.Set(%.15f, %.15f);\\n\", this.m_p.x, this.m_p.y);\r\n    }\r\n}\r\n/// Implement b2Shape.\r\nb2CircleShape.TestPoint_s_center = new b2Vec2();\r\nb2CircleShape.TestPoint_s_d = new b2Vec2();\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2CircleShape.ComputeDistance_s_center = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\r\n// From Section 3.1.2\r\n// x = s + a * r\r\n// norm(x) = radius\r\nb2CircleShape.RayCast_s_position = new b2Vec2();\r\nb2CircleShape.RayCast_s_s = new b2Vec2();\r\nb2CircleShape.RayCast_s_r = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2CircleShape.ComputeAABB_s_p = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaXJjbGVTaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0NvbGxpc2lvbi9TaGFwZXMvYjJDaXJjbGVTaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJdkYsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFakQsbUJBQW1CO0FBQ25CLE1BQU0sb0JBQXFCLFNBQVEsT0FBTztJQUd4QyxZQUFZLFNBQWlCLENBQUM7UUFDNUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFIcEMsUUFBRyxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7SUFJbEMsQ0FBQztJQUVELHNCQUFzQjtJQUNmLEtBQUs7UUFDVixPQUFPLElBQUksYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBb0I7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQiw0Q0FBNEM7UUFFNUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELCtCQUErQjtJQUN4QixhQUFhO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUtNLFNBQVMsQ0FBQyxTQUFzQixFQUFFLENBQVM7UUFDaEQsTUFBTSxNQUFNLEdBQVcsV0FB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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_epsilon, b2_maxFloat, b2_linearSlop, b2_polygonRadius, b2_maxPolygonVertices, b2MakeNumberArray } from \"../../Common/b2Settings\";\r\nimport { b2Min, b2Vec2, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2MassData } from \"./b2Shape\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A convex polygon. It is assumed that the interior of the polygon is to\r\n/// the left of each edge.\r\n/// Polygons have a maximum number of vertices equal to b2_maxPolygonVertices.\r\n/// In most cases you should not need many vertices for a convex polygon.\r\nexport class b2PolygonShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_polygonShape, b2_polygonRadius);\r\n        this.m_centroid = new b2Vec2(0, 0);\r\n        this.m_vertices = b2Vec2.MakeArray(b2_maxPolygonVertices);\r\n        this.m_normals = b2Vec2.MakeArray(b2_maxPolygonVertices);\r\n        this.m_count = 0;\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2PolygonShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        ///b2Assert(other instanceof b2PolygonShape);\r\n        this.m_centroid.Copy(other.m_centroid);\r\n        this.m_count = other.m_count;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_vertices[i].Copy(other.m_vertices[i]);\r\n            this.m_normals[i].Copy(other.m_normals[i]);\r\n        }\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    Set(vertices, count = vertices.length, start = 0) {\r\n        ///b2Assert(3 <= count && count <= b2_maxPolygonVertices);\r\n        if (count < 3) {\r\n            return this.SetAsBox(1, 1);\r\n        }\r\n        let n = b2Min(count, b2_maxPolygonVertices);\r\n        // Perform welding and copy vertices into local buffer.\r\n        const ps = b2PolygonShape.Set_s_ps;\r\n        let tempCount = 0;\r\n        for (let i = 0; i < n; ++i) {\r\n            const /*b2Vec2*/ v = vertices[start + i];\r\n            let /*bool*/ unique = true;\r\n            for (let /*int32*/ j = 0; j < tempCount; ++j) {\r\n                if (b2Vec2.DistanceSquaredVV(v, ps[j]) < ((0.5 * b2_linearSlop) * (0.5 * b2_linearSlop))) {\r\n                    unique = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (unique) {\r\n                ps[tempCount++].Copy(v); // ps[tempCount++] = v;\r\n            }\r\n        }\r\n        n = tempCount;\r\n        if (n < 3) {\r\n            // Polygon is degenerate.\r\n            ///b2Assert(false);\r\n            return this.SetAsBox(1.0, 1.0);\r\n        }\r\n        // Create the convex hull using the Gift wrapping algorithm\r\n        // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\r\n        // Find the right most point on the hull\r\n        let i0 = 0;\r\n        let x0 = ps[0].x;\r\n        for (let i = 1; i < n; ++i) {\r\n            const x = ps[i].x;\r\n            if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\r\n                i0 = i;\r\n                x0 = x;\r\n            }\r\n        }\r\n        const hull = b2PolygonShape.Set_s_hull;\r\n        let m = 0;\r\n        let ih = i0;\r\n        for (;;) {\r\n            hull[m] = ih;\r\n            let ie = 0;\r\n            for (let j = 1; j < n; ++j) {\r\n                if (ie === ih) {\r\n                    ie = j;\r\n                    continue;\r\n                }\r\n                const r = b2Vec2.SubVV(ps[ie], ps[hull[m]], b2PolygonShape.Set_s_r);\r\n                const v = b2Vec2.SubVV(ps[j], ps[hull[m]], b2PolygonShape.Set_s_v);\r\n                const c = b2Vec2.CrossVV(r, v);\r\n                if (c < 0) {\r\n                    ie = j;\r\n                }\r\n                // Collinearity check\r\n                if (c === 0 && v.LengthSquared() > r.LengthSquared()) {\r\n                    ie = j;\r\n                }\r\n            }\r\n            ++m;\r\n            ih = ie;\r\n            if (ie === i0) {\r\n                break;\r\n            }\r\n        }\r\n        this.m_count = m;\r\n        // Copy vertices.\r\n        for (let i = 0; i < m; ++i) {\r\n            this.m_vertices[i].Copy(ps[hull[i]]);\r\n        }\r\n        // Compute normals. Ensure the edges have non-zero length.\r\n        for (let i = 0; i < m; ++i) {\r\n            const vertexi1 = this.m_vertices[i];\r\n            const vertexi2 = this.m_vertices[(i + 1) % m];\r\n            const edge = b2Vec2.SubVV(vertexi2, vertexi1, b2Vec2.s_t0); // edge uses s_t0\r\n            ///b2Assert(edge.LengthSquared() > b2_epsilon_sq);\r\n            b2Vec2.CrossVOne(edge, this.m_normals[i]).SelfNormalize();\r\n        }\r\n        // Compute the polygon centroid.\r\n        b2PolygonShape.ComputeCentroid(this.m_vertices, m, this.m_centroid);\r\n        return this;\r\n    }\r\n    SetAsArray(vertices, count = vertices.length) {\r\n        return this.Set(vertices, count);\r\n    }\r\n    /// Build vertices to represent an axis-aligned box or an oriented box.\r\n    /// @param hx the half-width.\r\n    /// @param hy the half-height.\r\n    /// @param center the center of the box in local coordinates.\r\n    /// @param angle the rotation of the box in local coordinates.\r\n    SetAsBox(hx, hy, center, angle = 0) {\r\n        this.m_count = 4;\r\n        this.m_vertices[0].Set((-hx), (-hy));\r\n        this.m_vertices[1].Set(hx, (-hy));\r\n        this.m_vertices[2].Set(hx, hy);\r\n        this.m_vertices[3].Set((-hx), hy);\r\n        this.m_normals[0].Set(0, (-1));\r\n        this.m_normals[1].Set(1, 0);\r\n        this.m_normals[2].Set(0, 1);\r\n        this.m_normals[3].Set((-1), 0);\r\n        this.m_centroid.SetZero();\r\n        if (center instanceof b2Vec2) {\r\n            this.m_centroid.Copy(center);\r\n            const xf = new b2Transform();\r\n            xf.SetPosition(center);\r\n            xf.SetRotationAngle(angle);\r\n            // Transform vertices and normals.\r\n            for (let i = 0; i < this.m_count; ++i) {\r\n                b2Transform.MulXV(xf, this.m_vertices[i], this.m_vertices[i]);\r\n                b2Rot.MulRV(xf.q, this.m_normals[i], this.m_normals[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    TestPoint(xf, p) {\r\n        const pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.TestPoint_s_pLocal);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));\r\n            if (dot > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.ComputeDistance_s_pLocal);\r\n        let maxDistance = -b2_maxFloat;\r\n        const normalForMaxDistance = b2PolygonShape.ComputeDistance_s_normalForMaxDistance.Copy(pLocal);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));\r\n            if (dot > maxDistance) {\r\n                maxDistance = dot;\r\n                normalForMaxDistance.Copy(this.m_normals[i]);\r\n            }\r\n        }\r\n        if (maxDistance > 0) {\r\n            const minDistance = b2PolygonShape.ComputeDistance_s_minDistance.Copy(normalForMaxDistance);\r\n            let minDistance2 = maxDistance * maxDistance;\r\n            for (let i = 0; i < this.m_count; ++i) {\r\n                const distance = b2Vec2.SubVV(pLocal, this.m_vertices[i], b2PolygonShape.ComputeDistance_s_distance);\r\n                const distance2 = distance.LengthSquared();\r\n                if (minDistance2 > distance2) {\r\n                    minDistance.Copy(distance);\r\n                    minDistance2 = distance2;\r\n                }\r\n            }\r\n            b2Rot.MulRV(xf.q, minDistance, normal);\r\n            normal.Normalize();\r\n            return Math.sqrt(minDistance2);\r\n        }\r\n        else {\r\n            b2Rot.MulRV(xf.q, normalForMaxDistance, normal);\r\n            return maxDistance;\r\n        }\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        // Put the ray into the polygon's frame of reference.\r\n        const p1 = b2Transform.MulTXV(xf, input.p1, b2PolygonShape.RayCast_s_p1);\r\n        const p2 = b2Transform.MulTXV(xf, input.p2, b2PolygonShape.RayCast_s_p2);\r\n        const d = b2Vec2.SubVV(p2, p1, b2PolygonShape.RayCast_s_d);\r\n        let lower = 0, upper = input.maxFraction;\r\n        let index = -1;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            // p = p1 + a * d\r\n            // dot(normal, p - v) = 0\r\n            // dot(normal, p1 - v) + a * dot(normal, d) = 0\r\n            const numerator = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(this.m_vertices[i], p1, b2Vec2.s_t0));\r\n            const denominator = b2Vec2.DotVV(this.m_normals[i], d);\r\n            if (denominator === 0) {\r\n                if (numerator < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                // Note: we want this predicate without division:\r\n                // lower < numerator / denominator, where denominator < 0\r\n                // Since denominator < 0, we have to flip the inequality:\r\n                // lower < numerator / denominator <==> denominator * lower > numerator.\r\n                if (denominator < 0 && numerator < lower * denominator) {\r\n                    // Increase lower.\r\n                    // The segment enters this half-space.\r\n                    lower = numerator / denominator;\r\n                    index = i;\r\n                }\r\n                else if (denominator > 0 && numerator < upper * denominator) {\r\n                    // Decrease upper.\r\n                    // The segment exits this half-space.\r\n                    upper = numerator / denominator;\r\n                }\r\n            }\r\n            // The use of epsilon here causes the assert on lower to trip\r\n            // in some cases. Apparently the use of epsilon was to make edge\r\n            // shapes work, but now those are handled separately.\r\n            // if (upper < lower - b2_epsilon)\r\n            if (upper < lower) {\r\n                return false;\r\n            }\r\n        }\r\n        ///b2Assert(0 <= lower && lower <= input.maxFraction);\r\n        if (index >= 0) {\r\n            output.fraction = lower;\r\n            b2Rot.MulRV(xf.q, this.m_normals[index], output.normal);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        const lower = b2Transform.MulXV(xf, this.m_vertices[0], aabb.lowerBound);\r\n        const upper = aabb.upperBound.Copy(lower);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const v = b2Transform.MulXV(xf, this.m_vertices[i], b2PolygonShape.ComputeAABB_s_v);\r\n            b2Vec2.MinV(v, lower, lower);\r\n            b2Vec2.MaxV(v, upper, upper);\r\n        }\r\n        const r = this.m_radius;\r\n        lower.SelfSubXY(r, r);\r\n        upper.SelfAddXY(r, r);\r\n    }\r\n    ComputeMass(massData, density) {\r\n        // Polygon mass, centroid, and inertia.\r\n        // Let rho be the polygon density in mass per unit area.\r\n        // Then:\r\n        // mass = rho * int(dA)\r\n        // centroid.x = (1/mass) * rho * int(x * dA)\r\n        // centroid.y = (1/mass) * rho * int(y * dA)\r\n        // I = rho * int((x*x + y*y) * dA)\r\n        //\r\n        // We can compute these integrals by summing all the integrals\r\n        // for each triangle of the polygon. To evaluate the integral\r\n        // for a single triangle, we make a change of variables to\r\n        // the (u,v) coordinates of the triangle:\r\n        // x = x0 + e1x * u + e2x * v\r\n        // y = y0 + e1y * u + e2y * v\r\n        // where 0 <= u && 0 <= v && u + v <= 1.\r\n        //\r\n        // We integrate u from [0,1-v] and then v from [0,1].\r\n        // We also need to use the Jacobian of the transformation:\r\n        // D = cross(e1, e2)\r\n        //\r\n        // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\r\n        //\r\n        // The rest of the derivation is handled by computer algebra.\r\n        ///b2Assert(this.m_count >= 3);\r\n        const center = b2PolygonShape.ComputeMass_s_center.SetZero();\r\n        let area = 0;\r\n        let I = 0;\r\n        // s is the reference point for forming triangles.\r\n        // It's location doesn't change the result (except for rounding error).\r\n        const s = b2PolygonShape.ComputeMass_s_s.SetZero();\r\n        // This code would put the reference point inside the polygon.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            s.SelfAdd(this.m_vertices[i]);\r\n        }\r\n        s.SelfMul(1 / this.m_count);\r\n        const k_inv3 = 1 / 3;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            // Triangle vertices.\r\n            const e1 = b2Vec2.SubVV(this.m_vertices[i], s, b2PolygonShape.ComputeMass_s_e1);\r\n            const e2 = b2Vec2.SubVV(this.m_vertices[(i + 1) % this.m_count], s, b2PolygonShape.ComputeMass_s_e2);\r\n            const D = b2Vec2.CrossVV(e1, e2);\r\n            const triangleArea = 0.5 * D;\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            center.SelfAdd(b2Vec2.MulSV(triangleArea * k_inv3, b2Vec2.AddVV(e1, e2, b2Vec2.s_t0), b2Vec2.s_t1));\r\n            const ex1 = e1.x;\r\n            const ey1 = e1.y;\r\n            const ex2 = e2.x;\r\n            const ey2 = e2.y;\r\n            const intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\r\n            const inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\r\n            I += (0.25 * k_inv3 * D) * (intx2 + inty2);\r\n        }\r\n        // Total mass\r\n        massData.mass = density * area;\r\n        // Center of mass\r\n        ///b2Assert(area > b2_epsilon);\r\n        center.SelfMul(1 / area);\r\n        b2Vec2.AddVV(center, s, massData.center);\r\n        // Inertia tensor relative to the local origin (point s).\r\n        massData.I = density * I;\r\n        // Shift to center of mass then to original body origin.\r\n        massData.I += massData.mass * (b2Vec2.DotVV(massData.center, massData.center) - b2Vec2.DotVV(center, center));\r\n    }\r\n    Validate() {\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const i1 = i;\r\n            const i2 = (i + 1) % this.m_count;\r\n            const p = this.m_vertices[i1];\r\n            const e = b2Vec2.SubVV(this.m_vertices[i2], p, b2PolygonShape.Validate_s_e);\r\n            for (let j = 0; j < this.m_count; ++j) {\r\n                if (j === i1 || j === i2) {\r\n                    continue;\r\n                }\r\n                const v = b2Vec2.SubVV(this.m_vertices[j], p, b2PolygonShape.Validate_s_v);\r\n                const c = b2Vec2.CrossVV(e, v);\r\n                if (c < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = this.m_vertices;\r\n        proxy.m_count = this.m_count;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        // Transform plane into shape co-ordinates\r\n        const normalL = b2Rot.MulTRV(xf.q, normal, b2PolygonShape.ComputeSubmergedArea_s_normalL);\r\n        const offsetL = offset - b2Vec2.DotVV(normal, xf.p);\r\n        const depths = b2PolygonShape.ComputeSubmergedArea_s_depths;\r\n        let diveCount = 0;\r\n        let intoIndex = -1;\r\n        let outoIndex = -1;\r\n        let lastSubmerged = false;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            depths[i] = b2Vec2.DotVV(normalL, this.m_vertices[i]) - offsetL;\r\n            const isSubmerged = depths[i] < (-b2_epsilon);\r\n            if (i > 0) {\r\n                if (isSubmerged) {\r\n                    if (!lastSubmerged) {\r\n                        intoIndex = i - 1;\r\n                        diveCount++;\r\n                    }\r\n                }\r\n                else {\r\n                    if (lastSubmerged) {\r\n                        outoIndex = i - 1;\r\n                        diveCount++;\r\n                    }\r\n                }\r\n            }\r\n            lastSubmerged = isSubmerged;\r\n        }\r\n        switch (diveCount) {\r\n            case 0:\r\n                if (lastSubmerged) {\r\n                    // Completely submerged\r\n                    const md = b2PolygonShape.ComputeSubmergedArea_s_md;\r\n                    this.ComputeMass(md, 1);\r\n                    b2Transform.MulXV(xf, md.center, c);\r\n                    return md.mass;\r\n                }\r\n                else {\r\n                    // Completely dry\r\n                    return 0;\r\n                }\r\n            case 1:\r\n                if (intoIndex === (-1)) {\r\n                    intoIndex = this.m_count - 1;\r\n                }\r\n                else {\r\n                    outoIndex = this.m_count - 1;\r\n                }\r\n                break;\r\n        }\r\n        const intoIndex2 = ((intoIndex + 1) % this.m_count);\r\n        const outoIndex2 = ((outoIndex + 1) % this.m_count);\r\n        const intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\r\n        const outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\r\n        const intoVec = b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);\r\n        const outoVec = b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);\r\n        // Initialize accumulator\r\n        let area = 0;\r\n        const center = b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();\r\n        let p2 = this.m_vertices[intoIndex2];\r\n        let p3;\r\n        // An awkward loop from intoIndex2+1 to outIndex2\r\n        let i = intoIndex2;\r\n        while (i !== outoIndex2) {\r\n            i = (i + 1) % this.m_count;\r\n            if (i === outoIndex2)\r\n                p3 = outoVec;\r\n            else\r\n                p3 = this.m_vertices[i];\r\n            const triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;\r\n            center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;\r\n            p2 = p3;\r\n        }\r\n        // Normalize and transform centroid\r\n        center.SelfMul(1 / area);\r\n        b2Transform.MulXV(xf, center, c);\r\n        return area;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2PolygonShape = new b2PolygonShape();\\n\");\r\n        log(\"    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\\n\", b2_maxPolygonVertices);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            log(\"    vs[%d].Set(%.15f, %.15f);\\n\", i, this.m_vertices[i].x, this.m_vertices[i].y);\r\n        }\r\n        log(\"    shape.Set(vs, %d);\\n\", this.m_count);\r\n    }\r\n    static ComputeCentroid(vs, count, out) {\r\n        ///b2Assert(count >= 3);\r\n        const c = out;\r\n        c.SetZero();\r\n        let area = 0;\r\n        // s is the reference point for forming triangles.\r\n        // It's location doesn't change the result (except for rounding error).\r\n        const pRef = b2PolygonShape.ComputeCentroid_s_pRef.SetZero();\r\n        /*\r\n    #if 0\r\n        // This code would put the reference point inside the polygon.\r\n        for (let i: number = 0; i < count; ++i) {\r\n          pRef.SelfAdd(vs[i]);\r\n        }\r\n        pRef.SelfMul(1 / count);\r\n    #endif\r\n        */\r\n        const inv3 = 1 / 3;\r\n        for (let i = 0; i < count; ++i) {\r\n            // Triangle vertices.\r\n            const p1 = pRef;\r\n            const p2 = vs[i];\r\n            const p3 = vs[(i + 1) % count];\r\n            const e1 = b2Vec2.SubVV(p2, p1, b2PolygonShape.ComputeCentroid_s_e1);\r\n            const e2 = b2Vec2.SubVV(p3, p1, b2PolygonShape.ComputeCentroid_s_e2);\r\n            const D = b2Vec2.CrossVV(e1, e2);\r\n            const triangleArea = 0.5 * D;\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            c.x += triangleArea * inv3 * (p1.x + p2.x + p3.x);\r\n            c.y += triangleArea * inv3 * (p1.y + p2.y + p3.y);\r\n        }\r\n        // Centroid\r\n        ///b2Assert(area > b2_epsilon);\r\n        c.SelfMul(1 / area);\r\n        return c;\r\n    }\r\n}\r\n/// Create a convex hull from the given array of points.\r\n/// The count must be in the range [3, b2_maxPolygonVertices].\r\n/// @warning the points may be re-ordered, even if they form a convex polygon\r\n/// @warning collinear points are handled but not removed. Collinear points\r\n/// may lead to poor stacking behavior.\r\nb2PolygonShape.Set_s_ps = b2Vec2.MakeArray(b2_maxPolygonVertices);\r\nb2PolygonShape.Set_s_hull = b2MakeNumberArray(b2_maxPolygonVertices);\r\nb2PolygonShape.Set_s_r = new b2Vec2();\r\nb2PolygonShape.Set_s_v = new b2Vec2();\r\n/// @see b2Shape::TestPoint\r\nb2PolygonShape.TestPoint_s_pLocal = new b2Vec2();\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2PolygonShape.ComputeDistance_s_pLocal = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_normalForMaxDistance = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_minDistance = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_distance = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\nb2PolygonShape.RayCast_s_p1 = new b2Vec2();\r\nb2PolygonShape.RayCast_s_p2 = new b2Vec2();\r\nb2PolygonShape.RayCast_s_d = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2PolygonShape.ComputeAABB_s_v = new b2Vec2();\r\n/// @see b2Shape::ComputeMass\r\nb2PolygonShape.ComputeMass_s_center = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_s = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_e1 = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_e2 = new b2Vec2();\r\nb2PolygonShape.Validate_s_e = new b2Vec2();\r\nb2PolygonShape.Validate_s_v = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_normalL = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_depths = b2MakeNumberArray(b2_maxPolygonVertices);\r\nb2PolygonShape.ComputeSubmergedArea_s_md = new b2MassData();\r\nb2PolygonShape.ComputeSubmergedArea_s_intoVec = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_outoVec = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_center = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_pRef = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_e1 = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_e2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_polygonRadius } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A line segment (edge) shape. These can be connected in chains or loops\r\n/// to other edge shapes. The connectivity information is used to ensure\r\n/// correct contact normals.\r\nexport class b2EdgeShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_edgeShape, b2_polygonRadius);\r\n        this.m_vertex1 = new b2Vec2();\r\n        this.m_vertex2 = new b2Vec2();\r\n        this.m_vertex0 = new b2Vec2();\r\n        this.m_vertex3 = new b2Vec2();\r\n        this.m_hasVertex0 = false;\r\n        this.m_hasVertex3 = false;\r\n    }\r\n    /// Set this as an isolated edge.\r\n    Set(v1, v2) {\r\n        this.m_vertex1.Copy(v1);\r\n        this.m_vertex2.Copy(v2);\r\n        this.m_hasVertex0 = false;\r\n        this.m_hasVertex3 = false;\r\n        return this;\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2EdgeShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        ///b2Assert(other instanceof b2EdgeShape);\r\n        this.m_vertex1.Copy(other.m_vertex1);\r\n        this.m_vertex2.Copy(other.m_vertex2);\r\n        this.m_vertex0.Copy(other.m_vertex0);\r\n        this.m_vertex3.Copy(other.m_vertex3);\r\n        this.m_hasVertex0 = other.m_hasVertex0;\r\n        this.m_hasVertex3 = other.m_hasVertex3;\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    /// @see b2Shape::TestPoint\r\n    TestPoint(xf, p) {\r\n        return false;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeDistance_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeDistance_s_v2);\r\n        const d = b2Vec2.SubVV(p, v1, b2EdgeShape.ComputeDistance_s_d);\r\n        const s = b2Vec2.SubVV(v2, v1, b2EdgeShape.ComputeDistance_s_s);\r\n        const ds = b2Vec2.DotVV(d, s);\r\n        if (ds > 0) {\r\n            const s2 = b2Vec2.DotVV(s, s);\r\n            if (ds > s2) {\r\n                b2Vec2.SubVV(p, v2, d);\r\n            }\r\n            else {\r\n                d.SelfMulSub(ds / s2, s);\r\n            }\r\n        }\r\n        normal.Copy(d);\r\n        return normal.Normalize();\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        // Put the ray into the edge's frame of reference.\r\n        const p1 = b2Transform.MulTXV(xf, input.p1, b2EdgeShape.RayCast_s_p1);\r\n        const p2 = b2Transform.MulTXV(xf, input.p2, b2EdgeShape.RayCast_s_p2);\r\n        const d = b2Vec2.SubVV(p2, p1, b2EdgeShape.RayCast_s_d);\r\n        const v1 = this.m_vertex1;\r\n        const v2 = this.m_vertex2;\r\n        const e = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_e);\r\n        const normal = output.normal.Set(e.y, -e.x).SelfNormalize();\r\n        // q = p1 + t * d\r\n        // dot(normal, q - v1) = 0\r\n        // dot(normal, p1 - v1) + t * dot(normal, d) = 0\r\n        const numerator = b2Vec2.DotVV(normal, b2Vec2.SubVV(v1, p1, b2Vec2.s_t0));\r\n        const denominator = b2Vec2.DotVV(normal, d);\r\n        if (denominator === 0) {\r\n            return false;\r\n        }\r\n        const t = numerator / denominator;\r\n        if (t < 0 || input.maxFraction < t) {\r\n            return false;\r\n        }\r\n        const q = b2Vec2.AddVMulSV(p1, t, d, b2EdgeShape.RayCast_s_q);\r\n        // q = v1 + s * r\r\n        // s = dot(q - v1, r) / dot(r, r)\r\n        const r = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_r);\r\n        const rr = b2Vec2.DotVV(r, r);\r\n        if (rr === 0) {\r\n            return false;\r\n        }\r\n        const s = b2Vec2.DotVV(b2Vec2.SubVV(q, v1, b2Vec2.s_t0), r) / rr;\r\n        if (s < 0 || 1 < s) {\r\n            return false;\r\n        }\r\n        output.fraction = t;\r\n        b2Rot.MulRV(xf.q, output.normal, output.normal);\r\n        if (numerator > 0) {\r\n            output.normal.SelfNeg();\r\n        }\r\n        return true;\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        const v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeAABB_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeAABB_s_v2);\r\n        b2Vec2.MinV(v1, v2, aabb.lowerBound);\r\n        b2Vec2.MaxV(v1, v2, aabb.upperBound);\r\n        const r = this.m_radius;\r\n        aabb.lowerBound.SelfSubXY(r, r);\r\n        aabb.upperBound.SelfAddXY(r, r);\r\n    }\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        massData.mass = 0;\r\n        b2Vec2.MidVV(this.m_vertex1, this.m_vertex2, massData.center);\r\n        massData.I = 0;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_vertex1);\r\n        proxy.m_vertices[1].Copy(this.m_vertex2);\r\n        proxy.m_count = 2;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        c.SetZero();\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2EdgeShape = new b2EdgeShape();\\n\");\r\n        log(\"    shape.m_radius = %.15f;\\n\", this.m_radius);\r\n        log(\"    shape.m_vertex0.Set(%.15f, %.15f);\\n\", this.m_vertex0.x, this.m_vertex0.y);\r\n        log(\"    shape.m_vertex1.Set(%.15f, %.15f);\\n\", this.m_vertex1.x, this.m_vertex1.y);\r\n        log(\"    shape.m_vertex2.Set(%.15f, %.15f);\\n\", this.m_vertex2.x, this.m_vertex2.y);\r\n        log(\"    shape.m_vertex3.Set(%.15f, %.15f);\\n\", this.m_vertex3.x, this.m_vertex3.y);\r\n        log(\"    shape.m_hasVertex0 = %s;\\n\", this.m_hasVertex0);\r\n        log(\"    shape.m_hasVertex3 = %s;\\n\", this.m_hasVertex3);\r\n    }\r\n}\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2EdgeShape.ComputeDistance_s_v1 = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_v2 = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_d = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_s = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\n// p = p1 + t * d\r\n// v = v1 + s * e\r\n// p1 + t * d = v1 + s * e\r\n// s * e - t * d = p1 - v1\r\nb2EdgeShape.RayCast_s_p1 = new b2Vec2();\r\nb2EdgeShape.RayCast_s_p2 = new b2Vec2();\r\nb2EdgeShape.RayCast_s_d = new b2Vec2();\r\nb2EdgeShape.RayCast_s_e = new b2Vec2();\r\nb2EdgeShape.RayCast_s_q = new b2Vec2();\r\nb2EdgeShape.RayCast_s_r = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2EdgeShape.ComputeAABB_s_v1 = new b2Vec2();\r\nb2EdgeShape.ComputeAABB_s_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_polygonRadius, b2_maxPolygonVertices } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\nimport { b2EdgeShape } from \"./b2EdgeShape\";\r\n/// A chain shape is a free form sequence of line segments.\r\n/// The chain has two-sided collision, so you can use inside and outside collision.\r\n/// Therefore, you may use any winding order.\r\n/// Since there may be many vertices, they are allocated using b2Alloc.\r\n/// Connectivity information is used to create smooth collisions.\r\n/// WARNING: The chain will not collide properly if there are self-intersections.\r\nexport class b2ChainShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_chainShape, b2_polygonRadius);\r\n        this.m_count = 0;\r\n        this.m_prevVertex = new b2Vec2();\r\n        this.m_nextVertex = new b2Vec2();\r\n        this.m_hasPrevVertex = false;\r\n        this.m_hasNextVertex = false;\r\n    }\r\n    /// Create a loop. This automatically adjusts connectivity.\r\n    /// @param vertices an array of vertices, these are copied\r\n    /// @param count the vertex count\r\n    CreateLoop(vertices, count = vertices.length) {\r\n        ///b2Assert(this.m_vertices === null && this.m_count === 0);\r\n        ///b2Assert(count >= 3);\r\n        ///for (let i: number = 1; i < count; ++i) {\r\n        ///  const v1 = vertices[i - 1];\r\n        ///  const v2 = vertices[i];\r\n        ///  // If the code crashes here, it means your vertices are too close together.\r\n        ///  b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\r\n        ///}\r\n        this.m_count = count + 1;\r\n        this.m_vertices = b2Vec2.MakeArray(this.m_count);\r\n        for (let i = 0; i < count; ++i) {\r\n            this.m_vertices[i].Copy(vertices[i]);\r\n        }\r\n        this.m_vertices[count].Copy(this.m_vertices[0]);\r\n        this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]);\r\n        this.m_nextVertex.Copy(this.m_vertices[1]);\r\n        this.m_hasPrevVertex = true;\r\n        this.m_hasNextVertex = true;\r\n        return this;\r\n    }\r\n    /// Create a chain with isolated end vertices.\r\n    /// @param vertices an array of vertices, these are copied\r\n    /// @param count the vertex count\r\n    CreateChain(vertices, count = vertices.length) {\r\n        ///b2Assert(this.m_vertices === null && this.m_count === 0);\r\n        ///b2Assert(count >= 2);\r\n        ///for (let i: number = 1; i < count; ++i) {\r\n        ///  const v1 = vertices[i - 1];\r\n        ///  const v2 = vertices[i];\r\n        ///  // If the code crashes here, it means your vertices are too close together.\r\n        ///  b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\r\n        ///}\r\n        this.m_count = count;\r\n        this.m_vertices = b2Vec2.MakeArray(count);\r\n        for (let i = 0; i < count; ++i) {\r\n            this.m_vertices[i].Copy(vertices[i]);\r\n        }\r\n        this.m_hasPrevVertex = false;\r\n        this.m_hasNextVertex = false;\r\n        this.m_prevVertex.SetZero();\r\n        this.m_nextVertex.SetZero();\r\n        return this;\r\n    }\r\n    /// Establish connectivity to a vertex that precedes the first vertex.\r\n    /// Don't call this for loops.\r\n    SetPrevVertex(prevVertex) {\r\n        this.m_prevVertex.Copy(prevVertex);\r\n        this.m_hasPrevVertex = true;\r\n        return this;\r\n    }\r\n    /// Establish connectivity to a vertex that follows the last vertex.\r\n    /// Don't call this for loops.\r\n    SetNextVertex(nextVertex) {\r\n        this.m_nextVertex.Copy(nextVertex);\r\n        this.m_hasNextVertex = true;\r\n        return this;\r\n    }\r\n    /// Implement b2Shape. Vertices are cloned using b2Alloc.\r\n    Clone() {\r\n        return new b2ChainShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        ///b2Assert(other instanceof b2ChainShape);\r\n        this.CreateChain(other.m_vertices, other.m_count);\r\n        this.m_prevVertex.Copy(other.m_prevVertex);\r\n        this.m_nextVertex.Copy(other.m_nextVertex);\r\n        this.m_hasPrevVertex = other.m_hasPrevVertex;\r\n        this.m_hasNextVertex = other.m_hasNextVertex;\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        // edge count = vertex count - 1\r\n        return this.m_count - 1;\r\n    }\r\n    /// Get a child edge.\r\n    GetChildEdge(edge, index) {\r\n        ///b2Assert(0 <= index && index < this.m_count - 1);\r\n        edge.m_type = b2ShapeType.e_edgeShape;\r\n        edge.m_radius = this.m_radius;\r\n        edge.m_vertex1.Copy(this.m_vertices[index]);\r\n        edge.m_vertex2.Copy(this.m_vertices[index + 1]);\r\n        if (index > 0) {\r\n            edge.m_vertex0.Copy(this.m_vertices[index - 1]);\r\n            edge.m_hasVertex0 = true;\r\n        }\r\n        else {\r\n            edge.m_vertex0.Copy(this.m_prevVertex);\r\n            edge.m_hasVertex0 = this.m_hasPrevVertex;\r\n        }\r\n        if (index < this.m_count - 2) {\r\n            edge.m_vertex3.Copy(this.m_vertices[index + 2]);\r\n            edge.m_hasVertex3 = true;\r\n        }\r\n        else {\r\n            edge.m_vertex3.Copy(this.m_nextVertex);\r\n            edge.m_hasVertex3 = this.m_hasNextVertex;\r\n        }\r\n    }\r\n    /// This always return false.\r\n    /// @see b2Shape::TestPoint\r\n    TestPoint(xf, p) {\r\n        return false;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const edge = b2ChainShape.ComputeDistance_s_edgeShape;\r\n        this.GetChildEdge(edge, childIndex);\r\n        return edge.ComputeDistance(xf, p, normal, 0);\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        ///b2Assert(childIndex < this.m_count);\r\n        const edgeShape = b2ChainShape.RayCast_s_edgeShape;\r\n        edgeShape.m_vertex1.Copy(this.m_vertices[childIndex]);\r\n        edgeShape.m_vertex2.Copy(this.m_vertices[(childIndex + 1) % this.m_count]);\r\n        return edgeShape.RayCast(output, input, xf, 0);\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        ///b2Assert(childIndex < this.m_count);\r\n        const vertexi1 = this.m_vertices[childIndex];\r\n        const vertexi2 = this.m_vertices[(childIndex + 1) % this.m_count];\r\n        const v1 = b2Transform.MulXV(xf, vertexi1, b2ChainShape.ComputeAABB_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, vertexi2, b2ChainShape.ComputeAABB_s_v2);\r\n        b2Vec2.MinV(v1, v2, aabb.lowerBound);\r\n        b2Vec2.MaxV(v1, v2, aabb.upperBound);\r\n    }\r\n    /// Chains have zero mass.\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        massData.mass = 0;\r\n        massData.center.SetZero();\r\n        massData.I = 0;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        ///b2Assert(0 <= index && index < this.m_count);\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_vertices[index]);\r\n        if (index + 1 < this.m_count) {\r\n            proxy.m_vertices[1].Copy(this.m_vertices[index + 1]);\r\n        }\r\n        else {\r\n            proxy.m_vertices[1].Copy(this.m_vertices[0]);\r\n        }\r\n        proxy.m_count = 2;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        c.SetZero();\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2ChainShape = new b2ChainShape();\\n\");\r\n        log(\"    const vs: b2Vec2[] = b2Vec2.MakeArray(%d);\\n\", b2_maxPolygonVertices);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            log(\"    vs[%d].Set(%.15f, %.15f);\\n\", i, this.m_vertices[i].x, this.m_vertices[i].y);\r\n        }\r\n        log(\"    shape.CreateChain(vs, %d);\\n\", this.m_count);\r\n        log(\"    shape.m_prevVertex.Set(%.15f, %.15f);\\n\", this.m_prevVertex.x, this.m_prevVertex.y);\r\n        log(\"    shape.m_nextVertex.Set(%.15f, %.15f);\\n\", this.m_nextVertex.x, this.m_nextVertex.y);\r\n        log(\"    shape.m_hasPrevVertex = %s;\\n\", (this.m_hasPrevVertex) ? (\"true\") : (\"false\"));\r\n        log(\"    shape.m_hasNextVertex = %s;\\n\", (this.m_hasNextVertex) ? (\"true\") : (\"false\"));\r\n    }\r\n}\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2ChainShape.ComputeDistance_s_edgeShape = new b2EdgeShape();\r\n// #endif\r\n/// Implement b2Shape.\r\nb2ChainShape.RayCast_s_edgeShape = new b2EdgeShape();\r\n/// @see b2Shape::ComputeAABB\r\nb2ChainShape.ComputeAABB_s_v1 = new b2Vec2();\r\nb2ChainShape.ComputeAABB_s_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Vec2, b2Rot, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Shape, b2MassData } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2Fixture, b2FixtureDef } from \"./b2Fixture\";\r\n// #endif\r\n/// The body type.\r\n/// static: zero mass, zero velocity, may be manually moved\r\n/// kinematic: zero mass, non-zero velocity set by user, moved by solver\r\n/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver\r\nexport var b2BodyType;\r\n(function (b2BodyType) {\r\n    b2BodyType[b2BodyType[\"b2_unknown\"] = -1] = \"b2_unknown\";\r\n    b2BodyType[b2BodyType[\"b2_staticBody\"] = 0] = \"b2_staticBody\";\r\n    b2BodyType[b2BodyType[\"b2_kinematicBody\"] = 1] = \"b2_kinematicBody\";\r\n    b2BodyType[b2BodyType[\"b2_dynamicBody\"] = 2] = \"b2_dynamicBody\";\r\n    // TODO_ERIN\r\n    // b2_bulletBody = 3\r\n})(b2BodyType || (b2BodyType = {}));\r\n/// A body definition holds all the data needed to construct a rigid body.\r\n/// You can safely re-use body definitions. Shapes are added to a body after construction.\r\nexport class b2BodyDef {\r\n    constructor() {\r\n        /// The body type: static, kinematic, or dynamic.\r\n        /// Note: if a dynamic body would have zero mass, the mass is set to one.\r\n        this.type = b2BodyType.b2_staticBody;\r\n        /// The world position of the body. Avoid creating bodies at the origin\r\n        /// since this can lead to many overlapping shapes.\r\n        this.position = new b2Vec2(0, 0);\r\n        /// The world angle of the body in radians.\r\n        this.angle = 0;\r\n        /// The linear velocity of the body's origin in world co-ordinates.\r\n        this.linearVelocity = new b2Vec2(0, 0);\r\n        /// The angular velocity of the body.\r\n        this.angularVelocity = 0;\r\n        /// Linear damping is use to reduce the linear velocity. The damping parameter\r\n        /// can be larger than 1.0f but the damping effect becomes sensitive to the\r\n        /// time step when the damping parameter is large.\r\n        this.linearDamping = 0;\r\n        /// Angular damping is use to reduce the angular velocity. The damping parameter\r\n        /// can be larger than 1.0f but the damping effect becomes sensitive to the\r\n        /// time step when the damping parameter is large.\r\n        this.angularDamping = 0;\r\n        /// Set this flag to false if this body should never fall asleep. Note that\r\n        /// this increases CPU usage.\r\n        this.allowSleep = true;\r\n        /// Is this body initially awake or sleeping?\r\n        this.awake = true;\r\n        /// Should this body be prevented from rotating? Useful for characters.\r\n        this.fixedRotation = false;\r\n        /// Is this a fast moving body that should be prevented from tunneling through\r\n        /// other moving bodies? Note that all bodies are prevented from tunneling through\r\n        /// kinematic and static bodies. This setting is only considered on dynamic bodies.\r\n        /// @warning You should use this flag sparingly since it increases processing time.\r\n        this.bullet = false;\r\n        /// Does this body start out active?\r\n        this.active = true;\r\n        /// Use this to store application specific body data.\r\n        this.userData = null;\r\n        /// Scale the gravity applied to this body.\r\n        this.gravityScale = 1;\r\n    }\r\n}\r\n/// A rigid body. These are created via b2World::CreateBody.\r\nexport class b2Body {\r\n    // #endif\r\n    constructor(bd, world) {\r\n        ///b2Assert(bd.position.IsValid());\r\n        ///b2Assert(bd.linearVelocity.IsValid());\r\n        ///b2Assert(b2IsValid(bd.angle));\r\n        ///b2Assert(b2IsValid(bd.angularVelocity));\r\n        ///b2Assert(b2IsValid(bd.gravityScale) && bd.gravityScale >= 0);\r\n        ///b2Assert(b2IsValid(bd.angularDamping) && bd.angularDamping >= 0);\r\n        ///b2Assert(b2IsValid(bd.linearDamping) && bd.linearDamping >= 0);\r\n        this.m_type = b2BodyType.b2_staticBody;\r\n        this.m_islandFlag = false;\r\n        this.m_awakeFlag = false;\r\n        this.m_autoSleepFlag = false;\r\n        this.m_bulletFlag = false;\r\n        this.m_fixedRotationFlag = false;\r\n        this.m_activeFlag = false;\r\n        this.m_toiFlag = false;\r\n        this.m_islandIndex = 0;\r\n        this.m_xf = new b2Transform(); // the body origin transform\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0 = new b2Transform();\r\n        // #endif\r\n        this.m_sweep = new b2Sweep(); // the swept motion for CCD\r\n        this.m_linearVelocity = new b2Vec2();\r\n        this.m_angularVelocity = 0;\r\n        this.m_force = new b2Vec2;\r\n        this.m_torque = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_fixtureList = null;\r\n        this.m_fixtureCount = 0;\r\n        this.m_jointList = null;\r\n        this.m_contactList = null;\r\n        this.m_mass = 1;\r\n        this.m_invMass = 1;\r\n        // Rotational inertia about the center of mass.\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_linearDamping = 0;\r\n        this.m_angularDamping = 0;\r\n        this.m_gravityScale = 1;\r\n        this.m_sleepTime = 0;\r\n        this.m_userData = null;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        if (bd.bullet) {\r\n            this.m_bulletFlag = true;\r\n        }\r\n        if (bd.fixedRotation) {\r\n            this.m_fixedRotationFlag = true;\r\n        }\r\n        if (bd.allowSleep) {\r\n            this.m_autoSleepFlag = true;\r\n        }\r\n        if (bd.awake) {\r\n            this.m_awakeFlag = true;\r\n        }\r\n        if (bd.active) {\r\n            this.m_activeFlag = true;\r\n        }\r\n        this.m_world = world;\r\n        this.m_xf.p.Copy(bd.position);\r\n        this.m_xf.q.SetAngle(bd.angle);\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0.Copy(this.m_xf);\r\n        // #endif\r\n        this.m_sweep.localCenter.SetZero();\r\n        this.m_sweep.c0.Copy(this.m_xf.p);\r\n        this.m_sweep.c.Copy(this.m_xf.p);\r\n        this.m_sweep.a0 = bd.angle;\r\n        this.m_sweep.a = bd.angle;\r\n        this.m_sweep.alpha0 = 0;\r\n        this.m_linearVelocity.Copy(bd.linearVelocity);\r\n        this.m_angularVelocity = bd.angularVelocity;\r\n        this.m_linearDamping = bd.linearDamping;\r\n        this.m_angularDamping = bd.angularDamping;\r\n        this.m_gravityScale = bd.gravityScale;\r\n        this.m_force.SetZero();\r\n        this.m_torque = 0;\r\n        this.m_sleepTime = 0;\r\n        this.m_type = bd.type;\r\n        if (bd.type === b2BodyType.b2_dynamicBody) {\r\n            this.m_mass = 1;\r\n            this.m_invMass = 1;\r\n        }\r\n        else {\r\n            this.m_mass = 0;\r\n            this.m_invMass = 0;\r\n        }\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_userData = bd.userData;\r\n        this.m_fixtureList = null;\r\n        this.m_fixtureCount = 0;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        // #endif\r\n    }\r\n    CreateFixture(a, b) {\r\n        if (a instanceof b2FixtureDef) {\r\n            return this.CreateFixtureDef(a);\r\n        }\r\n        else if ((a instanceof b2Shape) && (typeof (b) === \"number\")) {\r\n            return this.CreateFixtureShapeDensity(a, b);\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n    /// Creates a fixture and attach it to this body. Use this function if you need\r\n    /// to set some fixture parameters, like friction. Otherwise you can create the\r\n    /// fixture directly from a shape.\r\n    /// If the density is non-zero, this function automatically updates the mass of the body.\r\n    /// Contacts are not created until the next time step.\r\n    /// @param def the fixture definition.\r\n    /// @warning This function is locked during callbacks.\r\n    CreateFixtureDef(def) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (this.m_world.IsLocked()) {\r\n            return null;\r\n        }\r\n        const fixture = new b2Fixture(def, this);\r\n        fixture.Create(/*this,*/ def);\r\n        if (this.m_activeFlag) {\r\n            const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n            fixture.CreateProxies(broadPhase, this.m_xf);\r\n        }\r\n        fixture.m_next = this.m_fixtureList;\r\n        this.m_fixtureList = fixture;\r\n        ++this.m_fixtureCount;\r\n        // fixture.m_body = this;\r\n        // Adjust mass properties if needed.\r\n        if (fixture.m_density > 0) {\r\n            this.ResetMassData();\r\n        }\r\n        // Let the world know we have a new fixture. This will cause new contacts\r\n        // to be created at the beginning of the next time step.\r\n        this.m_world.m_newFixture = true;\r\n        return fixture;\r\n    }\r\n    CreateFixtureShapeDensity(shape, density = 0) {\r\n        const def = b2Body.CreateFixtureShapeDensity_s_def;\r\n        def.shape = shape;\r\n        def.density = density;\r\n        return this.CreateFixtureDef(def);\r\n    }\r\n    /// Destroy a fixture. This removes the fixture from the broad-phase and\r\n    /// destroys all contacts associated with this fixture. This will\r\n    /// automatically adjust the mass of the body if the body is dynamic and the\r\n    /// fixture has positive density.\r\n    /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.\r\n    /// @param fixture the fixture to be removed.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyFixture(fixture) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (this.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        ///b2Assert(fixture.m_body === this);\r\n        // Remove the fixture from this body's singly linked list.\r\n        ///b2Assert(this.m_fixtureCount > 0);\r\n        let node = this.m_fixtureList;\r\n        let ppF = null;\r\n        // let found: boolean = false;\r\n        while (node !== null) {\r\n            if (node === fixture) {\r\n                if (ppF)\r\n                    ppF.m_next = fixture.m_next;\r\n                else\r\n                    this.m_fixtureList = fixture.m_next;\r\n                // found = true;\r\n                break;\r\n            }\r\n            ppF = node;\r\n            node = node.m_next;\r\n        }\r\n        // You tried to remove a shape that is not attached to this body.\r\n        ///b2Assert(found);\r\n        // Destroy any contacts associated with the fixture.\r\n        let edge = this.m_contactList;\r\n        while (edge) {\r\n            const c = edge.contact;\r\n            edge = edge.next;\r\n            const fixtureA = c.GetFixtureA();\r\n            const fixtureB = c.GetFixtureB();\r\n            if (fixture === fixtureA || fixture === fixtureB) {\r\n                // This destroys the contact and removes it from\r\n                // this body's contact list.\r\n                this.m_world.m_contactManager.Destroy(c);\r\n            }\r\n        }\r\n        if (this.m_activeFlag) {\r\n            const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n            fixture.DestroyProxies(broadPhase);\r\n        }\r\n        fixture.Destroy();\r\n        // fixture.m_body = null;\r\n        fixture.m_next = null;\r\n        --this.m_fixtureCount;\r\n        // Reset the mass data.\r\n        this.ResetMassData();\r\n    }\r\n    /// Set the position of the body's origin and rotation.\r\n    /// This breaks any contacts and wakes the other bodies.\r\n    /// Manipulating a body's transform may cause non-physical behavior.\r\n    /// @param position the world position of the body's local origin.\r\n    /// @param angle the world rotation in radians.\r\n    SetTransformVec(position, angle) {\r\n        this.SetTransformXY(position.x, position.y, angle);\r\n    }\r\n    SetTransformXY(x, y, angle) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (this.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        this.m_xf.q.SetAngle(angle);\r\n        this.m_xf.p.Set(x, y);\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0.Copy(this.m_xf);\r\n        // #endif\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.a = angle;\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        this.m_sweep.a0 = angle;\r\n        const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            f.Synchronize(broadPhase, this.m_xf, this.m_xf);\r\n        }\r\n        this.m_world.m_contactManager.FindNewContacts();\r\n    }\r\n    SetTransform(xf) {\r\n        this.SetTransformVec(xf.p, xf.GetAngle());\r\n    }\r\n    /// Get the body transform for the body's origin.\r\n    /// @return the world transform of the body's origin.\r\n    GetTransform() {\r\n        return this.m_xf;\r\n    }\r\n    /// Get the world body origin position.\r\n    /// @return the world position of the body's origin.\r\n    GetPosition() {\r\n        return this.m_xf.p;\r\n    }\r\n    SetPosition(position) {\r\n        this.SetTransformVec(position, this.GetAngle());\r\n    }\r\n    SetPositionXY(x, y) {\r\n        this.SetTransformXY(x, y, this.GetAngle());\r\n    }\r\n    /// Get the angle in radians.\r\n    /// @return the current world rotation angle in radians.\r\n    GetAngle() {\r\n        return this.m_sweep.a;\r\n    }\r\n    SetAngle(angle) {\r\n        this.SetTransformVec(this.GetPosition(), angle);\r\n    }\r\n    /// Get the world position of the center of mass.\r\n    GetWorldCenter() {\r\n        return this.m_sweep.c;\r\n    }\r\n    /// Get the local position of the center of mass.\r\n    GetLocalCenter() {\r\n        return this.m_sweep.localCenter;\r\n    }\r\n    /// Set the linear velocity of the center of mass.\r\n    /// @param v the new linear velocity of the center of mass.\r\n    SetLinearVelocity(v) {\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            return;\r\n        }\r\n        if (b2Vec2.DotVV(v, v) > 0) {\r\n            this.SetAwake(true);\r\n        }\r\n        this.m_linearVelocity.Copy(v);\r\n    }\r\n    /// Get the linear velocity of the center of mass.\r\n    /// @return the linear velocity of the center of mass.\r\n    GetLinearVelocity() {\r\n        return this.m_linearVelocity;\r\n    }\r\n    /// Set the angular velocity.\r\n    /// @param omega the new angular velocity in radians/second.\r\n    SetAngularVelocity(w) {\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            return;\r\n        }\r\n        if (w * w > 0) {\r\n            this.SetAwake(true);\r\n        }\r\n        this.m_angularVelocity = w;\r\n    }\r\n    /// Get the angular velocity.\r\n    /// @return the angular velocity in radians/second.\r\n    GetAngularVelocity() {\r\n        return this.m_angularVelocity;\r\n    }\r\n    GetDefinition(bd) {\r\n        bd.type = this.GetType();\r\n        bd.allowSleep = this.m_autoSleepFlag;\r\n        bd.angle = this.GetAngle();\r\n        bd.angularDamping = this.m_angularDamping;\r\n        bd.gravityScale = this.m_gravityScale;\r\n        bd.angularVelocity = this.m_angularVelocity;\r\n        bd.fixedRotation = this.m_fixedRotationFlag;\r\n        bd.bullet = this.m_bulletFlag;\r\n        bd.awake = this.m_awakeFlag;\r\n        bd.linearDamping = this.m_linearDamping;\r\n        bd.linearVelocity.Copy(this.GetLinearVelocity());\r\n        bd.position.Copy(this.GetPosition());\r\n        bd.userData = this.GetUserData();\r\n        return bd;\r\n    }\r\n    /// Apply a force at a world point. If the force is not\r\n    /// applied at the center of mass, it will generate a torque and\r\n    /// affect the angular velocity. This wakes up the body.\r\n    /// @param force the world force vector, usually in Newtons (N).\r\n    /// @param point the world position of the point of application.\r\n    /// @param wake also wake up the body\r\n    ApplyForce(force, point, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_force.x += force.x;\r\n            this.m_force.y += force.y;\r\n            this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);\r\n        }\r\n    }\r\n    /// Apply a force to the center of mass. This wakes up the body.\r\n    /// @param force the world force vector, usually in Newtons (N).\r\n    /// @param wake also wake up the body\r\n    ApplyForceToCenter(force, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_force.x += force.x;\r\n            this.m_force.y += force.y;\r\n        }\r\n    }\r\n    /// Apply a torque. This affects the angular velocity\r\n    /// without affecting the linear velocity of the center of mass.\r\n    /// This wakes up the body.\r\n    /// @param torque about the z-axis (out of the screen), usually in N-m.\r\n    /// @param wake also wake up the body\r\n    ApplyTorque(torque, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_torque += torque;\r\n        }\r\n    }\r\n    /// Apply an impulse at a point. This immediately modifies the velocity.\r\n    /// It also modifies the angular velocity if the point of application\r\n    /// is not at the center of mass. This wakes up the body.\r\n    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n    /// @param point the world position of the point of application.\r\n    /// @param wake also wake up the body\r\n    ApplyLinearImpulse(impulse, point, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\r\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\r\n            this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\r\n        }\r\n    }\r\n    /// Apply an impulse at the center of gravity. This immediately modifies the velocity.\r\n    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n    /// @param wake also wake up the body\r\n    ApplyLinearImpulseToCenter(impulse, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\r\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\r\n        }\r\n    }\r\n    /// Apply an angular impulse.\r\n    /// @param impulse the angular impulse in units of kg*m*m/s\r\n    /// @param wake also wake up the body\r\n    ApplyAngularImpulse(impulse, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_angularVelocity += this.m_invI * impulse;\r\n        }\r\n    }\r\n    /// Get the total mass of the body.\r\n    /// @return the mass, usually in kilograms (kg).\r\n    GetMass() {\r\n        return this.m_mass;\r\n    }\r\n    /// Get the rotational inertia of the body about the local origin.\r\n    /// @return the rotational inertia, usually in kg-m^2.\r\n    GetInertia() {\r\n        return this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\r\n    }\r\n    /// Get the mass data of the body.\r\n    /// @return a struct containing the mass, inertia and center of the body.\r\n    GetMassData(data) {\r\n        data.mass = this.m_mass;\r\n        data.I = this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\r\n        data.center.Copy(this.m_sweep.localCenter);\r\n        return data;\r\n    }\r\n    SetMassData(massData) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (this.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        this.m_invMass = 0;\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_mass = massData.mass;\r\n        if (this.m_mass <= 0) {\r\n            this.m_mass = 1;\r\n        }\r\n        this.m_invMass = 1 / this.m_mass;\r\n        if (massData.I > 0 && !this.m_fixedRotationFlag) {\r\n            this.m_I = massData.I - this.m_mass * b2Vec2.DotVV(massData.center, massData.center);\r\n            ///b2Assert(this.m_I > 0);\r\n            this.m_invI = 1 / this.m_I;\r\n        }\r\n        // Move center of mass.\r\n        const oldCenter = b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);\r\n        this.m_sweep.localCenter.Copy(massData.center);\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        // Update center of mass velocity.\r\n        b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);\r\n    }\r\n    ResetMassData() {\r\n        // Compute mass data from shapes. Each shape has its own density.\r\n        this.m_mass = 0;\r\n        this.m_invMass = 0;\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_sweep.localCenter.SetZero();\r\n        // Static and kinematic bodies have zero mass.\r\n        if (this.m_type === b2BodyType.b2_staticBody || this.m_type === b2BodyType.b2_kinematicBody) {\r\n            this.m_sweep.c0.Copy(this.m_xf.p);\r\n            this.m_sweep.c.Copy(this.m_xf.p);\r\n            this.m_sweep.a0 = this.m_sweep.a;\r\n            return;\r\n        }\r\n        ///b2Assert(this.m_type === b2BodyType.b2_dynamicBody);\r\n        // Accumulate mass over all fixtures.\r\n        const localCenter = b2Body.ResetMassData_s_localCenter.SetZero();\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            if (f.m_density === 0) {\r\n                continue;\r\n            }\r\n            const massData = f.GetMassData(b2Body.ResetMassData_s_massData);\r\n            this.m_mass += massData.mass;\r\n            localCenter.x += massData.center.x * massData.mass;\r\n            localCenter.y += massData.center.y * massData.mass;\r\n            this.m_I += massData.I;\r\n        }\r\n        // Compute center of mass.\r\n        if (this.m_mass > 0) {\r\n            this.m_invMass = 1 / this.m_mass;\r\n            localCenter.x *= this.m_invMass;\r\n            localCenter.y *= this.m_invMass;\r\n        }\r\n        else {\r\n            // Force all dynamic bodies to have a positive mass.\r\n            this.m_mass = 1;\r\n            this.m_invMass = 1;\r\n        }\r\n        if (this.m_I > 0 && !this.m_fixedRotationFlag) {\r\n            // Center the inertia about the center of mass.\r\n            this.m_I -= this.m_mass * b2Vec2.DotVV(localCenter, localCenter);\r\n            ///b2Assert(this.m_I > 0);\r\n            this.m_invI = 1 / this.m_I;\r\n        }\r\n        else {\r\n            this.m_I = 0;\r\n            this.m_invI = 0;\r\n        }\r\n        // Move center of mass.\r\n        const oldCenter = b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);\r\n        this.m_sweep.localCenter.Copy(localCenter);\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        // Update center of mass velocity.\r\n        b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);\r\n    }\r\n    /// Get the world coordinates of a point given the local coordinates.\r\n    /// @param localPoint a point on the body measured relative the the body's origin.\r\n    /// @return the same point expressed in world coordinates.\r\n    GetWorldPoint(localPoint, out) {\r\n        return b2Transform.MulXV(this.m_xf, localPoint, out);\r\n    }\r\n    /// Get the world coordinates of a vector given the local coordinates.\r\n    /// @param localVector a vector fixed in the body.\r\n    /// @return the same vector expressed in world coordinates.\r\n    GetWorldVector(localVector, out) {\r\n        return b2Rot.MulRV(this.m_xf.q, localVector, out);\r\n    }\r\n    /// Gets a local point relative to the body's origin given a world point.\r\n    /// @param a point in world coordinates.\r\n    /// @return the corresponding local point relative to the body's origin.\r\n    GetLocalPoint(worldPoint, out) {\r\n        return b2Transform.MulTXV(this.m_xf, worldPoint, out);\r\n    }\r\n    /// Gets a local vector given a world vector.\r\n    /// @param a vector in world coordinates.\r\n    /// @return the corresponding local vector.\r\n    GetLocalVector(worldVector, out) {\r\n        return b2Rot.MulTRV(this.m_xf.q, worldVector, out);\r\n    }\r\n    /// Get the world linear velocity of a world point attached to this body.\r\n    /// @param a point in world coordinates.\r\n    /// @return the world velocity of a point.\r\n    GetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n        return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_sweep.c, b2Vec2.s_t0), out);\r\n    }\r\n    /// Get the world velocity of a local point.\r\n    /// @param a point in local coordinates.\r\n    /// @return the world velocity of a point.\r\n    GetLinearVelocityFromLocalPoint(localPoint, out) {\r\n        return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint, out), out);\r\n    }\r\n    /// Get the linear damping of the body.\r\n    GetLinearDamping() {\r\n        return this.m_linearDamping;\r\n    }\r\n    /// Set the linear damping of the body.\r\n    SetLinearDamping(linearDamping) {\r\n        this.m_linearDamping = linearDamping;\r\n    }\r\n    /// Get the angular damping of the body.\r\n    GetAngularDamping() {\r\n        return this.m_angularDamping;\r\n    }\r\n    /// Set the angular damping of the body.\r\n    SetAngularDamping(angularDamping) {\r\n        this.m_angularDamping = angularDamping;\r\n    }\r\n    /// Get the gravity scale of the body.\r\n    GetGravityScale() {\r\n        return this.m_gravityScale;\r\n    }\r\n    /// Set the gravity scale of the body.\r\n    SetGravityScale(scale) {\r\n        this.m_gravityScale = scale;\r\n    }\r\n    /// Set the type of this body. This may alter the mass and velocity.\r\n    SetType(type) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (this.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        if (this.m_type === type) {\r\n            return;\r\n        }\r\n        this.m_type = type;\r\n        this.ResetMassData();\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            this.m_linearVelocity.SetZero();\r\n            this.m_angularVelocity = 0;\r\n            this.m_sweep.a0 = this.m_sweep.a;\r\n            this.m_sweep.c0.Copy(this.m_sweep.c);\r\n            this.SynchronizeFixtures();\r\n        }\r\n        this.SetAwake(true);\r\n        this.m_force.SetZero();\r\n        this.m_torque = 0;\r\n        // Delete the attached contacts.\r\n        let ce = this.m_contactList;\r\n        while (ce) {\r\n            const ce0 = ce;\r\n            ce = ce.next;\r\n            this.m_world.m_contactManager.Destroy(ce0.contact);\r\n        }\r\n        this.m_contactList = null;\r\n        // Touch the proxies so that new contacts will be created (when appropriate)\r\n        const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            const proxyCount = f.m_proxyCount;\r\n            for (let i = 0; i < proxyCount; ++i) {\r\n                broadPhase.TouchProxy(f.m_proxies[i].treeNode);\r\n            }\r\n        }\r\n    }\r\n    /// Get the type of this body.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n    /// Should this body be treated like a bullet for continuous collision detection?\r\n    SetBullet(flag) {\r\n        this.m_bulletFlag = flag;\r\n    }\r\n    /// Is this body treated like a bullet for continuous collision detection?\r\n    IsBullet() {\r\n        return this.m_bulletFlag;\r\n    }\r\n    /// You can disable sleeping on this body. If you disable sleeping, the\r\n    /// body will be woken.\r\n    SetSleepingAllowed(flag) {\r\n        this.m_autoSleepFlag = flag;\r\n        if (!flag) {\r\n            this.SetAwake(true);\r\n        }\r\n    }\r\n    /// Is this body allowed to sleep\r\n    IsSleepingAllowed() {\r\n        return this.m_autoSleepFlag;\r\n    }\r\n    /// Set the sleep state of the body. A sleeping body has very\r\n    /// low CPU cost.\r\n    /// @param flag set to true to wake the body, false to put it to sleep.\r\n    SetAwake(flag) {\r\n        if (flag) {\r\n            if (!this.m_awakeFlag) {\r\n                this.m_awakeFlag = true;\r\n                this.m_sleepTime = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.m_awakeFlag = false;\r\n            this.m_sleepTime = 0;\r\n            this.m_linearVelocity.SetZero();\r\n            this.m_angularVelocity = 0;\r\n            this.m_force.SetZero();\r\n            this.m_torque = 0;\r\n        }\r\n    }\r\n    /// Get the sleeping state of this body.\r\n    /// @return true if the body is sleeping.\r\n    IsAwake() {\r\n        return this.m_awakeFlag;\r\n    }\r\n    /// Set the active state of the body. An inactive body is not\r\n    /// simulated and cannot be collided with or woken up.\r\n    /// If you pass a flag of true, all fixtures will be added to the\r\n    /// broad-phase.\r\n    /// If you pass a flag of false, all fixtures will be removed from\r\n    /// the broad-phase and all contacts will be destroyed.\r\n    /// Fixtures and joints are otherwise unaffected. You may continue\r\n    /// to create/destroy fixtures and joints on inactive bodies.\r\n    /// Fixtures on an inactive body are implicitly inactive and will\r\n    /// not participate in collisions, ray-casts, or queries.\r\n    /// Joints connected to an inactive body are implicitly inactive.\r\n    /// An inactive body is still owned by a b2World object and remains\r\n    /// in the body list.\r\n    SetActive(flag) {\r\n        ///b2Assert(!this.m_world.IsLocked());\r\n        if (flag === this.IsActive()) {\r\n            return;\r\n        }\r\n        this.m_activeFlag = flag;\r\n        if (flag) {\r\n            // Create all proxies.\r\n            const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n            for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n                f.CreateProxies(broadPhase, this.m_xf);\r\n            }\r\n            // Contacts are created the next time step.\r\n        }\r\n        else {\r\n            // Destroy all proxies.\r\n            const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n            for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n                f.DestroyProxies(broadPhase);\r\n            }\r\n            // Destroy the attached contacts.\r\n            let ce = this.m_contactList;\r\n            while (ce) {\r\n                const ce0 = ce;\r\n                ce = ce.next;\r\n                this.m_world.m_contactManager.Destroy(ce0.contact);\r\n            }\r\n            this.m_contactList = null;\r\n        }\r\n    }\r\n    /// Get the active state of the body.\r\n    IsActive() {\r\n        return this.m_activeFlag;\r\n    }\r\n    /// Set this body to have fixed rotation. This causes the mass\r\n    /// to be reset.\r\n    SetFixedRotation(flag) {\r\n        if (this.m_fixedRotationFlag === flag) {\r\n            return;\r\n        }\r\n        this.m_fixedRotationFlag = flag;\r\n        this.m_angularVelocity = 0;\r\n        this.ResetMassData();\r\n    }\r\n    /// Does this body have fixed rotation?\r\n    IsFixedRotation() {\r\n        return this.m_fixedRotationFlag;\r\n    }\r\n    /// Get the list of all fixtures attached to this body.\r\n    GetFixtureList() {\r\n        return this.m_fixtureList;\r\n    }\r\n    /// Get the list of all joints attached to this body.\r\n    GetJointList() {\r\n        return this.m_jointList;\r\n    }\r\n    /// Get the list of all contacts attached to this body.\r\n    /// @warning this list changes during the time step and you may\r\n    /// miss some collisions if you don't use b2ContactListener.\r\n    GetContactList() {\r\n        return this.m_contactList;\r\n    }\r\n    /// Get the next body in the world's body list.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data pointer that was provided in the body definition.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data. Use this to store your application specific data.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Get the parent world of this body.\r\n    GetWorld() {\r\n        return this.m_world;\r\n    }\r\n    /// Dump this body to a log file\r\n    Dump(log) {\r\n        const bodyIndex = this.m_islandIndex;\r\n        log(\"{\\n\");\r\n        log(\"  const bd: b2BodyDef = new b2BodyDef();\\n\");\r\n        let type_str = \"\";\r\n        switch (this.m_type) {\r\n            case b2BodyType.b2_staticBody:\r\n                type_str = \"b2BodyType.b2_staticBody\";\r\n                break;\r\n            case b2BodyType.b2_kinematicBody:\r\n                type_str = \"b2BodyType.b2_kinematicBody\";\r\n                break;\r\n            case b2BodyType.b2_dynamicBody:\r\n                type_str = \"b2BodyType.b2_dynamicBody\";\r\n                break;\r\n            default:\r\n                ///b2Assert(false);\r\n                break;\r\n        }\r\n        log(\"  bd.type = %s;\\n\", type_str);\r\n        log(\"  bd.position.Set(%.15f, %.15f);\\n\", this.m_xf.p.x, this.m_xf.p.y);\r\n        log(\"  bd.angle = %.15f;\\n\", this.m_sweep.a);\r\n        log(\"  bd.linearVelocity.Set(%.15f, %.15f);\\n\", this.m_linearVelocity.x, this.m_linearVelocity.y);\r\n        log(\"  bd.angularVelocity = %.15f;\\n\", this.m_angularVelocity);\r\n        log(\"  bd.linearDamping = %.15f;\\n\", this.m_linearDamping);\r\n        log(\"  bd.angularDamping = %.15f;\\n\", this.m_angularDamping);\r\n        log(\"  bd.allowSleep = %s;\\n\", (this.m_autoSleepFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.awake = %s;\\n\", (this.m_awakeFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.fixedRotation = %s;\\n\", (this.m_fixedRotationFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.bullet = %s;\\n\", (this.m_bulletFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.active = %s;\\n\", (this.m_activeFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.gravityScale = %.15f;\\n\", this.m_gravityScale);\r\n        log(\"\\n\");\r\n        log(\"  bodies[%d] = this.m_world.CreateBody(bd);\\n\", this.m_islandIndex);\r\n        log(\"\\n\");\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            log(\"  {\\n\");\r\n            f.Dump(log, bodyIndex);\r\n            log(\"  }\\n\");\r\n        }\r\n        log(\"}\\n\");\r\n    }\r\n    SynchronizeFixtures() {\r\n        const xf1 = b2Body.SynchronizeFixtures_s_xf1;\r\n        xf1.q.SetAngle(this.m_sweep.a0);\r\n        b2Rot.MulRV(xf1.q, this.m_sweep.localCenter, xf1.p);\r\n        b2Vec2.SubVV(this.m_sweep.c0, xf1.p, xf1.p);\r\n        const broadPhase = this.m_world.m_contactManager.m_broadPhase;\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            f.Synchronize(broadPhase, xf1, this.m_xf);\r\n        }\r\n    }\r\n    SynchronizeTransform() {\r\n        this.m_xf.q.SetAngle(this.m_sweep.a);\r\n        b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\r\n        b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\r\n    }\r\n    // This is used to prevent connected bodies from colliding.\r\n    // It may lie, depending on the collideConnected flag.\r\n    ShouldCollide(other) {\r\n        // At least one body should be dynamic or kinematic.\r\n        if (this.m_type === b2BodyType.b2_staticBody && other.m_type === b2BodyType.b2_staticBody) {\r\n            return false;\r\n        }\r\n        return this.ShouldCollideConnected(other);\r\n    }\r\n    ShouldCollideConnected(other) {\r\n        // Does a joint prevent collision?\r\n        for (let jn = this.m_jointList; jn; jn = jn.next) {\r\n            if (jn.other === other) {\r\n                if (!jn.joint.m_collideConnected) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    Advance(alpha) {\r\n        // Advance to the new safe time. This doesn't sync the broad-phase.\r\n        this.m_sweep.Advance(alpha);\r\n        this.m_sweep.c.Copy(this.m_sweep.c0);\r\n        this.m_sweep.a = this.m_sweep.a0;\r\n        this.m_xf.q.SetAngle(this.m_sweep.a);\r\n        b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\r\n        b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\r\n    }\r\n    // #if B2_ENABLE_CONTROLLER\r\n    GetControllerList() {\r\n        return this.m_controllerList;\r\n    }\r\n    GetControllerCount() {\r\n        return this.m_controllerCount;\r\n    }\r\n}\r\n/// Creates a fixture from a shape and attach it to this body.\r\n/// This is a convenience function. Use b2FixtureDef if you need to set parameters\r\n/// like friction, restitution, user data, or filtering.\r\n/// If the density is non-zero, this function automatically updates the mass of the body.\r\n/// @param shape the shape to be cloned.\r\n/// @param density the shape density (set to zero for static bodies).\r\n/// @warning This function is locked during callbacks.\r\nb2Body.CreateFixtureShapeDensity_s_def = new b2FixtureDef();\r\n/// Set the mass properties to override the mass properties of the fixtures.\r\n/// Note that this changes the center of mass position.\r\n/// Note that creating or destroying fixtures can also alter the mass.\r\n/// This function has no effect if the body isn't dynamic.\r\n/// @param massData the mass properties.\r\nb2Body.SetMassData_s_oldCenter = new b2Vec2();\r\n/// This resets the mass properties to the sum of the mass properties of the fixtures.\r\n/// This normally does not need to be called unless you called SetMassData to override\r\n/// the mass and you later want to reset the mass.\r\nb2Body.ResetMassData_s_localCenter = new b2Vec2();\r\nb2Body.ResetMassData_s_oldCenter = new b2Vec2();\r\nb2Body.ResetMassData_s_massData = new b2MassData();\r\nb2Body.SynchronizeFixtures_s_xf1 = new b2Transform();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCb2R5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvRHluYW1pY3MvYjJCb2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFJdEQsU0FBUztBQUVULGtCQUFrQjtBQUNsQiwyREFBMkQ7QUFDM0Qsd0VBQXdFO0FBQ3hFLG1GQUFtRjtBQUNuRixNQUFNLENBQU4sSUFBWSxVQVFYO0FBUkQsV0FBWSxVQUFVO0lBQ3BCLHdEQUFlLENBQUE7SUFDZiw2REFBaUIsQ0FBQTtJQUNqQixtRUFBb0IsQ0FBQTtJQUNwQiwrREFBa0IsQ0FBQTtJQUVsQixZQUFZO0lBQ1osb0JBQW9CO0FBQ3RCLENBQUMsRUFSVyxVQUFVLEtBQVYsVUFBVSxRQVFyQjtBQUVELDBFQUEwRTtBQUMxRSwwRkFBMEY7QUFDMUYsTUFBTTtJQUFOO1FBQ0UsaURBQWlEO1FBQ2pELHlFQUF5RTtRQUNsRSxTQUFJLEdBQWUsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUVuRCx1RUFBdUU7UUFDdkUsbURBQW1EO1FBQzVDLGFBQVEsR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFM0MsMkNBQTJDO1FBQ3BDLFVBQUssR0FBVyxDQUFDLENBQUM7UUFFekIsbUVBQW1FO1FBQzVELG1CQUFjLEdBQVcsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWpELHFDQUFxQztRQUM5QixvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUVu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","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Vec2 } from \"../../Common/b2Math\";\r\nexport var b2JointType;\r\n(function (b2JointType) {\r\n    b2JointType[b2JointType[\"e_unknownJoint\"] = 0] = \"e_unknownJoint\";\r\n    b2JointType[b2JointType[\"e_revoluteJoint\"] = 1] = \"e_revoluteJoint\";\r\n    b2JointType[b2JointType[\"e_prismaticJoint\"] = 2] = \"e_prismaticJoint\";\r\n    b2JointType[b2JointType[\"e_distanceJoint\"] = 3] = \"e_distanceJoint\";\r\n    b2JointType[b2JointType[\"e_pulleyJoint\"] = 4] = \"e_pulleyJoint\";\r\n    b2JointType[b2JointType[\"e_mouseJoint\"] = 5] = \"e_mouseJoint\";\r\n    b2JointType[b2JointType[\"e_gearJoint\"] = 6] = \"e_gearJoint\";\r\n    b2JointType[b2JointType[\"e_wheelJoint\"] = 7] = \"e_wheelJoint\";\r\n    b2JointType[b2JointType[\"e_weldJoint\"] = 8] = \"e_weldJoint\";\r\n    b2JointType[b2JointType[\"e_frictionJoint\"] = 9] = \"e_frictionJoint\";\r\n    b2JointType[b2JointType[\"e_ropeJoint\"] = 10] = \"e_ropeJoint\";\r\n    b2JointType[b2JointType[\"e_motorJoint\"] = 11] = \"e_motorJoint\";\r\n    b2JointType[b2JointType[\"e_areaJoint\"] = 12] = \"e_areaJoint\";\r\n})(b2JointType || (b2JointType = {}));\r\nexport var b2LimitState;\r\n(function (b2LimitState) {\r\n    b2LimitState[b2LimitState[\"e_inactiveLimit\"] = 0] = \"e_inactiveLimit\";\r\n    b2LimitState[b2LimitState[\"e_atLowerLimit\"] = 1] = \"e_atLowerLimit\";\r\n    b2LimitState[b2LimitState[\"e_atUpperLimit\"] = 2] = \"e_atUpperLimit\";\r\n    b2LimitState[b2LimitState[\"e_equalLimits\"] = 3] = \"e_equalLimits\";\r\n})(b2LimitState || (b2LimitState = {}));\r\nexport class b2Jacobian {\r\n    constructor() {\r\n        this.linear = new b2Vec2();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n    }\r\n    SetZero() {\r\n        this.linear.SetZero();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n        return this;\r\n    }\r\n    Set(x, a1, a2) {\r\n        this.linear.Copy(x);\r\n        this.angularA = a1;\r\n        this.angularB = a2;\r\n        return this;\r\n    }\r\n}\r\n/// A joint edge is used to connect bodies and joints together\r\n/// in a joint graph where each body is a node and each joint\r\n/// is an edge. A joint edge belongs to a doubly linked list\r\n/// maintained in each attached body. Each joint has two joint\r\n/// nodes, one for each attached body.\r\nexport class b2JointEdge {\r\n    constructor(joint, other) {\r\n        this.prev = null; ///< the previous joint edge in the body's joint list\r\n        this.next = null; ///< the next joint edge in the body's joint list\r\n        this.joint = joint;\r\n        this.other = other;\r\n    }\r\n}\r\n/// Joint definitions are used to construct joints.\r\nexport class b2JointDef {\r\n    constructor(type) {\r\n        /// The joint type is set automatically for concrete joint types.\r\n        this.type = b2JointType.e_unknownJoint;\r\n        /// Use this to attach application specific data to your joints.\r\n        this.userData = null;\r\n        /// The first attached body.\r\n        this.bodyA = null;\r\n        /// The second attached body.\r\n        this.bodyB = null;\r\n        /// Set this flag to true if the attached bodies should collide.\r\n        this.collideConnected = false;\r\n        this.type = type;\r\n    }\r\n}\r\n/// The base joint class. Joints are used to constraint two bodies together in\r\n/// various fashions. Some joints also feature limits and motors.\r\nexport class b2Joint {\r\n    constructor(def) {\r\n        ///b2Assert(def.bodyA !== def.bodyB);\r\n        this.m_type = b2JointType.e_unknownJoint;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_index = 0;\r\n        this.m_islandFlag = false;\r\n        this.m_collideConnected = false;\r\n        this.m_userData = null;\r\n        this.m_type = def.type;\r\n        this.m_edgeA = new b2JointEdge(this, def.bodyB);\r\n        this.m_edgeB = new b2JointEdge(this, def.bodyA);\r\n        this.m_bodyA = def.bodyA;\r\n        this.m_bodyB = def.bodyB;\r\n        this.m_collideConnected = def.collideConnected;\r\n        this.m_userData = def.userData;\r\n    }\r\n    /// Get the type of the concrete joint.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n    /// Get the first body attached to this joint.\r\n    GetBodyA() {\r\n        return this.m_bodyA;\r\n    }\r\n    /// Get the second body attached to this joint.\r\n    GetBodyB() {\r\n        return this.m_bodyB;\r\n    }\r\n    /// Get the anchor point on bodyA in world coordinates.\r\n    GetAnchorA(out) {\r\n        return out.SetZero();\r\n    }\r\n    /// Get the anchor point on bodyB in world coordinates.\r\n    GetAnchorB(out) {\r\n        return out.SetZero();\r\n    }\r\n    /// Get the reaction force on bodyB at the joint anchor in Newtons.\r\n    GetReactionForce(inv_dt, out) {\r\n        return out.SetZero();\r\n    }\r\n    /// Get the reaction torque on bodyB in N*m.\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    /// Get the next joint the world joint list.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data pointer.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data pointer.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Short-cut function to determine if either body is inactive.\r\n    IsActive() {\r\n        return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\r\n    }\r\n    /// Get collide connected.\r\n    /// Note: modifying the collide connect flag won't work correctly because\r\n    /// the flag is only checked when fixture AABBs begin to overlap.\r\n    GetCollideConnected() {\r\n        return this.m_collideConnected;\r\n    }\r\n    /// Dump this joint to the log file.\r\n    Dump(log) {\r\n        log(\"// Dump is not supported for this joint type.\\n\");\r\n    }\r\n    /// Shift the origin for any points stored in world coordinates.\r\n    ShiftOrigin(newOrigin) {\r\n    }\r\n    InitVelocityConstraints(data) {\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n    }\r\n    // This returns true if the position errors are within tolerance.\r\n    SolvePositionConstraints(data) {\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJKb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL0pvaW50cy9iMkpvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSTdDLE1BQU0sQ0FBTixJQUFZLFdBY1g7QUFkRCxXQUFZLFdBQVc7SUFDckIsaUVBQWtCLENBQUE7SUFDbEIsbUVBQW1CLENBQUE7SUFDbkIscUVBQW9CLENBQUE7SUFDcEIsbUVBQW1CLENBQUE7SUFDbkIsK0RBQWlCLENBQUE7SUFDakIsNkRBQWdCLENBQUE7SUFDaEIsMkRBQWUsQ0FBQTtJQUNmLDZEQUFnQixDQUFBO0lBQ2hCLDJEQUFlLENBQUE7SUFDZixtRUFBbUIsQ0FBQTtJQUNuQiw0REFBZ0IsQ0FBQTtJQUNoQiw4REFBaUIsQ0FBQTtJQUNqQiw0REFBZ0IsQ0FBQTtBQUNsQixDQUFDLEVBZFcsV0FBVyxLQUFYLFdBQVcsUUFjdEI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQUtYO0FBTEQsV0FBWSxZQUFZO0lBQ3RCLHFFQUFtQixDQUFBO0lBQ25CLG1FQUFrQixDQUFBO0lBQ2xCLG1FQUFrQixDQUFBO0lBQ2xCLGlFQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxZQUFZLEtBQVosWUFBWSxRQUt2QjtBQUVELE1BQU07SUFBTjtRQUNTLFdBQU0sR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBVyxDQUFDLENBQUM7UUFDckIsYUFBUSxHQUFXLENBQUMsQ0FBQztJQWU5QixDQUFDO0lBYlEsT0FBTztRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFVLEVBQUUsRUFBVTtRQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELDhEQUE4RDtBQUM5RCw2REFBNkQ7QUFDN0QsNERBQTREO0FBQzVELDhEQUE4RDtBQUM5RCxzQ0FBc0M7QUFDdEMsTUFBTTtJQUtKLFlBQVksS0FBYyxFQUFFLEtBQWE7UUFGbEMsU0FBSSxHQUF1QixJQUFJLENBQUMsQ0FBRSxxREFBcUQ7UUFDdkYsU0FBSSxHQUF1QixJQUFJLENBQUMsQ0FBRSxpREFBaUQ7UUFFeEYsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBRUQsbURBQW1EO0FBQ25ELE1BQU07SUFnQkosWUFBWSxJQUFpQjtRQWY3QixpRUFBaUU7UUFDMUQsU0FBSSxHQUFnQixXQUFXLENBQUMsY0FBYyxDQUFDO1FBRXRELGdFQUFnRTtRQUN6RCxhQUFRLEdBQVEsSUFBSSxDQUFDO1FBRTVCLDRCQUE0QjtRQUNyQixVQUFLLEdBQVcsSUFBSSxDQUFDO1FBRTVCLDZCQUE2QjtRQUN0QixVQUFLLEdBQVcsSUFBSSxDQUFDO1FBRTVCLGdFQUFnRTtRQUN6RCxxQkFBZ0IsR0FBWSxLQUFLLENBQUM7UUFHdkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBRUQsOEVBQThFO0FBQzlFLGlFQUFpRTtBQUNqRSxNQUFNO0lBZ0JKLFlBQVksR0FBZTtRQUN6QixxQ0FBcUM7UUFoQmhDLFdBQU0sR0FBZ0IsV0FBVyxDQUFDLGNBQWMsQ0FBQztRQUNqRCxXQUFNLEdBQW1CLElBQUksQ0FBQztRQUM5QixXQUFNLEdBQW1CLElBQUksQ0FBQztRQU05QixZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBQzlCLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUVwQyxlQUFVLEdBQVEsSUFBSSxDQUFDO1FBSzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUUvQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDakMsQ0FBQztJQUVELHVDQUF1QztJQUNoQyxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCw4Q0FBOEM7SUFDdkMsUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsK0NBQStDO0lBQ3hDLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELHVEQUF1RDtJQUNoRCxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsdURBQXVEO0lBQ2hELFVBQVUsQ0FBQyxHQUFXO1FBQzNCLE9BQU8sR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxtRUFBbUU7SUFDNUQsZ0JBQWdCLENBQUMsTUFBYyxFQUFFLEdBQVc7UUFDakQsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELDRDQUE0QztJQUNyQyxpQkFBaUIsQ0FBQyxNQUFjO1FBQ3JDLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELDRDQUE0QztJQUNyQyxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCw4QkFBOEI7SUFDdkIsV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELDhCQUE4QjtJQUN2QixXQUFXLENBQUMsSUFBUztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsK0RBQStEO0lBQ3hELFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQsMEJBQTBCO0lBQzFCLHlFQUF5RTtJQUN6RSxpRUFBaUU7SUFDMUQsbUJBQW1CO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7SUFFRCxvQ0FBb0M7SUFDN0IsSUFBSSxDQUFDLEdBQTZDO1FBQ3ZELEdBQUcsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxnRUFBZ0U7SUFDekQsV0FBVyxDQUFDLFNBQWlCO0lBQ3BDLENBQUM7SUFFTSx1QkFBdUIsQ0FBQyxJQUFrQjtJQUNqRCxDQUFDO0lBRU0sd0JBQXdCLENBQUMsSUFBa0I7SUFDbEQsQ0FBQztJQUVELGlFQUFpRTtJQUMxRCx3QkFBd0IsQ0FBQyxJQUFrQjtRQUNoRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiJ9","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_linearSlop, b2_maxLinearCorrection } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Distance joint definition. This requires defining an\r\n/// anchor point on both bodies and the non-zero length of the\r\n/// distance joint. The definition uses local anchor points\r\n/// so that the initial configuration can violate the constraint\r\n/// slightly. This helps when saving and loading a game.\r\n/// @warning Do not use a zero or short length.\r\nexport class b2DistanceJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_distanceJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.length = 1;\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    Initialize(b1, b2, anchor1, anchor2) {\r\n        this.bodyA = b1;\r\n        this.bodyB = b2;\r\n        this.bodyA.GetLocalPoint(anchor1, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor2, this.localAnchorB);\r\n        this.length = b2Vec2.DistanceVV(anchor1, anchor2);\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n}\r\nexport class b2DistanceJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_bias = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_gamma = 0;\r\n        this.m_impulse = 0;\r\n        this.m_length = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_u = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_frequencyHz = def.frequencyHz;\r\n        this.m_dampingRatio = def.dampingRatio;\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_length = def.length;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return out.Set(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetLength(length) {\r\n        this.m_length = length;\r\n    }\r\n    Length() {\r\n        return this.m_length;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2DistanceJointDef = new b2DistanceJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.length = %.15f;\\n\", this.m_length);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // m_u = cB + m_rB - cA - m_rA;\r\n        this.m_u.x = cB.x + this.m_rB.x - cA.x - this.m_rA.x;\r\n        this.m_u.y = cB.y + this.m_rB.y - cA.y - this.m_rA.y;\r\n        // Handle singularity.\r\n        const length = this.m_u.Length();\r\n        if (length > b2_linearSlop) {\r\n            this.m_u.SelfMul(1 / length);\r\n        }\r\n        else {\r\n            this.m_u.SetZero();\r\n        }\r\n        // float32 crAu = b2Cross(m_rA, m_u);\r\n        const crAu = b2Vec2.CrossVV(this.m_rA, this.m_u);\r\n        // float32 crBu = b2Cross(m_rB, m_u);\r\n        const crBu = b2Vec2.CrossVV(this.m_rB, this.m_u);\r\n        // float32 invMass = m_invMassA + m_invIA * crAu * crAu + m_invMassB + m_invIB * crBu * crBu;\r\n        let invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu;\r\n        // Compute the effective mass matrix.\r\n        this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        if (this.m_frequencyHz > 0) {\r\n            const C = length - this.m_length;\r\n            // Frequency\r\n            const omega = 2 * b2_pi * this.m_frequencyHz;\r\n            // Damping coefficient\r\n            const d = 2 * this.m_mass * this.m_dampingRatio * omega;\r\n            // Spring stiffness\r\n            const k = this.m_mass * omega * omega;\r\n            // magic formulas\r\n            const h = data.step.dt;\r\n            this.m_gamma = h * (d + h * k);\r\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n            this.m_bias = C * h * k * this.m_gamma;\r\n            invMass += this.m_gamma;\r\n            this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        }\r\n        else {\r\n            this.m_gamma = 0;\r\n            this.m_bias = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale the impulse to support a variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_u;\r\n            const P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2DistanceJoint.InitVelocityConstraints_s_P);\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            // wA -= m_invIA * b2Cross(m_rA, P);\r\n            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            // wB += m_invIB * b2Cross(m_rB, P);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\r\n        // float32 Cdot = b2Dot(m_u, vpB - vpA);\r\n        const Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\r\n        const impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));\r\n        this.m_impulse += impulse;\r\n        // b2Vec2 P = impulse * m_u;\r\n        const P = b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\r\n        // vA -= m_invMassA * P;\r\n        vA.SelfMulSub(this.m_invMassA, P);\r\n        // wA -= m_invIA * b2Cross(m_rA, P);\r\n        wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n        // vB += m_invMassB * P;\r\n        vB.SelfMulAdd(this.m_invMassB, P);\r\n        // wB += m_invIB * b2Cross(m_rB, P);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        if (this.m_frequencyHz > 0) {\r\n            // There is no position correction for soft distance constraints.\r\n            return true;\r\n        }\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        const rA = b2Rot.MulRV(this.m_qA, this.m_lalcA, this.m_rA); // use m_rA\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        const rB = b2Rot.MulRV(this.m_qB, this.m_lalcB, this.m_rB); // use m_rB\r\n        // b2Vec2 u = cB + rB - cA - rA;\r\n        const u = this.m_u; // use m_u\r\n        u.x = cB.x + rB.x - cA.x - rA.x;\r\n        u.y = cB.y + rB.y - cA.y - rA.y;\r\n        // float32 length = u.Normalize();\r\n        const length = this.m_u.Normalize();\r\n        // float32 C = length - m_length;\r\n        let C = length - this.m_length;\r\n        C = b2Clamp(C, (-b2_maxLinearCorrection), b2_maxLinearCorrection);\r\n        const impulse = (-this.m_mass * C);\r\n        // b2Vec2 P = impulse * u;\r\n        const P = b2Vec2.MulSV(impulse, u, b2DistanceJoint.SolvePositionConstraints_s_P);\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        // aA -= m_invIA * b2Cross(rA, P);\r\n        aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        // aB += m_invIB * b2Cross(rB, P);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return b2Abs(C) < b2_linearSlop;\r\n    }\r\n}\r\nb2DistanceJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2DistanceJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","import { b2_epsilon, b2_linearSlop, b2_maxLinearCorrection, b2MakeNullArray, b2MakeNumberArray } from \"../../Common/b2Settings\";\r\nimport { b2Sq, b2Sqrt, b2Vec2 } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\nimport { b2DistanceJointDef } from \"./b2DistanceJoint\";\r\nexport class b2AreaJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_areaJoint);\r\n        this.world = null;\r\n        this.bodies = [];\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    AddBody(body) {\r\n        this.bodies.push(body);\r\n        if (this.bodies.length === 1) {\r\n            this.bodyA = body;\r\n        }\r\n        else if (this.bodies.length === 2) {\r\n            this.bodyB = body;\r\n        }\r\n    }\r\n}\r\nexport class b2AreaJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_bodies = null;\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_targetLengths = null;\r\n        this.m_targetArea = 0;\r\n        this.m_normals = null;\r\n        this.m_joints = null;\r\n        this.m_deltas = null;\r\n        this.m_delta = null;\r\n        ///b2Assert(def.bodies.length >= 3, \"You cannot create an area joint with less than three bodies.\");\r\n        this.m_bodies = def.bodies;\r\n        this.m_frequencyHz = def.frequencyHz;\r\n        this.m_dampingRatio = def.dampingRatio;\r\n        this.m_targetLengths = b2MakeNumberArray(def.bodies.length);\r\n        this.m_normals = b2Vec2.MakeArray(def.bodies.length);\r\n        this.m_joints = b2MakeNullArray(def.bodies.length);\r\n        this.m_deltas = b2Vec2.MakeArray(def.bodies.length);\r\n        this.m_delta = new b2Vec2();\r\n        const djd = new b2DistanceJointDef();\r\n        djd.frequencyHz = def.frequencyHz;\r\n        djd.dampingRatio = def.dampingRatio;\r\n        this.m_targetArea = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const body_c = body.GetWorldCenter();\r\n            const next_c = next.GetWorldCenter();\r\n            this.m_targetLengths[i] = b2Vec2.DistanceVV(body_c, next_c);\r\n            this.m_targetArea += b2Vec2.CrossVV(body_c, next_c);\r\n            djd.Initialize(body, next, body_c, next_c);\r\n            this.m_joints[i] = def.world.CreateJoint(djd);\r\n        }\r\n        this.m_targetArea *= 0.5;\r\n    }\r\n    GetAnchorA(out) {\r\n        return out.SetZero();\r\n    }\r\n    GetAnchorB(out) {\r\n        return out.SetZero();\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return out.SetZero();\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n        for (let i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetFrequency(hz);\r\n        }\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n        for (let i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetDampingRatio(ratio);\r\n        }\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    Dump(log) {\r\n        log(\"Area joint dumping is not supported.\\n\");\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const prev = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const prev_c = data.positions[prev.m_islandIndex].c;\r\n            const next_c = data.positions[next.m_islandIndex].c;\r\n            const delta = this.m_deltas[i];\r\n            b2Vec2.SubVV(next_c, prev_c, delta);\r\n        }\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse *= data.step.dtRatio;\r\n            for (let i = 0; i < this.m_bodies.length; ++i) {\r\n                const body = this.m_bodies[i];\r\n                const body_v = data.velocities[body.m_islandIndex].v;\r\n                const delta = this.m_deltas[i];\r\n                body_v.x += body.m_invMass * delta.y * 0.5 * this.m_impulse;\r\n                body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\r\n            }\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        let dotMassSum = 0;\r\n        let crossMassSum = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_v = data.velocities[body.m_islandIndex].v;\r\n            const delta = this.m_deltas[i];\r\n            dotMassSum += delta.LengthSquared() / body.GetMass();\r\n            crossMassSum += b2Vec2.CrossVV(body_v, delta);\r\n        }\r\n        const lambda = -2 * crossMassSum / dotMassSum;\r\n        // lambda = b2Clamp(lambda, -b2_maxLinearCorrection, b2_maxLinearCorrection);\r\n        this.m_impulse += lambda;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_v = data.velocities[body.m_islandIndex].v;\r\n            const delta = this.m_deltas[i];\r\n            body_v.x += body.m_invMass * delta.y * 0.5 * lambda;\r\n            body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\r\n        }\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        let perimeter = 0;\r\n        let area = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const body_c = data.positions[body.m_islandIndex].c;\r\n            const next_c = data.positions[next.m_islandIndex].c;\r\n            const delta = b2Vec2.SubVV(next_c, body_c, this.m_delta);\r\n            let dist = delta.Length();\r\n            if (dist < b2_epsilon) {\r\n                dist = 1;\r\n            }\r\n            this.m_normals[i].x = delta.y / dist;\r\n            this.m_normals[i].y = -delta.x / dist;\r\n            perimeter += dist;\r\n            area += b2Vec2.CrossVV(body_c, next_c);\r\n        }\r\n        area *= 0.5;\r\n        const deltaArea = this.m_targetArea - area;\r\n        const toExtrude = 0.5 * deltaArea / perimeter;\r\n        let done = true;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_c = data.positions[body.m_islandIndex].c;\r\n            const next_i = (i + 1) % this.m_bodies.length;\r\n            const delta = b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\r\n            delta.SelfMul(toExtrude);\r\n            const norm_sq = delta.LengthSquared();\r\n            if (norm_sq > b2Sq(b2_maxLinearCorrection)) {\r\n                delta.SelfMul(b2_maxLinearCorrection / b2Sqrt(norm_sq));\r\n            }\r\n            if (norm_sq > b2Sq(b2_linearSlop)) {\r\n                done = false;\r\n            }\r\n            body_c.x += delta.x;\r\n            body_c.y += delta.y;\r\n        }\r\n        return done;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Clamp, b2Vec2, b2Mat22, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Friction joint definition.\r\nexport class b2FrictionJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_frictionJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.maxForce = 0;\r\n        this.maxTorque = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n    }\r\n}\r\nexport class b2FrictionJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        // Solver shared\r\n        this.m_linearImpulse = new b2Vec2();\r\n        this.m_angularImpulse = 0;\r\n        this.m_maxForce = 0;\r\n        this.m_maxTorque = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_linearMass = new b2Mat22();\r\n        this.m_angularMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_linearImpulse.SetZero();\r\n        this.m_maxForce = def.maxForce;\r\n        this.m_maxTorque = def.maxTorque;\r\n        this.m_linearMass.SetZero();\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        // const cA: b2Vec2 = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        // const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective mass matrix.\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const K = this.m_K; // new b2Mat22();\r\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n        K.GetInverse(this.m_linearMass);\r\n        this.m_angularMass = iA + iB;\r\n        if (this.m_angularMass > 0) {\r\n            this.m_angularMass = 1 / this.m_angularMass;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            // m_linearImpulse *= data.step.dtRatio;\r\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\r\n            this.m_angularImpulse *= data.step.dtRatio;\r\n            // const P: b2Vec2(m_linearImpulse.x, m_linearImpulse.y);\r\n            const P = this.m_linearImpulse;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            // wA -= iA * (b2Cross(m_rA, P) + m_angularImpulse);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_angularImpulse);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            // wB += iB * (b2Cross(m_rB, P) + m_angularImpulse);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_angularImpulse);\r\n        }\r\n        else {\r\n            this.m_linearImpulse.SetZero();\r\n            this.m_angularImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const h = data.step.dt;\r\n        // Solve angular friction\r\n        {\r\n            const Cdot = wB - wA;\r\n            let impulse = (-this.m_angularMass * Cdot);\r\n            const oldImpulse = this.m_angularImpulse;\r\n            const maxImpulse = h * this.m_maxTorque;\r\n            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);\r\n            impulse = this.m_angularImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve linear friction\r\n        {\r\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = -b2Mul(m_linearMass, Cdot);\r\n            const impulseV = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2FrictionJoint.SolveVelocityConstraints_s_impulseV).SelfNeg();\r\n            // b2Vec2 oldImpulse = m_linearImpulse;\r\n            const oldImpulseV = b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);\r\n            // m_linearImpulse += impulse;\r\n            this.m_linearImpulse.SelfAdd(impulseV);\r\n            const maxImpulse = h * this.m_maxForce;\r\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n                this.m_linearImpulse.Normalize();\r\n                this.m_linearImpulse.SelfMul(maxImpulse);\r\n            }\r\n            // impulse = m_linearImpulse - oldImpulse;\r\n            b2Vec2.SubVV(this.m_linearImpulse, oldImpulseV, impulseV);\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulseV);\r\n            // wA -= iA * b2Cross(m_rA, impulse);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, impulseV);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulseV);\r\n            // wB += iB * b2Cross(m_rB, impulse);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, impulseV);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return out.Set(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_angularImpulse;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetMaxForce(force) {\r\n        this.m_maxForce = force;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetMaxTorque(torque) {\r\n        this.m_maxTorque = torque;\r\n    }\r\n    GetMaxTorque() {\r\n        return this.m_maxTorque;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2FrictionJointDef = new b2FrictionJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\r\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2FrictionJoint.SolveVelocityConstraints_s_impulseV = new b2Vec2();\r\nb2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Gear joint definition. This definition requires two existing\r\n/// revolute or prismatic joints (any combination will work).\r\nexport class b2GearJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_gearJoint);\r\n        this.joint1 = null;\r\n        this.joint2 = null;\r\n        this.ratio = 1;\r\n    }\r\n}\r\nexport class b2GearJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_joint1 = null;\r\n        this.m_joint2 = null;\r\n        this.m_typeA = b2JointType.e_unknownJoint;\r\n        this.m_typeB = b2JointType.e_unknownJoint;\r\n        // Body A is connected to body C\r\n        // Body B is connected to body D\r\n        this.m_bodyC = null;\r\n        this.m_bodyD = null;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localAnchorC = new b2Vec2();\r\n        this.m_localAnchorD = new b2Vec2();\r\n        this.m_localAxisC = new b2Vec2();\r\n        this.m_localAxisD = new b2Vec2();\r\n        this.m_referenceAngleA = 0;\r\n        this.m_referenceAngleB = 0;\r\n        this.m_constant = 0;\r\n        this.m_ratio = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_indexC = 0;\r\n        this.m_indexD = 0;\r\n        this.m_lcA = new b2Vec2();\r\n        this.m_lcB = new b2Vec2();\r\n        this.m_lcC = new b2Vec2();\r\n        this.m_lcD = new b2Vec2();\r\n        this.m_mA = 0;\r\n        this.m_mB = 0;\r\n        this.m_mC = 0;\r\n        this.m_mD = 0;\r\n        this.m_iA = 0;\r\n        this.m_iB = 0;\r\n        this.m_iC = 0;\r\n        this.m_iD = 0;\r\n        this.m_JvAC = new b2Vec2();\r\n        this.m_JvBD = new b2Vec2();\r\n        this.m_JwA = 0;\r\n        this.m_JwB = 0;\r\n        this.m_JwC = 0;\r\n        this.m_JwD = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_qC = new b2Rot();\r\n        this.m_qD = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_lalcC = new b2Vec2();\r\n        this.m_lalcD = new b2Vec2();\r\n        this.m_joint1 = def.joint1;\r\n        this.m_joint2 = def.joint2;\r\n        this.m_typeA = this.m_joint1.GetType();\r\n        this.m_typeB = this.m_joint2.GetType();\r\n        ///b2Assert(this.m_typeA === b2JointType.e_revoluteJoint || this.m_typeA === b2JointType.e_prismaticJoint);\r\n        ///b2Assert(this.m_typeB === b2JointType.e_revoluteJoint || this.m_typeB === b2JointType.e_prismaticJoint);\r\n        let coordinateA, coordinateB;\r\n        // TODO_ERIN there might be some problem with the joint edges in b2Joint.\r\n        this.m_bodyC = this.m_joint1.GetBodyA();\r\n        this.m_bodyA = this.m_joint1.GetBodyB();\r\n        // Get geometry of joint1\r\n        const xfA = this.m_bodyA.m_xf;\r\n        const aA = this.m_bodyA.m_sweep.a;\r\n        const xfC = this.m_bodyC.m_xf;\r\n        const aC = this.m_bodyC.m_sweep.a;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            const revolute = def.joint1;\r\n            this.m_localAnchorC.Copy(revolute.m_localAnchorA);\r\n            this.m_localAnchorA.Copy(revolute.m_localAnchorB);\r\n            this.m_referenceAngleA = revolute.m_referenceAngle;\r\n            this.m_localAxisC.SetZero();\r\n            coordinateA = aA - aC - this.m_referenceAngleA;\r\n        }\r\n        else {\r\n            const prismatic = def.joint1;\r\n            this.m_localAnchorC.Copy(prismatic.m_localAnchorA);\r\n            this.m_localAnchorA.Copy(prismatic.m_localAnchorB);\r\n            this.m_referenceAngleA = prismatic.m_referenceAngle;\r\n            this.m_localAxisC.Copy(prismatic.m_localXAxisA);\r\n            // b2Vec2 pC = m_localAnchorC;\r\n            const pC = this.m_localAnchorC;\r\n            // b2Vec2 pA = b2MulT(xfC.q, b2Mul(xfA.q, m_localAnchorA) + (xfA.p - xfC.p));\r\n            const pA = b2Rot.MulTRV(xfC.q, b2Vec2.AddVV(b2Rot.MulRV(xfA.q, this.m_localAnchorA, b2Vec2.s_t0), b2Vec2.SubVV(xfA.p, xfC.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0); // pA uses s_t0\r\n            // coordinateA = b2Dot(pA - pC, m_localAxisC);\r\n            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\r\n        }\r\n        this.m_bodyD = this.m_joint2.GetBodyA();\r\n        this.m_bodyB = this.m_joint2.GetBodyB();\r\n        // Get geometry of joint2\r\n        const xfB = this.m_bodyB.m_xf;\r\n        const aB = this.m_bodyB.m_sweep.a;\r\n        const xfD = this.m_bodyD.m_xf;\r\n        const aD = this.m_bodyD.m_sweep.a;\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            const revolute = def.joint2;\r\n            this.m_localAnchorD.Copy(revolute.m_localAnchorA);\r\n            this.m_localAnchorB.Copy(revolute.m_localAnchorB);\r\n            this.m_referenceAngleB = revolute.m_referenceAngle;\r\n            this.m_localAxisD.SetZero();\r\n            coordinateB = aB - aD - this.m_referenceAngleB;\r\n        }\r\n        else {\r\n            const prismatic = def.joint2;\r\n            this.m_localAnchorD.Copy(prismatic.m_localAnchorA);\r\n            this.m_localAnchorB.Copy(prismatic.m_localAnchorB);\r\n            this.m_referenceAngleB = prismatic.m_referenceAngle;\r\n            this.m_localAxisD.Copy(prismatic.m_localXAxisA);\r\n            // b2Vec2 pD = m_localAnchorD;\r\n            const pD = this.m_localAnchorD;\r\n            // b2Vec2 pB = b2MulT(xfD.q, b2Mul(xfB.q, m_localAnchorB) + (xfB.p - xfD.p));\r\n            const pB = b2Rot.MulTRV(xfD.q, b2Vec2.AddVV(b2Rot.MulRV(xfB.q, this.m_localAnchorB, b2Vec2.s_t0), b2Vec2.SubVV(xfB.p, xfD.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0); // pB uses s_t0\r\n            // coordinateB = b2Dot(pB - pD, m_localAxisD);\r\n            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\r\n        }\r\n        this.m_ratio = def.ratio;\r\n        this.m_constant = coordinateA + this.m_ratio * coordinateB;\r\n        this.m_impulse = 0;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_indexC = this.m_bodyC.m_islandIndex;\r\n        this.m_indexD = this.m_bodyD.m_islandIndex;\r\n        this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);\r\n        this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);\r\n        this.m_mA = this.m_bodyA.m_invMass;\r\n        this.m_mB = this.m_bodyB.m_invMass;\r\n        this.m_mC = this.m_bodyC.m_invMass;\r\n        this.m_mD = this.m_bodyD.m_invMass;\r\n        this.m_iA = this.m_bodyA.m_invI;\r\n        this.m_iB = this.m_bodyB.m_invI;\r\n        this.m_iC = this.m_bodyC.m_invI;\r\n        this.m_iD = this.m_bodyD.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const aC = data.positions[this.m_indexC].a;\r\n        const vC = data.velocities[this.m_indexC].v;\r\n        let wC = data.velocities[this.m_indexC].w;\r\n        const aD = data.positions[this.m_indexD].a;\r\n        const vD = data.velocities[this.m_indexD].v;\r\n        let wD = data.velocities[this.m_indexD].w;\r\n        // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\r\n        this.m_mass = 0;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            this.m_JvAC.SetZero();\r\n            this.m_JwA = 1;\r\n            this.m_JwC = 1;\r\n            this.m_mass += this.m_iA + this.m_iC;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qC, m_localAxisC);\r\n            const u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.InitVelocityConstraints_s_u);\r\n            // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\r\n            b2Vec2.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);\r\n            const rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.InitVelocityConstraints_s_rC);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\r\n            b2Vec2.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.InitVelocityConstraints_s_rA);\r\n            // m_JvAC = u;\r\n            this.m_JvAC.Copy(u);\r\n            // m_JwC = b2Cross(rC, u);\r\n            this.m_JwC = b2Vec2.CrossVV(rC, u);\r\n            // m_JwA = b2Cross(rA, u);\r\n            this.m_JwA = b2Vec2.CrossVV(rA, u);\r\n            this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\r\n        }\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            this.m_JvBD.SetZero();\r\n            this.m_JwB = this.m_ratio;\r\n            this.m_JwD = this.m_ratio;\r\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qD, m_localAxisD);\r\n            const u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.InitVelocityConstraints_s_u);\r\n            // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\r\n            b2Vec2.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);\r\n            const rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.InitVelocityConstraints_s_rD);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\r\n            b2Vec2.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.InitVelocityConstraints_s_rB);\r\n            // m_JvBD = m_ratio * u;\r\n            b2Vec2.MulSV(this.m_ratio, u, this.m_JvBD);\r\n            // m_JwD = m_ratio * b2Cross(rD, u);\r\n            this.m_JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\r\n            // m_JwB = m_ratio * b2Cross(rB, u);\r\n            this.m_JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\r\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\r\n        }\r\n        // Compute effective mass.\r\n        this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\r\n        if (data.step.warmStarting) {\r\n            // vA += (m_mA * m_impulse) * m_JvAC;\r\n            vA.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC);\r\n            wA += this.m_iA * this.m_impulse * this.m_JwA;\r\n            // vB += (m_mB * m_impulse) * m_JvBD;\r\n            vB.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD);\r\n            wB += this.m_iB * this.m_impulse * this.m_JwB;\r\n            // vC -= (m_mC * m_impulse) * m_JvAC;\r\n            vC.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC);\r\n            wC -= this.m_iC * this.m_impulse * this.m_JwC;\r\n            // vD -= (m_mD * m_impulse) * m_JvBD;\r\n            vD.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD);\r\n            wD -= this.m_iD * this.m_impulse * this.m_JwD;\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n        // data.velocities[this.m_indexC].v = vC;\r\n        data.velocities[this.m_indexC].w = wC;\r\n        // data.velocities[this.m_indexD].v = vD;\r\n        data.velocities[this.m_indexD].w = wD;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const vC = data.velocities[this.m_indexC].v;\r\n        let wC = data.velocities[this.m_indexC].w;\r\n        const vD = data.velocities[this.m_indexD].v;\r\n        let wD = data.velocities[this.m_indexD].w;\r\n        // float32 Cdot = b2Dot(m_JvAC, vA - vC) + b2Dot(m_JvBD, vB - vD);\r\n        let Cdot = b2Vec2.DotVV(this.m_JvAC, b2Vec2.SubVV(vA, vC, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(this.m_JvBD, b2Vec2.SubVV(vB, vD, b2Vec2.s_t0));\r\n        Cdot += (this.m_JwA * wA - this.m_JwC * wC) + (this.m_JwB * wB - this.m_JwD * wD);\r\n        const impulse = -this.m_mass * Cdot;\r\n        this.m_impulse += impulse;\r\n        // vA += (m_mA * impulse) * m_JvAC;\r\n        vA.SelfMulAdd((this.m_mA * impulse), this.m_JvAC);\r\n        wA += this.m_iA * impulse * this.m_JwA;\r\n        // vB += (m_mB * impulse) * m_JvBD;\r\n        vB.SelfMulAdd((this.m_mB * impulse), this.m_JvBD);\r\n        wB += this.m_iB * impulse * this.m_JwB;\r\n        // vC -= (m_mC * impulse) * m_JvAC;\r\n        vC.SelfMulSub((this.m_mC * impulse), this.m_JvAC);\r\n        wC -= this.m_iC * impulse * this.m_JwC;\r\n        // vD -= (m_mD * impulse) * m_JvBD;\r\n        vD.SelfMulSub((this.m_mD * impulse), this.m_JvBD);\r\n        wD -= this.m_iD * impulse * this.m_JwD;\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n        // data.velocities[this.m_indexC].v = vC;\r\n        data.velocities[this.m_indexC].w = wC;\r\n        // data.velocities[this.m_indexD].v = vD;\r\n        data.velocities[this.m_indexD].w = wD;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const cC = data.positions[this.m_indexC].c;\r\n        let aC = data.positions[this.m_indexC].a;\r\n        const cD = data.positions[this.m_indexD].c;\r\n        let aD = data.positions[this.m_indexD].a;\r\n        // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\r\n        const linearError = 0;\r\n        let coordinateA, coordinateB;\r\n        const JvAC = this.m_JvAC, JvBD = this.m_JvBD;\r\n        let JwA, JwB, JwC, JwD;\r\n        let mass = 0;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            JvAC.SetZero();\r\n            JwA = 1;\r\n            JwC = 1;\r\n            mass += this.m_iA + this.m_iC;\r\n            coordinateA = aA - aC - this.m_referenceAngleA;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qC, m_localAxisC);\r\n            const u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.SolvePositionConstraints_s_u);\r\n            // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\r\n            const rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.SolvePositionConstraints_s_rC);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.SolvePositionConstraints_s_rA);\r\n            // JvAC = u;\r\n            JvAC.Copy(u);\r\n            // JwC = b2Cross(rC, u);\r\n            JwC = b2Vec2.CrossVV(rC, u);\r\n            // JwA = b2Cross(rA, u);\r\n            JwA = b2Vec2.CrossVV(rA, u);\r\n            mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\r\n            // b2Vec2 pC = m_localAnchorC - m_lcC;\r\n            const pC = this.m_lalcC;\r\n            // b2Vec2 pA = b2MulT(qC, rA + (cA - cC));\r\n            const pA = b2Rot.MulTRV(qC, b2Vec2.AddVV(rA, b2Vec2.SubVV(cA, cC, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0); // pA uses s_t0\r\n            // coordinateA = b2Dot(pA - pC, m_localAxisC);\r\n            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\r\n        }\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            JvBD.SetZero();\r\n            JwB = this.m_ratio;\r\n            JwD = this.m_ratio;\r\n            mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\r\n            coordinateB = aB - aD - this.m_referenceAngleB;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qD, m_localAxisD);\r\n            const u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.SolvePositionConstraints_s_u);\r\n            // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\r\n            const rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.SolvePositionConstraints_s_rD);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.SolvePositionConstraints_s_rB);\r\n            // JvBD = m_ratio * u;\r\n            b2Vec2.MulSV(this.m_ratio, u, JvBD);\r\n            // JwD = m_ratio * b2Cross(rD, u);\r\n            JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\r\n            // JwB = m_ratio * b2Cross(rB, u);\r\n            JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\r\n            mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * JwD * JwD + this.m_iB * JwB * JwB;\r\n            // b2Vec2 pD = m_localAnchorD - m_lcD;\r\n            const pD = this.m_lalcD;\r\n            // b2Vec2 pB = b2MulT(qD, rB + (cB - cD));\r\n            const pB = b2Rot.MulTRV(qD, b2Vec2.AddVV(rB, b2Vec2.SubVV(cB, cD, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0); // pB uses s_t0\r\n            // coordinateB = b2Dot(pB - pD, m_localAxisD);\r\n            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\r\n        }\r\n        const C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant;\r\n        let impulse = 0;\r\n        if (mass > 0) {\r\n            impulse = -C / mass;\r\n        }\r\n        // cA += m_mA * impulse * JvAC;\r\n        cA.SelfMulAdd(this.m_mA * impulse, JvAC);\r\n        aA += this.m_iA * impulse * JwA;\r\n        // cB += m_mB * impulse * JvBD;\r\n        cB.SelfMulAdd(this.m_mB * impulse, JvBD);\r\n        aB += this.m_iB * impulse * JwB;\r\n        // cC -= m_mC * impulse * JvAC;\r\n        cC.SelfMulSub(this.m_mC * impulse, JvAC);\r\n        aC -= this.m_iC * impulse * JwC;\r\n        // cD -= m_mD * impulse * JvBD;\r\n        cD.SelfMulSub(this.m_mD * impulse, JvBD);\r\n        aD -= this.m_iD * impulse * JwD;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        // data.positions[this.m_indexC].c = cC;\r\n        data.positions[this.m_indexC].a = aC;\r\n        // data.positions[this.m_indexD].c = cD;\r\n        data.positions[this.m_indexD].a = aD;\r\n        // TODO_ERIN not implemented\r\n        return linearError < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P = m_impulse * m_JvAC;\r\n        // return inv_dt * P;\r\n        return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_JvAC, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        // float32 L = m_impulse * m_JwA;\r\n        // return inv_dt * L;\r\n        return inv_dt * this.m_impulse * this.m_JwA;\r\n    }\r\n    GetJoint1() { return this.m_joint1; }\r\n    GetJoint2() { return this.m_joint2; }\r\n    GetRatio() {\r\n        return this.m_ratio;\r\n    }\r\n    SetRatio(ratio) {\r\n        ///b2Assert(b2IsValid(ratio));\r\n        this.m_ratio = ratio;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        const index1 = this.m_joint1.m_index;\r\n        const index2 = this.m_joint2.m_index;\r\n        log(\"  const jd: b2GearJointDef = new b2GearJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.joint1 = joints[%d];\\n\", index1);\r\n        log(\"  jd.joint2 = joints[%d];\\n\", index2);\r\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2GearJoint.InitVelocityConstraints_s_u = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rA = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rB = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rC = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rD = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_u = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rA = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rB = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rC = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rD = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJHZWFySm9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9EeW5hbWljcy9Kb2ludHMvYjJHZWFySm9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFNN0QsZ0VBQWdFO0FBQ2hFLDZEQUE2RDtBQUM3RCxNQUFNLHFCQUFzQixTQUFRLFVBQVU7SUFPNUM7UUFDRSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBUDFCLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFFdkIsV0FBTSxHQUFZLElBQUksQ0FBQztRQUV2QixVQUFLLEdBQVcsQ0FBQyxDQUFDO0lBSXpCLENBQUM7Q0FDRjtBQUVELE1BQU0sa0JBQW1CLFNBQVEsT0FBTztJQStEdEMsWUFBWSxHQUFtQjtRQUM3QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUEvRE4sYUFBUSxHQUFZLElBQUksQ0FBQztRQUN6QixhQUFRLEdBQVksSUFBSSxDQUFDO1FBRXpCLFlBQU8sR0FBZ0IsV0FBVyxDQUFDLGNBQWMsQ0FBQztRQUNsRCxZQUFPLEdBQWdCLFdBQVcsQ0FBQyxjQUFjLENBQUM7UUFFekQsZ0NBQWdDO1FBQ2hDLGdDQUFnQztRQUN6QixZQUFPLEdBQVcsSUFBSSxDQUFDO1FBQ3ZCLFlBQU8sR0FBVyxJQUFJLENBQUM7UUFFOUIsZ0JBQWdCO1FBQ1QsbUJBQWMsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3RDLG1CQUFjLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN0QyxtQkFB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","/*\r\n* Copyright (c) 2006-2012 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Clamp, b2Vec2, b2Mat22, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n// Point-to-point constraint\r\n// Cdot = v2 - v1\r\n//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)\r\n// J = [-I -r1_skew I r2_skew ]\r\n// Identity used:\r\n// w k % (rx i + ry j) = w * (-ry i + rx j)\r\n//\r\n// r1 = offset - c1\r\n// r2 = -c2\r\n// Angle constraint\r\n// Cdot = w2 - w1\r\n// J = [0 0 -1 0 0 1]\r\n// K = invI1 + invI2\r\nexport class b2MotorJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_motorJoint);\r\n        this.linearOffset = new b2Vec2(0, 0);\r\n        this.angularOffset = 0;\r\n        this.maxForce = 1;\r\n        this.maxTorque = 1;\r\n        this.correctionFactor = 0.3;\r\n    }\r\n    Initialize(bA, bB) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        // b2Vec2 xB = bodyB->GetPosition();\r\n        // linearOffset = bodyA->GetLocalPoint(xB);\r\n        this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);\r\n        const angleA = this.bodyA.GetAngle();\r\n        const angleB = this.bodyB.GetAngle();\r\n        this.angularOffset = angleB - angleA;\r\n    }\r\n}\r\nexport class b2MotorJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_linearOffset = new b2Vec2();\r\n        this.m_angularOffset = 0;\r\n        this.m_linearImpulse = new b2Vec2();\r\n        this.m_angularImpulse = 0;\r\n        this.m_maxForce = 0;\r\n        this.m_maxTorque = 0;\r\n        this.m_correctionFactor = 0.3;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_linearError = new b2Vec2();\r\n        this.m_angularError = 0;\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_linearMass = new b2Mat22();\r\n        this.m_angularMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_K = new b2Mat22();\r\n        this.m_linearOffset.Copy(def.linearOffset);\r\n        this.m_linearImpulse.SetZero();\r\n        this.m_maxForce = def.maxForce;\r\n        this.m_maxTorque = def.maxTorque;\r\n        this.m_correctionFactor = def.correctionFactor;\r\n    }\r\n    GetAnchorA() {\r\n        return this.m_bodyA.GetPosition();\r\n    }\r\n    GetAnchorB() {\r\n        return this.m_bodyB.GetPosition();\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * m_linearImpulse;\r\n        return b2Vec2.MulSV(inv_dt, this.m_linearImpulse, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_angularImpulse;\r\n    }\r\n    SetLinearOffset(linearOffset) {\r\n        if (!b2Vec2.IsEqualToV(linearOffset, this.m_linearOffset)) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_linearOffset.Copy(linearOffset);\r\n        }\r\n    }\r\n    GetLinearOffset() {\r\n        return this.m_linearOffset;\r\n    }\r\n    SetAngularOffset(angularOffset) {\r\n        if (angularOffset !== this.m_angularOffset) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_angularOffset = angularOffset;\r\n        }\r\n    }\r\n    GetAngularOffset() {\r\n        return this.m_angularOffset;\r\n    }\r\n    SetMaxForce(force) {\r\n        ///b2Assert(b2IsValid(force) && force >= 0);\r\n        this.m_maxForce = force;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetMaxTorque(torque) {\r\n        ///b2Assert(b2IsValid(torque) && torque >= 0);\r\n        this.m_maxTorque = torque;\r\n    }\r\n    GetMaxTorque() {\r\n        return this.m_maxTorque;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective mass matrix.\r\n        // this.m_rA = b2Mul(qA, m_linearOffset - this.m_localCenterA);\r\n        const rA = b2Rot.MulRV(qA, b2Vec2.SubVV(this.m_linearOffset, this.m_localCenterA, b2Vec2.s_t0), this.m_rA);\r\n        // this.m_rB = b2Mul(qB, -this.m_localCenterB);\r\n        const rB = b2Rot.MulRV(qB, b2Vec2.NegV(this.m_localCenterB, b2Vec2.s_t0), this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Upper 2 by 2 of K for point to point\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n        // this.m_linearMass = K.GetInverse();\r\n        K.GetInverse(this.m_linearMass);\r\n        this.m_angularMass = iA + iB;\r\n        if (this.m_angularMass > 0) {\r\n            this.m_angularMass = 1 / this.m_angularMass;\r\n        }\r\n        // this.m_linearError = cB + rB - cA - rA;\r\n        b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), this.m_linearError);\r\n        this.m_angularError = aB - aA - this.m_angularOffset;\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            // this.m_linearImpulse *= data.step.dtRatio;\r\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\r\n            this.m_angularImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P(this.m_linearImpulse.x, this.m_linearImpulse.y);\r\n            const P = this.m_linearImpulse;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(rA, P) + this.m_angularImpulse);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(rB, P) + this.m_angularImpulse);\r\n        }\r\n        else {\r\n            this.m_linearImpulse.SetZero();\r\n            this.m_angularImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA; // vA is a reference\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB; // vB is a reference\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const h = data.step.dt;\r\n        const inv_h = data.step.inv_dt;\r\n        // Solve angular friction\r\n        {\r\n            const Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\r\n            let impulse = -this.m_angularMass * Cdot;\r\n            const oldImpulse = this.m_angularImpulse;\r\n            const maxImpulse = h * this.m_maxTorque;\r\n            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_angularImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve linear friction\r\n        {\r\n            const rA = this.m_rA;\r\n            const rB = this.m_rB;\r\n            // b2Vec2 Cdot = vB + b2Vec2.CrossSV(wB, rB) - vA - b2Vec2.CrossSV(wA, rA) + inv_h * this.m_correctionFactor * this.m_linearError;\r\n            const Cdot_v2 = b2Vec2.AddVV(b2Vec2.SubVV(b2Vec2.AddVV(vB, b2Vec2.CrossSV(wB, rB, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.AddVV(vA, b2Vec2.CrossSV(wA, rA, b2Vec2.s_t1), b2Vec2.s_t1), b2Vec2.s_t2), b2Vec2.MulSV(inv_h * this.m_correctionFactor, this.m_linearError, b2Vec2.s_t3), b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = -b2Mul(this.m_linearMass, Cdot);\r\n            const impulse_v2 = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2MotorJoint.SolveVelocityConstraints_s_impulse_v2).SelfNeg();\r\n            // b2Vec2 oldImpulse = this.m_linearImpulse;\r\n            const oldImpulse_v2 = b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);\r\n            // this.m_linearImpulse += impulse;\r\n            this.m_linearImpulse.SelfAdd(impulse_v2);\r\n            const maxImpulse = h * this.m_maxForce;\r\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n                this.m_linearImpulse.Normalize();\r\n                // this.m_linearImpulse *= maxImpulse;\r\n                this.m_linearImpulse.SelfMul(maxImpulse);\r\n            }\r\n            // impulse = this.m_linearImpulse - oldImpulse;\r\n            b2Vec2.SubVV(this.m_linearImpulse, oldImpulse_v2, impulse_v2);\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulse_v2);\r\n            // wA -= iA * b2Vec2.CrossVV(rA, impulse);\r\n            wA -= iA * b2Vec2.CrossVV(rA, impulse_v2);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulse_v2);\r\n            // wB += iB * b2Vec2.CrossVV(rB, impulse);\r\n            wB += iB * b2Vec2.CrossVV(rB, impulse_v2);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA; // vA is a reference\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB; // vB is a reference\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2MotorJointDef = new b2MotorJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.linearOffset.Set(%.15f, %.15f);\\n\", this.m_linearOffset.x, this.m_linearOffset.y);\r\n        log(\"  jd.angularOffset = %.15f;\\n\", this.m_angularOffset);\r\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\r\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\r\n        log(\"  jd.correctionFactor = %.15f;\\n\", this.m_correctionFactor);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2MotorJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2MotorJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();\r\nb2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Mat22, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Mouse joint definition. This requires a world target point,\r\n/// tuning parameters, and the time step.\r\nexport class b2MouseJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_mouseJoint);\r\n        this.target = new b2Vec2();\r\n        this.maxForce = 0;\r\n        this.frequencyHz = 5;\r\n        this.dampingRatio = 0.7;\r\n    }\r\n}\r\nexport class b2MouseJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_localAnchorB = null;\r\n        this.m_targetA = null;\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_beta = 0;\r\n        // Solver shared\r\n        this.m_impulse = null;\r\n        this.m_maxForce = 0;\r\n        this.m_gamma = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rB = null;\r\n        this.m_localCenterB = null;\r\n        this.m_invMassB = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = null;\r\n        this.m_C = null;\r\n        this.m_qB = null;\r\n        this.m_lalcB = null;\r\n        this.m_K = null;\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_targetA = new b2Vec2();\r\n        this.m_impulse = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_mass = new b2Mat22();\r\n        this.m_C = new b2Vec2();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        ///b2Assert(def.target.IsValid());\r\n        ///b2Assert(b2IsValid(def.maxForce) && def.maxForce >= 0);\r\n        ///b2Assert(b2IsValid(def.frequencyHz) && def.frequencyHz >= 0);\r\n        ///b2Assert(b2IsValid(def.dampingRatio) && def.dampingRatio >= 0);\r\n        this.m_targetA.Copy(def.target);\r\n        b2Transform.MulTXV(this.m_bodyB.GetTransform(), this.m_targetA, this.m_localAnchorB);\r\n        this.m_maxForce = def.maxForce;\r\n        this.m_impulse.SetZero();\r\n        this.m_frequencyHz = def.frequencyHz;\r\n        this.m_dampingRatio = def.dampingRatio;\r\n        this.m_beta = 0;\r\n        this.m_gamma = 0;\r\n    }\r\n    SetTarget(target) {\r\n        if (!this.m_bodyB.IsAwake()) {\r\n            this.m_bodyB.SetAwake(true);\r\n        }\r\n        this.m_targetA.Copy(target);\r\n    }\r\n    GetTarget() {\r\n        return this.m_targetA;\r\n    }\r\n    SetMaxForce(maxForce) {\r\n        this.m_maxForce = maxForce;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qB = this.m_qB.SetAngle(aB);\r\n        const mass = this.m_bodyB.GetMass();\r\n        // Frequency\r\n        const omega = 2 * b2_pi * this.m_frequencyHz;\r\n        // Damping coefficient\r\n        const d = 2 * mass * this.m_dampingRatio * omega;\r\n        // Spring stiffness\r\n        const k = mass * (omega * omega);\r\n        // magic formulas\r\n        // gamma has units of inverse mass.\r\n        // beta has units of inverse time.\r\n        const h = data.step.dt;\r\n        ///b2Assert(d + h * k > b2_epsilon);\r\n        this.m_gamma = h * (d + h * k);\r\n        if (this.m_gamma !== 0) {\r\n            this.m_gamma = 1 / this.m_gamma;\r\n        }\r\n        this.m_beta = h * k * this.m_gamma;\r\n        // Compute the effective mass matrix.\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]\r\n        //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]\r\n        //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]\r\n        const K = this.m_K;\r\n        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\r\n        K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\r\n        K.GetInverse(this.m_mass);\r\n        // m_C = cB + m_rB - m_targetA;\r\n        this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\r\n        this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\r\n        // m_C *= m_beta;\r\n        this.m_C.SelfMul(this.m_beta);\r\n        // Cheat with some damping\r\n        wB *= 0.98;\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // vB += m_invMassB * m_impulse;\r\n            vB.x += this.m_invMassB * this.m_impulse.x;\r\n            vB.y += this.m_invMassB * this.m_impulse.y;\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, this.m_impulse);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Cdot = v + cross(w, r)\r\n        // b2Vec2 Cdot = vB + b2Cross(wB, m_rB);\r\n        const Cdot = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);\r\n        //  b2Vec2 impulse = b2Mul(m_mass, -(Cdot + m_C + m_gamma * m_impulse));\r\n        const impulse = b2Mat22.MulMV(this.m_mass, b2Vec2.AddVV(Cdot, b2Vec2.AddVV(this.m_C, b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0).SelfNeg(), b2MouseJoint.SolveVelocityConstraints_s_impulse);\r\n        // b2Vec2 oldImpulse = m_impulse;\r\n        const oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\r\n        // m_impulse += impulse;\r\n        this.m_impulse.SelfAdd(impulse);\r\n        const maxImpulse = data.step.dt * this.m_maxForce;\r\n        if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n            this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\r\n        }\r\n        // impulse = m_impulse - oldImpulse;\r\n        b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\r\n        // vB += m_invMassB * impulse;\r\n        vB.SelfMulAdd(this.m_invMassB, impulse);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, impulse);\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    GetAnchorA(out) {\r\n        return out.Copy(this.m_targetA);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return b2Vec2.MulSV(inv_dt, this.m_impulse, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"Mouse joint dumping is not supported.\\n\");\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_targetA.SelfSub(newOrigin);\r\n    }\r\n}\r\nb2MouseJoint.SolveVelocityConstraints_s_Cdot = new b2Vec2();\r\nb2MouseJoint.SolveVelocityConstraints_s_impulse = new b2Vec2();\r\nb2MouseJoint.SolveVelocityConstraints_s_oldImpulse = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxLinearCorrection, b2_angularSlop } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Clamp, b2Vec2, b2Mat22, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Prismatic joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nexport class b2PrismaticJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_prismaticJoint);\r\n        this.localAnchorA = null;\r\n        this.localAnchorB = null;\r\n        this.localAxisA = null;\r\n        this.referenceAngle = 0;\r\n        this.enableLimit = false;\r\n        this.lowerTranslation = 0;\r\n        this.upperTranslation = 0;\r\n        this.enableMotor = false;\r\n        this.maxMotorForce = 0;\r\n        this.motorSpeed = 0;\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.localAxisA = new b2Vec2(1, 0);\r\n    }\r\n    Initialize(bA, bB, anchor, axis) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2PrismaticJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localXAxisA = new b2Vec2();\r\n        this.m_localYAxisA = new b2Vec2();\r\n        this.m_referenceAngle = 0;\r\n        this.m_impulse = new b2Vec3(0, 0, 0);\r\n        this.m_motorImpulse = 0;\r\n        this.m_lowerTranslation = 0;\r\n        this.m_upperTranslation = 0;\r\n        this.m_maxMotorForce = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableLimit = false;\r\n        this.m_enableMotor = false;\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_axis = new b2Vec2(0, 0);\r\n        this.m_perp = new b2Vec2(0, 0);\r\n        this.m_s1 = 0;\r\n        this.m_s2 = 0;\r\n        this.m_a1 = 0;\r\n        this.m_a2 = 0;\r\n        this.m_K = new b2Mat33();\r\n        this.m_K3 = new b2Mat33();\r\n        this.m_K2 = new b2Mat22();\r\n        this.m_motorMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_localXAxisA.Copy(def.localAxisA).SelfNormalize();\r\n        b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\r\n        this.m_referenceAngle = def.referenceAngle;\r\n        this.m_lowerTranslation = def.lowerTranslation;\r\n        this.m_upperTranslation = def.upperTranslation;\r\n        this.m_maxMotorForce = def.maxMotorForce;\r\n        this.m_motorSpeed = def.motorSpeed;\r\n        this.m_enableLimit = def.enableLimit;\r\n        this.m_enableMotor = def.enableMotor;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective masses.\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = (cB - cA) + rB - rA;\r\n        const d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_d);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Compute motor Jacobian and effective mass.\r\n        {\r\n            // m_axis = b2Mul(qA, m_localXAxisA);\r\n            b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\r\n            // m_a1 = b2Cross(d + rA, m_axis);\r\n            this.m_a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_axis);\r\n            // m_a2 = b2Cross(rB, m_axis);\r\n            this.m_a2 = b2Vec2.CrossVV(rB, this.m_axis);\r\n            this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\r\n            if (this.m_motorMass > 0) {\r\n                this.m_motorMass = 1 / this.m_motorMass;\r\n            }\r\n        }\r\n        // Prismatic constraint.\r\n        {\r\n            // m_perp = b2Mul(qA, m_localYAxisA);\r\n            b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\r\n            // m_s1 = b2Cross(d + rA, m_perp);\r\n            this.m_s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_perp);\r\n            // m_s2 = b2Cross(rB, m_perp);\r\n            this.m_s2 = b2Vec2.CrossVV(rB, this.m_perp);\r\n            // float32 k11 = mA + mB + iA * m_s1 * m_s1 + iB * m_s2 * m_s2;\r\n            this.m_K.ex.x = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\r\n            // float32 k12 = iA * m_s1 + iB * m_s2;\r\n            this.m_K.ex.y = iA * this.m_s1 + iB * this.m_s2;\r\n            // float32 k13 = iA * m_s1 * m_a1 + iB * m_s2 * m_a2;\r\n            this.m_K.ex.z = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\r\n            this.m_K.ey.x = this.m_K.ex.y;\r\n            // float32 k22 = iA + iB;\r\n            this.m_K.ey.y = iA + iB;\r\n            if (this.m_K.ey.y === 0) {\r\n                // For bodies with fixed rotation.\r\n                this.m_K.ey.y = 1;\r\n            }\r\n            // float32 k23 = iA * m_a1 + iB * m_a2;\r\n            this.m_K.ey.z = iA * this.m_a1 + iB * this.m_a2;\r\n            this.m_K.ez.x = this.m_K.ex.z;\r\n            this.m_K.ez.y = this.m_K.ey.z;\r\n            // float32 k33 = mA + mB + iA * m_a1 * m_a1 + iB * m_a2 * m_a2;\r\n            this.m_K.ez.z = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\r\n            // m_K.ex.Set(k11, k12, k13);\r\n            // m_K.ey.Set(k12, k22, k23);\r\n            // m_K.ez.Set(k13, k23, k33);\r\n        }\r\n        // Compute motor and limit terms.\r\n        if (this.m_enableLimit) {\r\n            // float32 jointTranslation = b2Dot(m_axis, d);\r\n            const jointTranslation = b2Vec2.DotVV(this.m_axis, d);\r\n            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\r\n                this.m_limitState = b2LimitState.e_equalLimits;\r\n            }\r\n            else if (jointTranslation <= this.m_lowerTranslation) {\r\n                if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\r\n                    this.m_limitState = b2LimitState.e_atLowerLimit;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n            }\r\n            else if (jointTranslation >= this.m_upperTranslation) {\r\n                if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\r\n                    this.m_limitState = b2LimitState.e_atUpperLimit;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n            }\r\n            else {\r\n                this.m_limitState = b2LimitState.e_inactiveLimit;\r\n                this.m_impulse.z = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.m_limitState = b2LimitState.e_inactiveLimit;\r\n            this.m_impulse.z = 0;\r\n        }\r\n        if (!this.m_enableMotor) {\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Account for variable time step.\r\n            // m_impulse *= data.step.dtRatio;\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV((this.m_motorImpulse + this.m_impulse.z), this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_P);\r\n            // float32 LA = m_impulse.x * m_s1 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a1;\r\n            const LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\r\n            // float32 LB = m_impulse.x * m_s2 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a2;\r\n            const LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Solve linear motor constraint.\r\n        if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits) {\r\n            // float32 Cdot = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\r\n            const Cdot = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\r\n            let impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorForce;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            // b2Vec2 P = impulse * m_axis;\r\n            const P = b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_a1;\r\n            const LB = impulse * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // b2Vec2 Cdot1;\r\n        // Cdot1.x = b2Dot(m_perp, vB - vA) + m_s2 * wB - m_s1 * wA;\r\n        const Cdot1_x = b2Vec2.DotVV(this.m_perp, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_s2 * wB - this.m_s1 * wA;\r\n        // Cdot1.y = wB - wA;\r\n        const Cdot1_y = wB - wA;\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit) {\r\n            // Solve prismatic and limit constraint in block form.\r\n            // float32 Cdot2;\r\n            // Cdot2 = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\r\n            const Cdot2 = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\r\n            // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 f1 = m_impulse;\r\n            const f1 = b2PrismaticJoint.SolveVelocityConstraints_s_f1.Copy(this.m_impulse);\r\n            // b2Vec3 df =  m_K.Solve33(-Cdot);\r\n            const df3 = this.m_K.Solve33((-Cdot1_x), (-Cdot1_y), (-Cdot2), b2PrismaticJoint.SolveVelocityConstraints_s_df3);\r\n            // m_impulse += df;\r\n            this.m_impulse.SelfAdd(df3);\r\n            if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                this.m_impulse.z = b2Max(this.m_impulse.z, 0);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                this.m_impulse.z = b2Min(this.m_impulse.z, 0);\r\n            }\r\n            // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) + f1(1:2)\r\n            // b2Vec2 b = -Cdot1 - (m_impulse.z - f1.z) * b2Vec2(m_K.ez.x, m_K.ez.y);\r\n            const b_x = (-Cdot1_x) - (this.m_impulse.z - f1.z) * this.m_K.ez.x;\r\n            const b_y = (-Cdot1_y) - (this.m_impulse.z - f1.z) * this.m_K.ez.y;\r\n            // b2Vec2 f2r = m_K.Solve22(b) + b2Vec2(f1.x, f1.y);\r\n            const f2r = this.m_K.Solve22(b_x, b_y, b2PrismaticJoint.SolveVelocityConstraints_s_f2r);\r\n            f2r.x += f1.x;\r\n            f2r.y += f1.y;\r\n            // m_impulse.x = f2r.x;\r\n            this.m_impulse.x = f2r.x;\r\n            // m_impulse.y = f2r.y;\r\n            this.m_impulse.y = f2r.y;\r\n            // df = m_impulse - f1;\r\n            df3.x = this.m_impulse.x - f1.x;\r\n            df3.y = this.m_impulse.y - f1.y;\r\n            df3.z = this.m_impulse.z - f1.z;\r\n            // b2Vec2 P = df.x * m_perp + df.z * m_axis;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(df3.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV(df3.z, this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            // float32 LA = df.x * m_s1 + df.y + df.z * m_a1;\r\n            const LA = df3.x * this.m_s1 + df3.y + df3.z * this.m_a1;\r\n            // float32 LB = df.x * m_s2 + df.y + df.z * m_a2;\r\n            const LB = df3.x * this.m_s2 + df3.y + df3.z * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        else {\r\n            // Limit is inactive, just solve the prismatic constraint in block form.\r\n            // b2Vec2 df = m_K.Solve22(-Cdot1);\r\n            const df2 = this.m_K.Solve22((-Cdot1_x), (-Cdot1_y), b2PrismaticJoint.SolveVelocityConstraints_s_df2);\r\n            this.m_impulse.x += df2.x;\r\n            this.m_impulse.y += df2.y;\r\n            // b2Vec2 P = df.x * m_perp;\r\n            const P = b2Vec2.MulSV(df2.x, this.m_perp, b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            // float32 LA = df.x * m_s1 + df.y;\r\n            const LA = df2.x * this.m_s1 + df2.y;\r\n            // float32 LB = df.x * m_s2 + df.y;\r\n            const LB = df2.x * this.m_s2 + df2.y;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = cB + rB - cA - rA;\r\n        const d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_d);\r\n        // b2Vec2 axis = b2Mul(qA, m_localXAxisA);\r\n        const axis = b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\r\n        // float32 a1 = b2Cross(d + rA, axis);\r\n        const a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), axis);\r\n        // float32 a2 = b2Cross(rB, axis);\r\n        const a2 = b2Vec2.CrossVV(rB, axis);\r\n        // b2Vec2 perp = b2Mul(qA, m_localYAxisA);\r\n        const perp = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\r\n        // float32 s1 = b2Cross(d + rA, perp);\r\n        const s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), perp);\r\n        // float32 s2 = b2Cross(rB, perp);\r\n        const s2 = b2Vec2.CrossVV(rB, perp);\r\n        // b2Vec3 impulse;\r\n        let impulse = b2PrismaticJoint.SolvePositionConstraints_s_impulse;\r\n        // b2Vec2 C1;\r\n        // C1.x = b2Dot(perp, d);\r\n        const C1_x = b2Vec2.DotVV(perp, d);\r\n        // C1.y = aB - aA - m_referenceAngle;\r\n        const C1_y = aB - aA - this.m_referenceAngle;\r\n        let linearError = b2Abs(C1_x);\r\n        let angularError = b2Abs(C1_y);\r\n        let active = false;\r\n        let C2 = 0;\r\n        if (this.m_enableLimit) {\r\n            // float32 translation = b2Dot(axis, d);\r\n            const translation = b2Vec2.DotVV(axis, d);\r\n            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\r\n                // Prevent large angular corrections\r\n                C2 = b2Clamp(translation, (-b2_maxLinearCorrection), b2_maxLinearCorrection);\r\n                linearError = b2Max(linearError, b2Abs(translation));\r\n                active = true;\r\n            }\r\n            else if (translation <= this.m_lowerTranslation) {\r\n                // Prevent large linear corrections and allow some slop.\r\n                C2 = b2Clamp(translation - this.m_lowerTranslation + b2_linearSlop, (-b2_maxLinearCorrection), 0);\r\n                linearError = b2Max(linearError, this.m_lowerTranslation - translation);\r\n                active = true;\r\n            }\r\n            else if (translation >= this.m_upperTranslation) {\r\n                // Prevent large linear corrections and allow some slop.\r\n                C2 = b2Clamp(translation - this.m_upperTranslation - b2_linearSlop, 0, b2_maxLinearCorrection);\r\n                linearError = b2Max(linearError, translation - this.m_upperTranslation);\r\n                active = true;\r\n            }\r\n        }\r\n        if (active) {\r\n            // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            // float32 k12 = iA * s1 + iB * s2;\r\n            const k12 = iA * s1 + iB * s2;\r\n            // float32 k13 = iA * s1 * a1 + iB * s2 * a2;\r\n            const k13 = iA * s1 * a1 + iB * s2 * a2;\r\n            // float32 k22 = iA + iB;\r\n            let k22 = iA + iB;\r\n            if (k22 === 0) {\r\n                // For fixed rotation\r\n                k22 = 1;\r\n            }\r\n            // float32 k23 = iA * a1 + iB * a2;\r\n            const k23 = iA * a1 + iB * a2;\r\n            // float32 k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\r\n            const k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\r\n            // b2Mat33 K;\r\n            const K = this.m_K3;\r\n            // K.ex.Set(k11, k12, k13);\r\n            K.ex.SetXYZ(k11, k12, k13);\r\n            // K.ey.Set(k12, k22, k23);\r\n            K.ey.SetXYZ(k12, k22, k23);\r\n            // K.ez.Set(k13, k23, k33);\r\n            K.ez.SetXYZ(k13, k23, k33);\r\n            // b2Vec3 C;\r\n            // C.x = C1.x;\r\n            // C.y = C1.y;\r\n            // C.z = C2;\r\n            // impulse = K.Solve33(-C);\r\n            impulse = K.Solve33((-C1_x), (-C1_y), (-C2), impulse);\r\n        }\r\n        else {\r\n            // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            // float32 k12 = iA * s1 + iB * s2;\r\n            const k12 = iA * s1 + iB * s2;\r\n            // float32 k22 = iA + iB;\r\n            let k22 = iA + iB;\r\n            if (k22 === 0) {\r\n                k22 = 1;\r\n            }\r\n            // b2Mat22 K;\r\n            const K2 = this.m_K2;\r\n            // K.ex.Set(k11, k12);\r\n            K2.ex.Set(k11, k12);\r\n            // K.ey.Set(k12, k22);\r\n            K2.ey.Set(k12, k22);\r\n            // b2Vec2 impulse1 = K.Solve(-C1);\r\n            const impulse1 = K2.Solve((-C1_x), (-C1_y), b2PrismaticJoint.SolvePositionConstraints_s_impulse1);\r\n            impulse.x = impulse1.x;\r\n            impulse.y = impulse1.y;\r\n            impulse.z = 0;\r\n        }\r\n        // b2Vec2 P = impulse.x * perp + impulse.z * axis;\r\n        const P = b2Vec2.AddVV(b2Vec2.MulSV(impulse.x, perp, b2Vec2.s_t0), b2Vec2.MulSV(impulse.z, axis, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_P);\r\n        // float32 LA = impulse.x * s1 + impulse.y + impulse.z * a1;\r\n        const LA = impulse.x * s1 + impulse.y + impulse.z * a1;\r\n        // float32 LB = impulse.x * s2 + impulse.y + impulse.z * a2;\r\n        const LB = impulse.x * s2 + impulse.y + impulse.z * a2;\r\n        // cA -= mA * P;\r\n        cA.SelfMulSub(mA, P);\r\n        aA -= iA * LA;\r\n        // cB += mB * P;\r\n        cB.SelfMulAdd(mB, P);\r\n        aB += iB * LB;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return linearError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * (m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis);\r\n        return out.Set(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.y;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetLocalAxisA() { return this.m_localXAxisA; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    GetJointTranslation() {\r\n        // b2Vec2 pA = m_bodyA.GetWorldPoint(m_localAnchorA);\r\n        const pA = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PrismaticJoint.GetJointTranslation_s_pA);\r\n        // b2Vec2 pB = m_bodyB.GetWorldPoint(m_localAnchorB);\r\n        const pB = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PrismaticJoint.GetJointTranslation_s_pB);\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2PrismaticJoint.GetJointTranslation_s_d);\r\n        // b2Vec2 axis = m_bodyA.GetWorldVector(m_localXAxisA);\r\n        const axis = this.m_bodyA.GetWorldVector(this.m_localXAxisA, b2PrismaticJoint.GetJointTranslation_s_axis);\r\n        // float32 translation = b2Dot(d, axis);\r\n        const translation = b2Vec2.DotVV(d, axis);\r\n        return translation;\r\n    }\r\n    GetJointSpeed() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 pA = bA->m_sweep.c + rA;\r\n        const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\r\n        // b2Vec2 pB = bB->m_sweep.c + rB;\r\n        const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\r\n        // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, this.m_axis);\r\n        const vA = bA.m_linearVelocity;\r\n        const vB = bB.m_linearVelocity;\r\n        const wA = bA.m_angularVelocity;\r\n        const wB = bB.m_angularVelocity;\r\n        // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n        const speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n        return speed;\r\n    }\r\n    IsLimitEnabled() {\r\n        return this.m_enableLimit;\r\n    }\r\n    EnableLimit(flag) {\r\n        if (flag !== this.m_enableLimit) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableLimit = flag;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    GetLowerLimit() {\r\n        return this.m_lowerTranslation;\r\n    }\r\n    GetUpperLimit() {\r\n        return this.m_upperTranslation;\r\n    }\r\n    SetLimits(lower, upper) {\r\n        if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_lowerTranslation = lower;\r\n            this.m_upperTranslation = upper;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_enableMotor = flag;\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_motorSpeed = speed;\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    SetMaxMotorForce(force) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_maxMotorForce = force;\r\n    }\r\n    GetMaxMotorForce() { return this.m_maxMotorForce; }\r\n    GetMotorForce(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.lowerTranslation = %.15f;\\n\", this.m_lowerTranslation);\r\n        log(\"  jd.upperTranslation = %.15f;\\n\", this.m_upperTranslation);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorForce = %.15f;\\n\", this.m_maxMotorForce);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2PrismaticJoint.InitVelocityConstraints_s_d = new b2Vec2();\r\nb2PrismaticJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_f2r = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_f1 = new b2Vec3();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_df3 = new b2Vec3();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_df2 = new b2Vec2();\r\nb2PrismaticJoint.SolvePositionConstraints_s_d = new b2Vec2();\r\nb2PrismaticJoint.SolvePositionConstraints_s_impulse = new b2Vec3();\r\nb2PrismaticJoint.SolvePositionConstraints_s_impulse1 = new b2Vec2();\r\nb2PrismaticJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_pA = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_pB = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_d = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_axis = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\nexport const b2_minPulleyLength = 2;\r\n/// Pulley joint definition. This requires two ground anchors,\r\n/// two dynamic body anchor points, and a pulley ratio.\r\nexport class b2PulleyJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_pulleyJoint);\r\n        this.groundAnchorA = new b2Vec2(-1, 1);\r\n        this.groundAnchorB = new b2Vec2(1, 1);\r\n        this.localAnchorA = new b2Vec2(-1, 0);\r\n        this.localAnchorB = new b2Vec2(1, 0);\r\n        this.lengthA = 0;\r\n        this.lengthB = 0;\r\n        this.ratio = 1;\r\n        this.collideConnected = true;\r\n    }\r\n    Initialize(bA, bB, groundA, groundB, anchorA, anchorB, r) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.groundAnchorA.Copy(groundA);\r\n        this.groundAnchorB.Copy(groundB);\r\n        this.bodyA.GetLocalPoint(anchorA, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchorB, this.localAnchorB);\r\n        this.lengthA = b2Vec2.DistanceVV(anchorA, groundA);\r\n        this.lengthB = b2Vec2.DistanceVV(anchorB, groundB);\r\n        this.ratio = r;\r\n        ///b2Assert(this.ratio > b2_epsilon);\r\n    }\r\n}\r\nexport class b2PulleyJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_groundAnchorA = new b2Vec2();\r\n        this.m_groundAnchorB = new b2Vec2();\r\n        this.m_lengthA = 0;\r\n        this.m_lengthB = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_constant = 0;\r\n        this.m_ratio = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_uA = new b2Vec2();\r\n        this.m_uB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_groundAnchorA.Copy(def.groundAnchorA);\r\n        this.m_groundAnchorB.Copy(def.groundAnchorB);\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_lengthA = def.lengthA;\r\n        this.m_lengthB = def.lengthB;\r\n        ///b2Assert(def.ratio !== 0);\r\n        this.m_ratio = def.ratio;\r\n        this.m_constant = def.lengthA + this.m_ratio * def.lengthB;\r\n        this.m_impulse = 0;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // Get the pulley axes.\r\n        // m_uA = cA + m_rA - m_groundAnchorA;\r\n        this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);\r\n        // m_uB = cB + m_rB - m_groundAnchorB;\r\n        this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);\r\n        const lengthA = this.m_uA.Length();\r\n        const lengthB = this.m_uB.Length();\r\n        if (lengthA > 10 * b2_linearSlop) {\r\n            this.m_uA.SelfMul(1 / lengthA);\r\n        }\r\n        else {\r\n            this.m_uA.SetZero();\r\n        }\r\n        if (lengthB > 10 * b2_linearSlop) {\r\n            this.m_uB.SelfMul(1 / lengthB);\r\n        }\r\n        else {\r\n            this.m_uB.SetZero();\r\n        }\r\n        // Compute effective mass.\r\n        const ruA = b2Vec2.CrossVV(this.m_rA, this.m_uA);\r\n        const ruB = b2Vec2.CrossVV(this.m_rB, this.m_uB);\r\n        const mA = this.m_invMassA + this.m_invIA * ruA * ruA;\r\n        const mB = this.m_invMassB + this.m_invIB * ruB * ruB;\r\n        this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\r\n        if (this.m_mass > 0) {\r\n            this.m_mass = 1 / this.m_mass;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support variable time steps.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // Warm starting.\r\n            // b2Vec2 PA = -(m_impulse) * m_uA;\r\n            const PA = b2Vec2.MulSV(-(this.m_impulse), this.m_uA, b2PulleyJoint.InitVelocityConstraints_s_PA);\r\n            // b2Vec2 PB = (-m_ratio * m_impulse) * m_uB;\r\n            const PB = b2Vec2.MulSV((-this.m_ratio * this.m_impulse), this.m_uB, b2PulleyJoint.InitVelocityConstraints_s_PB);\r\n            // vA += m_invMassA * PA;\r\n            vA.SelfMulAdd(this.m_invMassA, PA);\r\n            wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\r\n            // vB += m_invMassB * PB;\r\n            vB.SelfMulAdd(this.m_invMassB, PB);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2PulleyJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2PulleyJoint.SolveVelocityConstraints_s_vpB);\r\n        const Cdot = -b2Vec2.DotVV(this.m_uA, vpA) - this.m_ratio * b2Vec2.DotVV(this.m_uB, vpB);\r\n        const impulse = -this.m_mass * Cdot;\r\n        this.m_impulse += impulse;\r\n        // b2Vec2 PA = -impulse * m_uA;\r\n        const PA = b2Vec2.MulSV(-impulse, this.m_uA, b2PulleyJoint.SolveVelocityConstraints_s_PA);\r\n        // b2Vec2 PB = -m_ratio * impulse * m_uB;\r\n        const PB = b2Vec2.MulSV(-this.m_ratio * impulse, this.m_uB, b2PulleyJoint.SolveVelocityConstraints_s_PB);\r\n        // vA += m_invMassA * PA;\r\n        vA.SelfMulAdd(this.m_invMassA, PA);\r\n        wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\r\n        // vB += m_invMassB * PB;\r\n        vB.SelfMulAdd(this.m_invMassB, PB);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // Get the pulley axes.\r\n        // b2Vec2 uA = cA + rA - m_groundAnchorA;\r\n        const uA = this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);\r\n        // b2Vec2 uB = cB + rB - m_groundAnchorB;\r\n        const uB = this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);\r\n        const lengthA = uA.Length();\r\n        const lengthB = uB.Length();\r\n        if (lengthA > 10 * b2_linearSlop) {\r\n            uA.SelfMul(1 / lengthA);\r\n        }\r\n        else {\r\n            uA.SetZero();\r\n        }\r\n        if (lengthB > 10 * b2_linearSlop) {\r\n            uB.SelfMul(1 / lengthB);\r\n        }\r\n        else {\r\n            uB.SetZero();\r\n        }\r\n        // Compute effective mass.\r\n        const ruA = b2Vec2.CrossVV(rA, uA);\r\n        const ruB = b2Vec2.CrossVV(rB, uB);\r\n        const mA = this.m_invMassA + this.m_invIA * ruA * ruA;\r\n        const mB = this.m_invMassB + this.m_invIB * ruB * ruB;\r\n        let mass = mA + this.m_ratio * this.m_ratio * mB;\r\n        if (mass > 0) {\r\n            mass = 1 / mass;\r\n        }\r\n        const C = this.m_constant - lengthA - this.m_ratio * lengthB;\r\n        const linearError = b2Abs(C);\r\n        const impulse = -mass * C;\r\n        // b2Vec2 PA = -impulse * uA;\r\n        const PA = b2Vec2.MulSV(-impulse, uA, b2PulleyJoint.SolvePositionConstraints_s_PA);\r\n        // b2Vec2 PB = -m_ratio * impulse * uB;\r\n        const PB = b2Vec2.MulSV(-this.m_ratio * impulse, uB, b2PulleyJoint.SolvePositionConstraints_s_PB);\r\n        // cA += m_invMassA * PA;\r\n        cA.SelfMulAdd(this.m_invMassA, PA);\r\n        aA += this.m_invIA * b2Vec2.CrossVV(rA, PA);\r\n        // cB += m_invMassB * PB;\r\n        cB.SelfMulAdd(this.m_invMassB, PB);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, PB);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return linearError < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P = m_impulse * m_uB;\r\n        // return inv_dt * P;\r\n        return out.Set(inv_dt * this.m_impulse * this.m_uB.x, inv_dt * this.m_impulse * this.m_uB.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetGroundAnchorA() {\r\n        return this.m_groundAnchorA;\r\n    }\r\n    GetGroundAnchorB() {\r\n        return this.m_groundAnchorB;\r\n    }\r\n    GetLengthA() {\r\n        return this.m_lengthA;\r\n    }\r\n    GetLengthB() {\r\n        return this.m_lengthB;\r\n    }\r\n    GetRatio() {\r\n        return this.m_ratio;\r\n    }\r\n    GetCurrentLengthA() {\r\n        // b2Vec2 p = m_bodyA->GetWorldPoint(m_localAnchorA);\r\n        // b2Vec2 s = m_groundAnchorA;\r\n        // b2Vec2 d = p - s;\r\n        // return d.Length();\r\n        const p = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PulleyJoint.GetCurrentLengthA_s_p);\r\n        const s = this.m_groundAnchorA;\r\n        return b2Vec2.DistanceVV(p, s);\r\n    }\r\n    GetCurrentLengthB() {\r\n        // b2Vec2 p = m_bodyB->GetWorldPoint(m_localAnchorB);\r\n        // b2Vec2 s = m_groundAnchorB;\r\n        // b2Vec2 d = p - s;\r\n        // return d.Length();\r\n        const p = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PulleyJoint.GetCurrentLengthB_s_p);\r\n        const s = this.m_groundAnchorB;\r\n        return b2Vec2.DistanceVV(p, s);\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2PulleyJointDef = new b2PulleyJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.groundAnchorA.Set(%.15f, %.15f);\\n\", this.m_groundAnchorA.x, this.m_groundAnchorA.y);\r\n        log(\"  jd.groundAnchorB.Set(%.15f, %.15f);\\n\", this.m_groundAnchorB.x, this.m_groundAnchorB.y);\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.lengthA = %.15f;\\n\", this.m_lengthA);\r\n        log(\"  jd.lengthB = %.15f;\\n\", this.m_lengthB);\r\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_groundAnchorA.SelfSub(newOrigin);\r\n        this.m_groundAnchorB.SelfSub(newOrigin);\r\n    }\r\n}\r\nb2PulleyJoint.InitVelocityConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.InitVelocityConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.SolvePositionConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.SolvePositionConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.GetCurrentLengthA_s_p = new b2Vec2();\r\nb2PulleyJoint.GetCurrentLengthB_s_p = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_angularSlop, b2_maxAngularCorrection } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Mat22, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Revolute joint definition. This requires defining an\r\n/// anchor point where the bodies are joined. The definition\r\n/// uses local anchor points so that the initial configuration\r\n/// can violate the constraint slightly. You also need to\r\n/// specify the initial relative angle for joint limits. This\r\n/// helps when saving and loading a game.\r\n/// The local anchor points are measured from the body's origin\r\n/// rather than the center of mass because:\r\n/// 1. you might not know where the center of mass will be.\r\n/// 2. if you add/remove shapes from a body and recompute the mass,\r\n///    the joints will be broken.\r\nexport class b2RevoluteJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_revoluteJoint);\r\n        this.localAnchorA = new b2Vec2(0, 0);\r\n        this.localAnchorB = new b2Vec2(0, 0);\r\n        this.referenceAngle = 0;\r\n        this.enableLimit = false;\r\n        this.lowerAngle = 0;\r\n        this.upperAngle = 0;\r\n        this.enableMotor = false;\r\n        this.motorSpeed = 0;\r\n        this.maxMotorTorque = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2RevoluteJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_impulse = new b2Vec3();\r\n        this.m_motorImpulse = 0;\r\n        this.m_enableMotor = false;\r\n        this.m_maxMotorTorque = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableLimit = false;\r\n        this.m_referenceAngle = 0;\r\n        this.m_lowerAngle = 0;\r\n        this.m_upperAngle = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = new b2Mat33(); // effective mass for point-to-point constraint.\r\n        this.m_motorMass = 0; // effective mass for motor/limit angular constraint.\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_referenceAngle = def.referenceAngle;\r\n        this.m_impulse.SetZero();\r\n        this.m_motorImpulse = 0;\r\n        this.m_lowerAngle = def.lowerAngle;\r\n        this.m_upperAngle = def.upperAngle;\r\n        this.m_maxMotorTorque = def.maxMotorTorque;\r\n        this.m_motorSpeed = def.motorSpeed;\r\n        this.m_enableLimit = def.enableLimit;\r\n        this.m_enableMotor = def.enableMotor;\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const fixedRotation = (iA + iB === 0);\r\n        this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n        this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n        this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n        this.m_mass.ex.y = this.m_mass.ey.x;\r\n        this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n        this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n        this.m_mass.ex.z = this.m_mass.ez.x;\r\n        this.m_mass.ey.z = this.m_mass.ez.y;\r\n        this.m_mass.ez.z = iA + iB;\r\n        this.m_motorMass = iA + iB;\r\n        if (this.m_motorMass > 0) {\r\n            this.m_motorMass = 1 / this.m_motorMass;\r\n        }\r\n        if (!this.m_enableMotor || fixedRotation) {\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (this.m_enableLimit && !fixedRotation) {\r\n            const jointAngle = aB - aA - this.m_referenceAngle;\r\n            if (b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b2_angularSlop) {\r\n                this.m_limitState = b2LimitState.e_equalLimits;\r\n            }\r\n            else if (jointAngle <= this.m_lowerAngle) {\r\n                if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                this.m_limitState = b2LimitState.e_atLowerLimit;\r\n            }\r\n            else if (jointAngle >= this.m_upperAngle) {\r\n                if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                this.m_limitState = b2LimitState.e_atUpperLimit;\r\n            }\r\n            else {\r\n                this.m_limitState = b2LimitState.e_inactiveLimit;\r\n                this.m_impulse.z = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n            const P = b2RevoluteJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const fixedRotation = (iA + iB === 0);\r\n        // Solve motor constraint.\r\n        if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits && !fixedRotation) {\r\n            const Cdot = wB - wA - this.m_motorSpeed;\r\n            let impulse = -this.m_motorMass * Cdot;\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorTorque;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve limit constraint.\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit && !fixedRotation) {\r\n            // b2Vec2 Cdot1 = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1);\r\n            const Cdot2 = wB - wA;\r\n            // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 impulse = -this.m_mass.Solve33(Cdot);\r\n            const impulse_v3 = this.m_mass.Solve33(Cdot1.x, Cdot1.y, Cdot2, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3).SelfNeg();\r\n            if (this.m_limitState === b2LimitState.e_equalLimits) {\r\n                this.m_impulse.SelfAdd(impulse_v3);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                const newImpulse = this.m_impulse.z + impulse_v3.z;\r\n                if (newImpulse < 0) {\r\n                    // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\r\n                    const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\r\n                    const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\r\n                    const reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);\r\n                    impulse_v3.x = reduced_v2.x;\r\n                    impulse_v3.y = reduced_v2.y;\r\n                    impulse_v3.z = -this.m_impulse.z;\r\n                    this.m_impulse.x += reduced_v2.x;\r\n                    this.m_impulse.y += reduced_v2.y;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                else {\r\n                    this.m_impulse.SelfAdd(impulse_v3);\r\n                }\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                const newImpulse = this.m_impulse.z + impulse_v3.z;\r\n                if (newImpulse > 0) {\r\n                    // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\r\n                    const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\r\n                    const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\r\n                    const reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);\r\n                    impulse_v3.x = reduced_v2.x;\r\n                    impulse_v3.y = reduced_v2.y;\r\n                    impulse_v3.z = -this.m_impulse.z;\r\n                    this.m_impulse.x += reduced_v2.x;\r\n                    this.m_impulse.y += reduced_v2.y;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                else {\r\n                    this.m_impulse.SelfAdd(impulse_v3);\r\n                }\r\n            }\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2RevoluteJoint.SolveVelocityConstraints_s_P.Set(impulse_v3.x, impulse_v3.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse_v3.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse_v3.z);\r\n        }\r\n        else {\r\n            // Solve point-to-point constraint\r\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = m_mass.Solve22(-Cdot);\r\n            const impulse_v2 = this.m_mass.Solve22(-Cdot_v2.x, -Cdot_v2.y, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2);\r\n            this.m_impulse.x += impulse_v2.x;\r\n            this.m_impulse.y += impulse_v2.y;\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulse_v2);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, impulse_v2);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulse_v2);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, impulse_v2);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        let angularError = 0;\r\n        let positionError = 0;\r\n        const fixedRotation = (this.m_invIA + this.m_invIB === 0);\r\n        // Solve angular limit constraint.\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit && !fixedRotation) {\r\n            const angle = aB - aA - this.m_referenceAngle;\r\n            let limitImpulse = 0;\r\n            if (this.m_limitState === b2LimitState.e_equalLimits) {\r\n                // Prevent large angular corrections\r\n                const C = b2Clamp(angle - this.m_lowerAngle, -b2_maxAngularCorrection, b2_maxAngularCorrection);\r\n                limitImpulse = -this.m_motorMass * C;\r\n                angularError = b2Abs(C);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                let C = angle - this.m_lowerAngle;\r\n                angularError = -C;\r\n                // Prevent large angular corrections and allow some slop.\r\n                C = b2Clamp(C + b2_angularSlop, -b2_maxAngularCorrection, 0);\r\n                limitImpulse = -this.m_motorMass * C;\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                let C = angle - this.m_upperAngle;\r\n                angularError = C;\r\n                // Prevent large angular corrections and allow some slop.\r\n                C = b2Clamp(C - b2_angularSlop, 0, b2_maxAngularCorrection);\r\n                limitImpulse = -this.m_motorMass * C;\r\n            }\r\n            aA -= this.m_invIA * limitImpulse;\r\n            aB += this.m_invIB * limitImpulse;\r\n        }\r\n        // Solve point-to-point constraint.\r\n        {\r\n            qA.SetAngle(aA);\r\n            qB.SetAngle(aB);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n            b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n            b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n            // b2Vec2 C = cB + rB - cA - rA;\r\n            const C_v2 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2RevoluteJoint.SolvePositionConstraints_s_C_v2);\r\n            // positionError = C.Length();\r\n            positionError = C_v2.Length();\r\n            const mA = this.m_invMassA, mB = this.m_invMassB;\r\n            const iA = this.m_invIA, iB = this.m_invIB;\r\n            const K = this.m_K;\r\n            K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n            K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n            K.ey.x = K.ex.y;\r\n            K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n            // b2Vec2 impulse = -K.Solve(C);\r\n            const impulse = K.Solve(C_v2.x, C_v2.y, b2RevoluteJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n            // cA -= mA * impulse;\r\n            cA.SelfMulSub(mA, impulse);\r\n            aA -= iA * b2Vec2.CrossVV(rA, impulse);\r\n            // cB += mB * impulse;\r\n            cB.SelfMulAdd(mB, impulse);\r\n            aB += iB * b2Vec2.CrossVV(rB, impulse);\r\n        }\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n        // return inv_dt * P;\r\n        return out.Set(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.z;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    GetJointAngle() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_sweep.a - bA->this.m_sweep.a - this.m_referenceAngle;\r\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\r\n    }\r\n    GetJointSpeed() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_angularVelocity - bA->this.m_angularVelocity;\r\n        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        if (this.m_enableMotor !== flag) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableMotor = flag;\r\n        }\r\n    }\r\n    GetMotorTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    SetMaxMotorTorque(torque) {\r\n        this.m_maxMotorTorque = torque;\r\n    }\r\n    GetMaxMotorTorque() { return this.m_maxMotorTorque; }\r\n    IsLimitEnabled() {\r\n        return this.m_enableLimit;\r\n    }\r\n    EnableLimit(flag) {\r\n        if (flag !== this.m_enableLimit) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableLimit = flag;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    GetLowerLimit() {\r\n        return this.m_lowerAngle;\r\n    }\r\n    GetUpperLimit() {\r\n        return this.m_upperAngle;\r\n    }\r\n    SetLimits(lower, upper) {\r\n        if (lower !== this.m_lowerAngle || upper !== this.m_upperAngle) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_impulse.z = 0;\r\n            this.m_lowerAngle = lower;\r\n            this.m_upperAngle = upper;\r\n        }\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        if (this.m_motorSpeed !== speed) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_motorSpeed = speed;\r\n        }\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.lowerAngle = %.15f;\\n\", this.m_lowerAngle);\r\n        log(\"  jd.upperAngle = %.15f;\\n\", this.m_upperAngle);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2RevoluteJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3 = new b2Vec3();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolvePositionConstraints_s_C_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolvePositionConstraints_s_impulse = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxLinearCorrection } from \"../../Common/b2Settings\";\r\nimport { b2Min, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Rope joint definition. This requires two body anchor points and\r\n/// a maximum lengths.\r\n/// Note: by default the connected objects will not collide.\r\n/// see collideConnected in b2JointDef.\r\nexport class b2RopeJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_ropeJoint);\r\n        this.localAnchorA = new b2Vec2(-1, 0);\r\n        this.localAnchorB = new b2Vec2(1, 0);\r\n        this.maxLength = 0;\r\n    }\r\n}\r\nexport class b2RopeJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_maxLength = 0;\r\n        this.m_length = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_u = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_state = b2LimitState.e_inactiveLimit;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_maxLength = def.maxLength;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // this.m_u = cB + this.m_rB - cA - this.m_rA;\r\n        this.m_u.Copy(cB).SelfAdd(this.m_rB).SelfSub(cA).SelfSub(this.m_rA);\r\n        this.m_length = this.m_u.Length();\r\n        const C = this.m_length - this.m_maxLength;\r\n        if (C > 0) {\r\n            this.m_state = b2LimitState.e_atUpperLimit;\r\n        }\r\n        else {\r\n            this.m_state = b2LimitState.e_inactiveLimit;\r\n        }\r\n        if (this.m_length > b2_linearSlop) {\r\n            this.m_u.SelfMul(1 / this.m_length);\r\n        }\r\n        else {\r\n            this.m_u.SetZero();\r\n            this.m_mass = 0;\r\n            this.m_impulse = 0;\r\n            return;\r\n        }\r\n        // Compute effective mass.\r\n        const crA = b2Vec2.CrossVV(this.m_rA, this.m_u);\r\n        const crB = b2Vec2.CrossVV(this.m_rB, this.m_u);\r\n        const invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB + this.m_invIB * crB * crB;\r\n        this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        if (data.step.warmStarting) {\r\n            // Scale the impulse to support a variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_u;\r\n            const P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2RopeJoint.InitVelocityConstraints_s_P);\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Cdot = dot(u, v + cross(w, r))\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2RopeJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2RopeJoint.SolveVelocityConstraints_s_vpB);\r\n        // float32 C = m_length - m_maxLength;\r\n        const C = this.m_length - this.m_maxLength;\r\n        // float32 Cdot = b2Dot(m_u, vpB - vpA);\r\n        let Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\r\n        // Predictive constraint.\r\n        if (C < 0) {\r\n            Cdot += data.step.inv_dt * C;\r\n        }\r\n        let impulse = -this.m_mass * Cdot;\r\n        const oldImpulse = this.m_impulse;\r\n        this.m_impulse = b2Min(0, this.m_impulse + impulse);\r\n        impulse = this.m_impulse - oldImpulse;\r\n        // b2Vec2 P = impulse * m_u;\r\n        const P = b2Vec2.MulSV(impulse, this.m_u, b2RopeJoint.SolveVelocityConstraints_s_P);\r\n        // vA -= m_invMassA * P;\r\n        vA.SelfMulSub(this.m_invMassA, P);\r\n        wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n        // vB += m_invMassB * P;\r\n        vB.SelfMulAdd(this.m_invMassB, P);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 u = cB + rB - cA - rA;\r\n        const u = this.m_u.Copy(cB).SelfAdd(rB).SelfSub(cA).SelfSub(rA);\r\n        const length = u.Normalize();\r\n        let C = length - this.m_maxLength;\r\n        C = b2Clamp(C, 0, b2_maxLinearCorrection);\r\n        const impulse = -this.m_mass * C;\r\n        // b2Vec2 P = impulse * u;\r\n        const P = b2Vec2.MulSV(impulse, u, b2RopeJoint.SolvePositionConstraints_s_P);\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return length - this.m_maxLength < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        const F = b2Vec2.MulSV((inv_dt * this.m_impulse), this.m_u, out);\r\n        return F;\r\n        // return out.Set(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetMaxLength(length) { this.m_maxLength = length; }\r\n    GetMaxLength() {\r\n        return this.m_maxLength;\r\n    }\r\n    GetLimitState() {\r\n        return this.m_state;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2RopeJointDef = new b2RopeJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.maxLength = %.15f;\\n\", this.m_maxLength);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2RopeJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2RopeJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_linearSlop, b2_angularSlop } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Vec2, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Weld joint definition. You need to specify local anchor points\r\n/// where they are attached and the relative body angle. The position\r\n/// of the anchor points is important for computing the reaction torque.\r\nexport class b2WeldJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_weldJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.referenceAngle = 0;\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2WeldJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_bias = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_referenceAngle = 0;\r\n        this.m_gamma = 0;\r\n        this.m_impulse = new b2Vec3(0, 0, 0);\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = new b2Mat33();\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat33();\r\n        this.m_frequencyHz = def.frequencyHz;\r\n        this.m_dampingRatio = def.dampingRatio;\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_referenceAngle = def.referenceAngle;\r\n        this.m_impulse.SetZero();\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n        K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n        K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            K.GetInverse22(this.m_mass);\r\n            let invM = iA + iB;\r\n            const m = invM > 0 ? 1 / invM : 0;\r\n            const C = aB - aA - this.m_referenceAngle;\r\n            // Frequency\r\n            const omega = 2 * b2_pi * this.m_frequencyHz;\r\n            // Damping coefficient\r\n            const d = 2 * m * this.m_dampingRatio * omega;\r\n            // Spring stiffness\r\n            const k = m * omega * omega;\r\n            // magic formulas\r\n            const h = data.step.dt;\r\n            this.m_gamma = h * (d + h * k);\r\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n            this.m_bias = C * h * k * this.m_gamma;\r\n            invM += this.m_gamma;\r\n            this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\r\n        }\r\n        else {\r\n            K.GetSymInverse33(this.m_mass);\r\n            this.m_gamma = 0;\r\n            this.m_bias = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n            const P = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        if (this.m_frequencyHz > 0) {\r\n            const Cdot2 = wB - wA;\r\n            const impulse2 = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\r\n            this.m_impulse.z += impulse2;\r\n            wA -= iA * impulse2;\r\n            wB += iB * impulse2;\r\n            // b2Vec2 Cdot1 = vB + b2Vec2.CrossSV(wB, this.m_rB) - vA - b2Vec2.CrossSV(wA, this.m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            // b2Vec2 impulse1 = -b2Mul22(m_mass, Cdot1);\r\n            const impulse1 = b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();\r\n            this.m_impulse.x += impulse1.x;\r\n            this.m_impulse.y += impulse1.y;\r\n            // b2Vec2 P = impulse1;\r\n            const P = impulse1;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            // wA -= iA * b2Cross(m_rA, P);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            // wB += iB * b2Cross(m_rB, P);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 Cdot1 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            const Cdot2 = wB - wA;\r\n            // b2Vec3 const Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 impulse = -b2Mul(m_mass, Cdot);\r\n            const impulse = b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();\r\n            this.m_impulse.SelfAdd(impulse);\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        let positionError, angularError;\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\r\n        K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\r\n        K.ez.x = -rA.y * iA - rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\r\n        K.ez.y = rA.x * iA + rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            const C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            positionError = C1.Length();\r\n            angularError = 0;\r\n            // b2Vec2 P = -K.Solve22(C1);\r\n            const P = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * b2Vec2.CrossVV(rA, P);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * b2Vec2.CrossVV(rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            const C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            const C2 = aB - aA - this.m_referenceAngle;\r\n            positionError = C1.Length();\r\n            angularError = b2Abs(C2);\r\n            // b2Vec3 C(C1.x, C1.y, C2);\r\n            // b2Vec3 impulse = -K.Solve33(C);\r\n            const impulse = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n        // return inv_dt * P;\r\n        return out.Set(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.z;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    SetFrequency(hz) { this.m_frequencyHz = hz; }\r\n    GetFrequency() { return this.m_frequencyHz; }\r\n    SetDampingRatio(ratio) { this.m_dampingRatio = ratio; }\r\n    GetDampingRatio() { return this.m_dampingRatio; }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WeldJointDef = new b2WeldJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2WeldJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_impulse1 = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_impulse = new b2Vec3();\r\nb2WeldJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_C1 = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_impulse = new b2Vec3();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Wheel joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nexport class b2WheelJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_wheelJoint);\r\n        this.localAnchorA = new b2Vec2(0, 0);\r\n        this.localAnchorB = new b2Vec2(0, 0);\r\n        this.localAxisA = new b2Vec2(1, 0);\r\n        this.enableMotor = false;\r\n        this.maxMotorTorque = 0;\r\n        this.motorSpeed = 0;\r\n        this.frequencyHz = 2;\r\n        this.dampingRatio = 0.7;\r\n    }\r\n    Initialize(bA, bB, anchor, axis) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n    }\r\n}\r\nexport class b2WheelJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localXAxisA = new b2Vec2();\r\n        this.m_localYAxisA = new b2Vec2();\r\n        this.m_impulse = 0;\r\n        this.m_motorImpulse = 0;\r\n        this.m_springImpulse = 0;\r\n        this.m_maxMotorTorque = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableMotor = false;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_ax = new b2Vec2();\r\n        this.m_ay = new b2Vec2();\r\n        this.m_sAx = 0;\r\n        this.m_sBx = 0;\r\n        this.m_sAy = 0;\r\n        this.m_sBy = 0;\r\n        this.m_mass = 0;\r\n        this.m_motorMass = 0;\r\n        this.m_springMass = 0;\r\n        this.m_bias = 0;\r\n        this.m_gamma = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_frequencyHz = def.frequencyHz;\r\n        this.m_dampingRatio = def.dampingRatio;\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_localXAxisA.Copy(def.localAxisA);\r\n        b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\r\n        this.m_maxMotorTorque = def.maxMotorTorque;\r\n        this.m_motorSpeed = def.motorSpeed;\r\n        this.m_enableMotor = def.enableMotor;\r\n        this.m_ax.SetZero();\r\n        this.m_ay.SetZero();\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    GetMaxMotorTorque() {\r\n        return this.m_maxMotorTorque;\r\n    }\r\n    SetSpringFrequencyHz(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetSpringFrequencyHz() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetSpringDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetSpringDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective masses.\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = cB + rB - cA - rA;\r\n        const d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_d);\r\n        // Point to line constraint\r\n        {\r\n            // m_ay = b2Mul(qA, m_localYAxisA);\r\n            b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n            // m_sAy = b2Cross(d + rA, m_ay);\r\n            this.m_sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ay);\r\n            // m_sBy = b2Cross(rB, m_ay);\r\n            this.m_sBy = b2Vec2.CrossVV(rB, this.m_ay);\r\n            this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\r\n            if (this.m_mass > 0) {\r\n                this.m_mass = 1 / this.m_mass;\r\n            }\r\n        }\r\n        // Spring constraint\r\n        this.m_springMass = 0;\r\n        this.m_bias = 0;\r\n        this.m_gamma = 0;\r\n        if (this.m_frequencyHz > 0) {\r\n            // m_ax = b2Mul(qA, m_localXAxisA);\r\n            b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\r\n            // m_sAx = b2Cross(d + rA, m_ax);\r\n            this.m_sAx = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ax);\r\n            // m_sBx = b2Cross(rB, m_ax);\r\n            this.m_sBx = b2Vec2.CrossVV(rB, this.m_ax);\r\n            const invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\r\n            if (invMass > 0) {\r\n                this.m_springMass = 1 / invMass;\r\n                const C = b2Vec2.DotVV(d, this.m_ax);\r\n                // Frequency\r\n                const omega = 2 * b2_pi * this.m_frequencyHz;\r\n                // Damping coefficient\r\n                const dc = 2 * this.m_springMass * this.m_dampingRatio * omega;\r\n                // Spring stiffness\r\n                const k = this.m_springMass * omega * omega;\r\n                // magic formulas\r\n                const h = data.step.dt;\r\n                this.m_gamma = h * (dc + h * k);\r\n                if (this.m_gamma > 0) {\r\n                    this.m_gamma = 1 / this.m_gamma;\r\n                }\r\n                this.m_bias = C * h * k * this.m_gamma;\r\n                this.m_springMass = invMass + this.m_gamma;\r\n                if (this.m_springMass > 0) {\r\n                    this.m_springMass = 1 / this.m_springMass;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.m_springImpulse = 0;\r\n        }\r\n        // Rotational motor\r\n        if (this.m_enableMotor) {\r\n            this.m_motorMass = iA + iB;\r\n            if (this.m_motorMass > 0) {\r\n                this.m_motorMass = 1 / this.m_motorMass;\r\n            }\r\n        }\r\n        else {\r\n            this.m_motorMass = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Account for variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            this.m_springImpulse *= data.step.dtRatio;\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_ay + m_springImpulse * m_ax;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Vec2.s_t0), b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_P);\r\n            // float32 LA = m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;\r\n            const LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\r\n            // float32 LB = m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;\r\n            const LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            wA -= this.m_invIA * LA;\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            wB += this.m_invIB * LB;\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n            this.m_springImpulse = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Solve spring constraint\r\n        {\r\n            const Cdot = b2Vec2.DotVV(this.m_ax, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\r\n            const impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\r\n            this.m_springImpulse += impulse;\r\n            // b2Vec2 P = impulse * m_ax;\r\n            const P = b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_sAx;\r\n            const LB = impulse * this.m_sBx;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // Solve rotational motor constraint\r\n        {\r\n            const Cdot = wB - wA - this.m_motorSpeed;\r\n            let impulse = -this.m_motorMass * Cdot;\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorTorque;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve point to line constraint\r\n        {\r\n            const Cdot = b2Vec2.DotVV(this.m_ay, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;\r\n            const impulse = -this.m_mass * Cdot;\r\n            this.m_impulse += impulse;\r\n            // b2Vec2 P = impulse * m_ay;\r\n            const P = b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_sAy;\r\n            const LB = impulse * this.m_sBy;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = (cB - cA) + rB - rA;\r\n        const d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);\r\n        // b2Vec2 ay = b2Mul(qA, m_localYAxisA);\r\n        const ay = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n        // float32 sAy = b2Cross(d + rA, ay);\r\n        const sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), ay);\r\n        // float32 sBy = b2Cross(rB, ay);\r\n        const sBy = b2Vec2.CrossVV(rB, ay);\r\n        // float32 C = b2Dot(d, ay);\r\n        const C = b2Vec2.DotVV(d, this.m_ay);\r\n        const k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;\r\n        let impulse;\r\n        if (k !== 0) {\r\n            impulse = -C / k;\r\n        }\r\n        else {\r\n            impulse = 0;\r\n        }\r\n        // b2Vec2 P = impulse * ay;\r\n        const P = b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\r\n        const LA = impulse * sAy;\r\n        const LB = impulse * sBy;\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        aA -= this.m_invIA * LA;\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        aB += this.m_invIB * LB;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return b2Abs(C) <= b2_linearSlop;\r\n    }\r\n    GetDefinition(def) {\r\n        ///b2Assert(false); // TODO\r\n        return def;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * (m_impulse * m_ay + m_springImpulse * m_ax);\r\n        out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);\r\n        out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetLocalAxisA() { return this.m_localXAxisA; }\r\n    GetJointTranslation() {\r\n        return this.GetPrismaticJointTranslation();\r\n    }\r\n    GetJointSpeed() {\r\n        return this.GetRevoluteJointSpeed();\r\n    }\r\n    GetPrismaticJointTranslation() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        const pA = bA.GetWorldPoint(this.m_localAnchorA, new b2Vec2());\r\n        const pB = bB.GetWorldPoint(this.m_localAnchorB, new b2Vec2());\r\n        const d = b2Vec2.SubVV(pB, pA, new b2Vec2());\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n        const translation = b2Vec2.DotVV(d, axis);\r\n        return translation;\r\n    }\r\n    GetPrismaticJointSpeed() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 pA = bA->m_sweep.c + rA;\r\n        const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\r\n        // b2Vec2 pB = bB->m_sweep.c + rB;\r\n        const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\r\n        // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n        const vA = bA.m_linearVelocity;\r\n        const vB = bB.m_linearVelocity;\r\n        const wA = bA.m_angularVelocity;\r\n        const wB = bB.m_angularVelocity;\r\n        // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n        const speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n        return speed;\r\n    }\r\n    GetRevoluteJointAngle() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_sweep.a - bA->this.m_sweep.a;\r\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\r\n    }\r\n    GetRevoluteJointSpeed() {\r\n        const wA = this.m_bodyA.m_angularVelocity;\r\n        const wB = this.m_bodyB.m_angularVelocity;\r\n        return wB - wA;\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_enableMotor = flag;\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_motorSpeed = speed;\r\n    }\r\n    SetMaxMotorTorque(force) {\r\n        this.m_bodyA.SetAwake(true);\r\n        this.m_bodyB.SetAwake(true);\r\n        this.m_maxMotorTorque = force;\r\n    }\r\n    GetMotorTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WheelJointDef = new b2WheelJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2WheelJoint.InitVelocityConstraints_s_d = new b2Vec2();\r\nb2WheelJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2WheelJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2WheelJoint.SolvePositionConstraints_s_d = new b2Vec2();\r\nb2WheelJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJXaGVlbEpvaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvRHluYW1pY3MvSm9pbnRzL2IyV2hlZWxKb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUk3RCw0REFBNEQ7QUFDNUQsdUVBQXVFO0FBQ3ZFLG9FQUFvRTtBQUNwRSxzRUFBc0U7QUFDdEUscUVBQXFFO0FBQ3JFLGtFQUFrRTtBQUNsRSxNQUFNLHNCQUF1QixTQUFRLFVBQVU7SUFpQjdDO1FBQ0UsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQWpCM0IsaUJBQVksR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEMsaUJBQVksR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEMsZUFBVSxHQUFXLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV0QyxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixtQkFBYyxHQUFXLENBQUMsQ0FBQztRQUUzQixlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBRXZCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBRXhCLGlCQUFZLEdBQVcsR0FBRyxDQUFDO0lBSWxDLENBQUM7SUFFTSxVQUFVLENBQUMsRUFBVSxFQUFFLEVBQVUsRUFBRSxNQUFjLEVBQUUsSUFBWTtRQUNwRSxJQUFJLENBQUMsS0FB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","import { b2JointType } from \"./b2Joint\";\r\nimport { b2AreaJoint } from \"./b2AreaJoint\";\r\nimport { b2DistanceJoint } from \"./b2DistanceJoint\";\r\nimport { b2FrictionJoint } from \"./b2FrictionJoint\";\r\nimport { b2GearJoint } from \"./b2GearJoint\";\r\nimport { b2MotorJoint } from \"./b2MotorJoint\";\r\nimport { b2MouseJoint } from \"./b2MouseJoint\";\r\nimport { b2PrismaticJoint } from \"./b2PrismaticJoint\";\r\nimport { b2PulleyJoint } from \"./b2PulleyJoint\";\r\nimport { b2RevoluteJoint } from \"./b2RevoluteJoint\";\r\nimport { b2RopeJoint } from \"./b2RopeJoint\";\r\nimport { b2WeldJoint } from \"./b2WeldJoint\";\r\nimport { b2WheelJoint } from \"./b2WheelJoint\";\r\nexport class b2JointFactory {\r\n    static Create(def, allocator) {\r\n        let joint = null;\r\n        switch (def.type) {\r\n            case b2JointType.e_distanceJoint:\r\n                joint = new b2DistanceJoint(def);\r\n                break;\r\n            case b2JointType.e_mouseJoint:\r\n                joint = new b2MouseJoint(def);\r\n                break;\r\n            case b2JointType.e_prismaticJoint:\r\n                joint = new b2PrismaticJoint(def);\r\n                break;\r\n            case b2JointType.e_revoluteJoint:\r\n                joint = new b2RevoluteJoint(def);\r\n                break;\r\n            case b2JointType.e_pulleyJoint:\r\n                joint = new b2PulleyJoint(def);\r\n                break;\r\n            case b2JointType.e_gearJoint:\r\n                joint = new b2GearJoint(def);\r\n                break;\r\n            case b2JointType.e_wheelJoint:\r\n                joint = new b2WheelJoint(def);\r\n                break;\r\n            case b2JointType.e_weldJoint:\r\n                joint = new b2WeldJoint(def);\r\n                break;\r\n            case b2JointType.e_frictionJoint:\r\n                joint = new b2FrictionJoint(def);\r\n                break;\r\n            case b2JointType.e_ropeJoint:\r\n                joint = new b2RopeJoint(def);\r\n                break;\r\n            case b2JointType.e_motorJoint:\r\n                joint = new b2MotorJoint(def);\r\n                break;\r\n            case b2JointType.e_areaJoint:\r\n                joint = new b2AreaJoint(def);\r\n                break;\r\n            default:\r\n                ///b2Assert(false);\r\n                break;\r\n        }\r\n        return joint;\r\n    }\r\n    static Destroy(joint, allocator) {\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJKb2ludEZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9EeW5hbWljcy9Kb2ludHMvYjJKb2ludEZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBc0IsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFzQixNQUFNLG1CQUFtQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQXVCLE1BQU0sb0JBQW9CLENBQUM7QUFDM0UsT0FBTyxFQUFFLGFBQWEsRUFBb0IsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFzQixNQUFNLG1CQUFtQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxXQUFXLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxXQUFXLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQW1CLE1BQU0sZ0JBQWdCLENBQUM7QUFFL0QsTUFBTTtJQUNHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBZSxFQUFFLFNBQWM7UUFDbEQsSUFBSSxLQUFLLEdBQVksSUFBSSxDQUFDO1FBRTFCLFFBQVEsR0FBRyxDQUFDLElBQUksRUFBRTtZQUNsQixLQUFLLFdBQVcsQ0FBQyxlQUFlO2dCQUM5QixLQUFLLEdBQUcsSUFBSSxlQUFlLENBQXNCLEdBQUcsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNO1lBRVIsS0FBSyxXQUFXLENBQUMsWUFBWTtnQkFDM0IsS0FBSyxHQUFHLElBQUksWUFBWSxDQUFtQixHQUFHLENBQUMsQ0FBQztnQkFDaEQsTUFBTTtZQUVSLEtBQUssV0FBVyxDQUFDLGdCQUFnQjtnQkFDL0IsS0FBSyxHQUFHLElBQUksZ0JBQWdCLENBQXVCLEdBQUcsQ0FBQyxDQUFDO2dCQUN4RCxNQUFNO1lBRVIsS0FBSyxXQUFXLENBQUMsZUFBZTtnQkFDOUIsS0FBSyxHQUFHLElBQUksZUFBZSxDQUFzQixHQUFHLENBQUMsQ0FBQztnQkFDdEQsTUFBTTtZQUVSLEtBQUssV0FBVyxDQUFDLGFBQWE7Z0JBQzVCLEtBQUssR0FBRyxJQUFJLGFBQWEsQ0FBb0IsR0FBRyxDQUFDLENBQUM7Z0JBQ2xELE1BQU07WUFFUixLQUFLLFdBQVcsQ0FBQyxXQUFXO2dCQUMxQixLQUFLLEdBQUcsSUFBSSxXQUFXLENBQWtCLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNO1lBRVIsS0FBSyxXQUFXLENBQUMsWUFBWTtnQkFDM0IsS0FBSyxHQUFHLElBQUksWUFBWSxDQUFtQixHQUFHLENBQUMsQ0FBQztnQkFDaEQsTUFBTTtZQUVSLEtBQUssV0FBVyxDQUFDLFdBQVc7Z0JBQzFCLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBa0IsR0FBRyxDQUFDLENBQUM7Z0JBQzlDLE1BQU07WUFFUixLQUFLLFdBQVcsQ0FBQyxlQUFlO2dCQUM5QixLQUFLLEdBQUcsSUFBSSxlQUFlLENBQXNCLEdBQUcsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNO1lBRVIsS0FBSyxXQUFXLENBQUMsV0FBVztnQkFDMUIsS0FBSyxHQUFHLElBQUksV0FBVyxDQUFrQixHQUFHLENBQUMsQ0FBQztnQkFDOUMsTUFBTTtZQUVSLEtBQUssV0FBVyxDQUFDLFlBQVk7Z0JBQzNCLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBbUIsR0FBRyxDQUFDLENBQUM7Z0JBQ2hELE1BQU07WUFFUixLQUFLLFdBQVcsQ0FBQyxXQUFXO2dCQUMxQixLQUFLLEdBQUcsSUFBSSxXQUFXLENBQWtCLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNO1lBRVI7Z0JBQ0UsbUJBQW1CO2dCQUNuQixNQUFNO1NBQ1A7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWMsRUFBRSxTQUFjO0lBQ3BELENBQUM7Q0FDRiJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2Sqrt } from \"../../Common/b2Math\";\r\nimport { b2Manifold } from \"../../Collision/b2Collision\";\r\nimport { b2TestOverlapShape } from \"../../Collision/b2Collision\";\r\nimport { b2TimeOfImpact, b2TOIInput, b2TOIOutput } from \"../../Collision/b2TimeOfImpact\";\r\n/// Friction mixing law. The idea is to allow either fixture to drive the restitution to zero.\r\n/// For example, anything slides on ice.\r\nexport function b2MixFriction(friction1, friction2) {\r\n    return b2Sqrt(friction1 * friction2);\r\n}\r\n/// Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface.\r\n/// For example, a superball bounces on anything.\r\nexport function b2MixRestitution(restitution1, restitution2) {\r\n    return restitution1 > restitution2 ? restitution1 : restitution2;\r\n}\r\nexport class b2ContactEdge {\r\n    constructor() {\r\n        this.other = null; ///< provides quick access to the other body attached.\r\n        this.contact = null; ///< the contact\r\n        this.prev = null; ///< the previous contact edge in the body's contact list\r\n        this.next = null; ///< the next contact edge in the body's contact list\r\n    }\r\n}\r\nexport class b2Contact {\r\n    constructor() {\r\n        this.m_islandFlag = false; /// Used when crawling contact graph when forming islands.\r\n        this.m_touchingFlag = false; /// Set when the shapes are touching.\r\n        this.m_enabledFlag = false; /// This contact can be disabled (by user)\r\n        this.m_filterFlag = false; /// This contact needs filtering because a fixture filter was changed.\r\n        this.m_bulletHitFlag = false; /// This bullet contact had a TOI event\r\n        this.m_toiFlag = false; /// This contact has a valid TOI in m_toi\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_nodeA = new b2ContactEdge();\r\n        this.m_nodeB = new b2ContactEdge();\r\n        this.m_fixtureA = null;\r\n        this.m_fixtureB = null;\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_manifold = new b2Manifold();\r\n        this.m_toiCount = 0;\r\n        this.m_toi = 0;\r\n        this.m_friction = 0;\r\n        this.m_restitution = 0;\r\n        this.m_tangentSpeed = 0;\r\n        this.m_oldManifold = new b2Manifold();\r\n    }\r\n    GetManifold() {\r\n        return this.m_manifold;\r\n    }\r\n    GetWorldManifold(worldManifold) {\r\n        const bodyA = this.m_fixtureA.GetBody();\r\n        const bodyB = this.m_fixtureB.GetBody();\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);\r\n    }\r\n    IsTouching() {\r\n        return this.m_touchingFlag;\r\n    }\r\n    SetEnabled(flag) {\r\n        this.m_enabledFlag = flag;\r\n    }\r\n    IsEnabled() {\r\n        return this.m_enabledFlag;\r\n    }\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    GetFixtureA() {\r\n        return this.m_fixtureA;\r\n    }\r\n    GetChildIndexA() {\r\n        return this.m_indexA;\r\n    }\r\n    GetFixtureB() {\r\n        return this.m_fixtureB;\r\n    }\r\n    GetChildIndexB() {\r\n        return this.m_indexB;\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n    }\r\n    FlagForFiltering() {\r\n        this.m_filterFlag = true;\r\n    }\r\n    SetFriction(friction) {\r\n        this.m_friction = friction;\r\n    }\r\n    GetFriction() {\r\n        return this.m_friction;\r\n    }\r\n    ResetFriction() {\r\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\r\n    }\r\n    SetRestitution(restitution) {\r\n        this.m_restitution = restitution;\r\n    }\r\n    GetRestitution() {\r\n        return this.m_restitution;\r\n    }\r\n    ResetRestitution() {\r\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\r\n    }\r\n    SetTangentSpeed(speed) {\r\n        this.m_tangentSpeed = speed;\r\n    }\r\n    GetTangentSpeed() {\r\n        return this.m_tangentSpeed;\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        this.m_islandFlag = false;\r\n        this.m_touchingFlag = false;\r\n        this.m_enabledFlag = true;\r\n        this.m_filterFlag = false;\r\n        this.m_bulletHitFlag = false;\r\n        this.m_toiFlag = false;\r\n        this.m_fixtureA = fixtureA;\r\n        this.m_fixtureB = fixtureB;\r\n        this.m_indexA = indexA;\r\n        this.m_indexB = indexB;\r\n        this.m_manifold.pointCount = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_nodeA.contact = null;\r\n        this.m_nodeA.prev = null;\r\n        this.m_nodeA.next = null;\r\n        this.m_nodeA.other = null;\r\n        this.m_nodeB.contact = null;\r\n        this.m_nodeB.prev = null;\r\n        this.m_nodeB.next = null;\r\n        this.m_nodeB.other = null;\r\n        this.m_toiCount = 0;\r\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\r\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\r\n    }\r\n    Update(listener) {\r\n        const tManifold = this.m_oldManifold;\r\n        this.m_oldManifold = this.m_manifold;\r\n        this.m_manifold = tManifold;\r\n        // Re-enable this contact.\r\n        this.m_enabledFlag = true;\r\n        let touching = false;\r\n        const wasTouching = this.m_touchingFlag;\r\n        const sensorA = this.m_fixtureA.IsSensor();\r\n        const sensorB = this.m_fixtureB.IsSensor();\r\n        const sensor = sensorA || sensorB;\r\n        const bodyA = this.m_fixtureA.GetBody();\r\n        const bodyB = this.m_fixtureB.GetBody();\r\n        const xfA = bodyA.GetTransform();\r\n        const xfB = bodyB.GetTransform();\r\n        ///const aabbOverlap = b2TestOverlapAABB(this.m_fixtureA.GetAABB(0), this.m_fixtureB.GetAABB(0));\r\n        // Is this contact a sensor?\r\n        if (sensor) {\r\n            ///if (aabbOverlap)\r\n            ///{\r\n            const shapeA = this.m_fixtureA.GetShape();\r\n            const shapeB = this.m_fixtureB.GetShape();\r\n            touching = b2TestOverlapShape(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\r\n            ///}\r\n            // Sensors don't generate manifolds.\r\n            this.m_manifold.pointCount = 0;\r\n        }\r\n        else {\r\n            ///if (aabbOverlap)\r\n            ///{\r\n            this.Evaluate(this.m_manifold, xfA, xfB);\r\n            touching = this.m_manifold.pointCount > 0;\r\n            // Match old contact ids to new contact ids and copy the\r\n            // stored impulses to warm start the solver.\r\n            for (let i = 0; i < this.m_manifold.pointCount; ++i) {\r\n                const mp2 = this.m_manifold.points[i];\r\n                mp2.normalImpulse = 0;\r\n                mp2.tangentImpulse = 0;\r\n                const id2 = mp2.id;\r\n                for (let j = 0; j < this.m_oldManifold.pointCount; ++j) {\r\n                    const mp1 = this.m_oldManifold.points[j];\r\n                    if (mp1.id.key === id2.key) {\r\n                        mp2.normalImpulse = mp1.normalImpulse;\r\n                        mp2.tangentImpulse = mp1.tangentImpulse;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            ///}\r\n            ///else\r\n            ///{\r\n            ///  this.m_manifold.pointCount = 0;\r\n            ///}\r\n            if (touching !== wasTouching) {\r\n                bodyA.SetAwake(true);\r\n                bodyB.SetAwake(true);\r\n            }\r\n        }\r\n        this.m_touchingFlag = touching;\r\n        if (!wasTouching && touching && listener) {\r\n            listener.BeginContact(this);\r\n        }\r\n        if (wasTouching && !touching && listener) {\r\n            listener.EndContact(this);\r\n        }\r\n        if (!sensor && touching && listener) {\r\n            listener.PreSolve(this, this.m_oldManifold);\r\n        }\r\n    }\r\n    ComputeTOI(sweepA, sweepB) {\r\n        const input = b2Contact.ComputeTOI_s_input;\r\n        input.proxyA.SetShape(this.m_fixtureA.GetShape(), this.m_indexA);\r\n        input.proxyB.SetShape(this.m_fixtureB.GetShape(), this.m_indexB);\r\n        input.sweepA.Copy(sweepA);\r\n        input.sweepB.Copy(sweepB);\r\n        input.tMax = b2_linearSlop;\r\n        const output = b2Contact.ComputeTOI_s_output;\r\n        b2TimeOfImpact(output, input);\r\n        return output.t;\r\n    }\r\n}\r\nb2Contact.ComputeTOI_s_input = new b2TOIInput();\r\nb2Contact.ComputeTOI_s_output = new b2TOIOutput();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideCircles } from \"../../Collision/b2CollideCircle\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2CircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2CircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2CircleShape);\r\n        ///b2Assert(shapeB instanceof b2CircleShape);\r\n        b2CollideCircles(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaXJjbGVDb250YWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvRHluYW1pY3MvQ29udGFjdHMvYjJDaXJjbGVDb250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBR0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFJbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd4QyxNQUFNLHNCQUF1QixTQUFRLFNBQVM7SUFDNUM7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQWM7UUFDakMsT0FBTyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxRQUFRLENBQUMsUUFBb0IsRUFBRSxHQUFnQixFQUFFLEdBQWdCO1FBQ3RFLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCw2Q0FBNkM7UUFDN0MsNkNBQTZDO1FBQzdDLGdCQUFnQixDQUNkLFFBQVEsRUFDUSxNQUFNLEVBQUUsR0FBRyxFQUNYLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollidePolygons } from \"../../Collision/b2CollidePolygon\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2PolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2PolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2PolygonShape);\r\n        ///b2Assert(shapeB instanceof b2PolygonShape);\r\n        b2CollidePolygons(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQb2x5Z29uQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyUG9seWdvbkNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFHRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUlyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sdUJBQXdCLFNBQVEsU0FBUztJQUM3QztRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBYztRQUNqQyxPQUFPLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFrQixFQUFFLFNBQWM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFtQixFQUFFLE1BQWMsRUFBRSxRQUFtQixFQUFFLE1BQWM7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sUUFBUSxDQUFDLFFBQW9CLEVBQUUsR0FBZ0IsRUFBRSxHQUFnQjtRQUN0RSxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsOENBQThDO1FBQzlDLDhDQUE4QztRQUM5QyxpQkFBaUIsQ0FDZixRQUFRLEVBQ1MsTUFBTSxFQUFFLEdBQUcsRUFDWCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollidePolygonAndCircle } from \"../../Collision/b2CollideCircle\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2PolygonAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2PolygonAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        ///b2Assert(fixtureA.GetType() === b2ShapeType.e_polygonShape);\r\n        ///b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2PolygonShape);\r\n        ///b2Assert(shapeB instanceof b2CircleShape);\r\n        b2CollidePolygonAndCircle(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQb2x5Z29uQW5kQ2lyY2xlQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyUG9seWdvbkFuZENpcmNsZUNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFHRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUs1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sZ0NBQWlDLFNBQVEsU0FBUztJQUN0RDtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBYztRQUNqQyxPQUFPLElBQUkseUJBQXlCLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFrQixFQUFFLFNBQWM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFtQixFQUFFLE1BQWMsRUFBRSxRQUFtQixFQUFFLE1BQWM7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRCwrREFBK0Q7UUFDL0QsOERBQThEO0lBQ2hFLENBQUM7SUFFTSxRQUFRLENBQUMsUUFBb0IsRUFBRSxHQUFnQixFQUFFLEdBQWdCO1FBQ3RFLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCw4Q0FBOEM7UUFDOUMsNkNBQTZDO1FBQzdDLHlCQUF5QixDQUN2QixRQUFRLEVBQ1MsTUFBTSxFQUFFLEdBQUcsRUFDWixNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndCircle } from \"../../Collision/b2CollideEdge\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2EdgeAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2EdgeAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        ///b2Assert(fixtureA.GetType() === b2ShapeType.e_edgeShape);\r\n        ///b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2EdgeShape);\r\n        ///b2Assert(shapeB instanceof b2CircleShape);\r\n        b2CollideEdgeAndCircle(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJFZGdlQW5kQ2lyY2xlQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyRWRnZUFuZENpcmNsZUNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFHRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUt2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sNkJBQThCLFNBQVEsU0FBUztJQUNuRDtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBYztRQUNqQyxPQUFPLElBQUksc0JBQXNCLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFrQixFQUFFLFNBQWM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFtQixFQUFFLE1BQWMsRUFBRSxRQUFtQixFQUFFLE1BQWM7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRCw0REFBNEQ7UUFDNUQsOERBQThEO0lBQ2hFLENBQUM7SUFFTSxRQUFRLENBQUMsUUFBb0IsRUFBRSxHQUFnQixFQUFFLEdBQWdCO1FBQ3RFLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCwyQ0FBMkM7UUFDM0MsNkNBQTZDO1FBQzdDLHNCQUFzQixDQUNwQixRQUFRLEVBQ00sTUFBTSxFQUFFLEdBQUcsRUFDVCxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndPolygon } from \"../../Collision/b2CollideEdge\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2EdgeAndPolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2EdgeAndPolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        ///b2Assert(fixtureA.GetType() === b2ShapeType.e_edgeShape);\r\n        ///b2Assert(fixtureB.GetType() === b2ShapeType.e_polygonShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2EdgeShape);\r\n        ///b2Assert(shapeB instanceof b2PolygonShape);\r\n        b2CollideEdgeAndPolygon(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJFZGdlQW5kUG9seWdvbkNvbnRhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9EeW5hbWljcy9Db250YWN0cy9iMkVkZ2VBbmRQb2x5Z29uQ29udGFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUdGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS3hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEMsTUFBTSw4QkFBK0IsU0FBUSxTQUFTO0lBQ3BEO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELDREQUE0RDtRQUM1RCwrREFBK0Q7SUFDakUsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFvQixFQUFFLEdBQWdCLEVBQUUsR0FBZ0I7UUFDdEUsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELDJDQUEyQztRQUMzQyw4Q0FBOEM7UUFDOUMsdUJBQXVCLENBQ3JCLFFBQVEsRUFDTSxNQUFNLEVBQUUsR0FBRyxFQUNSLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndCircle } from \"../../Collision/b2CollideEdge\";\r\nimport { b2EdgeShape } from \"../../Collision/Shapes/b2EdgeShape\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2ChainAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2ChainAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        ///b2Assert(fixtureA.GetType() === b2ShapeType.e_chainShape);\r\n        ///b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2ChainShape);\r\n        ///b2Assert(shapeB instanceof b2CircleShape);\r\n        const chain = shapeA;\r\n        const edge = b2ChainAndCircleContact.Evaluate_s_edge;\r\n        chain.GetChildEdge(edge, this.m_indexA);\r\n        b2CollideEdgeAndCircle(manifold, edge, xfA, shapeB, xfB);\r\n    }\r\n}\r\nb2ChainAndCircleContact.Evaluate_s_edge = new b2EdgeShape();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaGFpbkFuZENpcmNsZUNvbnRhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9EeW5hbWljcy9Db250YWN0cy9iMkNoYWluQW5kQ2lyY2xlQ29udGFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sOEJBQStCLFNBQVEsU0FBUztJQUNwRDtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBYztRQUNqQyxPQUFPLElBQUksdUJBQXVCLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFrQixFQUFFLFNBQWM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFtQixFQUFFLE1BQWMsRUFBRSxRQUFtQixFQUFFLE1BQWM7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRCw2REFBNkQ7UUFDN0QsOERBQThEO0lBQ2hFLENBQUM7SUFHTSxRQUFRLENBQUMsUUFBb0IsRUFBRSxHQUFnQixFQUFFLEdBQWdCO1FBQ3RFLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCw0Q0FBNEM7UUFDNUMsNkNBQTZDO1FBQzdDLE1BQU0sS0FBSyxHQUFnQyxNQUFNLENBQUM7UUFDbEQsTUFBTSxJQUFJLEdBQWdCLHVCQUF1QixDQUFDLGVBQWUsQ0FBQztRQUNsRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsc0JBQXNCLENBQ3BCLFFBQVEsRUFDUixJQUFJLEVBQUUsR0FBRyxFQUNPLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDOztBQWJjLHVDQUFlLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndPolygon } from \"../../Collision/b2CollideEdge\";\r\nimport { b2EdgeShape } from \"../../Collision/Shapes/b2EdgeShape\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2ChainAndPolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2ChainAndPolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        ///b2Assert(fixtureA.GetType() === b2ShapeType.e_chainShape);\r\n        ///b2Assert(fixtureB.GetType() === b2ShapeType.e_polygonShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        ///b2Assert(shapeA instanceof b2ChainShape);\r\n        ///b2Assert(shapeB instanceof b2PolygonShape);\r\n        const chain = shapeA;\r\n        const edge = b2ChainAndPolygonContact.Evaluate_s_edge;\r\n        chain.GetChildEdge(edge, this.m_indexA);\r\n        b2CollideEdgeAndPolygon(manifold, edge, xfA, shapeB, xfB);\r\n    }\r\n}\r\nb2ChainAndPolygonContact.Evaluate_s_edge = new b2EdgeShape();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaGFpbkFuZFBvbHlnb25Db250YWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvRHluYW1pY3MvQ29udGFjdHMvYjJDaGFpbkFuZFBvbHlnb25Db250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBR0YsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFJeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEMsTUFBTSwrQkFBZ0MsU0FBUSxTQUFTO0lBQ3JEO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSx3QkFBd0IsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELDZEQUE2RDtRQUM3RCwrREFBK0Q7SUFDakUsQ0FBQztJQUdNLFFBQVEsQ0FBQyxRQUFvQixFQUFFLEdBQWdCLEVBQUUsR0FBZ0I7UUFDdEUsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELDRDQUE0QztRQUM1Qyw4Q0FBOEM7UUFDOUMsTUFBTSxLQUFLLEdBQWdDLE1BQU0sQ0FBQztRQUNsRCxNQUFNLElBQUksR0FBZ0Isd0JBQXdCLENBQUMsZUFBZSxDQUFDO1FBQ25FLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4Qyx1QkFBdUIsQ0FDckIsUUFBUSxFQUNSLElBQUksRUFBRSxHQUFHLEVBQ1EsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O0FBYmMsd0NBQWUsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDIn0=","import { b2MakeArray } from \"../../Common/b2Settings\";\r\nimport { b2ShapeType } from \"../../Collision/Shapes/b2Shape\";\r\nimport { b2CircleContact } from \"./b2CircleContact\";\r\nimport { b2PolygonContact } from \"./b2PolygonContact\";\r\nimport { b2PolygonAndCircleContact } from \"./b2PolygonAndCircleContact\";\r\nimport { b2EdgeAndCircleContact } from \"./b2EdgeAndCircleContact\";\r\nimport { b2EdgeAndPolygonContact } from \"./b2EdgeAndPolygonContact\";\r\nimport { b2ChainAndCircleContact } from \"./b2ChainAndCircleContact\";\r\nimport { b2ChainAndPolygonContact } from \"./b2ChainAndPolygonContact\";\r\nexport class b2ContactRegister {\r\n    constructor() {\r\n        this.pool = null;\r\n        this.createFcn = null;\r\n        this.destroyFcn = null;\r\n        this.primary = false;\r\n    }\r\n}\r\nexport class b2ContactFactory {\r\n    constructor(allocator) {\r\n        this.m_allocator = null;\r\n        this.m_allocator = allocator;\r\n        this.InitializeRegisters();\r\n    }\r\n    AddType(createFcn, destroyFcn, type1, type2) {\r\n        const pool = b2MakeArray(256, (i) => createFcn(this.m_allocator)); // TODO: b2Settings\r\n        function poolCreateFcn(allocator) {\r\n            if (pool.length > 0) {\r\n                return pool.pop();\r\n            }\r\n            return createFcn(allocator);\r\n        }\r\n        function poolDestroyFcn(contact, allocator) {\r\n            pool.push(contact);\r\n        }\r\n        this.m_registers[type1][type2].pool = pool;\r\n        this.m_registers[type1][type2].createFcn = poolCreateFcn;\r\n        this.m_registers[type1][type2].destroyFcn = poolDestroyFcn;\r\n        this.m_registers[type1][type2].primary = true;\r\n        if (type1 !== type2) {\r\n            this.m_registers[type2][type1].pool = pool;\r\n            this.m_registers[type2][type1].createFcn = poolCreateFcn;\r\n            this.m_registers[type2][type1].destroyFcn = poolDestroyFcn;\r\n            this.m_registers[type2][type1].primary = false;\r\n        }\r\n        /*\r\n        this.m_registers[type1][type2].createFcn = createFcn;\r\n        this.m_registers[type1][type2].destroyFcn = destroyFcn;\r\n        this.m_registers[type1][type2].primary = true;\r\n    \r\n        if (type1 !== type2) {\r\n          this.m_registers[type2][type1].createFcn = createFcn;\r\n          this.m_registers[type2][type1].destroyFcn = destroyFcn;\r\n          this.m_registers[type2][type1].primary = false;\r\n        }\r\n        */\r\n    }\r\n    InitializeRegisters() {\r\n        this.m_registers = [ /*b2ShapeType.e_shapeTypeCount*/];\r\n        for (let i = 0; i < b2ShapeType.e_shapeTypeCount; i++) {\r\n            this.m_registers[i] = [ /*b2ShapeType.e_shapeTypeCount*/];\r\n            for (let j = 0; j < b2ShapeType.e_shapeTypeCount; j++) {\r\n                this.m_registers[i][j] = new b2ContactRegister();\r\n            }\r\n        }\r\n        this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2ShapeType.e_circleShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonAndCircleContact.Create, b2PolygonAndCircleContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_polygonShape);\r\n        this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2ShapeType.e_edgeShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2EdgeAndPolygonContact.Create, b2EdgeAndPolygonContact.Destroy, b2ShapeType.e_edgeShape, b2ShapeType.e_polygonShape);\r\n        this.AddType(b2ChainAndCircleContact.Create, b2ChainAndCircleContact.Destroy, b2ShapeType.e_chainShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2ChainAndPolygonContact.Create, b2ChainAndPolygonContact.Destroy, b2ShapeType.e_chainShape, b2ShapeType.e_polygonShape);\r\n    }\r\n    Create(fixtureA, indexA, fixtureB, indexB) {\r\n        const type1 = fixtureA.GetType();\r\n        const type2 = fixtureB.GetType();\r\n        ///b2Assert(0 <= type1 && type1 < b2ShapeType.e_shapeTypeCount);\r\n        ///b2Assert(0 <= type2 && type2 < b2ShapeType.e_shapeTypeCount);\r\n        const reg = this.m_registers[type1][type2];\r\n        if (reg.createFcn) {\r\n            const c = reg.createFcn(this.m_allocator);\r\n            if (reg.primary) {\r\n                c.Reset(fixtureA, indexA, fixtureB, indexB);\r\n            }\r\n            else {\r\n                c.Reset(fixtureB, indexB, fixtureA, indexA);\r\n            }\r\n            return c;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    Destroy(contact) {\r\n        const fixtureA = contact.m_fixtureA;\r\n        const fixtureB = contact.m_fixtureB;\r\n        if (contact.m_manifold.pointCount > 0 &&\r\n            !fixtureA.IsSensor() &&\r\n            !fixtureB.IsSensor()) {\r\n            fixtureA.GetBody().SetAwake(true);\r\n            fixtureB.GetBody().SetAwake(true);\r\n        }\r\n        const typeA = fixtureA.GetType();\r\n        const typeB = fixtureB.GetType();\r\n        ///b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        ///b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        const reg = this.m_registers[typeA][typeB];\r\n        reg.destroyFcn(contact, this.m_allocator);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb250YWN0RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyQ29udGFjdEZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHdEUsTUFBTTtJQUFOO1FBQ1MsU0FBSSxHQUFnQixJQUFJLENBQUM7UUFDekIsY0FBUyxHQUFxQyxJQUFJLENBQUM7UUFDbkQsZUFBVSxHQUFvRCxJQUFJLENBQUM7UUFDbkUsWUFBTyxHQUFZLEtBQUssQ0FBQztJQUNsQyxDQUFDO0NBQUE7QUFFRCxNQUFNO0lBSUosWUFBWSxTQUFjO1FBSG5CLGdCQUFXLEdBQVEsSUFBSSxDQUFDO1FBSTdCLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1FBQzdCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTyxPQUFPLENBQUMsU0FBd0MsRUFBRSxVQUF3RCxFQUFFLEtBQWtCLEVBQUUsS0FBa0I7UUFDeEosTUFBTSxJQUFJLEdB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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_maxManifoldPoints, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2BodyType } from \"./b2Body\";\r\n// #endif\r\n/// Joints and fixtures are destroyed when their associated\r\n/// body is destroyed. Implement this listener so that you\r\n/// may nullify references to these joints and shapes.\r\nexport class b2DestructionListener {\r\n    /// Called when any joint is about to be destroyed due\r\n    /// to the destruction of one of its attached bodies.\r\n    SayGoodbyeJoint(joint) { }\r\n    /// Called when any fixture is about to be destroyed due\r\n    /// to the destruction of its parent body.\r\n    SayGoodbyeFixture(fixture) { }\r\n    // #if B2_ENABLE_PARTICLE\r\n    /// Called when any particle group is about to be destroyed.\r\n    SayGoodbyeParticleGroup(group) { }\r\n    /// Called when a particle is about to be destroyed.\r\n    /// The index can be used in conjunction with\r\n    /// b2ParticleSystem::GetUserDataBuffer() or\r\n    /// b2ParticleSystem::GetParticleHandleFromIndex() to determine which\r\n    /// particle has been destroyed.\r\n    SayGoodbyeParticle(system, index) { }\r\n}\r\n/// Implement this class to provide collision filtering. In other words, you can implement\r\n/// this class if you want finer control over contact creation.\r\nexport class b2ContactFilter {\r\n    /// Return true if contact calculations should be performed between these two shapes.\r\n    /// @warning for performance reasons this is only called when the AABBs begin to overlap.\r\n    ShouldCollide(fixtureA, fixtureB) {\r\n        const bodyA = fixtureA.GetBody();\r\n        const bodyB = fixtureB.GetBody();\r\n        // At least one body should be dynamic or kinematic.\r\n        if (bodyB.GetType() === b2BodyType.b2_staticBody && bodyA.GetType() === b2BodyType.b2_staticBody) {\r\n            return false;\r\n        }\r\n        // Does a joint prevent collision?\r\n        if (!bodyB.ShouldCollideConnected(bodyA)) {\r\n            return false;\r\n        }\r\n        const filter1 = fixtureA.GetFilterData();\r\n        const filter2 = fixtureB.GetFilterData();\r\n        if (filter1.groupIndex === filter2.groupIndex && filter1.groupIndex !== 0) {\r\n            return (filter1.groupIndex > 0);\r\n        }\r\n        const collide = (((filter1.maskBits & filter2.categoryBits) !== 0) && ((filter1.categoryBits & filter2.maskBits) !== 0));\r\n        return collide;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ShouldCollideFixtureParticle(fixture, system, index) {\r\n        return true;\r\n    }\r\n    ShouldCollideParticleParticle(system, indexA, indexB) {\r\n        return true;\r\n    }\r\n}\r\n// #endif\r\nb2ContactFilter.b2_defaultFilter = new b2ContactFilter();\r\n/// Contact impulses for reporting. Impulses are used instead of forces because\r\n/// sub-step forces may approach infinity for rigid body collisions. These\r\n/// match up one-to-one with the contact points in b2Manifold.\r\nexport class b2ContactImpulse {\r\n    constructor() {\r\n        this.normalImpulses = b2MakeNumberArray(b2_maxManifoldPoints);\r\n        this.tangentImpulses = b2MakeNumberArray(b2_maxManifoldPoints);\r\n        this.count = 0;\r\n    }\r\n}\r\n/// Implement this class to get contact information. You can use these results for\r\n/// things like sounds and game logic. You can also get contact results by\r\n/// traversing the contact lists after the time step. However, you might miss\r\n/// some contacts because continuous physics leads to sub-stepping.\r\n/// Additionally you may receive multiple callbacks for the same contact in a\r\n/// single time step.\r\n/// You should strive to make your callbacks efficient because there may be\r\n/// many callbacks per time step.\r\n/// @warning You cannot create/destroy Box2D entities inside these callbacks.\r\nexport class b2ContactListener {\r\n    /// Called when two fixtures begin to touch.\r\n    BeginContact(contact) { }\r\n    /// Called when two fixtures cease to touch.\r\n    EndContact(contact) { }\r\n    // #if B2_ENABLE_PARTICLE\r\n    BeginContactFixtureParticle(system, contact) { }\r\n    EndContactFixtureParticle(system, contact) { }\r\n    BeginContactParticleParticle(system, contact) { }\r\n    EndContactParticleParticle(system, contact) { }\r\n    // #endif\r\n    /// This is called after a contact is updated. This allows you to inspect a\r\n    /// contact before it goes to the solver. If you are careful, you can modify the\r\n    /// contact manifold (e.g. disable contact).\r\n    /// A copy of the old manifold is provided so that you can detect changes.\r\n    /// Note: this is called only for awake bodies.\r\n    /// Note: this is called even when the number of contact points is zero.\r\n    /// Note: this is not called for sensors.\r\n    /// Note: if you set the number of contact points to zero, you will not\r\n    /// get an EndContact callback. However, you may get a BeginContact callback\r\n    /// the next step.\r\n    PreSolve(contact, oldManifold) { }\r\n    /// This lets you inspect a contact after the solver is finished. This is useful\r\n    /// for inspecting impulses.\r\n    /// Note: the contact manifold does not include time of impact impulses, which can be\r\n    /// arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly\r\n    /// in a separate data structure.\r\n    /// Note: this is only called for contacts that are touching, solid, and awake.\r\n    PostSolve(contact, impulse) { }\r\n}\r\nb2ContactListener.b2_defaultListener = new b2ContactListener();\r\n/// Callback class for AABB queries.\r\n/// See b2World::Query\r\nexport class b2QueryCallback {\r\n    /// Called for each fixture found in the query AABB.\r\n    /// @return false to terminate the query.\r\n    ReportFixture(fixture) {\r\n        return true;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ReportParticle(system, index) {\r\n        return false;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        return true;\r\n    }\r\n}\r\n/// Callback class for ray casts.\r\n/// See b2World::RayCast\r\nexport class b2RayCastCallback {\r\n    /// Called for each fixture found in the query. You control how the ray cast\r\n    /// proceeds by returning a float:\r\n    /// return -1: ignore this fixture and continue\r\n    /// return 0: terminate the ray cast\r\n    /// return fraction: clip the ray to this point\r\n    /// return 1: don't clip the ray and continue\r\n    /// @param fixture the fixture hit by the ray\r\n    /// @param point the point of initial intersection\r\n    /// @param normal the normal vector at the point of intersection\r\n    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for\r\n    /// closest hit, 1 to continue\r\n    ReportFixture(fixture, point, normal, fraction) {\r\n        return fraction;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ReportParticle(system, index, point, normal, fraction) {\r\n        return 0;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJXb3JsZENhbGxiYWNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL2IyV29ybGRDYWxsYmFja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUkvRSxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBTTlDLFNBQVM7QUFFVCwyREFBMkQ7QUFDM0QsMERBQTBEO0FBQzFELHNEQUFzRDtBQUN0RCxNQUFNO0lBQ0osc0RBQXNEO0lBQ3RELHFEQUFxRDtJQUM5QyxlQUFlLENBQUMsS0FBYyxJQUFTLENBQUM7SUFFL0Msd0RBQXdEO0lBQ3hELDBDQUEwQztJQUNuQyxpQkFBaUIsQ0FBQyxPQUFrQixJQUFTLENBQUM7SUFFckQseUJBQXlCO0lBQ3pCLDREQUE0RDtJQUNyRCx1QkFBdUIsQ0FBQyxLQUFzQixJQUFTLENBQUM7SUFFL0Qsb0RBQW9EO0lBQ3BELDZDQUE2QztJQUM3Qyw0Q0FBNEM7SUFDNUMscUVBQXFFO0lBQ3JFLGdDQUFnQztJQUN6QixrQkFBa0IsQ0FBQyxNQUF3QixFQUFFLEtBQWEsSUFBUyxDQUFDO0NBRTVFO0FBRUQsMEZBQTBGO0FBQzFGLCtEQUErRDtBQUMvRCxNQUFNO0lBQ0oscUZBQXFGO0lBQ3JGLHlGQUF5RjtJQUNsRixhQUFhLENBQUMsUUFBbUIsRUFBRSxRQUFtQjtRQUMzRCxNQUFNLEtBQUssR0FBVyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQVcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXpDLG9EQUFvRDtRQUNwRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxVQUFVLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FB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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2BroadPhase } from \"../Collision/b2BroadPhase\";\r\nimport { b2ContactFactory } from \"./Contacts/b2ContactFactory\";\r\nimport { b2BodyType } from \"./b2Body\";\r\nimport { b2ContactFilter, b2ContactListener } from \"./b2WorldCallbacks\";\r\n// Delegate of b2World.\r\nexport class b2ContactManager {\r\n    constructor() {\r\n        this.m_broadPhase = new b2BroadPhase();\r\n        this.m_contactList = null;\r\n        this.m_contactCount = 0;\r\n        this.m_contactFilter = b2ContactFilter.b2_defaultFilter;\r\n        this.m_contactListener = b2ContactListener.b2_defaultListener;\r\n        this.m_allocator = null;\r\n        this.m_contactFactory = null;\r\n        this.m_contactFactory = new b2ContactFactory(this.m_allocator);\r\n    }\r\n    // Broad-phase callback.\r\n    AddPair(proxyA, proxyB) {\r\n        ///b2Assert(proxyA instanceof b2FixtureProxy);\r\n        ///b2Assert(proxyB instanceof b2FixtureProxy);\r\n        let fixtureA = proxyA.fixture;\r\n        let fixtureB = proxyB.fixture;\r\n        let indexA = proxyA.childIndex;\r\n        let indexB = proxyB.childIndex;\r\n        let bodyA = fixtureA.GetBody();\r\n        let bodyB = fixtureB.GetBody();\r\n        // Are the fixtures on the same body?\r\n        if (bodyA === bodyB) {\r\n            return;\r\n        }\r\n        // TODO_ERIN use a hash table to remove a potential bottleneck when both\r\n        // bodies have a lot of contacts.\r\n        // Does a contact already exist?\r\n        let edge = bodyB.GetContactList();\r\n        while (edge) {\r\n            if (edge.other === bodyA) {\r\n                const fA = edge.contact.GetFixtureA();\r\n                const fB = edge.contact.GetFixtureB();\r\n                const iA = edge.contact.GetChildIndexA();\r\n                const iB = edge.contact.GetChildIndexB();\r\n                if (fA === fixtureA && fB === fixtureB && iA === indexA && iB === indexB) {\r\n                    // A contact already exists.\r\n                    return;\r\n                }\r\n                if (fA === fixtureB && fB === fixtureA && iA === indexB && iB === indexA) {\r\n                    // A contact already exists.\r\n                    return;\r\n                }\r\n            }\r\n            edge = edge.next;\r\n        }\r\n        // Check user filtering.\r\n        if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\r\n            return;\r\n        }\r\n        // Call the factory.\r\n        const c = this.m_contactFactory.Create(fixtureA, indexA, fixtureB, indexB);\r\n        if (c === null) {\r\n            return;\r\n        }\r\n        // Contact creation may swap fixtures.\r\n        fixtureA = c.GetFixtureA();\r\n        fixtureB = c.GetFixtureB();\r\n        indexA = c.GetChildIndexA();\r\n        indexB = c.GetChildIndexB();\r\n        bodyA = fixtureA.m_body;\r\n        bodyB = fixtureB.m_body;\r\n        // Insert into the world.\r\n        c.m_prev = null;\r\n        c.m_next = this.m_contactList;\r\n        if (this.m_contactList !== null) {\r\n            this.m_contactList.m_prev = c;\r\n        }\r\n        this.m_contactList = c;\r\n        // Connect to island graph.\r\n        // Connect to body A\r\n        c.m_nodeA.contact = c;\r\n        c.m_nodeA.other = bodyB;\r\n        c.m_nodeA.prev = null;\r\n        c.m_nodeA.next = bodyA.m_contactList;\r\n        if (bodyA.m_contactList !== null) {\r\n            bodyA.m_contactList.prev = c.m_nodeA;\r\n        }\r\n        bodyA.m_contactList = c.m_nodeA;\r\n        // Connect to body B\r\n        c.m_nodeB.contact = c;\r\n        c.m_nodeB.other = bodyA;\r\n        c.m_nodeB.prev = null;\r\n        c.m_nodeB.next = bodyB.m_contactList;\r\n        if (bodyB.m_contactList !== null) {\r\n            bodyB.m_contactList.prev = c.m_nodeB;\r\n        }\r\n        bodyB.m_contactList = c.m_nodeB;\r\n        // Wake up the bodies\r\n        if (!fixtureA.IsSensor() && !fixtureB.IsSensor()) {\r\n            bodyA.SetAwake(true);\r\n            bodyB.SetAwake(true);\r\n        }\r\n        ++this.m_contactCount;\r\n    }\r\n    FindNewContacts() {\r\n        this.m_broadPhase.UpdatePairs(this);\r\n    }\r\n    Destroy(c) {\r\n        const fixtureA = c.GetFixtureA();\r\n        const fixtureB = c.GetFixtureB();\r\n        const bodyA = fixtureA.GetBody();\r\n        const bodyB = fixtureB.GetBody();\r\n        if (this.m_contactListener && c.IsTouching()) {\r\n            this.m_contactListener.EndContact(c);\r\n        }\r\n        // Remove from the world.\r\n        if (c.m_prev) {\r\n            c.m_prev.m_next = c.m_next;\r\n        }\r\n        if (c.m_next) {\r\n            c.m_next.m_prev = c.m_prev;\r\n        }\r\n        if (c === this.m_contactList) {\r\n            this.m_contactList = c.m_next;\r\n        }\r\n        // Remove from body 1\r\n        if (c.m_nodeA.prev) {\r\n            c.m_nodeA.prev.next = c.m_nodeA.next;\r\n        }\r\n        if (c.m_nodeA.next) {\r\n            c.m_nodeA.next.prev = c.m_nodeA.prev;\r\n        }\r\n        if (c.m_nodeA === bodyA.m_contactList) {\r\n            bodyA.m_contactList = c.m_nodeA.next;\r\n        }\r\n        // Remove from body 2\r\n        if (c.m_nodeB.prev) {\r\n            c.m_nodeB.prev.next = c.m_nodeB.next;\r\n        }\r\n        if (c.m_nodeB.next) {\r\n            c.m_nodeB.next.prev = c.m_nodeB.prev;\r\n        }\r\n        if (c.m_nodeB === bodyB.m_contactList) {\r\n            bodyB.m_contactList = c.m_nodeB.next;\r\n        }\r\n        // Call the factory.\r\n        this.m_contactFactory.Destroy(c);\r\n        --this.m_contactCount;\r\n    }\r\n    // This is the top level collision call for the time step. Here\r\n    // all the narrow phase collision is processed for the world\r\n    // contact list.\r\n    Collide() {\r\n        // Update awake contacts.\r\n        let c = this.m_contactList;\r\n        while (c) {\r\n            const fixtureA = c.GetFixtureA();\r\n            const fixtureB = c.GetFixtureB();\r\n            const indexA = c.GetChildIndexA();\r\n            const indexB = c.GetChildIndexB();\r\n            const bodyA = fixtureA.GetBody();\r\n            const bodyB = fixtureB.GetBody();\r\n            // Is this contact flagged for filtering?\r\n            if (c.m_filterFlag) {\r\n                // Check user filtering.\r\n                if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\r\n                    const cNuke = c;\r\n                    c = cNuke.m_next;\r\n                    this.Destroy(cNuke);\r\n                    continue;\r\n                }\r\n                // Clear the filtering flag.\r\n                c.m_filterFlag = false;\r\n            }\r\n            const activeA = bodyA.IsAwake() && bodyA.m_type !== b2BodyType.b2_staticBody;\r\n            const activeB = bodyB.IsAwake() && bodyB.m_type !== b2BodyType.b2_staticBody;\r\n            // At least one body must be awake and it must be dynamic or kinematic.\r\n            if (!activeA && !activeB) {\r\n                c = c.m_next;\r\n                continue;\r\n            }\r\n            const proxyA = fixtureA.m_proxies[indexA].treeNode;\r\n            const proxyB = fixtureB.m_proxies[indexB].treeNode;\r\n            const overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);\r\n            // Here we destroy contacts that cease to overlap in the broad-phase.\r\n            if (!overlap) {\r\n                const cNuke = c;\r\n                c = cNuke.m_next;\r\n                this.Destroy(cNuke);\r\n                continue;\r\n            }\r\n            // The contact persists.\r\n            c.Update(this.m_contactListener);\r\n            c = c.m_next;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\n/// Profiling data. Times are in milliseconds.\r\nexport class b2Profile {\r\n    constructor() {\r\n        this.step = 0;\r\n        this.collide = 0;\r\n        this.solve = 0;\r\n        this.solveInit = 0;\r\n        this.solveVelocity = 0;\r\n        this.solvePosition = 0;\r\n        this.broadphase = 0;\r\n        this.solveTOI = 0;\r\n    }\r\n    Reset() {\r\n        this.step = 0;\r\n        this.collide = 0;\r\n        this.solve = 0;\r\n        this.solveInit = 0;\r\n        this.solveVelocity = 0;\r\n        this.solvePosition = 0;\r\n        this.broadphase = 0;\r\n        this.solveTOI = 0;\r\n        return this;\r\n    }\r\n}\r\n/// This is an internal structure.\r\nexport class b2TimeStep {\r\n    constructor() {\r\n        this.dt = 0; // time step\r\n        this.inv_dt = 0; // inverse time step (0 if dt == 0).\r\n        this.dtRatio = 0; // dt * inv_dt0\r\n        this.velocityIterations = 0;\r\n        this.positionIterations = 0;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.particleIterations = 0;\r\n        // #endif\r\n        this.warmStarting = false;\r\n    }\r\n    Copy(step) {\r\n        this.dt = step.dt;\r\n        this.inv_dt = step.inv_dt;\r\n        this.dtRatio = step.dtRatio;\r\n        this.positionIterations = step.positionIterations;\r\n        this.velocityIterations = step.velocityIterations;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.particleIterations = step.particleIterations;\r\n        // #endif\r\n        this.warmStarting = step.warmStarting;\r\n        return this;\r\n    }\r\n}\r\nexport class b2Position {\r\n    constructor() {\r\n        this.c = new b2Vec2();\r\n        this.a = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Position());\r\n    }\r\n}\r\nexport class b2Velocity {\r\n    constructor() {\r\n        this.v = new b2Vec2();\r\n        this.w = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Velocity());\r\n    }\r\n}\r\nexport class b2SolverData {\r\n    constructor() {\r\n        this.step = new b2TimeStep();\r\n        this.positions = null;\r\n        this.velocities = null;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJUaW1lU3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL0R5bmFtaWNzL2IyVGltZVN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTFDLDhDQUE4QztBQUM5QyxNQUFNO0lBQU47UUFDUyxTQUFJLEdBQVcsQ0FBQyxDQUFDO1FBQ2pCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFDcEIsVUFBSyxHQUFXLENBQUMsQ0FBQztRQUNsQixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLGtCQUFhLEdBQVcsQ0FBQyxDQUFDO1FBQzFCLGtCQUFhLEdBQVcsQ0FBQyxDQUFDO1FBQzFCLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFDdkIsYUFBUSxHQUFXLENBQUMsQ0FBQztJQWE5QixDQUFDO0lBWFEsS0FBSztRQUNWLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELGtDQUFrQztBQUNsQyxNQUFNO0lBQU47UUFDUyxPQUFFLEdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWTtRQUM1QixXQUFNLEdBQVcsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1FBQ3hELFlBQU8sR0FBVyxDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3BDLHVCQUFrQixHQUFXLENBQUMsQ0FBQztRQUMvQix1QkFBa0IsR0FBVyxDQUFDLENBQUM7UUFDdEMseUJBQXlCO1FBQ2xCLHVCQUFrQixHQUFXLENBQUMsQ0FBQztRQUN0QyxTQUFTO1FBQ0YsaUJBQVksR0FBWSxLQUFLLENBQUM7SUFjdkMsQ0FBQztJQVpRLElBQUksQ0FBQyxJQUFnQjtRQUMxQixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbEQseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbEQsU0FBUztRQUNULElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU07SUFBTjtRQUNTLE1BQUMsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLE1BQUMsR0FBVyxDQUFDLENBQUM7SUFLdkIsQ0FBQztJQUhRLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYztRQUNwQyxPQUFPLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFTLEVBQWMsRUFBRSxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0NBQ0Y7QUFFRCxNQUFNO0lBQU47UUFDUyxNQUFDLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN6QixNQUFDLEdBQVcsQ0FBQyxDQUFDO0lBS3ZCLENBQUM7SUFIUSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWM7UUFDcEMsT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBUyxFQUFjLEVBQUUsQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGO0FBRUQsTUFBTTtJQUFOO1FBQ1MsU0FBSSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7UUFDcEMsY0FBUyxHQUFpQixJQUFJLENBQUM7UUFDL0IsZUFBVSxHQUFpQixJQUFJLENBQUM7SUFDekMsQ0FBQztDQUFBIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxManifoldPoints, b2_velocityThreshold, b2_maxLinearCorrection, b2_baumgarte, b2_toiBaumgarte, b2MakeArray } from \"../../Common/b2Settings\";\r\nimport { b2Min, b2Max, b2Clamp, b2Vec2, b2Mat22, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2WorldManifold } from \"../../Collision/b2Collision\";\r\nimport { b2ManifoldType } from \"../../Collision/b2Collision\";\r\nimport { b2TimeStep } from \"../b2TimeStep\";\r\nexport class b2VelocityConstraintPoint {\r\n    constructor() {\r\n        this.rA = new b2Vec2();\r\n        this.rB = new b2Vec2();\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.normalMass = 0;\r\n        this.tangentMass = 0;\r\n        this.velocityBias = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2VelocityConstraintPoint());\r\n    }\r\n}\r\nexport class b2ContactVelocityConstraint {\r\n    constructor() {\r\n        this.points = b2VelocityConstraintPoint.MakeArray(b2_maxManifoldPoints);\r\n        this.normal = new b2Vec2();\r\n        this.tangent = new b2Vec2();\r\n        this.normalMass = new b2Mat22();\r\n        this.K = new b2Mat22();\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.invMassA = 0;\r\n        this.invMassB = 0;\r\n        this.invIA = 0;\r\n        this.invIB = 0;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.tangentSpeed = 0;\r\n        this.pointCount = 0;\r\n        this.contactIndex = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ContactVelocityConstraint());\r\n    }\r\n}\r\nexport class b2ContactPositionConstraint {\r\n    constructor() {\r\n        this.localPoints = b2Vec2.MakeArray(b2_maxManifoldPoints);\r\n        this.localNormal = new b2Vec2();\r\n        this.localPoint = new b2Vec2();\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.invMassA = 0;\r\n        this.invMassB = 0;\r\n        this.localCenterA = new b2Vec2();\r\n        this.localCenterB = new b2Vec2();\r\n        this.invIA = 0;\r\n        this.invIB = 0;\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.radiusA = 0;\r\n        this.radiusB = 0;\r\n        this.pointCount = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ContactPositionConstraint());\r\n    }\r\n}\r\nexport class b2ContactSolverDef {\r\n    constructor() {\r\n        this.step = new b2TimeStep();\r\n        this.contacts = null;\r\n        this.count = 0;\r\n        this.positions = null;\r\n        this.velocities = null;\r\n        this.allocator = null;\r\n    }\r\n}\r\nexport class b2PositionSolverManifold {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.point = new b2Vec2();\r\n        this.separation = 0;\r\n    }\r\n    Initialize(pc, xfA, xfB, index) {\r\n        const pointA = b2PositionSolverManifold.Initialize_s_pointA;\r\n        const pointB = b2PositionSolverManifold.Initialize_s_pointB;\r\n        const planePoint = b2PositionSolverManifold.Initialize_s_planePoint;\r\n        const clipPoint = b2PositionSolverManifold.Initialize_s_clipPoint;\r\n        ///b2Assert(pc.pointCount > 0);\r\n        switch (pc.type) {\r\n            case b2ManifoldType.e_circles:\r\n                {\r\n                    // b2Vec2 pointA = b2Mul(xfA, pc->localPoint);\r\n                    b2Transform.MulXV(xfA, pc.localPoint, pointA);\r\n                    // b2Vec2 pointB = b2Mul(xfB, pc->localPoints[0]);\r\n                    b2Transform.MulXV(xfB, pc.localPoints[0], pointB);\r\n                    // normal = pointB - pointA;\r\n                    // normal.Normalize();\r\n                    b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\r\n                    // point = 0.5f * (pointA + pointB);\r\n                    b2Vec2.MidVV(pointA, pointB, this.point);\r\n                    // separation = b2Dot(pointB - pointA, normal) - pc->radius;\r\n                    this.separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                }\r\n                break;\r\n            case b2ManifoldType.e_faceA:\r\n                {\r\n                    // normal = b2Mul(xfA.q, pc->localNormal);\r\n                    b2Rot.MulRV(xfA.q, pc.localNormal, this.normal);\r\n                    // b2Vec2 planePoint = b2Mul(xfA, pc->localPoint);\r\n                    b2Transform.MulXV(xfA, pc.localPoint, planePoint);\r\n                    // b2Vec2 clipPoint = b2Mul(xfB, pc->localPoints[index]);\r\n                    b2Transform.MulXV(xfB, pc.localPoints[index], clipPoint);\r\n                    // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\r\n                    this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                    // point = clipPoint;\r\n                    this.point.Copy(clipPoint);\r\n                }\r\n                break;\r\n            case b2ManifoldType.e_faceB:\r\n                {\r\n                    // normal = b2Mul(xfB.q, pc->localNormal);\r\n                    b2Rot.MulRV(xfB.q, pc.localNormal, this.normal);\r\n                    // b2Vec2 planePoint = b2Mul(xfB, pc->localPoint);\r\n                    b2Transform.MulXV(xfB, pc.localPoint, planePoint);\r\n                    // b2Vec2 clipPoint = b2Mul(xfA, pc->localPoints[index]);\r\n                    b2Transform.MulXV(xfA, pc.localPoints[index], clipPoint);\r\n                    // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\r\n                    this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                    // point = clipPoint;\r\n                    this.point.Copy(clipPoint);\r\n                    // Ensure normal points from A to B\r\n                    // normal = -normal;\r\n                    this.normal.SelfNeg();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\nb2PositionSolverManifold.Initialize_s_pointA = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_pointB = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_planePoint = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_clipPoint = new b2Vec2();\r\nexport class b2ContactSolver {\r\n    constructor() {\r\n        this.m_step = new b2TimeStep();\r\n        this.m_positions = null;\r\n        this.m_velocities = null;\r\n        this.m_allocator = null;\r\n        this.m_positionConstraints = b2ContactPositionConstraint.MakeArray(1024); // TODO: b2Settings\r\n        this.m_velocityConstraints = b2ContactVelocityConstraint.MakeArray(1024); // TODO: b2Settings\r\n        this.m_contacts = null;\r\n        this.m_count = 0;\r\n    }\r\n    Initialize(def) {\r\n        this.m_step.Copy(def.step);\r\n        this.m_allocator = def.allocator;\r\n        this.m_count = def.count;\r\n        // TODO:\r\n        if (this.m_positionConstraints.length < this.m_count) {\r\n            const new_length = b2Max(this.m_positionConstraints.length * 2, this.m_count);\r\n            while (this.m_positionConstraints.length < new_length) {\r\n                this.m_positionConstraints[this.m_positionConstraints.length] = new b2ContactPositionConstraint();\r\n            }\r\n        }\r\n        // TODO:\r\n        if (this.m_velocityConstraints.length < this.m_count) {\r\n            const new_length = b2Max(this.m_velocityConstraints.length * 2, this.m_count);\r\n            while (this.m_velocityConstraints.length < new_length) {\r\n                this.m_velocityConstraints[this.m_velocityConstraints.length] = new b2ContactVelocityConstraint();\r\n            }\r\n        }\r\n        this.m_positions = def.positions;\r\n        this.m_velocities = def.velocities;\r\n        this.m_contacts = def.contacts;\r\n        // Initialize position independent portions of the constraints.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const contact = this.m_contacts[i];\r\n            const fixtureA = contact.m_fixtureA;\r\n            const fixtureB = contact.m_fixtureB;\r\n            const shapeA = fixtureA.GetShape();\r\n            const shapeB = fixtureB.GetShape();\r\n            const radiusA = shapeA.m_radius;\r\n            const radiusB = shapeB.m_radius;\r\n            const bodyA = fixtureA.GetBody();\r\n            const bodyB = fixtureB.GetBody();\r\n            const manifold = contact.GetManifold();\r\n            const pointCount = manifold.pointCount;\r\n            ///b2Assert(pointCount > 0);\r\n            const vc = this.m_velocityConstraints[i];\r\n            vc.friction = contact.m_friction;\r\n            vc.restitution = contact.m_restitution;\r\n            vc.tangentSpeed = contact.m_tangentSpeed;\r\n            vc.indexA = bodyA.m_islandIndex;\r\n            vc.indexB = bodyB.m_islandIndex;\r\n            vc.invMassA = bodyA.m_invMass;\r\n            vc.invMassB = bodyB.m_invMass;\r\n            vc.invIA = bodyA.m_invI;\r\n            vc.invIB = bodyB.m_invI;\r\n            vc.contactIndex = i;\r\n            vc.pointCount = pointCount;\r\n            vc.K.SetZero();\r\n            vc.normalMass.SetZero();\r\n            const pc = this.m_positionConstraints[i];\r\n            pc.indexA = bodyA.m_islandIndex;\r\n            pc.indexB = bodyB.m_islandIndex;\r\n            pc.invMassA = bodyA.m_invMass;\r\n            pc.invMassB = bodyB.m_invMass;\r\n            pc.localCenterA.Copy(bodyA.m_sweep.localCenter);\r\n            pc.localCenterB.Copy(bodyB.m_sweep.localCenter);\r\n            pc.invIA = bodyA.m_invI;\r\n            pc.invIB = bodyB.m_invI;\r\n            pc.localNormal.Copy(manifold.localNormal);\r\n            pc.localPoint.Copy(manifold.localPoint);\r\n            pc.pointCount = pointCount;\r\n            pc.radiusA = radiusA;\r\n            pc.radiusB = radiusB;\r\n            pc.type = manifold.type;\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const cp = manifold.points[j];\r\n                const vcp = vc.points[j];\r\n                if (this.m_step.warmStarting) {\r\n                    vcp.normalImpulse = this.m_step.dtRatio * cp.normalImpulse;\r\n                    vcp.tangentImpulse = this.m_step.dtRatio * cp.tangentImpulse;\r\n                }\r\n                else {\r\n                    vcp.normalImpulse = 0;\r\n                    vcp.tangentImpulse = 0;\r\n                }\r\n                vcp.rA.SetZero();\r\n                vcp.rB.SetZero();\r\n                vcp.normalMass = 0;\r\n                vcp.tangentMass = 0;\r\n                vcp.velocityBias = 0;\r\n                pc.localPoints[j].Copy(cp.localPoint);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    InitializeVelocityConstraints() {\r\n        const xfA = b2ContactSolver.InitializeVelocityConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.InitializeVelocityConstraints_s_xfB;\r\n        const worldManifold = b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;\r\n        const k_maxConditionNumber = 1000;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const pc = this.m_positionConstraints[i];\r\n            const radiusA = pc.radiusA;\r\n            const radiusB = pc.radiusB;\r\n            const manifold = this.m_contacts[vc.contactIndex].GetManifold();\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const mB = vc.invMassB;\r\n            const iA = vc.invIA;\r\n            const iB = vc.invIB;\r\n            const localCenterA = pc.localCenterA;\r\n            const localCenterB = pc.localCenterB;\r\n            const cA = this.m_positions[indexA].c;\r\n            const aA = this.m_positions[indexA].a;\r\n            const vA = this.m_velocities[indexA].v;\r\n            const wA = this.m_velocities[indexA].w;\r\n            const cB = this.m_positions[indexB].c;\r\n            const aB = this.m_positions[indexB].a;\r\n            const vB = this.m_velocities[indexB].v;\r\n            const wB = this.m_velocities[indexB].w;\r\n            ///b2Assert(manifold.pointCount > 0);\r\n            xfA.q.SetAngle(aA);\r\n            xfB.q.SetAngle(aB);\r\n            b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n            b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n            worldManifold.Initialize(manifold, xfA, radiusA, xfB, radiusB);\r\n            vc.normal.Copy(worldManifold.normal);\r\n            b2Vec2.CrossVOne(vc.normal, vc.tangent); // compute from normal\r\n            const pointCount = vc.pointCount;\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // vcp->rA = worldManifold.points[j] - cA;\r\n                b2Vec2.SubVV(worldManifold.points[j], cA, vcp.rA);\r\n                // vcp->rB = worldManifold.points[j] - cB;\r\n                b2Vec2.SubVV(worldManifold.points[j], cB, vcp.rB);\r\n                const rnA = b2Vec2.CrossVV(vcp.rA, vc.normal);\r\n                const rnB = b2Vec2.CrossVV(vcp.rB, vc.normal);\r\n                const kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                vcp.normalMass = kNormal > 0 ? 1 / kNormal : 0;\r\n                // b2Vec2 tangent = b2Cross(vc->normal, 1.0f);\r\n                const tangent = vc.tangent; // precomputed from normal\r\n                const rtA = b2Vec2.CrossVV(vcp.rA, tangent);\r\n                const rtB = b2Vec2.CrossVV(vcp.rB, tangent);\r\n                const kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\r\n                vcp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;\r\n                // Setup a velocity bias for restitution.\r\n                vcp.velocityBias = 0;\r\n                // float32 vRel = b2Dot(vc->normal, vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA));\r\n                const vRel = b2Vec2.DotVV(vc.normal, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n                if (vRel < (-b2_velocityThreshold)) {\r\n                    vcp.velocityBias += (-vc.restitution * vRel);\r\n                }\r\n            }\r\n            // If we have two points, then prepare the block solver.\r\n            if (vc.pointCount === 2) {\r\n                const vcp1 = vc.points[0];\r\n                const vcp2 = vc.points[1];\r\n                const rn1A = b2Vec2.CrossVV(vcp1.rA, vc.normal);\r\n                const rn1B = b2Vec2.CrossVV(vcp1.rB, vc.normal);\r\n                const rn2A = b2Vec2.CrossVV(vcp2.rA, vc.normal);\r\n                const rn2B = b2Vec2.CrossVV(vcp2.rB, vc.normal);\r\n                const k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\r\n                const k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\r\n                const k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\r\n                // Ensure a reasonable condition number.\r\n                // float32 k_maxConditionNumber = 1000.0f;\r\n                if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\r\n                    // K is safe to invert.\r\n                    vc.K.ex.Set(k11, k12);\r\n                    vc.K.ey.Set(k12, k22);\r\n                    vc.K.GetInverse(vc.normalMass);\r\n                }\r\n                else {\r\n                    // The constraints are redundant, just use one.\r\n                    // TODO_ERIN use deepest?\r\n                    vc.pointCount = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    WarmStart() {\r\n        const P = b2ContactSolver.WarmStart_s_P;\r\n        // Warm start.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const iA = vc.invIA;\r\n            const mB = vc.invMassB;\r\n            const iB = vc.invIB;\r\n            const pointCount = vc.pointCount;\r\n            const vA = this.m_velocities[indexA].v;\r\n            let wA = this.m_velocities[indexA].w;\r\n            const vB = this.m_velocities[indexB].v;\r\n            let wB = this.m_velocities[indexB].w;\r\n            const normal = vc.normal;\r\n            // b2Vec2 tangent = b2Cross(normal, 1.0f);\r\n            const tangent = vc.tangent; // precomputed from normal\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // b2Vec2 P = vcp->normalImpulse * normal + vcp->tangentImpulse * tangent;\r\n                b2Vec2.AddVV(b2Vec2.MulSV(vcp.normalImpulse, normal, b2Vec2.s_t0), b2Vec2.MulSV(vcp.tangentImpulse, tangent, b2Vec2.s_t1), P);\r\n                // wA -= iA * b2Cross(vcp->rA, P);\r\n                wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                // vA -= mA * P;\r\n                vA.SelfMulSub(mA, P);\r\n                // wB += iB * b2Cross(vcp->rB, P);\r\n                wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n                // vB += mB * P;\r\n                vB.SelfMulAdd(mB, P);\r\n            }\r\n            // this.m_velocities[indexA].v = vA;\r\n            this.m_velocities[indexA].w = wA;\r\n            // this.m_velocities[indexB].v = vB;\r\n            this.m_velocities[indexB].w = wB;\r\n        }\r\n    }\r\n    SolveVelocityConstraints() {\r\n        const dv = b2ContactSolver.SolveVelocityConstraints_s_dv;\r\n        const dv1 = b2ContactSolver.SolveVelocityConstraints_s_dv1;\r\n        const dv2 = b2ContactSolver.SolveVelocityConstraints_s_dv2;\r\n        const P = b2ContactSolver.SolveVelocityConstraints_s_P;\r\n        const a = b2ContactSolver.SolveVelocityConstraints_s_a;\r\n        const b = b2ContactSolver.SolveVelocityConstraints_s_b;\r\n        const x = b2ContactSolver.SolveVelocityConstraints_s_x;\r\n        const d = b2ContactSolver.SolveVelocityConstraints_s_d;\r\n        const P1 = b2ContactSolver.SolveVelocityConstraints_s_P1;\r\n        const P2 = b2ContactSolver.SolveVelocityConstraints_s_P2;\r\n        const P1P2 = b2ContactSolver.SolveVelocityConstraints_s_P1P2;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const iA = vc.invIA;\r\n            const mB = vc.invMassB;\r\n            const iB = vc.invIB;\r\n            const pointCount = vc.pointCount;\r\n            const vA = this.m_velocities[indexA].v;\r\n            let wA = this.m_velocities[indexA].w;\r\n            const vB = this.m_velocities[indexB].v;\r\n            let wB = this.m_velocities[indexB].w;\r\n            // b2Vec2 normal = vc->normal;\r\n            const normal = vc.normal;\r\n            // b2Vec2 tangent = b2Cross(normal, 1.0f);\r\n            const tangent = vc.tangent; // precomputed from normal\r\n            const friction = vc.friction;\r\n            ///b2Assert(pointCount === 1 || pointCount === 2);\r\n            // Solve tangent constraints first because non-penetration is more important\r\n            // than friction.\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // Relative velocity at contact\r\n                // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);\r\n                // Compute tangent force\r\n                // float32 vt = b2Dot(dv, tangent) - vc->tangentSpeed;\r\n                const vt = b2Vec2.DotVV(dv, tangent) - vc.tangentSpeed;\r\n                let lambda = vcp.tangentMass * (-vt);\r\n                // b2Clamp the accumulated force\r\n                const maxFriction = friction * vcp.normalImpulse;\r\n                const newImpulse = b2Clamp(vcp.tangentImpulse + lambda, (-maxFriction), maxFriction);\r\n                lambda = newImpulse - vcp.tangentImpulse;\r\n                vcp.tangentImpulse = newImpulse;\r\n                // Apply contact impulse\r\n                // b2Vec2 P = lambda * tangent;\r\n                b2Vec2.MulSV(lambda, tangent, P);\r\n                // vA -= mA * P;\r\n                vA.SelfMulSub(mA, P);\r\n                // wA -= iA * b2Cross(vcp->rA, P);\r\n                wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                // vB += mB * P;\r\n                vB.SelfMulAdd(mB, P);\r\n                // wB += iB * b2Cross(vcp->rB, P);\r\n                wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n            }\r\n            // Solve normal constraints\r\n            if (vc.pointCount === 1) {\r\n                const vcp = vc.points[0];\r\n                // Relative velocity at contact\r\n                // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);\r\n                // Compute normal impulse\r\n                // float32 vn = b2Dot(dv, normal);\r\n                const vn = b2Vec2.DotVV(dv, normal);\r\n                let lambda = (-vcp.normalMass * (vn - vcp.velocityBias));\r\n                // b2Clamp the accumulated impulse\r\n                // float32 newImpulse = b2Max(vcp->normalImpulse + lambda, 0.0f);\r\n                const newImpulse = b2Max(vcp.normalImpulse + lambda, 0);\r\n                lambda = newImpulse - vcp.normalImpulse;\r\n                vcp.normalImpulse = newImpulse;\r\n                // Apply contact impulse\r\n                // b2Vec2 P = lambda * normal;\r\n                b2Vec2.MulSV(lambda, normal, P);\r\n                // vA -= mA * P;\r\n                vA.SelfMulSub(mA, P);\r\n                // wA -= iA * b2Cross(vcp->rA, P);\r\n                wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                // vB += mB * P;\r\n                vB.SelfMulAdd(mB, P);\r\n                // wB += iB * b2Cross(vcp->rB, P);\r\n                wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n            }\r\n            else {\r\n                // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on Box2D_Lite).\r\n                // Build the mini LCP for this contact patch\r\n                //\r\n                // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2\r\n                //\r\n                // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\r\n                // b = vn0 - velocityBias\r\n                //\r\n                // The system is solved using the \"Total enumeration method\" (s. Murty). The complementary constraint vn_i * x_i\r\n                // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D contact problem the cases\r\n                // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be tested. The first valid\r\n                // solution that satisfies the problem is chosen.\r\n                //\r\n                // In order to account of the accumulated impulse 'a' (because of the iterative nature of the solver which only requires\r\n                // that the accumulated impulse is clamped and not the incremental impulse) we change the impulse variable (x_i).\r\n                //\r\n                // Substitute:\r\n                //\r\n                // x = a + d\r\n                //\r\n                // a := old total impulse\r\n                // x := new total impulse\r\n                // d := incremental impulse\r\n                //\r\n                // For the current iteration we extend the formula for the incremental impulse\r\n                // to compute the new total impulse:\r\n                //\r\n                // vn = A * d + b\r\n                //    = A * (x - a) + b\r\n                //    = A * x + b - A * a\r\n                //    = A * x + b'\r\n                // b' = b - A * a;\r\n                const cp1 = vc.points[0];\r\n                const cp2 = vc.points[1];\r\n                // b2Vec2 a(cp1->normalImpulse, cp2->normalImpulse);\r\n                a.Set(cp1.normalImpulse, cp2.normalImpulse);\r\n                ///b2Assert(a.x >= 0 && a.y >= 0);\r\n                // Relative velocity at contact\r\n                // b2Vec2 dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp1.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp1.rA, b2Vec2.s_t1), dv1);\r\n                // b2Vec2 dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp2.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp2.rA, b2Vec2.s_t1), dv2);\r\n                // Compute normal velocity\r\n                // float32 vn1 = b2Dot(dv1, normal);\r\n                let vn1 = b2Vec2.DotVV(dv1, normal);\r\n                // float32 vn2 = b2Dot(dv2, normal);\r\n                let vn2 = b2Vec2.DotVV(dv2, normal);\r\n                // b2Vec2 b;\r\n                b.x = vn1 - cp1.velocityBias;\r\n                b.y = vn2 - cp2.velocityBias;\r\n                // Compute b'\r\n                // b -= b2Mul(vc->K, a);\r\n                b.SelfSub(b2Mat22.MulMV(vc.K, a, b2Vec2.s_t0));\r\n                /*\r\n                #if B2_DEBUG_SOLVER === 1\r\n                const k_errorTol: number = 0.001;\r\n                #endif\r\n                */\r\n                for (;;) {\r\n                    //\r\n                    // Case 1: vn = 0\r\n                    //\r\n                    // 0 = A * x + b'\r\n                    //\r\n                    // Solve for x:\r\n                    //\r\n                    // x = - inv(A) * b'\r\n                    //\r\n                    // b2Vec2 x = - b2Mul(vc->normalMass, b);\r\n                    b2Mat22.MulMV(vc.normalMass, b, x).SelfNeg();\r\n                    if (x.x >= 0 && x.y >= 0) {\r\n                        // Get the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn1 = b2Dot(dv1, normal);\r\n                        vn2 = b2Dot(dv2, normal);\r\n            \r\n                        ///b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\r\n                        ///b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 2: vn1 = 0 and x2 = 0\r\n                    //\r\n                    //   0 = a11 * x1 + a12 * 0 + b1'\r\n                    // vn2 = a21 * x1 + a22 * 0 + b2'\r\n                    //\r\n                    x.x = (-cp1.normalMass * b.x);\r\n                    x.y = 0;\r\n                    vn1 = 0;\r\n                    vn2 = vc.K.ex.y * x.x + b.y;\r\n                    if (x.x >= 0 && vn2 >= 0) {\r\n                        // Get the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn1 = b2Dot(dv1, normal);\r\n            \r\n                        ///b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 3: vn2 = 0 and x1 = 0\r\n                    //\r\n                    // vn1 = a11 * 0 + a12 * x2 + b1'\r\n                    //   0 = a21 * 0 + a22 * x2 + b2'\r\n                    //\r\n                    x.x = 0;\r\n                    x.y = (-cp2.normalMass * b.y);\r\n                    vn1 = vc.K.ey.x * x.y + b.x;\r\n                    vn2 = 0;\r\n                    if (x.y >= 0 && vn1 >= 0) {\r\n                        // Resubstitute for the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn2 = b2Dot(dv2, normal);\r\n            \r\n                        ///b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 4: x1 = 0 and x2 = 0\r\n                    //\r\n                    // vn1 = b1\r\n                    // vn2 = b2;\r\n                    x.x = 0;\r\n                    x.y = 0;\r\n                    vn1 = b.x;\r\n                    vn2 = b.y;\r\n                    if (vn1 >= 0 && vn2 >= 0) {\r\n                        // Resubstitute for the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        break;\r\n                    }\r\n                    // No solution, give up. This is hit sometimes, but it doesn't seem to matter.\r\n                    break;\r\n                }\r\n            }\r\n            // this.m_velocities[indexA].v = vA;\r\n            this.m_velocities[indexA].w = wA;\r\n            // this.m_velocities[indexB].v = vB;\r\n            this.m_velocities[indexB].w = wB;\r\n        }\r\n    }\r\n    StoreImpulses() {\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            let vc = this.m_velocityConstraints[i];\r\n            let manifold = this.m_contacts[vc.contactIndex].GetManifold();\r\n            for (let j = 0; j < vc.pointCount; ++j) {\r\n                manifold.points[j].normalImpulse = vc.points[j].normalImpulse;\r\n                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse;\r\n            }\r\n        }\r\n    }\r\n    SolvePositionConstraints() {\r\n        const xfA = b2ContactSolver.SolvePositionConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.SolvePositionConstraints_s_xfB;\r\n        const psm = b2ContactSolver.SolvePositionConstraints_s_psm;\r\n        const rA = b2ContactSolver.SolvePositionConstraints_s_rA;\r\n        const rB = b2ContactSolver.SolvePositionConstraints_s_rB;\r\n        const P = b2ContactSolver.SolvePositionConstraints_s_P;\r\n        let minSeparation = 0;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const pc = this.m_positionConstraints[i];\r\n            const indexA = pc.indexA;\r\n            const indexB = pc.indexB;\r\n            const localCenterA = pc.localCenterA;\r\n            const mA = pc.invMassA;\r\n            const iA = pc.invIA;\r\n            const localCenterB = pc.localCenterB;\r\n            const mB = pc.invMassB;\r\n            const iB = pc.invIB;\r\n            const pointCount = pc.pointCount;\r\n            const cA = this.m_positions[indexA].c;\r\n            let aA = this.m_positions[indexA].a;\r\n            const cB = this.m_positions[indexB].c;\r\n            let aB = this.m_positions[indexB].a;\r\n            // Solve normal constraints\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                xfA.q.SetAngle(aA);\r\n                xfB.q.SetAngle(aB);\r\n                b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n                b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n                psm.Initialize(pc, xfA, xfB, j);\r\n                const normal = psm.normal;\r\n                const point = psm.point;\r\n                const separation = psm.separation;\r\n                // b2Vec2 rA = point - cA;\r\n                b2Vec2.SubVV(point, cA, rA);\r\n                // b2Vec2 rB = point - cB;\r\n                b2Vec2.SubVV(point, cB, rB);\r\n                // Track max constraint error.\r\n                minSeparation = b2Min(minSeparation, separation);\r\n                // Prevent large corrections and allow slop.\r\n                const C = b2Clamp(b2_baumgarte * (separation + b2_linearSlop), (-b2_maxLinearCorrection), 0);\r\n                // Compute the effective mass.\r\n                // float32 rnA = b2Cross(rA, normal);\r\n                const rnA = b2Vec2.CrossVV(rA, normal);\r\n                // float32 rnB = b2Cross(rB, normal);\r\n                const rnB = b2Vec2.CrossVV(rB, normal);\r\n                // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                const K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                // Compute normal impulse\r\n                const impulse = K > 0 ? -C / K : 0;\r\n                // b2Vec2 P = impulse * normal;\r\n                b2Vec2.MulSV(impulse, normal, P);\r\n                // cA -= mA * P;\r\n                cA.SelfMulSub(mA, P);\r\n                // aA -= iA * b2Cross(rA, P);\r\n                aA -= iA * b2Vec2.CrossVV(rA, P);\r\n                // cB += mB * P;\r\n                cB.SelfMulAdd(mB, P);\r\n                // aB += iB * b2Cross(rB, P);\r\n                aB += iB * b2Vec2.CrossVV(rB, P);\r\n            }\r\n            // this.m_positions[indexA].c = cA;\r\n            this.m_positions[indexA].a = aA;\r\n            // this.m_positions[indexB].c = cB;\r\n            this.m_positions[indexB].a = aB;\r\n        }\r\n        // We can't expect minSpeparation >= -b2_linearSlop because we don't\r\n        // push the separation above -b2_linearSlop.\r\n        return minSeparation > (-3 * b2_linearSlop);\r\n    }\r\n    SolveTOIPositionConstraints(toiIndexA, toiIndexB) {\r\n        const xfA = b2ContactSolver.SolveTOIPositionConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.SolveTOIPositionConstraints_s_xfB;\r\n        const psm = b2ContactSolver.SolveTOIPositionConstraints_s_psm;\r\n        const rA = b2ContactSolver.SolveTOIPositionConstraints_s_rA;\r\n        const rB = b2ContactSolver.SolveTOIPositionConstraints_s_rB;\r\n        const P = b2ContactSolver.SolveTOIPositionConstraints_s_P;\r\n        let minSeparation = 0;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const pc = this.m_positionConstraints[i];\r\n            const indexA = pc.indexA;\r\n            const indexB = pc.indexB;\r\n            const localCenterA = pc.localCenterA;\r\n            const localCenterB = pc.localCenterB;\r\n            const pointCount = pc.pointCount;\r\n            let mA = 0;\r\n            let iA = 0;\r\n            if (indexA === toiIndexA || indexA === toiIndexB) {\r\n                mA = pc.invMassA;\r\n                iA = pc.invIA;\r\n            }\r\n            let mB = 0;\r\n            let iB = 0;\r\n            if (indexB === toiIndexA || indexB === toiIndexB) {\r\n                mB = pc.invMassB;\r\n                iB = pc.invIB;\r\n            }\r\n            const cA = this.m_positions[indexA].c;\r\n            let aA = this.m_positions[indexA].a;\r\n            const cB = this.m_positions[indexB].c;\r\n            let aB = this.m_positions[indexB].a;\r\n            // Solve normal constraints\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                xfA.q.SetAngle(aA);\r\n                xfB.q.SetAngle(aB);\r\n                b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n                b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n                psm.Initialize(pc, xfA, xfB, j);\r\n                const normal = psm.normal;\r\n                const point = psm.point;\r\n                const separation = psm.separation;\r\n                // b2Vec2 rA = point - cA;\r\n                b2Vec2.SubVV(point, cA, rA);\r\n                // b2Vec2 rB = point - cB;\r\n                b2Vec2.SubVV(point, cB, rB);\r\n                // Track max constraint error.\r\n                minSeparation = b2Min(minSeparation, separation);\r\n                // Prevent large corrections and allow slop.\r\n                const C = b2Clamp(b2_toiBaumgarte * (separation + b2_linearSlop), (-b2_maxLinearCorrection), 0);\r\n                // Compute the effective mass.\r\n                // float32 rnA = b2Cross(rA, normal);\r\n                const rnA = b2Vec2.CrossVV(rA, normal);\r\n                // float32 rnB = b2Cross(rB, normal);\r\n                const rnB = b2Vec2.CrossVV(rB, normal);\r\n                // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                const K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                // Compute normal impulse\r\n                const impulse = K > 0 ? -C / K : 0;\r\n                // b2Vec2 P = impulse * normal;\r\n                b2Vec2.MulSV(impulse, normal, P);\r\n                // cA -= mA * P;\r\n                cA.SelfMulSub(mA, P);\r\n                // aA -= iA * b2Cross(rA, P);\r\n                aA -= iA * b2Vec2.CrossVV(rA, P);\r\n                // cB += mB * P;\r\n                cB.SelfMulAdd(mB, P);\r\n                // aB += iB * b2Cross(rB, P);\r\n                aB += iB * b2Vec2.CrossVV(rB, P);\r\n            }\r\n            // this.m_positions[indexA].c = cA;\r\n            this.m_positions[indexA].a = aA;\r\n            // this.m_positions[indexB].c = cB;\r\n            this.m_positions[indexB].a = aB;\r\n        }\r\n        // We can't expect minSpeparation >= -b2_linearSlop because we don't\r\n        // push the separation above -b2_linearSlop.\r\n        return minSeparation >= -1.5 * b2_linearSlop;\r\n    }\r\n}\r\nb2ContactSolver.InitializeVelocityConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.InitializeVelocityConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.InitializeVelocityConstraints_s_worldManifold = new b2WorldManifold();\r\nb2ContactSolver.WarmStart_s_P = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv1 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv2 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_a = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_b = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_x = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_d = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P1 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P2 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P1P2 = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.SolvePositionConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.SolvePositionConstraints_s_psm = new b2PositionSolverManifold();\r\nb2ContactSolver.SolvePositionConstraints_s_rA = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_rB = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_psm = new b2PositionSolverManifold();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_rA = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_rB = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_maxFloat, b2_timeToSleep } from \"../Common/b2Settings\";\r\nimport { b2_maxTranslation, b2_maxTranslationSquared } from \"../Common/b2Settings\";\r\nimport { b2_maxRotation, b2_maxRotationSquared } from \"../Common/b2Settings\";\r\nimport { b2_linearSleepTolerance, b2_angularSleepTolerance } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2ContactSolver, b2ContactSolverDef } from \"./Contacts/b2ContactSolver\";\r\nimport { b2BodyType } from \"./b2Body\";\r\nimport { b2SolverData, b2Position, b2Velocity } from \"./b2TimeStep\";\r\nimport { b2ContactImpulse } from \"./b2WorldCallbacks\";\r\n/*\r\nPosition Correction Notes\r\n=========================\r\nI tried the several algorithms for position correction of the 2D revolute joint.\r\nI looked at these systems:\r\n- simple pendulum (1m diameter sphere on massless 5m stick) with initial angular velocity of 100 rad/s.\r\n- suspension bridge with 30 1m long planks of length 1m.\r\n- multi-link chain with 30 1m long links.\r\n\r\nHere are the algorithms:\r\n\r\nBaumgarte - A fraction of the position error is added to the velocity error. There is no\r\nseparate position solver.\r\n\r\nPseudo Velocities - After the velocity solver and position integration,\r\nthe position error, Jacobian, and effective mass are recomputed. Then\r\nthe velocity constraints are solved with pseudo velocities and a fraction\r\nof the position error is added to the pseudo velocity error. The pseudo\r\nvelocities are initialized to zero and there is no warm-starting. After\r\nthe position solver, the pseudo velocities are added to the positions.\r\nThis is also called the First Order World method or the Position LCP method.\r\n\r\nModified Nonlinear Gauss-Seidel (NGS) - Like Pseudo Velocities except the\r\nposition error is re-computed for each constraint and the positions are updated\r\nafter the constraint is solved. The radius vectors (aka Jacobians) are\r\nre-computed too (otherwise the algorithm has horrible instability). The pseudo\r\nvelocity states are not needed because they are effectively zero at the beginning\r\nof each iteration. Since we have the current position error, we allow the\r\niterations to terminate early if the error becomes smaller than b2_linearSlop.\r\n\r\nFull NGS or just NGS - Like Modified NGS except the effective mass are re-computed\r\neach time a constraint is solved.\r\n\r\nHere are the results:\r\nBaumgarte - this is the cheapest algorithm but it has some stability problems,\r\nespecially with the bridge. The chain links separate easily close to the root\r\nand they jitter as they struggle to pull together. This is one of the most common\r\nmethods in the field. The big drawback is that the position correction artificially\r\naffects the momentum, thus leading to instabilities and false bounce. I used a\r\nbias factor of 0.2. A larger bias factor makes the bridge less stable, a smaller\r\nfactor makes joints and contacts more spongy.\r\n\r\nPseudo Velocities - the is more stable than the Baumgarte method. The bridge is\r\nstable. However, joints still separate with large angular velocities. Drag the\r\nsimple pendulum in a circle quickly and the joint will separate. The chain separates\r\neasily and does not recover. I used a bias factor of 0.2. A larger value lead to\r\nthe bridge collapsing when a heavy cube drops on it.\r\n\r\nModified NGS - this algorithm is better in some ways than Baumgarte and Pseudo\r\nVelocities, but in other ways it is worse. The bridge and chain are much more\r\nstable, but the simple pendulum goes unstable at high angular velocities.\r\n\r\nFull NGS - stable in all tests. The joints display good stiffness. The bridge\r\nstill sags, but this is better than infinite forces.\r\n\r\nRecommendations\r\nPseudo Velocities are not really worthwhile because the bridge and chain cannot\r\nrecover from joint separation. In other cases the benefit over Baumgarte is small.\r\n\r\nModified NGS is not a robust method for the revolute joint due to the violent\r\ninstability seen in the simple pendulum. Perhaps it is viable with other constraint\r\ntypes, especially scalar constraints where the effective mass is a scalar.\r\n\r\nThis leaves Baumgarte and Full NGS. Baumgarte has small, but manageable instabilities\r\nand is very fast. I don't think we can escape Baumgarte, especially in highly\r\ndemanding cases where high constraint fidelity is not needed.\r\n\r\nFull NGS is robust and easy on the eyes. I recommend this as an option for\r\nhigher fidelity simulation and certainly for suspension bridges and long chains.\r\nFull NGS might be a good choice for ragdolls, especially motorized ragdolls where\r\njoint separation can be problematic. The number of NGS iterations can be reduced\r\nfor better performance without harming robustness much.\r\n\r\nEach joint in a can be handled differently in the position solver. So I recommend\r\na system where the user can select the algorithm on a per joint basis. I would\r\nprobably default to the slower Full NGS and let the user select the faster\r\nBaumgarte method in performance critical scenarios.\r\n*/\r\n/*\r\nCache Performance\r\n\r\nThe Box2D solvers are dominated by cache misses. Data structures are designed\r\nto increase the number of cache hits. Much of misses are due to random access\r\nto body data. The constraint structures are iterated over linearly, which leads\r\nto few cache misses.\r\n\r\nThe bodies are not accessed during iteration. Instead read only data, such as\r\nthe mass values are stored with the constraints. The mutable data are the constraint\r\nimpulses and the bodies velocities/positions. The impulses are held inside the\r\nconstraint structures. The body velocities/positions are held in compact, temporary\r\narrays to increase the number of cache hits. Linear and angular velocity are\r\nstored in a single array since multiple arrays lead to multiple misses.\r\n*/\r\n/*\r\n2D Rotation\r\n\r\nR = [cos(theta) -sin(theta)]\r\n    [sin(theta) cos(theta) ]\r\n\r\nthetaDot = omega\r\n\r\nLet q1 = cos(theta), q2 = sin(theta).\r\nR = [q1 -q2]\r\n    [q2  q1]\r\n\r\nq1Dot = -thetaDot * q2\r\nq2Dot = thetaDot * q1\r\n\r\nq1_new = q1_old - dt * w * q2\r\nq2_new = q2_old + dt * w * q1\r\nthen normalize.\r\n\r\nThis might be faster than computing sin+cos.\r\nHowever, we can compute sin+cos of the same angle fast.\r\n*/\r\nexport class b2Island {\r\n    constructor() {\r\n        this.m_allocator = null;\r\n        this.m_listener = null;\r\n        this.m_bodies = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_contacts = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_joints = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_positions = b2Position.MakeArray(1024); // TODO: b2Settings\r\n        this.m_velocities = b2Velocity.MakeArray(1024); // TODO: b2Settings\r\n        this.m_bodyCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_bodyCapacity = 0;\r\n        this.m_contactCapacity = 0;\r\n        this.m_jointCapacity = 0;\r\n    }\r\n    Initialize(bodyCapacity, contactCapacity, jointCapacity, allocator, listener) {\r\n        this.m_bodyCapacity = bodyCapacity;\r\n        this.m_contactCapacity = contactCapacity;\r\n        this.m_jointCapacity = jointCapacity;\r\n        this.m_bodyCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_allocator = allocator;\r\n        this.m_listener = listener;\r\n        // TODO:\r\n        while (this.m_bodies.length < bodyCapacity) {\r\n            this.m_bodies[this.m_bodies.length] = null;\r\n        }\r\n        // TODO:\r\n        while (this.m_contacts.length < contactCapacity) {\r\n            this.m_contacts[this.m_contacts.length] = null;\r\n        }\r\n        // TODO:\r\n        while (this.m_joints.length < jointCapacity) {\r\n            this.m_joints[this.m_joints.length] = null;\r\n        }\r\n        // TODO:\r\n        if (this.m_positions.length < bodyCapacity) {\r\n            const new_length = b2Max(this.m_positions.length * 2, bodyCapacity);\r\n            while (this.m_positions.length < new_length) {\r\n                this.m_positions[this.m_positions.length] = new b2Position();\r\n            }\r\n        }\r\n        // TODO:\r\n        if (this.m_velocities.length < bodyCapacity) {\r\n            const new_length = b2Max(this.m_velocities.length * 2, bodyCapacity);\r\n            while (this.m_velocities.length < new_length) {\r\n                this.m_velocities[this.m_velocities.length] = new b2Velocity();\r\n            }\r\n        }\r\n    }\r\n    Clear() {\r\n        this.m_bodyCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_jointCount = 0;\r\n    }\r\n    AddBody(body) {\r\n        ///b2Assert(this.m_bodyCount < this.m_bodyCapacity);\r\n        body.m_islandIndex = this.m_bodyCount;\r\n        this.m_bodies[this.m_bodyCount++] = body;\r\n    }\r\n    AddContact(contact) {\r\n        ///b2Assert(this.m_contactCount < this.m_contactCapacity);\r\n        this.m_contacts[this.m_contactCount++] = contact;\r\n    }\r\n    AddJoint(joint) {\r\n        ///b2Assert(this.m_jointCount < this.m_jointCapacity);\r\n        this.m_joints[this.m_jointCount++] = joint;\r\n    }\r\n    Solve(profile, step, gravity, allowSleep) {\r\n        const timer = b2Island.s_timer.Reset();\r\n        const h = step.dt;\r\n        // Integrate velocities and apply damping. Initialize the body state.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const b = this.m_bodies[i];\r\n            /*const c: b2Vec2 =*/ this.m_positions[i].c.Copy(b.m_sweep.c);\r\n            const a = b.m_sweep.a;\r\n            const v = this.m_velocities[i].v.Copy(b.m_linearVelocity);\r\n            let w = b.m_angularVelocity;\r\n            // Store positions for continuous collision.\r\n            b.m_sweep.c0.Copy(b.m_sweep.c);\r\n            b.m_sweep.a0 = b.m_sweep.a;\r\n            if (b.m_type === b2BodyType.b2_dynamicBody) {\r\n                // Integrate velocities.\r\n                v.x += h * (b.m_gravityScale * gravity.x + b.m_invMass * b.m_force.x);\r\n                v.y += h * (b.m_gravityScale * gravity.y + b.m_invMass * b.m_force.y);\r\n                w += h * b.m_invI * b.m_torque;\r\n                // Apply damping.\r\n                // ODE: dv/dt + c * v = 0\r\n                // Solution: v(t) = v0 * exp(-c * t)\r\n                // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\r\n                // v2 = exp(-c * dt) * v1\r\n                // Pade approximation:\r\n                // v2 = v1 * 1 / (1 + c * dt)\r\n                v.SelfMul(1.0 / (1.0 + h * b.m_linearDamping));\r\n                w *= 1.0 / (1.0 + h * b.m_angularDamping);\r\n            }\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n        }\r\n        timer.Reset();\r\n        // Solver data\r\n        const solverData = b2Island.s_solverData;\r\n        solverData.step.Copy(step);\r\n        solverData.positions = this.m_positions;\r\n        solverData.velocities = this.m_velocities;\r\n        // Initialize velocity constraints.\r\n        const contactSolverDef = b2Island.s_contactSolverDef;\r\n        contactSolverDef.step.Copy(step);\r\n        contactSolverDef.contacts = this.m_contacts;\r\n        contactSolverDef.count = this.m_contactCount;\r\n        contactSolverDef.positions = this.m_positions;\r\n        contactSolverDef.velocities = this.m_velocities;\r\n        contactSolverDef.allocator = this.m_allocator;\r\n        const contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\r\n        contactSolver.InitializeVelocityConstraints();\r\n        if (step.warmStarting) {\r\n            contactSolver.WarmStart();\r\n        }\r\n        for (let i = 0; i < this.m_jointCount; ++i) {\r\n            this.m_joints[i].InitVelocityConstraints(solverData);\r\n        }\r\n        profile.solveInit = timer.GetMilliseconds();\r\n        // Solve velocity constraints.\r\n        timer.Reset();\r\n        for (let i = 0; i < step.velocityIterations; ++i) {\r\n            for (let j = 0; j < this.m_jointCount; ++j) {\r\n                this.m_joints[j].SolveVelocityConstraints(solverData);\r\n            }\r\n            contactSolver.SolveVelocityConstraints();\r\n        }\r\n        // Store impulses for warm starting\r\n        contactSolver.StoreImpulses();\r\n        profile.solveVelocity = timer.GetMilliseconds();\r\n        // Integrate positions.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const c = this.m_positions[i].c;\r\n            let a = this.m_positions[i].a;\r\n            const v = this.m_velocities[i].v;\r\n            let w = this.m_velocities[i].w;\r\n            // Check for large velocities\r\n            const translation = b2Vec2.MulSV(h, v, b2Island.s_translation);\r\n            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\r\n                const ratio = b2_maxTranslation / translation.Length();\r\n                v.SelfMul(ratio);\r\n            }\r\n            const rotation = h * w;\r\n            if (rotation * rotation > b2_maxRotationSquared) {\r\n                const ratio = b2_maxRotation / b2Abs(rotation);\r\n                w *= ratio;\r\n            }\r\n            // Integrate\r\n            c.x += h * v.x;\r\n            c.y += h * v.y;\r\n            a += h * w;\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n        }\r\n        // Solve position constraints\r\n        timer.Reset();\r\n        let positionSolved = false;\r\n        for (let i = 0; i < step.positionIterations; ++i) {\r\n            const contactsOkay = contactSolver.SolvePositionConstraints();\r\n            let jointsOkay = true;\r\n            for (let j = 0; j < this.m_jointCount; ++j) {\r\n                const jointOkay = this.m_joints[j].SolvePositionConstraints(solverData);\r\n                jointsOkay = jointsOkay && jointOkay;\r\n            }\r\n            if (contactsOkay && jointsOkay) {\r\n                // Exit early if the position errors are small.\r\n                positionSolved = true;\r\n                break;\r\n            }\r\n        }\r\n        // Copy state buffers back to the bodies\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const body = this.m_bodies[i];\r\n            body.m_sweep.c.Copy(this.m_positions[i].c);\r\n            body.m_sweep.a = this.m_positions[i].a;\r\n            body.m_linearVelocity.Copy(this.m_velocities[i].v);\r\n            body.m_angularVelocity = this.m_velocities[i].w;\r\n            body.SynchronizeTransform();\r\n        }\r\n        profile.solvePosition = timer.GetMilliseconds();\r\n        this.Report(contactSolver.m_velocityConstraints);\r\n        if (allowSleep) {\r\n            let minSleepTime = b2_maxFloat;\r\n            const linTolSqr = b2_linearSleepTolerance * b2_linearSleepTolerance;\r\n            const angTolSqr = b2_angularSleepTolerance * b2_angularSleepTolerance;\r\n            for (let i = 0; i < this.m_bodyCount; ++i) {\r\n                const b = this.m_bodies[i];\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    continue;\r\n                }\r\n                if (!b.m_autoSleepFlag ||\r\n                    b.m_angularVelocity * b.m_angularVelocity > angTolSqr ||\r\n                    b2Vec2.DotVV(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {\r\n                    b.m_sleepTime = 0;\r\n                    minSleepTime = 0;\r\n                }\r\n                else {\r\n                    b.m_sleepTime += h;\r\n                    minSleepTime = b2Min(minSleepTime, b.m_sleepTime);\r\n                }\r\n            }\r\n            if (minSleepTime >= b2_timeToSleep && positionSolved) {\r\n                for (let i = 0; i < this.m_bodyCount; ++i) {\r\n                    const b = this.m_bodies[i];\r\n                    b.SetAwake(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveTOI(subStep, toiIndexA, toiIndexB) {\r\n        ///b2Assert(toiIndexA < this.m_bodyCount);\r\n        ///b2Assert(toiIndexB < this.m_bodyCount);\r\n        // Initialize the body state.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const b = this.m_bodies[i];\r\n            this.m_positions[i].c.Copy(b.m_sweep.c);\r\n            this.m_positions[i].a = b.m_sweep.a;\r\n            this.m_velocities[i].v.Copy(b.m_linearVelocity);\r\n            this.m_velocities[i].w = b.m_angularVelocity;\r\n        }\r\n        const contactSolverDef = b2Island.s_contactSolverDef;\r\n        contactSolverDef.contacts = this.m_contacts;\r\n        contactSolverDef.count = this.m_contactCount;\r\n        contactSolverDef.allocator = this.m_allocator;\r\n        contactSolverDef.step.Copy(subStep);\r\n        contactSolverDef.positions = this.m_positions;\r\n        contactSolverDef.velocities = this.m_velocities;\r\n        const contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\r\n        // Solve position constraints.\r\n        for (let i = 0; i < subStep.positionIterations; ++i) {\r\n            const contactsOkay = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB);\r\n            if (contactsOkay) {\r\n                break;\r\n            }\r\n        }\r\n        /*\r\n        #if 0\r\n          // Is the new position really safe?\r\n          for (int32 i = 0; i < this.m_contactCount; ++i) {\r\n            b2Contact* c = this.m_contacts[i];\r\n            b2Fixture* fA = c.GetFixtureA();\r\n            b2Fixture* fB = c.GetFixtureB();\r\n      \r\n            b2Body* bA = fA.GetBody();\r\n            b2Body* bB = fB.GetBody();\r\n      \r\n            int32 indexA = c.GetChildIndexA();\r\n            int32 indexB = c.GetChildIndexB();\r\n      \r\n            b2DistanceInput input;\r\n            input.proxyA.Set(fA.GetShape(), indexA);\r\n            input.proxyB.Set(fB.GetShape(), indexB);\r\n            input.transformA = bA.GetTransform();\r\n            input.transformB = bB.GetTransform();\r\n            input.useRadii = false;\r\n      \r\n            b2DistanceOutput output;\r\n            b2SimplexCache cache;\r\n            cache.count = 0;\r\n            b2Distance(&output, &cache, &input);\r\n      \r\n            if (output.distance === 0 || cache.count === 3) {\r\n              cache.count += 0;\r\n            }\r\n          }\r\n        #endif\r\n        */\r\n        // Leap of faith to new safe state.\r\n        this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);\r\n        this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a;\r\n        this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);\r\n        this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a;\r\n        // No warm starting is needed for TOI events because warm\r\n        // starting impulses were applied in the discrete solver.\r\n        contactSolver.InitializeVelocityConstraints();\r\n        // Solve velocity constraints.\r\n        for (let i = 0; i < subStep.velocityIterations; ++i) {\r\n            contactSolver.SolveVelocityConstraints();\r\n        }\r\n        // Don't store the TOI contact forces for warm starting\r\n        // because they can be quite large.\r\n        const h = subStep.dt;\r\n        // Integrate positions\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const c = this.m_positions[i].c;\r\n            let a = this.m_positions[i].a;\r\n            const v = this.m_velocities[i].v;\r\n            let w = this.m_velocities[i].w;\r\n            // Check for large velocities\r\n            const translation = b2Vec2.MulSV(h, v, b2Island.s_translation);\r\n            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\r\n                const ratio = b2_maxTranslation / translation.Length();\r\n                v.SelfMul(ratio);\r\n            }\r\n            const rotation = h * w;\r\n            if (rotation * rotation > b2_maxRotationSquared) {\r\n                const ratio = b2_maxRotation / b2Abs(rotation);\r\n                w *= ratio;\r\n            }\r\n            // Integrate\r\n            c.SelfMulAdd(h, v);\r\n            a += h * w;\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n            // Sync bodies\r\n            const body = this.m_bodies[i];\r\n            body.m_sweep.c.Copy(c);\r\n            body.m_sweep.a = a;\r\n            body.m_linearVelocity.Copy(v);\r\n            body.m_angularVelocity = w;\r\n            body.SynchronizeTransform();\r\n        }\r\n        this.Report(contactSolver.m_velocityConstraints);\r\n    }\r\n    Report(constraints) {\r\n        if (this.m_listener === null) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.m_contactCount; ++i) {\r\n            const c = this.m_contacts[i];\r\n            if (!c) {\r\n                continue;\r\n            }\r\n            const vc = constraints[i];\r\n            const impulse = b2Island.s_impulse;\r\n            impulse.count = vc.pointCount;\r\n            for (let j = 0; j < vc.pointCount; ++j) {\r\n                impulse.normalImpulses[j] = vc.points[j].normalImpulse;\r\n                impulse.tangentImpulses[j] = vc.points[j].tangentImpulse;\r\n            }\r\n            this.m_listener.PostSolve(c, impulse);\r\n        }\r\n    }\r\n}\r\nb2Island.s_timer = new b2Timer();\r\nb2Island.s_solverData = new b2SolverData();\r\nb2Island.s_contactSolverDef = new b2ContactSolverDef();\r\nb2Island.s_contactSolver = new b2ContactSolver();\r\nb2Island.s_translation = new b2Vec2();\r\nb2Island.s_impulse = new b2ContactImpulse();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJJc2xhbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9Cb3gyRC9Cb3gyRC9EeW5hbWljcy9iMklzbGFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzdFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR2pGLE9BQU8sRUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDOUMsT0FBTyxFQUF5QixZQUFZLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzRixPQUFPLEVBQUUsZ0JBQWdCLEVBQXFCLE1BQU0sb0JBQW9CLENBQUM7QUFFekU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBNkVFO0FBRUY7Ozs7Ozs7Ozs7Ozs7O0VBY0U7QUFFRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBcUJFO0FBRUYsTUFBTTtJQUFOO1FBQ1MsZ0JBQVcsR0FBUSxJQUFJLENBQUM7UUFDeEIsZUFBVSxHQUFzQixJ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","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_invalidParticleIndex } from \"../Common/b2Settings\";\r\nimport { b2Clamp, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\n/**\r\n * The particle type. Can be combined with the | operator.\r\n */\r\nexport var b2ParticleFlag;\r\n(function (b2ParticleFlag) {\r\n    /// Water particle.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_waterParticle\"] = 0] = \"b2_waterParticle\";\r\n    /// Removed after next simulation step.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_zombieParticle\"] = 2] = \"b2_zombieParticle\";\r\n    /// Zero velocity.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_wallParticle\"] = 4] = \"b2_wallParticle\";\r\n    /// With restitution from stretching.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_springParticle\"] = 8] = \"b2_springParticle\";\r\n    /// With restitution from deformation.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_elasticParticle\"] = 16] = \"b2_elasticParticle\";\r\n    /// With viscosity.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_viscousParticle\"] = 32] = \"b2_viscousParticle\";\r\n    /// Without isotropic pressure.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_powderParticle\"] = 64] = \"b2_powderParticle\";\r\n    /// With surface tension.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_tensileParticle\"] = 128] = \"b2_tensileParticle\";\r\n    /// Mix color between contacting particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_colorMixingParticle\"] = 256] = \"b2_colorMixingParticle\";\r\n    /// Call b2DestructionListener on destruction.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_destructionListenerParticle\"] = 512] = \"b2_destructionListenerParticle\";\r\n    /// Prevents other particles from leaking.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_barrierParticle\"] = 1024] = \"b2_barrierParticle\";\r\n    /// Less compressibility.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_staticPressureParticle\"] = 2048] = \"b2_staticPressureParticle\";\r\n    /// Makes pairs or triads with other particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_reactiveParticle\"] = 4096] = \"b2_reactiveParticle\";\r\n    /// With high repulsive force.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_repulsiveParticle\"] = 8192] = \"b2_repulsiveParticle\";\r\n    /// Call b2ContactListener when this particle is about to interact with\r\n    /// a rigid body or stops interacting with a rigid body.\r\n    /// This results in an expensive operation compared to using\r\n    /// b2_fixtureContactFilterParticle to detect collisions between\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactListenerParticle\"] = 16384] = \"b2_fixtureContactListenerParticle\";\r\n    /// Call b2ContactListener when this particle is about to interact with\r\n    /// another particle or stops interacting with another particle.\r\n    /// This results in an expensive operation compared to using\r\n    /// b2_particleContactFilterParticle to detect collisions between\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactListenerParticle\"] = 32768] = \"b2_particleContactListenerParticle\";\r\n    /// Call b2ContactFilter when this particle interacts with rigid bodies.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactFilterParticle\"] = 65536] = \"b2_fixtureContactFilterParticle\";\r\n    /// Call b2ContactFilter when this particle interacts with other\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactFilterParticle\"] = 131072] = \"b2_particleContactFilterParticle\";\r\n})(b2ParticleFlag || (b2ParticleFlag = {}));\r\nexport class b2ParticleDef {\r\n    constructor() {\r\n        this.flags = 0;\r\n        this.position = new b2Vec2();\r\n        this.velocity = new b2Vec2();\r\n        this.color = new b2Color();\r\n        this.lifetime = 0.0;\r\n        this.userData = null;\r\n        this.group = null;\r\n    }\r\n}\r\nexport function b2CalculateParticleIterations(gravity, radius, timeStep) {\r\n    // In some situations you may want more particle iterations than this,\r\n    // but to avoid excessive cycle cost, don't recommend more than this.\r\n    const B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;\r\n    const B2_RADIUS_THRESHOLD = 0.01;\r\n    const iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);\r\n    return b2Clamp(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);\r\n}\r\nexport class b2ParticleHandle {\r\n    constructor() {\r\n        this.m_index = b2_invalidParticleIndex;\r\n    }\r\n    GetIndex() { return this.m_index; }\r\n    SetIndex(index) { this.m_index = index; }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQYXJ0aWNsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL0JveDJEL0JveDJEL1BhcnRpY2xlL2IyUGFydGljbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCx5QkFBeUI7QUFFekIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHM0M7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxjQThDWDtBQTlDRCxXQUFZLGNBQWM7SUFDeEIsbUJBQW1CO0lBQ25CLDJFQUFvQixDQUFBO0lBQ3BCLHVDQUF1QztJQUN2Qyw2RUFBMEIsQ0FBQTtJQUMxQixrQkFBa0I7SUFDbEIseUVBQXdCLENBQUE7SUFDeEIscUNBQXFDO0lBQ3JDLDZFQUEwQixDQUFBO0lBQzFCLHNDQUFzQztJQUN0QyxnRkFBMkIsQ0FBQTtJQUMzQixtQkFBbUI7SUFDbkIsZ0ZBQTJCLENBQUE7SUFDM0IsK0JBQStCO0lBQy9CLDhFQUEwQixDQUFBO0lBQzFCLHlCQUF5QjtJQUN6QixpRkFBMkIsQ0FBQTtJQUMzQiwyQ0FBMkM7SUFDM0MseUZBQStCLENBQUE7SUFDL0IsOENBQThDO0lBQzlDLHlHQUF1QyxDQUFBO0lBQ3ZDLDBDQUEwQztJQUMxQyxrRkFBNEIsQ0FBQTtJQUM1Qix5QkFBeUI7SUFDekIsZ0dBQW1DLENBQUE7SUFDbkMsK0NBQStDO0lBQy9DLG9GQUE2QixDQUFBO0lBQzdCLDhCQUE4QjtJQUM5QixzRkFBOEIsQ0FBQTtJQUM5Qix1RUFBdUU7SUFDdkUsd0RBQXdEO0lBQ3hELDREQUE0RDtJQUM1RCxnRUFBZ0U7SUFDaEUsY0FBYztJQUNkLGlIQUEyQyxDQUFBO0lBQzNDLHVFQUF1RTtJQUN2RSxnRUFBZ0U7SUFDaEUsNERBQTREO0lBQzVELGlFQUFpRTtJQUNqRSxjQUFjO0lBQ2QsbUhBQTRDLENBQUE7SUFDNUMsd0VBQXdFO0lBQ3hFLDZHQUF5QyxDQUFBO0lBQ3pDLGdFQUFnRTtJQUNoRSxjQUFjO0lBQ2QsZ0hBQTBDLENBQUE7QUFDNUMsQ0FBQyxFQTlDVyxjQUFjLEtBQWQsY0FBYyxRQThDekI7QUFFRCxNQUFNO0lBQU47UUFDRSxVQUFLLEdBQW1CLENBQUMsQ0FBQztRQUMxQixhQUFRLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNoQyxhQUFRLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNoQyxVQUFLLEdBQVksSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMvQixhQUFRLEdBQVcsR0FBRyxDQUFDO1FBQ3ZCLGFBQVEsR0FBUSxJQUFJLENBQUM7UUFDckIsVUFBSyxHQUFvQixJQUFJLENBQUM7SUFDaEMsQ0FBQztDQUFBO0FBRUQsTUFBTSx3Q0FBd0MsT0FBZSxFQUFFLE1BQWMsRUFBRSxRQUFnQjtJQUM3RixzRUFBc0U7SUFDdEUscUVBQXFFO0lBQ3JFLE1BQU0sc0NBQXNDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQzdGLE9BQU8sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBRUQsTUFBTTtJQUFOO1FBQ1MsWUFBTyxHQUFXLHVCQUF1QixDQUFDO0lBR25ELENBQUM7SUFGUSxRQUFRLEtBQWEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMzQyxRQUFRLENBQUMsS0FBYSxJQUFVLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUMvRDtBQUVELFNBQVMifQ==","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2Vec2, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\nexport var b2ParticleGroupFlag;\r\n(function (b2ParticleGroupFlag) {\r\n    /// Prevents overlapping or leaking.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_solidParticleGroup\"] = 1] = \"b2_solidParticleGroup\";\r\n    /// Keeps its shape.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_rigidParticleGroup\"] = 2] = \"b2_rigidParticleGroup\";\r\n    /// Won't be destroyed if it gets empty.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupCanBeEmpty\"] = 4] = \"b2_particleGroupCanBeEmpty\";\r\n    /// Will be destroyed on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupWillBeDestroyed\"] = 8] = \"b2_particleGroupWillBeDestroyed\";\r\n    /// Updates depth data on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupNeedsUpdateDepth\"] = 16] = \"b2_particleGroupNeedsUpdateDepth\";\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupInternalMask\"] = 24] = \"b2_particleGroupInternalMask\";\r\n})(b2ParticleGroupFlag || (b2ParticleGroupFlag = {}));\r\nexport class b2ParticleGroupDef {\r\n    constructor() {\r\n        this.flags = 0;\r\n        this.groupFlags = 0;\r\n        this.position = new b2Vec2();\r\n        this.angle = 0.0;\r\n        this.linearVelocity = new b2Vec2();\r\n        this.angularVelocity = 0.0;\r\n        this.color = new b2Color();\r\n        this.strength = 1.0;\r\n        this.shape = null;\r\n        this.shapes = null;\r\n        this.shapeCount = 0;\r\n        this.stride = 0;\r\n        this.particleCount = 0;\r\n        this.positionData = null;\r\n        this.lifetime = 0;\r\n        this.userData = null;\r\n        this.group = null;\r\n    }\r\n}\r\nexport class b2ParticleGroup {\r\n    constructor(system) {\r\n        this.m_system = null;\r\n        this.m_firstIndex = 0;\r\n        this.m_lastIndex = 0;\r\n        this.m_groupFlags = 0;\r\n        this.m_strength = 1.0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_timestamp = -1;\r\n        this.m_mass = 0.0;\r\n        this.m_inertia = 0.0;\r\n        this.m_center = new b2Vec2();\r\n        this.m_linearVelocity = new b2Vec2();\r\n        this.m_angularVelocity = 0.0;\r\n        this.m_transform = new b2Transform();\r\n        ///m_transform.SetIdentity();\r\n        this.m_userData = null;\r\n        this.m_system = system;\r\n    }\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    GetParticleSystem() {\r\n        return this.m_system;\r\n    }\r\n    GetParticleCount() {\r\n        return this.m_lastIndex - this.m_firstIndex;\r\n    }\r\n    GetBufferIndex() {\r\n        return this.m_firstIndex;\r\n    }\r\n    ContainsParticle(index) {\r\n        return this.m_firstIndex <= index && index < this.m_lastIndex;\r\n    }\r\n    GetAllParticleFlags() {\r\n        let flags = 0;\r\n        for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            flags |= this.m_system.m_flagsBuffer.data[i];\r\n        }\r\n        return flags;\r\n    }\r\n    GetGroupFlags() {\r\n        return this.m_groupFlags;\r\n    }\r\n    SetGroupFlags(flags) {\r\n        ///b2Assert((flags & b2ParticleGroupFlag.b2_particleGroupInternalMask) === 0);\r\n        flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\r\n        this.m_system.SetGroupFlags(this, flags);\r\n    }\r\n    GetMass() {\r\n        this.UpdateStatistics();\r\n        return this.m_mass;\r\n    }\r\n    GetInertia() {\r\n        this.UpdateStatistics();\r\n        return this.m_inertia;\r\n    }\r\n    GetCenter() {\r\n        this.UpdateStatistics();\r\n        return this.m_center;\r\n    }\r\n    GetLinearVelocity() {\r\n        this.UpdateStatistics();\r\n        return this.m_linearVelocity;\r\n    }\r\n    GetAngularVelocity() {\r\n        this.UpdateStatistics();\r\n        return this.m_angularVelocity;\r\n    }\r\n    GetTransform() {\r\n        return this.m_transform;\r\n    }\r\n    GetPosition() {\r\n        return this.m_transform.p;\r\n    }\r\n    GetAngle() {\r\n        return this.m_transform.q.GetAngle();\r\n    }\r\n    GetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n        const s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\r\n        this.UpdateStatistics();\r\n        ///  return m_linearVelocity + b2Cross(m_angularVelocity, worldPoint - m_center);\r\n        return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);\r\n    }\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    ApplyForce(force) {\r\n        this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\r\n    }\r\n    ApplyLinearImpulse(impulse) {\r\n        this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\r\n    }\r\n    DestroyParticles(callDestructionListener) {\r\n        ///b2Assert(this.m_system.m_world.IsLocked() === false);\r\n        if (this.m_system.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            this.m_system.DestroyParticle(i, callDestructionListener);\r\n        }\r\n    }\r\n    UpdateStatistics() {\r\n        const p = new b2Vec2();\r\n        const v = new b2Vec2();\r\n        if (this.m_timestamp !== this.m_system.m_timestamp) {\r\n            const m = this.m_system.GetParticleMass();\r\n            ///  this.m_mass = 0;\r\n            this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\r\n            this.m_center.SetZero();\r\n            this.m_linearVelocity.SetZero();\r\n            for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///  this.m_mass += m;\r\n                ///  this.m_center += m * this.m_system.m_positionBuffer.data[i];\r\n                this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\r\n                ///  this.m_linearVelocity += m * this.m_system.m_velocityBuffer.data[i];\r\n                this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\r\n            }\r\n            if (this.m_mass > 0) {\r\n                const inv_mass = 1 / this.m_mass;\r\n                ///this.m_center *= 1 / this.m_mass;\r\n                this.m_center.SelfMul(inv_mass);\r\n                ///this.m_linearVelocity *= 1 / this.m_mass;\r\n                this.m_linearVelocity.SelfMul(inv_mass);\r\n            }\r\n            this.m_inertia = 0;\r\n            this.m_angularVelocity = 0;\r\n            for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///b2Vec2 p = this.m_system.m_positionBuffer.data[i] - this.m_center;\r\n                b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\r\n                ///b2Vec2 v = this.m_system.m_velocityBuffer.data[i] - this.m_linearVelocity;\r\n                b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\r\n                this.m_inertia += m * b2Vec2.DotVV(p, p);\r\n                this.m_angularVelocity += m * b2Vec2.CrossVV(p, v);\r\n            }\r\n            if (this.m_inertia > 0) {\r\n                this.m_angularVelocity *= 1 / this.m_inertia;\r\n            }\r\n            this.m_timestamp = this.m_system.m_timestamp;\r\n        }\r\n    }\r\n}\r\nb2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0 = new b2Vec2();\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQYXJ0aWNsZUdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvUGFydGljbGUvYjJQYXJ0aWNsZUdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgseUJBQXlCO0FBRXpCLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSzNDLE1BQU0sQ0FBTixJQUFZLG1CQWFYO0FBYkQsV0FBWSxtQkFBbUI7SUFDN0Isb0NBQW9DO0lBQ3BDLCtGQUE4QixDQUFBO0lBQzlCLG9CQUFvQjtJQUNwQiwrRkFBOEIsQ0FBQTtJQUM5Qix3Q0FBd0M7SUFDeEMseUdBQW1DLENBQUE7SUFDbkMsOENBQThDO0lBQzlDLG1IQUF3QyxDQUFBO0lBQ3hDLCtDQUErQztJQUMvQyxzSEFBeUMsQ0FBQTtJQUV6Qyw4R0FBaUcsQ0FBQTtBQUNuRyxDQUFDLEVBYlcsbUJBQW1CLEtBQW5CLG1CQUFtQixRQWE5QjtBQUVELE1BQU07SUFBTjtRQUNFLFVBQUssR0FBbUIsQ0FBQyxDQUFDO1FBQzFCLGVBQVUsR0FBd0IsQ0FBQyxDQUFDO1FBQ3BDLGFBQVEsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLFVBQUssR0FBVyxHQUFHLENBQUM7UUFDcEIsbUJBQWMsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3RDLG9CQUFlLEdBQVcsR0FBRyxDQUFDO1FBQzlCLFVBQUssR0FBWSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQy9CLGFBQVEsR0FBVyxHQUFHLENBQUM7UUFDdkIsVUFBSyxHQUFZLElBQUksQ0FBQztRQUN0QixXQUFNLEdBQWMsSUFBSSxDQUFDO1FBQ3pCLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFDdkIsV0FBTSxHQUFXLENBQUMsQ0FBQztR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","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2MakeArray } from \"../Common/b2Settings\";\r\nfunction b2Assert(condition) { }\r\nexport class b2StackQueue {\r\n    constructor(capacity) {\r\n        this.m_front = 0;\r\n        this.m_back = 0;\r\n        this.m_capacity = 0;\r\n        this.m_buffer = b2MakeArray(capacity, (index) => null);\r\n        ///this.m_end = capacity; // TODO: this was wrong!\r\n        this.m_capacity = capacity;\r\n    }\r\n    Push(item) {\r\n        if (this.m_back >= this.m_capacity) {\r\n            for (let i = this.m_front; i < this.m_back; i++) {\r\n                this.m_buffer[i - this.m_front] = this.m_buffer[i];\r\n            }\r\n            this.m_back -= this.m_front;\r\n            this.m_front = 0;\r\n            if (this.m_back >= this.m_capacity) {\r\n                if (this.m_capacity > 0) {\r\n                    this.m_buffer.concat(b2MakeArray(this.m_capacity, (index) => null));\r\n                    this.m_capacity *= 2;\r\n                }\r\n                else {\r\n                    this.m_buffer.concat(b2MakeArray(1, (index) => null));\r\n                    this.m_capacity = 1;\r\n                }\r\n                ///m_buffer = (T*) m_allocator->Reallocate(m_buffer, sizeof(T) * m_capacity);\r\n            }\r\n        }\r\n        this.m_buffer[this.m_back] = item;\r\n        this.m_back++;\r\n    }\r\n    Pop() {\r\n        b2Assert(this.m_front < this.m_back);\r\n        delete this.m_buffer[this.m_front];\r\n        this.m_front++;\r\n    }\r\n    Empty() {\r\n        b2Assert(this.m_front <= this.m_back);\r\n        return this.m_front === this.m_back;\r\n    }\r\n    Front() {\r\n        return this.m_buffer[this.m_front];\r\n    }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTdGFja1F1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vQm94MkQvQm94MkQvUGFydGljbGUvYjJTdGFja1F1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgseUJBQXlCO0FBRXpCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxrQkFBa0IsU0FBa0IsSUFBRyxDQUFDO0FBRXhDLE1BQU07SUFLSixZQUFZLFFBQWdCO1FBSDVCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFDcEIsV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBRXJCLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFDRCxJQUFJLENBQUMsSUFBTztRQUNWLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEQ7WUFDRCxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xDLElBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNwRSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQztpQkFDdEI7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7aUJBQ3JCO2dCQUNELDZFQUE2RTthQUM5RTtTQUNGO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBQ0QsR0FBRztRQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBQ0QsS0FBSztRQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0lBQ0QsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBRUQsU0FBUyJ9","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_maxFloat, b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2StackQueue } from \"./b2StackQueue\";\r\nfunction b2Assert(condition) { }\r\n/**\r\n * A field representing the nearest generator from each point.\r\n */\r\nexport class b2VoronoiDiagram {\r\n    constructor(generatorCapacity) {\r\n        this.m_generatorBuffer = null;\r\n        this.m_generatorCapacity = 0;\r\n        this.m_generatorCount = 0;\r\n        this.m_countX = 0;\r\n        this.m_countY = 0;\r\n        this.m_diagram = null;\r\n        this.m_generatorBuffer = b2MakeArray(generatorCapacity, (index) => new b2VoronoiDiagram.Generator());\r\n        this.m_generatorCapacity = generatorCapacity;\r\n    }\r\n    /**\r\n     * Add a generator.\r\n     *\r\n     * @param center the position of the generator.\r\n     * @param tag a tag used to identify the generator in callback functions.\r\n     * @param necessary whether to callback for nodes associated with the generator.\r\n     */\r\n    AddGenerator(center, tag, necessary) {\r\n        b2Assert(this.m_generatorCount < this.m_generatorCapacity);\r\n        let g = this.m_generatorBuffer[this.m_generatorCount++];\r\n        g.center.Copy(center);\r\n        g.tag = tag;\r\n        g.necessary = necessary;\r\n    }\r\n    /**\r\n     * Generate the Voronoi diagram. It is rasterized with a given\r\n     * interval in the same range as the necessary generators exist.\r\n     *\r\n     * @param radius the interval of the diagram.\r\n     * @param margin margin for which the range of the diagram is extended.\r\n     */\r\n    Generate(radius, margin) {\r\n        b2Assert(this.m_diagram === null);\r\n        let inverseRadius = 1 / radius;\r\n        let lower = new b2Vec2(+b2_maxFloat, +b2_maxFloat);\r\n        let upper = new b2Vec2(-b2_maxFloat, -b2_maxFloat);\r\n        let necessary_count = 0;\r\n        for (let k = 0; k < this.m_generatorCount; k++) {\r\n            let g = this.m_generatorBuffer[k];\r\n            if (g.necessary) {\r\n                b2Vec2.MinV(lower, g.center, lower);\r\n                b2Vec2.MaxV(upper, g.center, upper);\r\n                ++necessary_count;\r\n            }\r\n        }\r\n        if (necessary_count === 0) {\r\n            ///debugger;\r\n            this.m_countX = 0;\r\n            this.m_countY = 0;\r\n            return;\r\n        }\r\n        lower.x -= margin;\r\n        lower.y -= margin;\r\n        upper.x += margin;\r\n        upper.y += margin;\r\n        this.m_countX = 1 + Math.floor(inverseRadius * (upper.x - lower.x));\r\n        this.m_countY = 1 + Math.floor(inverseRadius * (upper.y - lower.y));\r\n        ///  m_diagram = (Generator**) m_allocator->Allocate(sizeof(Generator*) * m_countX * m_countY);\r\n        ///  for (int32 i = 0; i < m_countX * m_countY; i++)\r\n        ///  {\r\n        ///    m_diagram[i] = NULL;\r\n        ///  }\r\n        this.m_diagram = b2MakeArray(this.m_countX * this.m_countY, (index) => null);\r\n        // (4 * m_countX * m_countY) is the queue capacity that is experimentally\r\n        // known to be necessary and sufficient for general particle distributions.\r\n        let queue = new b2StackQueue(4 * this.m_countX * this.m_countY);\r\n        for (let k = 0; k < this.m_generatorCount; k++) {\r\n            let g = this.m_generatorBuffer[k];\r\n            ///  g.center = inverseRadius * (g.center - lower);\r\n            g.center.SelfSub(lower).SelfMul(inverseRadius);\r\n            let x = Math.floor(g.center.x);\r\n            let y = Math.floor(g.center.y);\r\n            if (x >= 0 && y >= 0 && x < this.m_countX && y < this.m_countY) {\r\n                queue.Push(new b2VoronoiDiagram.Task(x, y, x + y * this.m_countX, g));\r\n            }\r\n        }\r\n        while (!queue.Empty()) {\r\n            let task = queue.Front();\r\n            let x = task.m_x;\r\n            let y = task.m_y;\r\n            let i = task.m_i;\r\n            let g = task.m_generator;\r\n            queue.Pop();\r\n            if (!this.m_diagram[i]) {\r\n                this.m_diagram[i] = g;\r\n                if (x > 0) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, g));\r\n                }\r\n                if (y > 0) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, g));\r\n                }\r\n                if (x < this.m_countX - 1) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, g));\r\n                }\r\n                if (y < this.m_countY - 1) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, g));\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < this.m_countY; y++) {\r\n            for (let x = 0; x < this.m_countX - 1; x++) {\r\n                let i = x + y * this.m_countX;\r\n                let a = this.m_diagram[i];\r\n                let b = this.m_diagram[i + 1];\r\n                if (a !== b) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));\r\n                    queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, a));\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < this.m_countY - 1; y++) {\r\n            for (let x = 0; x < this.m_countX; x++) {\r\n                let i = x + y * this.m_countX;\r\n                let a = this.m_diagram[i];\r\n                let b = this.m_diagram[i + this.m_countX];\r\n                if (a !== b) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, a));\r\n                }\r\n            }\r\n        }\r\n        while (!queue.Empty()) {\r\n            let task = queue.Front();\r\n            let x = task.m_x;\r\n            let y = task.m_y;\r\n            let i = task.m_i;\r\n            let k = task.m_generator;\r\n            queue.Pop();\r\n            let a = this.m_diagram[i];\r\n            let b = k;\r\n            if (a !== b) {\r\n                let ax = a.center.x - x;\r\n                let ay = a.center.y - y;\r\n                let bx = b.center.x - x;\r\n                let by = b.center.y - y;\r\n                let a2 = ax * ax + ay * ay;\r\n                let b2 = bx * bx + by * by;\r\n                if (a2 > b2) {\r\n                    this.m_diagram[i] = b;\r\n                    if (x > 0) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, b));\r\n                    }\r\n                    if (y > 0) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, b));\r\n                    }\r\n                    if (x < this.m_countX - 1) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, b));\r\n                    }\r\n                    if (y < this.m_countY - 1) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, b));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Enumerate all nodes that contain at least one necessary\r\n     * generator.\r\n     */\r\n    GetNodes(callback) {\r\n        for (let y = 0; y < this.m_countY - 1; y++) {\r\n            for (let x = 0; x < this.m_countX - 1; x++) {\r\n                let i = x + y * this.m_countX;\r\n                let a = this.m_diagram[i];\r\n                let b = this.m_diagram[i + 1];\r\n                let c = this.m_diagram[i + this.m_countX];\r\n                let d = this.m_diagram[i + 1 + this.m_countX];\r\n                if (b !== c) {\r\n                    if (a !== b && a !== c &&\r\n                        (a.necessary || b.necessary || c.necessary)) {\r\n                        callback(a.tag, b.tag, c.tag);\r\n                    }\r\n                    if (d !== b && d !== c &&\r\n                        (a.necessary || b.necessary || c.necessary)) {\r\n                        callback(b.tag, d.tag, c.tag);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n(function (b2VoronoiDiagram) {\r\n    class Generator {\r\n        constructor() {\r\n            this.center = new b2Vec2();\r\n            this.tag = 0;\r\n            this.necessary = false;\r\n        }\r\n    }\r\n    b2VoronoiDiagram.Generator = Generator;\r\n    class Task {\r\n        constructor(x, y, i, g) {\r\n            this.m_x = 0;\r\n            this.m_y = 0;\r\n            this.m_i = 0;\r\n            this.m_generator = null;\r\n            this.m_x = x;\r\n            this.m_y = y;\r\n            this.m_i = i;\r\n            this.m_generator = g;\r\n        }\r\n    }\r\n    b2VoronoiDiagram.Task = Task;\r\n})(b2VoronoiDiagram || (b2VoronoiDiagram = {})); // namespace b2VoronoiDiagram\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_linearSlop, b2_maxFloat, b2_maxParticleIndex, b2_invalidParticleIndex, b2_minParticleSystemBufferCapacity, b2_maxTriadDistanceSquared, b2_barrierCollisionTime, b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2_maxParticlePressure, b2_minParticleWeight, b2_maxParticleForce, b2_particleStride } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Max, b2Abs, b2Clamp, b2Sqrt, b2InvSqrt, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from \"../Collision/b2Collision\";\r\nimport { b2ShapeType, b2Shape } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2EdgeShape } from \"../Collision/Shapes/b2EdgeShape\";\r\nimport { b2TimeStep } from \"../Dynamics/b2TimeStep\";\r\nimport { b2QueryCallback } from \"../Dynamics/b2WorldCallbacks\";\r\nimport { b2ParticleFlag, b2ParticleDef, b2ParticleHandle } from \"./b2Particle\";\r\nimport { b2ParticleGroupFlag, b2ParticleGroupDef, b2ParticleGroup } from \"./b2ParticleGroup\";\r\nimport { b2VoronoiDiagram } from \"./b2VoronoiDiagram\";\r\nfunction b2Assert(condition) { }\r\nfunction std_iter_swap(array, a, b) {\r\n    const tmp = array[a];\r\n    array[a] = array[b];\r\n    array[b] = tmp;\r\n}\r\nfunction default_compare(a, b) { return a < b; }\r\nfunction std_sort(array, first = 0, len = array.length - first, cmp = default_compare) {\r\n    let left = first;\r\n    let stack = [];\r\n    let pos = 0;\r\n    for (;;) { /* outer loop */\r\n        for (; left + 1 < len; len++) { /* sort left to len-1 */\r\n            let pivot = array[left + Math.floor(Math.random() * (len - left))]; /* pick random pivot */\r\n            stack[pos++] = len; /* sort right part later */\r\n            for (let right = left - 1;;) { /* inner loop: partitioning */\r\n                while (cmp(array[++right], pivot)) { } /* look for greater element */\r\n                while (cmp(pivot, array[--len])) { } /* look for smaller element */\r\n                if (right >= len)\r\n                    break; /* partition point found? */\r\n                std_iter_swap(array, right, len); /* the only swap */\r\n            } /* partitioned, continue left part */\r\n        }\r\n        if (pos === 0)\r\n            break; /* stack empty? */\r\n        left = len; /* left to right is sorted */\r\n        len = stack[--pos]; /* get next range to sort */\r\n    }\r\n    return array;\r\n}\r\n;\r\nfunction std_stable_sort(array, first = 0, len = array.length - first, cmp = default_compare) {\r\n    return std_sort(array, first, len, cmp);\r\n}\r\n;\r\nfunction std_remove_if(array, predicate, length = array.length) {\r\n    let l = 0;\r\n    for (let c = 0; c < length; ++c) {\r\n        // if we can be collapsed, keep l where it is.\r\n        if (predicate(array[c]))\r\n            continue;\r\n        // this node can't be collapsed; push it back as far as we can.\r\n        if (c === l) {\r\n            ++l;\r\n            continue; // quick exit if we're already in the right spot\r\n        }\r\n        // array[l++] = array[c];\r\n        std_iter_swap(array, l++, c);\r\n    }\r\n    return l;\r\n}\r\n;\r\nfunction std_lower_bound(array, first, last, val, cmp = default_compare) {\r\n    let count = last - first;\r\n    while (count > 0) {\r\n        let step = Math.floor(count / 2);\r\n        let it = first + step;\r\n        if (cmp(array[it], val)) {\r\n            first = ++it;\r\n            count -= step + 1;\r\n        }\r\n        else\r\n            count = step;\r\n    }\r\n    return first;\r\n}\r\n;\r\nfunction std_upper_bound(array, first, last, val, cmp = default_compare) {\r\n    let count = last - first;\r\n    while (count > 0) {\r\n        let step = Math.floor(count / 2);\r\n        let it = first + step;\r\n        if (!cmp(val, array[it])) {\r\n            first = ++it;\r\n            count -= step + 1;\r\n        }\r\n        else\r\n            count = step;\r\n    }\r\n    return first;\r\n}\r\n;\r\nfunction std_rotate(array, first, n_first, last) {\r\n    let next = n_first;\r\n    while (first !== next) {\r\n        std_iter_swap(array, first++, next++);\r\n        if (next === last)\r\n            next = n_first;\r\n        else if (first === n_first)\r\n            n_first = next;\r\n    }\r\n}\r\nfunction std_unique(array, first, last, cmp) {\r\n    if (first === last) {\r\n        return last;\r\n    }\r\n    let result = first;\r\n    while (++first !== last) {\r\n        if (!cmp(array[result], array[first])) {\r\n            ///array[++result] = array[first];\r\n            std_iter_swap(array, ++result, first);\r\n        }\r\n    }\r\n    return ++result;\r\n}\r\nexport class b2GrowableBuffer {\r\n    constructor(allocator) {\r\n        this.data = [];\r\n        this.count = 0;\r\n        this.capacity = 0;\r\n        this.allocator = allocator;\r\n    }\r\n    Append() {\r\n        if (this.count >= this.capacity) {\r\n            this.Grow();\r\n        }\r\n        return this.count++;\r\n    }\r\n    Reserve(newCapacity) {\r\n        if (this.capacity >= newCapacity)\r\n            return;\r\n        b2Assert(this.capacity === this.data.length);\r\n        for (let i = this.capacity; i < newCapacity; ++i) {\r\n            this.data[i] = this.allocator();\r\n        }\r\n        this.capacity = newCapacity;\r\n    }\r\n    Grow() {\r\n        // Double the capacity.\r\n        let newCapacity = this.capacity ? 2 * this.capacity : b2_minParticleSystemBufferCapacity;\r\n        b2Assert(newCapacity > this.capacity);\r\n        this.Reserve(newCapacity);\r\n    }\r\n    Free() {\r\n        if (this.data.length === 0) {\r\n            return;\r\n        }\r\n        this.data = [];\r\n        this.capacity = 0;\r\n        this.count = 0;\r\n    }\r\n    Shorten(newEnd) {\r\n        b2Assert(false);\r\n    }\r\n    Data() {\r\n        return this.data;\r\n    }\r\n    GetCount() {\r\n        return this.count;\r\n    }\r\n    SetCount(newCount) {\r\n        ///b2Assert(0 <= newCount && newCount <= this.capacity);\r\n        this.count = newCount;\r\n    }\r\n    GetCapacity() {\r\n        return this.capacity;\r\n    }\r\n    RemoveIf(pred) {\r\n        let count = 0;\r\n        for (let i = 0; i < this.count; ++i) {\r\n            if (!pred(this.data[i])) {\r\n                count++;\r\n            }\r\n        }\r\n        this.count = std_remove_if(this.data, pred, this.count);\r\n        b2Assert(count === this.count);\r\n    }\r\n    Unique(pred) {\r\n        this.count = std_unique(this.data, 0, this.count, pred);\r\n    }\r\n}\r\nexport class b2FixtureParticleQueryCallback extends b2QueryCallback {\r\n    constructor(system) {\r\n        super();\r\n        this.m_system = system;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        // Skip reporting particles.\r\n        return false;\r\n    }\r\n    ReportFixture(fixture) {\r\n        if (fixture.IsSensor()) {\r\n            return true;\r\n        }\r\n        const shape = fixture.GetShape();\r\n        const childCount = shape.GetChildCount();\r\n        for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n            const aabb = fixture.GetAABB(childIndex);\r\n            const enumerator = this.m_system.GetInsideBoundsEnumerator(aabb);\r\n            let index;\r\n            while ((index = enumerator.GetNext()) >= 0) {\r\n                this.ReportFixtureAndParticle(fixture, childIndex, index);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    ReportParticle(system, index) {\r\n        return false;\r\n    }\r\n    ReportFixtureAndParticle(fixture, childIndex, index) {\r\n        b2Assert(false); // pure virtual\r\n    }\r\n}\r\nexport class b2ParticleContact {\r\n    constructor() {\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.weight = 0;\r\n        this.normal = new b2Vec2();\r\n        this.flags = 0;\r\n    }\r\n    SetIndices(a, b) {\r\n        b2Assert(a <= b2_maxParticleIndex && b <= b2_maxParticleIndex);\r\n        this.indexA = a;\r\n        this.indexB = b;\r\n    }\r\n    SetWeight(w) {\r\n        this.weight = w;\r\n    }\r\n    SetNormal(n) {\r\n        this.normal.Copy(n);\r\n    }\r\n    SetFlags(f) {\r\n        this.flags = f;\r\n    }\r\n    GetIndexA() {\r\n        return this.indexA;\r\n    }\r\n    GetIndexB() {\r\n        return this.indexB;\r\n    }\r\n    GetWeight() {\r\n        return this.weight;\r\n    }\r\n    GetNormal() {\r\n        return this.normal;\r\n    }\r\n    GetFlags() {\r\n        return this.flags;\r\n    }\r\n    IsEqual(rhs) {\r\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && this.weight === rhs.weight && this.normal.x === rhs.normal.x && this.normal.y === rhs.normal.y;\r\n    }\r\n    IsNotEqual(rhs) {\r\n        return !this.IsEqual(rhs);\r\n    }\r\n    ApproximatelyEqual(rhs) {\r\n        const MAX_WEIGHT_DIFF = 0.01; // Weight 0 ~ 1, so about 1%\r\n        const MAX_NORMAL_DIFF_SQ = 0.01 * 0.01; // Normal length = 1, so 1%\r\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && b2Abs(this.weight - rhs.weight) < MAX_WEIGHT_DIFF && b2Vec2.DistanceSquaredVV(this.normal, rhs.normal) < MAX_NORMAL_DIFF_SQ;\r\n    }\r\n}\r\nexport class b2ParticleBodyContact {\r\n    constructor() {\r\n        this.index = 0; // Index of the particle making contact.\r\n        this.body = null; // The body making contact.\r\n        this.fixture = null; // The specific fixture making contact\r\n        this.weight = 0.0; // Weight of the contact. A value between 0.0f and 1.0f.\r\n        this.normal = new b2Vec2(); // The normalized direction from the particle to the body.\r\n        this.mass = 0.0; // The effective mass used in calculating force.\r\n    }\r\n}\r\nexport class b2ParticlePair {\r\n    constructor() {\r\n        this.indexA = 0; // Indices of the respective particles making pair.\r\n        this.indexB = 0;\r\n        this.flags = 0; // The logical sum of the particle flags. See the b2ParticleFlag enum.\r\n        this.strength = 0.0; // The strength of cohesion among the particles.\r\n        this.distance = 0.0; // The initial distance of the particles.\r\n    }\r\n}\r\nexport class b2ParticleTriad {\r\n    constructor() {\r\n        this.indexA = 0; // Indices of the respective particles making triad.\r\n        this.indexB = 0;\r\n        this.indexC = 0;\r\n        this.flags = 0; // The logical sum of the particle flags. See the b2ParticleFlag enum.\r\n        this.strength = 0.0; // The strength of cohesion among the particles.\r\n        this.pa = new b2Vec2(0.0, 0.0); // Values used for calculation.\r\n        this.pb = new b2Vec2(0.0, 0.0);\r\n        this.pc = new b2Vec2(0.0, 0.0);\r\n        this.ka = 0.0;\r\n        this.kb = 0.0;\r\n        this.kc = 0.0;\r\n        this.s = 0.0;\r\n    }\r\n}\r\nexport class b2ParticleSystemDef {\r\n    constructor() {\r\n        // Initialize physical coefficients to the maximum values that\r\n        // maintain numerical stability.\r\n        /**\r\n         * Enable strict Particle/Body contact check.\r\n         * See SetStrictContactCheck for details.\r\n         */\r\n        this.strictContactCheck = false;\r\n        /**\r\n         * Set the particle density.\r\n         * See SetDensity for details.\r\n         */\r\n        this.density = 1.0;\r\n        /**\r\n         * Change the particle gravity scale. Adjusts the effect of the\r\n         * global gravity vector on particles. Default value is 1.0f.\r\n         */\r\n        this.gravityScale = 1.0;\r\n        /**\r\n         * Particles behave as circles with this radius. In Box2D units.\r\n         */\r\n        this.radius = 1.0;\r\n        /**\r\n         * Set the maximum number of particles.\r\n         * By default, there is no maximum. The particle buffers can\r\n         * continue to grow while b2World's block allocator still has\r\n         * memory.\r\n         * See SetMaxParticleCount for details.\r\n         */\r\n        this.maxCount = 0;\r\n        /**\r\n         * Increases pressure in response to compression\r\n         * Smaller values allow more compression\r\n         */\r\n        this.pressureStrength = 0.005;\r\n        /**\r\n         * Reduces velocity along the collision normal\r\n         * Smaller value reduces less\r\n         */\r\n        this.dampingStrength = 1.0;\r\n        /**\r\n         * Restores shape of elastic particle groups\r\n         * Larger values increase elastic particle velocity\r\n         */\r\n        this.elasticStrength = 0.25;\r\n        /**\r\n         * Restores length of spring particle groups\r\n         * Larger values increase spring particle velocity\r\n         */\r\n        this.springStrength = 0.25;\r\n        /**\r\n         * Reduces relative velocity of viscous particles\r\n         * Larger values slow down viscous particles more\r\n         */\r\n        this.viscousStrength = 0.25;\r\n        /**\r\n         * Produces pressure on tensile particles\r\n         * 0~0.2. Larger values increase the amount of surface tension.\r\n         */\r\n        this.surfaceTensionPressureStrength = 0.2;\r\n        /**\r\n         * Smoothes outline of tensile particles\r\n         * 0~0.2. Larger values result in rounder, smoother,\r\n         * water-drop-like clusters of particles.\r\n         */\r\n        this.surfaceTensionNormalStrength = 0.2;\r\n        /**\r\n         * Produces additional pressure on repulsive particles\r\n         * Larger values repulse more\r\n         * Negative values mean attraction. The range where particles\r\n         * behave stably is about -0.2 to 2.0.\r\n         */\r\n        this.repulsiveStrength = 1.0;\r\n        /**\r\n         * Produces repulsion between powder particles\r\n         * Larger values repulse more\r\n         */\r\n        this.powderStrength = 0.5;\r\n        /**\r\n         * Pushes particles out of solid particle group\r\n         * Larger values repulse more\r\n         */\r\n        this.ejectionStrength = 0.5;\r\n        /**\r\n         * Produces static pressure\r\n         * Larger values increase the pressure on neighboring partilces\r\n         * For a description of static pressure, see\r\n         * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\r\n         */\r\n        this.staticPressureStrength = 0.2;\r\n        /**\r\n         * Reduces instability in static pressure calculation\r\n         * Larger values make stabilize static pressure with fewer\r\n         * iterations\r\n         */\r\n        this.staticPressureRelaxation = 0.2;\r\n        /**\r\n         * Computes static pressure more precisely\r\n         * See SetStaticPressureIterations for details\r\n         */\r\n        this.staticPressureIterations = 8;\r\n        /**\r\n         * Determines how fast colors are mixed\r\n         * 1.0f ==> mixed immediately\r\n         * 0.5f ==> mixed half way each simulation step (see\r\n         * b2World::Step())\r\n         */\r\n        this.colorMixingStrength = 0.5;\r\n        /**\r\n         * Whether to destroy particles by age when no more particles\r\n         * can be created.  See #b2ParticleSystem::SetDestructionByAge()\r\n         * for more information.\r\n         */\r\n        this.destroyByAge = true;\r\n        /**\r\n         * Granularity of particle lifetimes in seconds.  By default\r\n         * this is set to (1.0f / 60.0f) seconds.  b2ParticleSystem uses\r\n         * a 32-bit signed value to track particle lifetimes so the\r\n         * maximum lifetime of a particle is (2^32 - 1) / (1.0f /\r\n         * lifetimeGranularity) seconds. With the value set to 1/60 the\r\n         * maximum lifetime or age of a particle is 2.27 years.\r\n         */\r\n        this.lifetimeGranularity = 1.0 / 60.0;\r\n    }\r\n    Copy(def) {\r\n        this.strictContactCheck = def.strictContactCheck;\r\n        this.density = def.density;\r\n        this.gravityScale = def.gravityScale;\r\n        this.radius = def.radius;\r\n        this.maxCount = def.maxCount;\r\n        this.pressureStrength = def.pressureStrength;\r\n        this.dampingStrength = def.dampingStrength;\r\n        this.elasticStrength = def.elasticStrength;\r\n        this.springStrength = def.springStrength;\r\n        this.viscousStrength = def.viscousStrength;\r\n        this.surfaceTensionPressureStrength = def.surfaceTensionPressureStrength;\r\n        this.surfaceTensionNormalStrength = def.surfaceTensionNormalStrength;\r\n        this.repulsiveStrength = def.repulsiveStrength;\r\n        this.powderStrength = def.powderStrength;\r\n        this.ejectionStrength = def.ejectionStrength;\r\n        this.staticPressureStrength = def.staticPressureStrength;\r\n        this.staticPressureRelaxation = def.staticPressureRelaxation;\r\n        this.staticPressureIterations = def.staticPressureIterations;\r\n        this.colorMixingStrength = def.colorMixingStrength;\r\n        this.destroyByAge = def.destroyByAge;\r\n        this.lifetimeGranularity = def.lifetimeGranularity;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2ParticleSystemDef().Copy(this);\r\n    }\r\n}\r\nexport class b2ParticleSystem {\r\n    constructor(def, world) {\r\n        this.m_paused = false;\r\n        this.m_timestamp = 0;\r\n        this.m_allParticleFlags = 0;\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n        this.m_allGroupFlags = 0;\r\n        this.m_needsUpdateAllGroupFlags = false;\r\n        this.m_hasForce = false;\r\n        this.m_iterationIndex = 0;\r\n        this.m_inverseDensity = 0.0;\r\n        this.m_particleDiameter = 0.0;\r\n        this.m_inverseDiameter = 0.0;\r\n        this.m_squaredDiameter = 0.0;\r\n        this.m_count = 0;\r\n        this.m_internalAllocatedCapacity = 0;\r\n        /**\r\n         * Allocator for b2ParticleHandle instances.\r\n         */\r\n        ///m_handleAllocator: any = null;\r\n        /**\r\n         * Maps particle indicies to handles.\r\n         */\r\n        this.m_handleIndexBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_flagsBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_positionBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_velocityBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_forceBuffer = [];\r\n        /**\r\n         * this.m_weightBuffer is populated in ComputeWeight and used in\r\n         * ComputeDepth(), SolveStaticPressure() and SolvePressure().\r\n         */\r\n        this.m_weightBuffer = [];\r\n        /**\r\n         * When any particles have the flag b2_staticPressureParticle,\r\n         * this.m_staticPressureBuffer is first allocated and used in\r\n         * SolveStaticPressure() and SolvePressure().  It will be\r\n         * reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_staticPressureBuffer = [];\r\n        /**\r\n         * this.m_accumulationBuffer is used in many functions as a temporary\r\n         * buffer for scalar values.\r\n         */\r\n        this.m_accumulationBuffer = [];\r\n        /**\r\n         * When any particles have the flag b2_tensileParticle,\r\n         * this.m_accumulation2Buffer is first allocated and used in\r\n         * SolveTensile() as a temporary buffer for vector values.  It\r\n         * will be reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_accumulation2Buffer = [];\r\n        /**\r\n         * When any particle groups have the flag b2_solidParticleGroup,\r\n         * this.m_depthBuffer is first allocated and populated in\r\n         * ComputeDepth() and used in SolveSolid(). It will be\r\n         * reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_depthBuffer = [];\r\n        this.m_colorBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_groupBuffer = [];\r\n        this.m_userDataBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * Stuck particle detection parameters and record keeping\r\n         */\r\n        this.m_stuckThreshold = 0;\r\n        this.m_lastBodyContactStepBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_bodyContactCountBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_consecutiveContactStepsBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_stuckParticleBuffer = new b2GrowableBuffer(() => 0);\r\n        this.m_proxyBuffer = new b2GrowableBuffer(() => new b2ParticleSystem.Proxy());\r\n        this.m_contactBuffer = new b2GrowableBuffer(() => new b2ParticleContact());\r\n        this.m_bodyContactBuffer = new b2GrowableBuffer(() => new b2ParticleBodyContact());\r\n        this.m_pairBuffer = new b2GrowableBuffer(() => new b2ParticlePair());\r\n        this.m_triadBuffer = new b2GrowableBuffer(() => new b2ParticleTriad());\r\n        /**\r\n         * Time each particle should be destroyed relative to the last\r\n         * time this.m_timeElapsed was initialized.  Each unit of time\r\n         * corresponds to b2ParticleSystemDef::lifetimeGranularity\r\n         * seconds.\r\n         */\r\n        this.m_expirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * List of particle indices sorted by expiration time.\r\n         */\r\n        this.m_indexByExpirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * Time elapsed in 32:32 fixed point.  Each non-fractional unit\r\n         * of time corresponds to\r\n         * b2ParticleSystemDef::lifetimeGranularity seconds.\r\n         */\r\n        this.m_timeElapsed = 0;\r\n        /**\r\n         * Whether the expiration time buffer has been modified and\r\n         * needs to be resorted.\r\n         */\r\n        this.m_expirationTimeBufferRequiresSorting = false;\r\n        this.m_groupCount = 0;\r\n        this.m_groupList = null;\r\n        this.m_def = new b2ParticleSystemDef();\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.SetStrictContactCheck(def.strictContactCheck);\r\n        this.SetDensity(def.density);\r\n        this.SetGravityScale(def.gravityScale);\r\n        this.SetRadius(def.radius);\r\n        this.SetMaxParticleCount(def.maxCount);\r\n        b2Assert(def.lifetimeGranularity > 0.0);\r\n        this.m_def = def.Clone();\r\n        this.m_world = world;\r\n        this.SetDestructionByAge(this.m_def.destroyByAge);\r\n    }\r\n    static computeTag(x, y) {\r\n        ///return ((uint32)(y + yOffset) << yShift) + (uint32)(xScale * x + xOffset);\r\n        return ((((y + b2ParticleSystem.yOffset) >>> 0) << b2ParticleSystem.yShift) + ((b2ParticleSystem.xScale * x + b2ParticleSystem.xOffset) >>> 0)) >>> 0;\r\n    }\r\n    static computeRelativeTag(tag, x, y) {\r\n        ///return tag + (y << yShift) + (x << xShift);\r\n        return (tag + (y << b2ParticleSystem.yShift) + (x << b2ParticleSystem.xShift)) >>> 0;\r\n    }\r\n    Drop() {\r\n        while (this.m_groupList) {\r\n            this.DestroyParticleGroup(this.m_groupList);\r\n        }\r\n        this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_flagsBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_positionBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_velocityBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_colorBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_userDataBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);\r\n        this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);\r\n    }\r\n    /**\r\n     * Create a particle whose properties have been defined.\r\n     *\r\n     * No reference to the definition is retained.\r\n     *\r\n     * A simulation step must occur before it's possible to interact\r\n     * with a newly created particle.  For example,\r\n     * DestroyParticleInShape() will not destroy a particle until\r\n     * b2World::Step() has been called.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     */\r\n    CreateParticle(def) {\r\n        b2Assert(this.m_world.IsLocked() === false);\r\n        if (this.m_world.IsLocked()) {\r\n            return 0;\r\n        }\r\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\r\n            // Double the particle capacity.\r\n            let capacity = this.m_count ? 2 * this.m_count : b2_minParticleSystemBufferCapacity;\r\n            this.ReallocateInternalAllocatedBuffers(capacity);\r\n        }\r\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\r\n            // If the oldest particle should be destroyed...\r\n            if (this.m_def.destroyByAge) {\r\n                this.DestroyOldestParticle(0, false);\r\n                // Need to destroy this particle *now* so that it's possible to\r\n                // create a new particle.\r\n                this.SolveZombie();\r\n            }\r\n            else {\r\n                return b2_invalidParticleIndex;\r\n            }\r\n        }\r\n        let index = this.m_count++;\r\n        this.m_flagsBuffer.data[index] = 0;\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            this.m_lastBodyContactStepBuffer.data[index] = 0;\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            this.m_bodyContactCountBuffer.data[index] = 0;\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            this.m_consecutiveContactStepsBuffer.data[index] = 0;\r\n        }\r\n        this.m_positionBuffer.data[index] = (this.m_positionBuffer.data[index] || new b2Vec2()).Copy(def.position);\r\n        this.m_velocityBuffer.data[index] = (this.m_velocityBuffer.data[index] || new b2Vec2()).Copy(def.velocity);\r\n        this.m_weightBuffer[index] = 0;\r\n        this.m_forceBuffer[index] = (this.m_forceBuffer[index] || new b2Vec2()).SetZero();\r\n        if (this.m_staticPressureBuffer) {\r\n            this.m_staticPressureBuffer[index] = 0;\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            this.m_depthBuffer[index] = 0;\r\n        }\r\n        if (this.m_colorBuffer.data || !def.color.IsZero()) {\r\n            this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n            this.m_colorBuffer.data[index] = (this.m_colorBuffer.data[index] || new b2Color()).Copy(def.color);\r\n        }\r\n        if (this.m_userDataBuffer.data || def.userData) {\r\n            this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\r\n            this.m_userDataBuffer.data[index] = def.userData;\r\n        }\r\n        if (this.m_handleIndexBuffer.data) {\r\n            this.m_handleIndexBuffer.data[index] = null;\r\n        }\r\n        ///Proxy& proxy = m_proxyBuffer.Append();\r\n        let proxy = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];\r\n        // If particle lifetimes are enabled or the lifetime is set in the particle\r\n        // definition, initialize the lifetime.\r\n        let finiteLifetime = def.lifetime > 0.0;\r\n        if (this.m_expirationTimeBuffer.data || finiteLifetime) {\r\n            this.SetParticleLifetime(index, finiteLifetime ? def.lifetime :\r\n                this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));\r\n            // Add a reference to the newly added particle to the end of the\r\n            // queue.\r\n            this.m_indexByExpirationTimeBuffer.data[index] = index;\r\n        }\r\n        proxy.index = index;\r\n        let group = def.group;\r\n        this.m_groupBuffer[index] = group;\r\n        if (group) {\r\n            if (group.m_firstIndex < group.m_lastIndex) {\r\n                // Move particles in the group just before the new particle.\r\n                this.RotateBuffer(group.m_firstIndex, group.m_lastIndex, index);\r\n                b2Assert(group.m_lastIndex === index);\r\n                // Update the index range of the group to contain the new particle.\r\n                group.m_lastIndex = index + 1;\r\n            }\r\n            else {\r\n                // If the group is empty, reset the index range to contain only the\r\n                // new particle.\r\n                group.m_firstIndex = index;\r\n                group.m_lastIndex = index + 1;\r\n            }\r\n        }\r\n        this.SetParticleFlags(index, def.flags);\r\n        return index;\r\n    }\r\n    /**\r\n     * Retrieve a handle to the particle at the specified index.\r\n     *\r\n     * Please see #b2ParticleHandle for why you might want a handle.\r\n     */\r\n    GetParticleHandleFromIndex(index) {\r\n        b2Assert(index >= 0 && index < this.GetParticleCount() && index !== b2_invalidParticleIndex);\r\n        this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);\r\n        let handle = this.m_handleIndexBuffer.data[index];\r\n        if (handle) {\r\n            return handle;\r\n        }\r\n        // Create a handle.\r\n        ///handle = m_handleAllocator.Allocate();\r\n        handle = new b2ParticleHandle();\r\n        b2Assert(handle !== null);\r\n        handle.SetIndex(index);\r\n        this.m_handleIndexBuffer.data[index] = handle;\r\n        return handle;\r\n    }\r\n    /**\r\n     * Destroy a particle.\r\n     *\r\n     * The particle is removed after the next simulation step (see\r\n     * b2World::Step()).\r\n     *\r\n     * @param index Index of the particle to destroy.\r\n     * @param callDestructionListener Whether to call the\r\n     *      destruction listener just before the particle is\r\n     *      destroyed.\r\n     */\r\n    DestroyParticle(index, callDestructionListener = false) {\r\n        let flags = b2ParticleFlag.b2_zombieParticle;\r\n        if (callDestructionListener) {\r\n            flags |= b2ParticleFlag.b2_destructionListenerParticle;\r\n        }\r\n        this.SetParticleFlags(index, this.m_flagsBuffer.data[index] | flags);\r\n    }\r\n    /**\r\n     * Destroy the Nth oldest particle in the system.\r\n     *\r\n     * The particle is removed after the next b2World::Step().\r\n     *\r\n     * @param index Index of the Nth oldest particle to\r\n     *      destroy, 0 will destroy the oldest particle in the\r\n     *      system, 1 will destroy the next oldest particle etc.\r\n     * @param callDestructionListener Whether to call the\r\n     *      destruction listener just before the particle is\r\n     *      destroyed.\r\n     */\r\n    DestroyOldestParticle(index, callDestructionListener = false) {\r\n        const particleCount = this.GetParticleCount();\r\n        b2Assert(index >= 0 && index < particleCount);\r\n        // Make sure particle lifetime tracking is enabled.\r\n        b2Assert(this.m_indexByExpirationTimeBuffer.data !== null);\r\n        // Destroy the oldest particle (preferring to destroy finite\r\n        // lifetime particles first) to free a slot in the buffer.\r\n        const oldestFiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[particleCount - (index + 1)];\r\n        const oldestInfiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[index];\r\n        this.DestroyParticle(this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle] > 0.0 ?\r\n            oldestFiniteLifetimeParticle : oldestInfiniteLifetimeParticle, callDestructionListener);\r\n    }\r\n    /**\r\n     * Destroy particles inside a shape.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * In addition, this function immediately destroys particles in\r\n     * the shape in constrast to DestroyParticle() which defers the\r\n     * destruction until the next simulation step.\r\n     *\r\n     * @return Number of particles destroyed.\r\n     * @param shape Shape which encloses particles\r\n     *      that should be destroyed.\r\n     * @param xf Transform applied to the shape.\r\n     * @param callDestructionListener Whether to call the\r\n     *      world b2DestructionListener for each particle\r\n     *      destroyed.\r\n     */\r\n    DestroyParticlesInShape(shape, xf, callDestructionListener = false) {\r\n        const s_aabb = b2ParticleSystem.DestroyParticlesInShape_s_aabb;\r\n        b2Assert(this.m_world.IsLocked() === false);\r\n        if (this.m_world.IsLocked()) {\r\n            return 0;\r\n        }\r\n        const callback = new b2ParticleSystem.DestroyParticlesInShapeCallback(this, shape, xf, callDestructionListener);\r\n        const aabb = s_aabb;\r\n        shape.ComputeAABB(aabb, xf, 0);\r\n        this.m_world.QueryAABB(callback, aabb);\r\n        return callback.Destroyed();\r\n    }\r\n    /**\r\n     * Create a particle group whose properties have been defined.\r\n     *\r\n     * No reference to the definition is retained.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     */\r\n    CreateParticleGroup(groupDef) {\r\n        let s_transform = b2ParticleSystem.CreateParticleGroup_s_transform;\r\n        b2Assert(this.m_world.IsLocked() === false);\r\n        if (this.m_world.IsLocked()) {\r\n            return null;\r\n        }\r\n        let transform = s_transform;\r\n        transform.SetPositionAngle(groupDef.position, groupDef.angle);\r\n        let firstIndex = this.m_count;\r\n        if (groupDef.shape) {\r\n            this.CreateParticlesWithShapeForGroup(groupDef.shape, groupDef, transform);\r\n        }\r\n        if (groupDef.shapes) {\r\n            this.CreateParticlesWithShapesForGroup(groupDef.shapes, groupDef.shapeCount, groupDef, transform);\r\n        }\r\n        if (groupDef.particleCount) {\r\n            b2Assert(groupDef.positionData !== null);\r\n            for (let i = 0; i < groupDef.particleCount; i++) {\r\n                let p = groupDef.positionData[i];\r\n                this.CreateParticleForGroup(groupDef, transform, p);\r\n            }\r\n        }\r\n        let lastIndex = this.m_count;\r\n        let group = new b2ParticleGroup(this);\r\n        group.m_firstIndex = firstIndex;\r\n        group.m_lastIndex = lastIndex;\r\n        group.m_strength = groupDef.strength;\r\n        group.m_userData = groupDef.userData;\r\n        group.m_transform.Copy(transform);\r\n        group.m_prev = null;\r\n        group.m_next = this.m_groupList;\r\n        if (this.m_groupList) {\r\n            this.m_groupList.m_prev = group;\r\n        }\r\n        this.m_groupList = group;\r\n        ++this.m_groupCount;\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            this.m_groupBuffer[i] = group;\r\n        }\r\n        this.SetGroupFlags(group, groupDef.groupFlags);\r\n        // Create pairs and triads between particles in the group.\r\n        let filter = new b2ParticleSystem.ConnectionFilter();\r\n        this.UpdateContacts(true);\r\n        this.UpdatePairsAndTriads(firstIndex, lastIndex, filter);\r\n        if (groupDef.group) {\r\n            this.JoinParticleGroups(groupDef.group, group);\r\n            group = groupDef.group;\r\n        }\r\n        return group;\r\n    }\r\n    /**\r\n     * Join two particle groups.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * @param groupA the first group. Expands to encompass the second group.\r\n     * @param groupB the second group. It is destroyed.\r\n     */\r\n    JoinParticleGroups(groupA, groupB) {\r\n        b2Assert(this.m_world.IsLocked() === false);\r\n        if (this.m_world.IsLocked()) {\r\n            return;\r\n        }\r\n        b2Assert(groupA !== groupB);\r\n        this.RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, this.m_count);\r\n        b2Assert(groupB.m_lastIndex === this.m_count);\r\n        this.RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex);\r\n        b2Assert(groupA.m_lastIndex === groupB.m_firstIndex);\r\n        // Create pairs and triads connecting groupA and groupB.\r\n        let filter = new b2ParticleSystem.JoinParticleGroupsFilter(groupB.m_firstIndex);\r\n        this.UpdateContacts(true);\r\n        this.UpdatePairsAndTriads(groupA.m_firstIndex, groupB.m_lastIndex, filter);\r\n        for (let i = groupB.m_firstIndex; i < groupB.m_lastIndex; i++) {\r\n            this.m_groupBuffer[i] = groupA;\r\n        }\r\n        let groupFlags = groupA.m_groupFlags | groupB.m_groupFlags;\r\n        this.SetGroupFlags(groupA, groupFlags);\r\n        groupA.m_lastIndex = groupB.m_lastIndex;\r\n        groupB.m_firstIndex = groupB.m_lastIndex;\r\n        this.DestroyParticleGroup(groupB);\r\n    }\r\n    /**\r\n     * Split particle group into multiple disconnected groups.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * @param group the group to be split.\r\n     */\r\n    SplitParticleGroup(group) {\r\n        this.UpdateContacts(true);\r\n        let particleCount = group.GetParticleCount();\r\n        // We create several linked lists. Each list represents a set of connected particles.\r\n        ///ParticleListNode* nodeBuffer = (ParticleListNode*) m_world.m_stackAllocator.Allocate(sizeof(ParticleListNode) * particleCount);\r\n        let nodeBuffer = b2MakeArray(particleCount, (index) => new b2ParticleSystem.ParticleListNode());\r\n        b2ParticleSystem.InitializeParticleLists(group, nodeBuffer);\r\n        this.MergeParticleListsInContact(group, nodeBuffer);\r\n        let survivingList = b2ParticleSystem.FindLongestParticleList(group, nodeBuffer);\r\n        this.MergeZombieParticleListNodes(group, nodeBuffer, survivingList);\r\n        this.CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList);\r\n        this.UpdatePairsAndTriadsWithParticleList(group, nodeBuffer);\r\n        ///this.m_world.m_stackAllocator.Free(nodeBuffer);\r\n    }\r\n    /**\r\n     * Get the world particle group list. With the returned group,\r\n     * use b2ParticleGroup::GetNext to get the next group in the\r\n     * world list.\r\n     *\r\n     * A null group indicates the end of the list.\r\n     *\r\n     * @return the head of the world particle group list.\r\n     */\r\n    GetParticleGroupList() {\r\n        return this.m_groupList;\r\n    }\r\n    /**\r\n     * Get the number of particle groups.\r\n     */\r\n    GetParticleGroupCount() {\r\n        return this.m_groupCount;\r\n    }\r\n    /**\r\n     * Get the number of particles.\r\n     */\r\n    GetParticleCount() {\r\n        return this.m_count;\r\n    }\r\n    /**\r\n     * Get the maximum number of particles.\r\n     */\r\n    GetMaxParticleCount() {\r\n        return this.m_def.maxCount;\r\n    }\r\n    /**\r\n     * Set the maximum number of particles.\r\n     *\r\n     * A value of 0 means there is no maximum. The particle buffers\r\n     * can continue to grow while b2World's block allocator still\r\n     * has memory.\r\n     *\r\n     * Note: If you try to CreateParticle() with more than this\r\n     * count, b2_invalidParticleIndex is returned unless\r\n     * SetDestructionByAge() is used to enable the destruction of\r\n     * the oldest particles in the system.\r\n     */\r\n    SetMaxParticleCount(count) {\r\n        b2Assert(this.m_count <= count);\r\n        this.m_def.maxCount = count;\r\n    }\r\n    /**\r\n     * Get all existing particle flags.\r\n     */\r\n    GetAllParticleFlags() {\r\n        return this.m_allParticleFlags;\r\n    }\r\n    /**\r\n     * Get all existing particle group flags.\r\n     */\r\n    GetAllGroupFlags() {\r\n        return this.m_allGroupFlags;\r\n    }\r\n    /**\r\n     * Pause or unpause the particle system. When paused,\r\n     * b2World::Step() skips over this particle system. All\r\n     * b2ParticleSystem function calls still work.\r\n     *\r\n     * @param paused paused is true to pause, false to un-pause.\r\n     */\r\n    SetPaused(paused) {\r\n        this.m_paused = paused;\r\n    }\r\n    /**\r\n     * Initially, true, then, the last value passed into\r\n     * SetPaused().\r\n     *\r\n     * @return true if the particle system is being updated in b2World::Step().\r\n     */\r\n    GetPaused() {\r\n        return this.m_paused;\r\n    }\r\n    /**\r\n     * Change the particle density.\r\n     *\r\n     * Particle density affects the mass of the particles, which in\r\n     * turn affects how the particles interact with b2Bodies. Note\r\n     * that the density does not affect how the particles interact\r\n     * with each other.\r\n     */\r\n    SetDensity(density) {\r\n        this.m_def.density = density;\r\n        this.m_inverseDensity = 1 / this.m_def.density;\r\n    }\r\n    /**\r\n     * Get the particle density.\r\n     */\r\n    GetDensity() {\r\n        return this.m_def.density;\r\n    }\r\n    /**\r\n     * Change the particle gravity scale. Adjusts the effect of the\r\n     * global gravity vector on particles.\r\n     */\r\n    SetGravityScale(gravityScale) {\r\n        this.m_def.gravityScale = gravityScale;\r\n    }\r\n    /**\r\n     * Get the particle gravity scale.\r\n     */\r\n    GetGravityScale() {\r\n        return this.m_def.gravityScale;\r\n    }\r\n    /**\r\n     * Damping is used to reduce the velocity of particles. The\r\n     * damping parameter can be larger than 1.0f but the damping\r\n     * effect becomes sensitive to the time step when the damping\r\n     * parameter is large.\r\n     */\r\n    SetDamping(damping) {\r\n        this.m_def.dampingStrength = damping;\r\n    }\r\n    /**\r\n     * Get damping for particles\r\n     */\r\n    GetDamping() {\r\n        return this.m_def.dampingStrength;\r\n    }\r\n    /**\r\n     * Change the number of iterations when calculating the static\r\n     * pressure of particles. By default, 8 iterations. You can\r\n     * reduce the number of iterations down to 1 in some situations,\r\n     * but this may cause instabilities when many particles come\r\n     * together. If you see particles popping away from each other\r\n     * like popcorn, you may have to increase the number of\r\n     * iterations.\r\n     *\r\n     * For a description of static pressure, see\r\n     * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\r\n     */\r\n    SetStaticPressureIterations(iterations) {\r\n        this.m_def.staticPressureIterations = iterations;\r\n    }\r\n    /**\r\n     * Get the number of iterations for static pressure of\r\n     * particles.\r\n     */\r\n    GetStaticPressureIterations() {\r\n        return this.m_def.staticPressureIterations;\r\n    }\r\n    /**\r\n     * Change the particle radius.\r\n     *\r\n     * You should set this only once, on world start.\r\n     * If you change the radius during execution, existing particles\r\n     * may explode, shrink, or behave unexpectedly.\r\n     */\r\n    SetRadius(radius) {\r\n        this.m_particleDiameter = 2 * radius;\r\n        this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;\r\n        this.m_inverseDiameter = 1 / this.m_particleDiameter;\r\n    }\r\n    /**\r\n     * Get the particle radius.\r\n     */\r\n    GetRadius() {\r\n        return this.m_particleDiameter / 2;\r\n    }\r\n    /**\r\n     * Get the position of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle positions array.\r\n     */\r\n    GetPositionBuffer() {\r\n        return this.m_positionBuffer.data;\r\n    }\r\n    /**\r\n     * Get the velocity of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle velocities array.\r\n     */\r\n    GetVelocityBuffer() {\r\n        return this.m_velocityBuffer.data;\r\n    }\r\n    /**\r\n     * Get the color of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle colors array.\r\n     */\r\n    GetColorBuffer() {\r\n        this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n        return this.m_colorBuffer.data;\r\n    }\r\n    /**\r\n     * Get the particle-group of each particle.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle group array.\r\n     */\r\n    GetGroupBuffer() {\r\n        return this.m_groupBuffer;\r\n    }\r\n    /**\r\n     * Get the weight of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle positions array.\r\n     */\r\n    GetWeightBuffer() {\r\n        return this.m_weightBuffer;\r\n    }\r\n    /**\r\n     * Get the user-specified data of each particle.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle user-data array.\r\n     */\r\n    GetUserDataBuffer() {\r\n        this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\r\n        return this.m_userDataBuffer.data;\r\n    }\r\n    /**\r\n     * Get the flags for each particle. See the b2ParticleFlag enum.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle-flags array.\r\n     */\r\n    GetFlagsBuffer() {\r\n        return this.m_flagsBuffer.data;\r\n    }\r\n    /**\r\n     * Set flags for a particle. See the b2ParticleFlag enum.\r\n     */\r\n    SetParticleFlags(index, newFlags) {\r\n        let oldFlags = this.m_flagsBuffer.data[index];\r\n        if (oldFlags & ~newFlags) {\r\n            // If any flags might be removed\r\n            this.m_needsUpdateAllParticleFlags = true;\r\n        }\r\n        if (~this.m_allParticleFlags & newFlags) {\r\n            // If any flags were added\r\n            if (newFlags & b2ParticleFlag.b2_tensileParticle) {\r\n                this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer);\r\n            }\r\n            if (newFlags & b2ParticleFlag.b2_colorMixingParticle) {\r\n                this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n            }\r\n            this.m_allParticleFlags |= newFlags;\r\n        }\r\n        this.m_flagsBuffer.data[index] = newFlags;\r\n    }\r\n    /**\r\n     * Get flags for a particle. See the b2ParticleFlag enum.\r\n     */\r\n    GetParticleFlags(index) {\r\n        return this.m_flagsBuffer.data[index];\r\n    }\r\n    /**\r\n     * Set an external buffer for particle data.\r\n     *\r\n     * Normally, the b2World's block allocator is used for particle\r\n     * data. However, sometimes you may have an OpenGL or Java\r\n     * buffer for particle data. To avoid data duplication, you may\r\n     * supply this external buffer.\r\n     *\r\n     * Note that, when b2World's block allocator is used, the\r\n     * particle data buffers can grow as required. However, when\r\n     * external buffers are used, the maximum number of particles is\r\n     * clamped to the size of the smallest external buffer.\r\n     *\r\n     * @param buffer a pointer to a block of memory.\r\n     * @param capacity the number of values in the block.\r\n     */\r\n    SetFlagsBuffer(buffer, capacity) {\r\n        this.SetUserOverridableBuffer(this.m_flagsBuffer, buffer, capacity);\r\n    }\r\n    SetPositionBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Float32Array) {\r\n        ///let array = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Vec2(buffer.subarray(i * 2, i * 2 + 2));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_positionBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_positionBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetVelocityBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Float32Array) {\r\n        ///let array = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Vec2(buffer.subarray(i * 2, i * 2 + 2));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_velocityBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_velocityBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetColorBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Uint8Array) {\r\n        ///let array: b2Color[] = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Color(buffer.subarray(i * 4, i * 4 + 4));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_colorBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_colorBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetUserDataBuffer(buffer, capacity) {\r\n        this.SetUserOverridableBuffer(this.m_userDataBuffer, buffer, capacity);\r\n    }\r\n    /**\r\n     * Get contacts between particles\r\n     * Contact data can be used for many reasons, for example to\r\n     * trigger rendering or audio effects.\r\n     */\r\n    GetContacts() {\r\n        return this.m_contactBuffer.data;\r\n    }\r\n    GetContactCount() {\r\n        return this.m_contactBuffer.count;\r\n    }\r\n    /**\r\n     * Get contacts between particles and bodies\r\n     *\r\n     * Contact data can be used for many reasons, for example to\r\n     * trigger rendering or audio effects.\r\n     */\r\n    GetBodyContacts() {\r\n        return this.m_bodyContactBuffer.data;\r\n    }\r\n    GetBodyContactCount() {\r\n        return this.m_bodyContactBuffer.count;\r\n    }\r\n    /**\r\n     * Get array of particle pairs. The particles in a pair:\r\n     *   (1) are contacting,\r\n     *   (2) are in the same particle group,\r\n     *   (3) are part of a rigid particle group, or are spring, elastic,\r\n     *       or wall particles.\r\n     *   (4) have at least one particle that is a spring or barrier\r\n     *       particle (i.e. one of the types in k_pairFlags),\r\n     *   (5) have at least one particle that returns true for\r\n     *       ConnectionFilter::IsNecessary,\r\n     *   (6) are not zombie particles.\r\n     *\r\n     * Essentially, this is an array of spring or barrier particles\r\n     * that are interacting. The array is sorted by b2ParticlePair's\r\n     * indexA, and then indexB. There are no duplicate entries.\r\n     */\r\n    GetPairs() {\r\n        return this.m_pairBuffer.data;\r\n    }\r\n    GetPairCount() {\r\n        return this.m_pairBuffer.count;\r\n    }\r\n    /**\r\n     * Get array of particle triads. The particles in a triad:\r\n     *   (1) are in the same particle group,\r\n     *   (2) are in a Voronoi triangle together,\r\n     *   (3) are within b2_maxTriadDistance particle diameters of each\r\n     *       other,\r\n     *   (4) return true for ConnectionFilter::ShouldCreateTriad\r\n     *   (5) have at least one particle of type elastic (i.e. one of the\r\n     *       types in k_triadFlags),\r\n     *   (6) are part of a rigid particle group, or are spring, elastic,\r\n     *       or wall particles.\r\n     *   (7) are not zombie particles.\r\n     *\r\n     * Essentially, this is an array of elastic particles that are\r\n     * interacting. The array is sorted by b2ParticleTriad's indexA,\r\n     * then indexB, then indexC. There are no duplicate entries.\r\n     */\r\n    GetTriads() {\r\n        return this.m_triadBuffer.data;\r\n    }\r\n    GetTriadCount() {\r\n        return this.m_triadBuffer.count;\r\n    }\r\n    /**\r\n     * Set an optional threshold for the maximum number of\r\n     * consecutive particle iterations that a particle may contact\r\n     * multiple bodies before it is considered a candidate for being\r\n     * \"stuck\". Setting to zero or less disables.\r\n     */\r\n    SetStuckThreshold(steps) {\r\n        this.m_stuckThreshold = steps;\r\n        if (steps > 0) {\r\n            this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data);\r\n            this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data);\r\n            this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data);\r\n        }\r\n    }\r\n    /**\r\n     * Get potentially stuck particles from the last step; the user\r\n     * must decide if they are stuck or not, and if so, delete or\r\n     * move them\r\n     */\r\n    GetStuckCandidates() {\r\n        ///return m_stuckParticleBuffer.Data();\r\n        return this.m_stuckParticleBuffer.Data();\r\n    }\r\n    /**\r\n     * Get the number of stuck particle candidates from the last\r\n     * step.\r\n     */\r\n    GetStuckCandidateCount() {\r\n        ///return m_stuckParticleBuffer.GetCount();\r\n        return this.m_stuckParticleBuffer.GetCount();\r\n    }\r\n    /**\r\n     * Compute the kinetic energy that can be lost by damping force\r\n     */\r\n    ComputeCollisionEnergy() {\r\n        let s_v = b2ParticleSystem.ComputeCollisionEnergy_s_v;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let sum_v2 = 0;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let n = contact.normal;\r\n            ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n            let v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n            let vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                sum_v2 += vn * vn;\r\n            }\r\n        }\r\n        return 0.5 * this.GetParticleMass() * sum_v2;\r\n    }\r\n    /**\r\n     * Set strict Particle/Body contact check.\r\n     *\r\n     * This is an option that will help ensure correct behavior if\r\n     * there are corners in the world model where Particle/Body\r\n     * contact is ambiguous. This option scales at n*log(n) of the\r\n     * number of Particle/Body contacts, so it is best to only\r\n     * enable if it is necessary for your geometry. Enable if you\r\n     * see strange particle behavior around b2Body intersections.\r\n     */\r\n    SetStrictContactCheck(enabled) {\r\n        this.m_def.strictContactCheck = enabled;\r\n    }\r\n    /**\r\n     * Get the status of the strict contact check.\r\n     */\r\n    GetStrictContactCheck() {\r\n        return this.m_def.strictContactCheck;\r\n    }\r\n    /**\r\n     * Set the lifetime (in seconds) of a particle relative to the\r\n     * current time.  A lifetime of less than or equal to 0.0f\r\n     * results in the particle living forever until it's manually\r\n     * destroyed by the application.\r\n     */\r\n    SetParticleLifetime(index, lifetime) {\r\n        b2Assert(this.ValidateParticleIndex(index));\r\n        let initializeExpirationTimes = this.m_indexByExpirationTimeBuffer.data === null;\r\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\r\n        this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\r\n        // Initialize the inverse mapping buffer.\r\n        if (initializeExpirationTimes) {\r\n            let particleCount = this.GetParticleCount();\r\n            for (let i = 0; i < particleCount; ++i) {\r\n                this.m_indexByExpirationTimeBuffer.data[i] = i;\r\n            }\r\n        }\r\n        ///const int32 quantizedLifetime = (int32)(lifetime / m_def.lifetimeGranularity);\r\n        let quantizedLifetime = lifetime / this.m_def.lifetimeGranularity;\r\n        // Use a negative lifetime so that it's possible to track which\r\n        // of the infinite lifetime particles are older.\r\n        let newExpirationTime = quantizedLifetime > 0.0 ? this.GetQuantizedTimeElapsed() + quantizedLifetime : quantizedLifetime;\r\n        if (newExpirationTime !== this.m_expirationTimeBuffer.data[index]) {\r\n            this.m_expirationTimeBuffer.data[index] = newExpirationTime;\r\n            this.m_expirationTimeBufferRequiresSorting = true;\r\n        }\r\n    }\r\n    /**\r\n     * Get the lifetime (in seconds) of a particle relative to the\r\n     * current time.  A value > 0.0f is returned if the particle is\r\n     * scheduled to be destroyed in the future, values <= 0.0f\r\n     * indicate the particle has an infinite lifetime.\r\n     */\r\n    GetParticleLifetime(index) {\r\n        b2Assert(this.ValidateParticleIndex(index));\r\n        return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);\r\n    }\r\n    /**\r\n     * Enable / disable destruction of particles in CreateParticle()\r\n     * when no more particles can be created due to a prior call to\r\n     * SetMaxParticleCount().  When this is enabled, the oldest\r\n     * particle is destroyed in CreateParticle() favoring the\r\n     * destruction of particles with a finite lifetime over\r\n     * particles with infinite lifetimes. This feature is enabled by\r\n     * default when particle lifetimes are tracked.  Explicitly\r\n     * enabling this feature using this function enables particle\r\n     * lifetime tracking.\r\n     */\r\n    SetDestructionByAge(enable) {\r\n        if (enable) {\r\n            this.GetExpirationTimeBuffer();\r\n        }\r\n        this.m_def.destroyByAge = enable;\r\n    }\r\n    /**\r\n     * Get whether the oldest particle will be destroyed in\r\n     * CreateParticle() when the maximum number of particles are\r\n     * present in the system.\r\n     */\r\n    GetDestructionByAge() {\r\n        return this.m_def.destroyByAge;\r\n    }\r\n    /**\r\n     * Get the array of particle expiration times indexed by\r\n     * particle index.\r\n     *\r\n     * GetParticleCount() items are in the returned array.\r\n     */\r\n    GetExpirationTimeBuffer() {\r\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\r\n        return this.m_expirationTimeBuffer.data;\r\n    }\r\n    /**\r\n     * Convert a expiration time value in returned by\r\n     * GetExpirationTimeBuffer() to a time in seconds relative to\r\n     * the current simulation time.\r\n     */\r\n    ExpirationTimeToLifetime(expirationTime) {\r\n        return (expirationTime > 0 ?\r\n            expirationTime - this.GetQuantizedTimeElapsed() :\r\n            expirationTime) * this.m_def.lifetimeGranularity;\r\n    }\r\n    /**\r\n     * Get the array of particle indices ordered by reverse\r\n     * lifetime. The oldest particle indexes are at the end of the\r\n     * array with the newest at the start.  Particles with infinite\r\n     * lifetimes (i.e expiration times less than or equal to 0) are\r\n     * placed at the start of the array.\r\n     * ExpirationTimeToLifetime(GetExpirationTimeBuffer()[index]) is\r\n     * equivalent to GetParticleLifetime(index).\r\n     *\r\n     * GetParticleCount() items are in the returned array.\r\n     */\r\n    GetIndexByExpirationTimeBuffer() {\r\n        // If particles are present, initialize / reinitialize the lifetime buffer.\r\n        if (this.GetParticleCount()) {\r\n            this.SetParticleLifetime(0, this.GetParticleLifetime(0));\r\n        }\r\n        else {\r\n            this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\r\n        }\r\n        return this.m_indexByExpirationTimeBuffer.data;\r\n    }\r\n    /**\r\n     * Apply an impulse to one particle. This immediately modifies\r\n     * the velocity. Similar to b2Body::ApplyLinearImpulse.\r\n     *\r\n     * @param index the particle that will be modified.\r\n     * @param impulse impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n     */\r\n    ParticleApplyLinearImpulse(index, impulse) {\r\n        this.ApplyLinearImpulse(index, index + 1, impulse);\r\n    }\r\n    /**\r\n     * Apply an impulse to all particles between 'firstIndex' and\r\n     * 'lastIndex'. This immediately modifies the velocity. Note\r\n     * that the impulse is applied to the total mass of all\r\n     * particles. So, calling ParticleApplyLinearImpulse(0, impulse)\r\n     * and ParticleApplyLinearImpulse(1, impulse) will impart twice\r\n     * as much velocity as calling just ApplyLinearImpulse(0, 1,\r\n     * impulse).\r\n     *\r\n     * @param firstIndex the first particle to be modified.\r\n     * @param lastIndex the last particle to be modified.\r\n     * @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n     */\r\n    ApplyLinearImpulse(firstIndex, lastIndex, impulse) {\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let numParticles = (lastIndex - firstIndex);\r\n        let totalMass = numParticles * this.GetParticleMass();\r\n        ///const b2Vec2 velocityDelta = impulse / totalMass;\r\n        let velocityDelta = impulse.Clone().SelfMul(1 / totalMass);\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            ///m_velocityBuffer.data[i] += velocityDelta;\r\n            vel_data[i].SelfAdd(velocityDelta);\r\n        }\r\n    }\r\n    static IsSignificantForce(force) {\r\n        return force.x !== 0 || force.y !== 0;\r\n    }\r\n    /**\r\n     * Apply a force to the center of a particle.\r\n     *\r\n     * @param index the particle that will be modified.\r\n     * @param force the world force vector, usually in Newtons (N).\r\n     */\r\n    ParticleApplyForce(index, force) {\r\n        if (b2ParticleSystem.IsSignificantForce(force) &&\r\n            this.ForceCanBeApplied(this.m_flagsBuffer.data[index])) {\r\n            this.PrepareForceBuffer();\r\n            ///m_forceBuffer[index] += force;\r\n            this.m_forceBuffer[index].SelfAdd(force);\r\n        }\r\n    }\r\n    /**\r\n     * Distribute a force across several particles. The particles\r\n     * must not be wall particles. Note that the force is\r\n     * distributed across all the particles, so calling this\r\n     * function for indices 0..N is not the same as calling\r\n     * ParticleApplyForce(i, force) for i in 0..N.\r\n     *\r\n     * @param firstIndex the first particle to be modified.\r\n     * @param lastIndex the last particle to be modified.\r\n     * @param force the world force vector, usually in Newtons (N).\r\n     */\r\n    ApplyForce(firstIndex, lastIndex, force) {\r\n        // Ensure we're not trying to apply force to particles that can't move,\r\n        // such as wall particles.\r\n        // #if B2_ASSERT_ENABLED\r\n        ///let flags = 0;\r\n        ///for (let i = firstIndex; i < lastIndex; i++) {\r\n        ///flags |= this.m_flagsBuffer.data[i];\r\n        ///}\r\n        ///b2Assert(this.ForceCanBeApplied(flags));\r\n        // #endif\r\n        // Early out if force does nothing (optimization).\r\n        ///const b2Vec2 distributedForce = force / (float32)(lastIndex - firstIndex);\r\n        let distributedForce = force.Clone().SelfMul(1 / (lastIndex - firstIndex));\r\n        if (b2ParticleSystem.IsSignificantForce(distributedForce)) {\r\n            this.PrepareForceBuffer();\r\n            // Distribute the force over all the particles.\r\n            for (let i = firstIndex; i < lastIndex; i++) {\r\n                ///m_forceBuffer[i] += distributedForce;\r\n                this.m_forceBuffer[i].SelfAdd(distributedForce);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get the next particle-system in the world's particle-system\r\n     * list.\r\n     */\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /**\r\n     * Query the particle system for all particles that potentially\r\n     * overlap the provided AABB.\r\n     * b2QueryCallback::ShouldQueryParticleSystem is ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param aabb the query box.\r\n     */\r\n    QueryAABB(callback, aabb) {\r\n        if (this.m_proxyBuffer.count === 0) {\r\n            return;\r\n        }\r\n        let beginProxy = 0;\r\n        let endProxy = this.m_proxyBuffer.count;\r\n        let firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x, this.m_inverseDiameter * aabb.lowerBound.y), b2ParticleSystem.Proxy.CompareProxyTag);\r\n        let lastProxy = std_upper_bound(this.m_proxyBuffer.data, firstProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x, this.m_inverseDiameter * aabb.upperBound.y), b2ParticleSystem.Proxy.CompareTagProxy);\r\n        let pos_data = this.m_positionBuffer.data;\r\n        for (let k = firstProxy; k < lastProxy; ++k) {\r\n            let proxy = this.m_proxyBuffer.data[k];\r\n            let i = proxy.index;\r\n            let p = pos_data[i];\r\n            if (aabb.lowerBound.x < p.x && p.x < aabb.upperBound.x &&\r\n                aabb.lowerBound.y < p.y && p.y < aabb.upperBound.y) {\r\n                if (!callback.ReportParticle(this, i)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Query the particle system for all particles that potentially\r\n     * overlap the provided shape's AABB. Calls QueryAABB\r\n     * internally. b2QueryCallback::ShouldQueryParticleSystem is\r\n     * ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param shape the query shape\r\n     * @param xf the transform of the AABB\r\n     * @param childIndex\r\n     */\r\n    QueryShapeAABB(callback, shape, xf, childIndex = 0) {\r\n        let s_aabb = b2ParticleSystem.QueryShapeAABB_s_aabb;\r\n        let aabb = s_aabb;\r\n        shape.ComputeAABB(aabb, xf, childIndex);\r\n        this.QueryAABB(callback, aabb);\r\n    }\r\n    QueryPointAABB(callback, point, slop = b2_linearSlop) {\r\n        let s_aabb = b2ParticleSystem.QueryPointAABB_s_aabb;\r\n        let aabb = s_aabb;\r\n        aabb.lowerBound.Set(point.x - slop, point.y - slop);\r\n        aabb.upperBound.Set(point.x + slop, point.y + slop);\r\n        this.QueryAABB(callback, aabb);\r\n    }\r\n    /**\r\n     * Ray-cast the particle system for all particles in the path of\r\n     * the ray. Your callback controls whether you get the closest\r\n     * point, any point, or n-points. The ray-cast ignores particles\r\n     * that contain the starting point.\r\n     * b2RayCastCallback::ShouldQueryParticleSystem is ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param point1 the ray starting point\r\n     * @param point2 the ray ending point\r\n     */\r\n    RayCast(callback, point1, point2) {\r\n        let s_aabb = b2ParticleSystem.RayCast_s_aabb;\r\n        let s_p = b2ParticleSystem.RayCast_s_p;\r\n        let s_v = b2ParticleSystem.RayCast_s_v;\r\n        let s_n = b2ParticleSystem.RayCast_s_n;\r\n        let s_point = b2ParticleSystem.RayCast_s_point;\r\n        if (this.m_proxyBuffer.count === 0) {\r\n            return;\r\n        }\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let aabb = s_aabb;\r\n        b2Vec2.MinV(point1, point2, aabb.lowerBound);\r\n        b2Vec2.MaxV(point1, point2, aabb.upperBound);\r\n        let fraction = 1;\r\n        // solving the following equation:\r\n        // ((1-t)*point1+t*point2-position)^2=diameter^2\r\n        // where t is a potential fraction\r\n        ///b2Vec2 v = point2 - point1;\r\n        let v = b2Vec2.SubVV(point2, point1, s_v);\r\n        let v2 = b2Vec2.DotVV(v, v);\r\n        let enumerator = this.GetInsideBoundsEnumerator(aabb);\r\n        let i;\r\n        while ((i = enumerator.GetNext()) >= 0) {\r\n            ///b2Vec2 p = point1 - m_positionBuffer.data[i];\r\n            let p = b2Vec2.SubVV(point1, pos_data[i], s_p);\r\n            let pv = b2Vec2.DotVV(p, v);\r\n            let p2 = b2Vec2.DotVV(p, p);\r\n            let determinant = pv * pv - v2 * (p2 - this.m_squaredDiameter);\r\n            if (determinant >= 0) {\r\n                let sqrtDeterminant = b2Sqrt(determinant);\r\n                // find a solution between 0 and fraction\r\n                let t = (-pv - sqrtDeterminant) / v2;\r\n                if (t > fraction) {\r\n                    continue;\r\n                }\r\n                if (t < 0) {\r\n                    t = (-pv + sqrtDeterminant) / v2;\r\n                    if (t < 0 || t > fraction) {\r\n                        continue;\r\n                    }\r\n                }\r\n                ///b2Vec2 n = p + t * v;\r\n                let n = b2Vec2.AddVMulSV(p, t, v, s_n);\r\n                n.Normalize();\r\n                ///float32 f = callback.ReportParticle(this, i, point1 + t * v, n, t);\r\n                let f = callback.ReportParticle(this, i, b2Vec2.AddVMulSV(point1, t, v, s_point), n, t);\r\n                fraction = b2Min(fraction, f);\r\n                if (fraction <= 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Compute the axis-aligned bounding box for all particles\r\n     * contained within this particle system.\r\n     * @param aabb Returns the axis-aligned bounding box of the system.\r\n     */\r\n    ComputeAABB(aabb) {\r\n        let particleCount = this.GetParticleCount();\r\n        b2Assert(aabb !== null);\r\n        aabb.lowerBound.x = +b2_maxFloat;\r\n        aabb.lowerBound.y = +b2_maxFloat;\r\n        aabb.upperBound.x = -b2_maxFloat;\r\n        aabb.upperBound.y = -b2_maxFloat;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let p = pos_data[i];\r\n            b2Vec2.MinV(aabb.lowerBound, p, aabb.lowerBound);\r\n            b2Vec2.MaxV(aabb.upperBound, p, aabb.upperBound);\r\n        }\r\n        aabb.lowerBound.x -= this.m_particleDiameter;\r\n        aabb.lowerBound.y -= this.m_particleDiameter;\r\n        aabb.upperBound.x += this.m_particleDiameter;\r\n        aabb.upperBound.y += this.m_particleDiameter;\r\n    }\r\n    FreeBuffer(b, capacity) {\r\n        if (b === null) {\r\n            return;\r\n        }\r\n        b.length = 0;\r\n    }\r\n    FreeUserOverridableBuffer(b) {\r\n        if (b.userSuppliedCapacity === 0) {\r\n            this.FreeBuffer(b.data, this.m_internalAllocatedCapacity);\r\n        }\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer3(oldBuffer, oldCapacity, newCapacity) {\r\n        b2Assert(newCapacity > oldCapacity);\r\n        let newBuffer = (oldBuffer) ? oldBuffer.slice() : [];\r\n        newBuffer.length = newCapacity;\r\n        return newBuffer;\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer5(buffer, userSuppliedCapacity, oldCapacity, newCapacity, deferred) {\r\n        b2Assert(newCapacity > oldCapacity);\r\n        // A 'deferred' buffer is reallocated only if it is not NULL.\r\n        // If 'userSuppliedCapacity' is not zero, buffer is user supplied and must\r\n        // be kept.\r\n        b2Assert(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity);\r\n        if ((!deferred || buffer) && !userSuppliedCapacity) {\r\n            buffer = this.ReallocateBuffer3(buffer, oldCapacity, newCapacity);\r\n        }\r\n        return buffer;\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer4(buffer, oldCapacity, newCapacity, deferred) {\r\n        b2Assert(newCapacity > oldCapacity);\r\n        return this.ReallocateBuffer5(buffer.data, buffer.userSuppliedCapacity, oldCapacity, newCapacity, deferred);\r\n    }\r\n    RequestBuffer(buffer) {\r\n        if (!buffer) {\r\n            if (this.m_internalAllocatedCapacity === 0) {\r\n                this.ReallocateInternalAllocatedBuffers(b2_minParticleSystemBufferCapacity);\r\n            }\r\n            buffer = [];\r\n            buffer.length = this.m_internalAllocatedCapacity;\r\n        }\r\n        return buffer;\r\n    }\r\n    /**\r\n     * Reallocate the handle / index map and schedule the allocation\r\n     * of a new pool for handle allocation.\r\n     */\r\n    ReallocateHandleBuffers(newCapacity) {\r\n        b2Assert(newCapacity > this.m_internalAllocatedCapacity);\r\n        // Reallocate a new handle / index map buffer, copying old handle pointers\r\n        // is fine since they're kept around.\r\n        this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, newCapacity, true);\r\n        // Set the size of the next handle allocation.\r\n        ///this.m_handleAllocator.SetItemsPerSlab(newCapacity - this.m_internalAllocatedCapacity);\r\n    }\r\n    ReallocateInternalAllocatedBuffers(capacity) {\r\n        function LimitCapacity(capacity, maxCount) {\r\n            return maxCount && capacity > maxCount ? maxCount : capacity;\r\n        }\r\n        // Don't increase capacity beyond the smallest user-supplied buffer size.\r\n        capacity = LimitCapacity(capacity, this.m_def.maxCount);\r\n        capacity = LimitCapacity(capacity, this.m_flagsBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_positionBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_velocityBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_colorBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_userDataBuffer.userSuppliedCapacity);\r\n        if (this.m_internalAllocatedCapacity < capacity) {\r\n            this.ReallocateHandleBuffers(capacity);\r\n            this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            // Conditionally defer these as they are optional if the feature is\r\n            // not enabled.\r\n            let stuck = this.m_stuckThreshold > 0;\r\n            this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_depthBuffer = this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_internalAllocatedCapacity = capacity;\r\n        }\r\n    }\r\n    CreateParticleForGroup(groupDef, xf, p) {\r\n        let particleDef = new b2ParticleDef();\r\n        particleDef.flags = groupDef.flags;\r\n        ///particleDef.position = b2Mul(xf, p);\r\n        b2Transform.MulXV(xf, p, particleDef.position);\r\n        ///particleDef.velocity =\r\n        ///  groupDef.linearVelocity +\r\n        ///  b2Cross(groupDef.angularVelocity,\r\n        ///      particleDef.position - groupDef.position);\r\n        b2Vec2.AddVV(groupDef.linearVelocity, b2Vec2.CrossSV(groupDef.angularVelocity, b2Vec2.SubVV(particleDef.position, groupDef.position, b2Vec2.s_t0), b2Vec2.s_t0), particleDef.velocity);\r\n        particleDef.color.Copy(groupDef.color);\r\n        particleDef.lifetime = groupDef.lifetime;\r\n        particleDef.userData = groupDef.userData;\r\n        this.CreateParticle(particleDef);\r\n    }\r\n    CreateParticlesStrokeShapeForGroup(shape, groupDef, xf) {\r\n        let s_edge = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;\r\n        let s_d = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;\r\n        let s_p = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;\r\n        let stride = groupDef.stride;\r\n        if (stride === 0) {\r\n            stride = this.GetParticleStride();\r\n        }\r\n        let positionOnEdge = 0;\r\n        let childCount = shape.GetChildCount();\r\n        for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n            let edge = null;\r\n            if (shape.GetType() === b2ShapeType.e_edgeShape) {\r\n                edge = shape;\r\n            }\r\n            else {\r\n                b2Assert(shape.GetType() === b2ShapeType.e_chainShape);\r\n                edge = s_edge;\r\n                shape.GetChildEdge(edge, childIndex);\r\n            }\r\n            let d = b2Vec2.SubVV(edge.m_vertex2, edge.m_vertex1, s_d);\r\n            let edgeLength = d.Length();\r\n            while (positionOnEdge < edgeLength) {\r\n                ///b2Vec2 p = edge.m_vertex1 + positionOnEdge / edgeLength * d;\r\n                let p = b2Vec2.AddVMulSV(edge.m_vertex1, positionOnEdge / edgeLength, d, s_p);\r\n                this.CreateParticleForGroup(groupDef, xf, p);\r\n                positionOnEdge += stride;\r\n            }\r\n            positionOnEdge -= edgeLength;\r\n        }\r\n    }\r\n    CreateParticlesFillShapeForGroup(shape, groupDef, xf) {\r\n        let s_aabb = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;\r\n        let s_p = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;\r\n        let stride = groupDef.stride;\r\n        if (stride === 0) {\r\n            stride = this.GetParticleStride();\r\n        }\r\n        ///b2Transform identity;\r\n        /// identity.SetIdentity();\r\n        let identity = b2Transform.IDENTITY;\r\n        let aabb = s_aabb;\r\n        b2Assert(shape.GetChildCount() === 1);\r\n        shape.ComputeAABB(aabb, identity, 0);\r\n        for (let y = Math.floor(aabb.lowerBound.y / stride) * stride; y < aabb.upperBound.y; y += stride) {\r\n            for (let x = Math.floor(aabb.lowerBound.x / stride) * stride; x < aabb.upperBound.x; x += stride) {\r\n                let p = s_p.Set(x, y);\r\n                if (shape.TestPoint(identity, p)) {\r\n                    this.CreateParticleForGroup(groupDef, xf, p);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    CreateParticlesWithShapeForGroup(shape, groupDef, xf) {\r\n        switch (shape.GetType()) {\r\n            case b2ShapeType.e_edgeShape:\r\n            case b2ShapeType.e_chainShape:\r\n                this.CreateParticlesStrokeShapeForGroup(shape, groupDef, xf);\r\n                break;\r\n            case b2ShapeType.e_polygonShape:\r\n            case b2ShapeType.e_circleShape:\r\n                this.CreateParticlesFillShapeForGroup(shape, groupDef, xf);\r\n                break;\r\n            default:\r\n                b2Assert(false);\r\n                break;\r\n        }\r\n    }\r\n    CreateParticlesWithShapesForGroup(shapes, shapeCount, groupDef, xf) {\r\n        let compositeShape = new b2ParticleSystem.CompositeShape(shapes, shapeCount);\r\n        this.CreateParticlesFillShapeForGroup(compositeShape, groupDef, xf);\r\n    }\r\n    CloneParticle(oldIndex, group) {\r\n        let def = new b2ParticleDef();\r\n        def.flags = this.m_flagsBuffer.data[oldIndex];\r\n        def.position.Copy(this.m_positionBuffer.data[oldIndex]);\r\n        def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);\r\n        if (this.m_colorBuffer.data) {\r\n            def.color.Copy(this.m_colorBuffer.data[oldIndex]);\r\n        }\r\n        if (this.m_userDataBuffer.data) {\r\n            def.userData = this.m_userDataBuffer.data[oldIndex];\r\n        }\r\n        def.group = group;\r\n        let newIndex = this.CreateParticle(def);\r\n        if (this.m_handleIndexBuffer.data) {\r\n            let handle = this.m_handleIndexBuffer.data[oldIndex];\r\n            if (handle)\r\n                handle.SetIndex(newIndex);\r\n            this.m_handleIndexBuffer.data[newIndex] = handle;\r\n            this.m_handleIndexBuffer.data[oldIndex] = null;\r\n        }\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            this.m_lastBodyContactStepBuffer.data[newIndex] =\r\n                this.m_lastBodyContactStepBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            this.m_bodyContactCountBuffer.data[newIndex] =\r\n                this.m_bodyContactCountBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            this.m_consecutiveContactStepsBuffer.data[newIndex] =\r\n                this.m_consecutiveContactStepsBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_hasForce) {\r\n            this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);\r\n        }\r\n        if (this.m_staticPressureBuffer) {\r\n            this.m_staticPressureBuffer[newIndex] = this.m_staticPressureBuffer[oldIndex];\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            this.m_depthBuffer[newIndex] = this.m_depthBuffer[oldIndex];\r\n        }\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            this.m_expirationTimeBuffer.data[newIndex] =\r\n                this.m_expirationTimeBuffer.data[oldIndex];\r\n        }\r\n        return newIndex;\r\n    }\r\n    DestroyParticlesInGroup(group, callDestructionListener = false) {\r\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n            this.DestroyParticle(i, callDestructionListener);\r\n        }\r\n    }\r\n    DestroyParticleGroup(group) {\r\n        b2Assert(this.m_groupCount > 0);\r\n        b2Assert(group !== null);\r\n        if (this.m_world.m_destructionListener) {\r\n            this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);\r\n        }\r\n        this.SetGroupFlags(group, 0);\r\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n            this.m_groupBuffer[i] = null;\r\n        }\r\n        if (group.m_prev) {\r\n            group.m_prev.m_next = group.m_next;\r\n        }\r\n        if (group.m_next) {\r\n            group.m_next.m_prev = group.m_prev;\r\n        }\r\n        if (group === this.m_groupList) {\r\n            this.m_groupList = group.m_next;\r\n        }\r\n        --this.m_groupCount;\r\n    }\r\n    static ParticleCanBeConnected(flags, group) {\r\n        return ((flags & (b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_springParticle | b2ParticleFlag.b2_elasticParticle)) !== 0) ||\r\n            ((group !== null) && ((group.GetGroupFlags() & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0));\r\n    }\r\n    UpdatePairsAndTriads(firstIndex, lastIndex, filter) {\r\n        let s_dab = b2ParticleSystem.UpdatePairsAndTriads_s_dab;\r\n        let s_dbc = b2ParticleSystem.UpdatePairsAndTriads_s_dbc;\r\n        let s_dca = b2ParticleSystem.UpdatePairsAndTriads_s_dca;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        // Create pairs or triads.\r\n        // All particles in each pair/triad should satisfy the following:\r\n        // * firstIndex <= index < lastIndex\r\n        // * don't have b2_zombieParticle\r\n        // * ParticleCanBeConnected returns true\r\n        // * ShouldCreatePair/ShouldCreateTriad returns true\r\n        // Any particles in each pair/triad should satisfy the following:\r\n        // * filter.IsNeeded returns true\r\n        // * have one of k_pairFlags/k_triadsFlags\r\n        b2Assert(firstIndex <= lastIndex);\r\n        let particleFlags = 0;\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            particleFlags |= this.m_flagsBuffer.data[i];\r\n        }\r\n        if (particleFlags & b2ParticleSystem.k_pairFlags) {\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                let contact = this.m_contactBuffer.data[k];\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                let af = this.m_flagsBuffer.data[a];\r\n                let bf = this.m_flagsBuffer.data[b];\r\n                let groupA = this.m_groupBuffer[a];\r\n                let groupB = this.m_groupBuffer[b];\r\n                if (a >= firstIndex && a < lastIndex &&\r\n                    b >= firstIndex && b < lastIndex &&\r\n                    !((af | bf) & b2ParticleFlag.b2_zombieParticle) &&\r\n                    ((af | bf) & b2ParticleSystem.k_pairFlags) &&\r\n                    (filter.IsNecessary(a) || filter.IsNecessary(b)) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(af, groupA) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(bf, groupB) &&\r\n                    filter.ShouldCreatePair(a, b)) {\r\n                    ///b2ParticlePair& pair = m_pairBuffer.Append();\r\n                    let pair = this.m_pairBuffer.data[this.m_pairBuffer.Append()];\r\n                    pair.indexA = a;\r\n                    pair.indexB = b;\r\n                    pair.flags = contact.flags;\r\n                    pair.strength = b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1);\r\n                    ///pair.distance = b2Distance(pos_data[a], pos_data[b]); // TODO: this was wrong!\r\n                    pair.distance = b2Vec2.DistanceVV(pos_data[a], pos_data[b]);\r\n                }\r\n                ///std::stable_sort(m_pairBuffer.Begin(), m_pairBuffer.End(), ComparePairIndices);\r\n                std_stable_sort(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, b2ParticleSystem.ComparePairIndices);\r\n                ///m_pairBuffer.Unique(MatchPairIndices);\r\n                this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);\r\n            }\r\n        }\r\n        if (particleFlags & b2ParticleSystem.k_triadFlags) {\r\n            let diagram = new b2VoronoiDiagram(lastIndex - firstIndex);\r\n            ///let necessary_count = 0;\r\n            for (let i = firstIndex; i < lastIndex; i++) {\r\n                let flags = this.m_flagsBuffer.data[i];\r\n                let group = this.m_groupBuffer[i];\r\n                if (!(flags & b2ParticleFlag.b2_zombieParticle) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(flags, group)) {\r\n                    ///if (filter.IsNecessary(i)) {\r\n                    ///++necessary_count;\r\n                    ///}\r\n                    diagram.AddGenerator(pos_data[i], i, filter.IsNecessary(i));\r\n                }\r\n            }\r\n            ///if (necessary_count === 0) {\r\n            /////debugger;\r\n            ///for (let i = firstIndex; i < lastIndex; i++) {\r\n            ///  filter.IsNecessary(i);\r\n            ///}\r\n            ///}\r\n            let stride = this.GetParticleStride();\r\n            diagram.Generate(stride / 2, stride * 2);\r\n            const system = this;\r\n            let callback = /*UpdateTriadsCallback*/ (a, b, c) => {\r\n                let af = system.m_flagsBuffer.data[a];\r\n                let bf = system.m_flagsBuffer.data[b];\r\n                let cf = system.m_flagsBuffer.data[c];\r\n                if (((af | bf | cf) & b2ParticleSystem.k_triadFlags) &&\r\n                    filter.ShouldCreateTriad(a, b, c)) {\r\n                    let pa = pos_data[a];\r\n                    let pb = pos_data[b];\r\n                    let pc = pos_data[c];\r\n                    let dab = b2Vec2.SubVV(pa, pb, s_dab);\r\n                    let dbc = b2Vec2.SubVV(pb, pc, s_dbc);\r\n                    let dca = b2Vec2.SubVV(pc, pa, s_dca);\r\n                    let maxDistanceSquared = b2_maxTriadDistanceSquared * system.m_squaredDiameter;\r\n                    if (b2Vec2.DotVV(dab, dab) > maxDistanceSquared ||\r\n                        b2Vec2.DotVV(dbc, dbc) > maxDistanceSquared ||\r\n                        b2Vec2.DotVV(dca, dca) > maxDistanceSquared) {\r\n                        return;\r\n                    }\r\n                    let groupA = system.m_groupBuffer[a];\r\n                    let groupB = system.m_groupBuffer[b];\r\n                    let groupC = system.m_groupBuffer[c];\r\n                    ///b2ParticleTriad& triad = m_system.m_triadBuffer.Append();\r\n                    let triad = system.m_triadBuffer.data[system.m_triadBuffer.Append()];\r\n                    triad.indexA = a;\r\n                    triad.indexB = b;\r\n                    triad.indexC = c;\r\n                    triad.flags = af | bf | cf;\r\n                    triad.strength = b2Min(b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1), groupC ? groupC.m_strength : 1);\r\n                    ///let midPoint = b2Vec2.MulSV(1.0 / 3.0, b2Vec2.AddVV(pa, b2Vec2.AddVV(pb, pc, new b2Vec2()), new b2Vec2()), new b2Vec2());\r\n                    let midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\r\n                    let midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\r\n                    ///triad.pa = b2Vec2.SubVV(pa, midPoint, new b2Vec2());\r\n                    triad.pa.x = pa.x - midPoint_x;\r\n                    triad.pa.y = pa.y - midPoint_y;\r\n                    ///triad.pb = b2Vec2.SubVV(pb, midPoint, new b2Vec2());\r\n                    triad.pb.x = pb.x - midPoint_x;\r\n                    triad.pb.y = pb.y - midPoint_y;\r\n                    ///triad.pc = b2Vec2.SubVV(pc, midPoint, new b2Vec2());\r\n                    triad.pc.x = pc.x - midPoint_x;\r\n                    triad.pc.y = pc.y - midPoint_y;\r\n                    triad.ka = -b2Vec2.DotVV(dca, dab);\r\n                    triad.kb = -b2Vec2.DotVV(dab, dbc);\r\n                    triad.kc = -b2Vec2.DotVV(dbc, dca);\r\n                    triad.s = b2Vec2.CrossVV(pa, pb) + b2Vec2.CrossVV(pb, pc) + b2Vec2.CrossVV(pc, pa);\r\n                }\r\n            };\r\n            diagram.GetNodes(callback);\r\n            ///std::stable_sort(m_triadBuffer.Begin(), m_triadBuffer.End(), CompareTriadIndices);\r\n            std_stable_sort(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, b2ParticleSystem.CompareTriadIndices);\r\n            ///m_triadBuffer.Unique(MatchTriadIndices);\r\n            this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);\r\n        }\r\n    }\r\n    UpdatePairsAndTriadsWithReactiveParticles() {\r\n        let filter = new b2ParticleSystem.ReactiveFilter(this.m_flagsBuffer);\r\n        this.UpdatePairsAndTriads(0, this.m_count, filter);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_flagsBuffer.data[i] &= ~b2ParticleFlag.b2_reactiveParticle;\r\n        }\r\n        this.m_allParticleFlags &= ~b2ParticleFlag.b2_reactiveParticle;\r\n    }\r\n    static ComparePairIndices(a, b) {\r\n        let diffA = a.indexA - b.indexA;\r\n        if (diffA !== 0)\r\n            return diffA < 0;\r\n        return a.indexB < b.indexB;\r\n    }\r\n    static MatchPairIndices(a, b) {\r\n        return a.indexA === b.indexA && a.indexB === b.indexB;\r\n    }\r\n    static CompareTriadIndices(a, b) {\r\n        let diffA = a.indexA - b.indexA;\r\n        if (diffA !== 0)\r\n            return diffA < 0;\r\n        let diffB = a.indexB - b.indexB;\r\n        if (diffB !== 0)\r\n            return diffB < 0;\r\n        return a.indexC < b.indexC;\r\n    }\r\n    static MatchTriadIndices(a, b) {\r\n        return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC;\r\n    }\r\n    static InitializeParticleLists(group, nodeBuffer) {\r\n        let bufferIndex = group.GetBufferIndex();\r\n        let particleCount = group.GetParticleCount();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let node = nodeBuffer[i];\r\n            node.list = node;\r\n            node.next = null;\r\n            node.count = 1;\r\n            node.index = i + bufferIndex;\r\n        }\r\n    }\r\n    MergeParticleListsInContact(group, nodeBuffer) {\r\n        let bufferIndex = group.GetBufferIndex();\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            /*const b2ParticleContact&*/\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            if (!group.ContainsParticle(a) || !group.ContainsParticle(b)) {\r\n                continue;\r\n            }\r\n            let listA = nodeBuffer[a - bufferIndex].list;\r\n            let listB = nodeBuffer[b - bufferIndex].list;\r\n            if (listA === listB) {\r\n                continue;\r\n            }\r\n            // To minimize the cost of insertion, make sure listA is longer than\r\n            // listB.\r\n            if (listA.count < listB.count) {\r\n                let _tmp = listA;\r\n                listA = listB;\r\n                listB = _tmp; ///b2Swap(listA, listB);\r\n            }\r\n            b2Assert(listA.count >= listB.count);\r\n            b2ParticleSystem.MergeParticleLists(listA, listB);\r\n        }\r\n    }\r\n    static MergeParticleLists(listA, listB) {\r\n        // Insert listB between index 0 and 1 of listA\r\n        // Example:\r\n        //     listA => a1 => a2 => a3 => null\r\n        //     listB => b1 => b2 => null\r\n        // to\r\n        //     listA => listB => b1 => b2 => a1 => a2 => a3 => null\r\n        b2Assert(listA !== listB);\r\n        for (let b = listB;;) {\r\n            b.list = listA;\r\n            let nextB = b.next;\r\n            if (nextB) {\r\n                b = nextB;\r\n            }\r\n            else {\r\n                b.next = listA.next;\r\n                break;\r\n            }\r\n        }\r\n        listA.next = listB;\r\n        listA.count += listB.count;\r\n        listB.count = 0;\r\n    }\r\n    static FindLongestParticleList(group, nodeBuffer) {\r\n        let particleCount = group.GetParticleCount();\r\n        let result = nodeBuffer[0];\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let node = nodeBuffer[i];\r\n            if (result.count < node.count) {\r\n                result = node;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    MergeZombieParticleListNodes(group, nodeBuffer, survivingList) {\r\n        let particleCount = group.GetParticleCount();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let node = nodeBuffer[i];\r\n            if (node !== survivingList &&\r\n                (this.m_flagsBuffer.data[node.index] & b2ParticleFlag.b2_zombieParticle)) {\r\n                b2ParticleSystem.MergeParticleListAndNode(survivingList, node);\r\n            }\r\n        }\r\n    }\r\n    static MergeParticleListAndNode(list, node) {\r\n        // Insert node between index 0 and 1 of list\r\n        // Example:\r\n        //     list => a1 => a2 => a3 => null\r\n        //     node => null\r\n        // to\r\n        //     list => node => a1 => a2 => a3 => null\r\n        b2Assert(node !== list);\r\n        b2Assert(node.list === node);\r\n        b2Assert(node.count === 1);\r\n        node.list = list;\r\n        node.next = list.next;\r\n        list.next = node;\r\n        list.count++;\r\n        node.count = 0;\r\n    }\r\n    CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList) {\r\n        let particleCount = group.GetParticleCount();\r\n        let def = new b2ParticleGroupDef();\r\n        def.groupFlags = group.GetGroupFlags();\r\n        def.userData = group.GetUserData();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let list = nodeBuffer[i];\r\n            if (!list.count || list === survivingList) {\r\n                continue;\r\n            }\r\n            b2Assert(list.list === list);\r\n            let newGroup = this.CreateParticleGroup(def);\r\n            for (let node = list; node; node = node.next) {\r\n                let oldIndex = node.index;\r\n                let flags = this.m_flagsBuffer.data[oldIndex];\r\n                b2Assert(!(flags & b2ParticleFlag.b2_zombieParticle));\r\n                let newIndex = this.CloneParticle(oldIndex, newGroup);\r\n                this.m_flagsBuffer.data[oldIndex] |= b2ParticleFlag.b2_zombieParticle;\r\n                node.index = newIndex;\r\n            }\r\n        }\r\n    }\r\n    UpdatePairsAndTriadsWithParticleList(group, nodeBuffer) {\r\n        let bufferIndex = group.GetBufferIndex();\r\n        // Update indices in pairs and triads. If an index belongs to the group,\r\n        // replace it with the corresponding value in nodeBuffer.\r\n        // Note that nodeBuffer is allocated only for the group and the index should\r\n        // be shifted by bufferIndex.\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            let pair = this.m_pairBuffer.data[k];\r\n            let a = pair.indexA;\r\n            let b = pair.indexB;\r\n            if (group.ContainsParticle(a)) {\r\n                pair.indexA = nodeBuffer[a - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(b)) {\r\n                pair.indexB = nodeBuffer[b - bufferIndex].index;\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            let triad = this.m_triadBuffer.data[k];\r\n            let a = triad.indexA;\r\n            let b = triad.indexB;\r\n            let c = triad.indexC;\r\n            if (group.ContainsParticle(a)) {\r\n                triad.indexA = nodeBuffer[a - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(b)) {\r\n                triad.indexB = nodeBuffer[b - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(c)) {\r\n                triad.indexC = nodeBuffer[c - bufferIndex].index;\r\n            }\r\n        }\r\n    }\r\n    ComputeDepth() {\r\n        ///b2ParticleContact* contactGroups = (b2ParticleContact*) this.m_world.m_stackAllocator.Allocate(sizeof(b2ParticleContact) * this.m_contactBuffer.GetCount());\r\n        let contactGroups = []; // TODO: static\r\n        let contactGroupsCount = 0;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let groupA = this.m_groupBuffer[a];\r\n            let groupB = this.m_groupBuffer[b];\r\n            if (groupA && groupA === groupB &&\r\n                (groupA.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)) {\r\n                contactGroups[contactGroupsCount++] = contact;\r\n            }\r\n        }\r\n        ///b2ParticleGroup** groupsToUpdate = (b2ParticleGroup**) this.m_world.m_stackAllocator.Allocate(sizeof(b2ParticleGroup*) * this.m_groupCount);\r\n        let groupsToUpdate = []; // TODO: static\r\n        let groupsToUpdateCount = 0;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\r\n                groupsToUpdate[groupsToUpdateCount++] = group;\r\n                this.SetGroupFlags(group, group.m_groupFlags &\r\n                    ~b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\r\n                for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                    this.m_accumulationBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        // Compute sum of weight of contacts except between different groups.\r\n        for (let k = 0; k < contactGroupsCount; k++) {\r\n            let contact = contactGroups[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let w = contact.weight;\r\n            this.m_accumulationBuffer[a] += w;\r\n            this.m_accumulationBuffer[b] += w;\r\n        }\r\n        b2Assert(this.m_depthBuffer !== null);\r\n        for (let i = 0; i < groupsToUpdateCount; i++) {\r\n            let group = groupsToUpdate[i];\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                let w = this.m_accumulationBuffer[i];\r\n                this.m_depthBuffer[i] = w < 0.8 ? 0 : b2_maxFloat;\r\n            }\r\n        }\r\n        // The number of iterations is equal to particle number from the deepest\r\n        // particle to the nearest surface particle, and in general it is smaller\r\n        // than sqrt of total particle number.\r\n        ///int32 iterationCount = (int32)b2Sqrt((float)m_count);\r\n        let iterationCount = b2Sqrt(this.m_count) >> 0;\r\n        for (let t = 0; t < iterationCount; t++) {\r\n            let updated = false;\r\n            for (let k = 0; k < contactGroupsCount; k++) {\r\n                let contact = contactGroups[k];\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                let r = 1 - contact.weight;\r\n                ///float32& ap0 = m_depthBuffer[a];\r\n                let ap0 = this.m_depthBuffer[a];\r\n                ///float32& bp0 = m_depthBuffer[b];\r\n                let bp0 = this.m_depthBuffer[b];\r\n                let ap1 = bp0 + r;\r\n                let bp1 = ap0 + r;\r\n                if (ap0 > ap1) {\r\n                    ///ap0 = ap1;\r\n                    this.m_depthBuffer[a] = ap1;\r\n                    updated = true;\r\n                }\r\n                if (bp0 > bp1) {\r\n                    ///bp0 = bp1;\r\n                    this.m_depthBuffer[b] = bp1;\r\n                    updated = true;\r\n                }\r\n            }\r\n            if (!updated) {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < groupsToUpdateCount; i++) {\r\n            let group = groupsToUpdate[i];\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                if (this.m_depthBuffer[i] < b2_maxFloat) {\r\n                    this.m_depthBuffer[i] *= this.m_particleDiameter;\r\n                }\r\n                else {\r\n                    this.m_depthBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        ///this.m_world.m_stackAllocator.Free(groupsToUpdate);\r\n        ///this.m_world.m_stackAllocator.Free(contactGroups);\r\n    }\r\n    GetInsideBoundsEnumerator(aabb) {\r\n        let lowerTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x - 1, this.m_inverseDiameter * aabb.lowerBound.y - 1);\r\n        let upperTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x + 1, this.m_inverseDiameter * aabb.upperBound.y + 1);\r\n        ///const Proxy* beginProxy = m_proxyBuffer.Begin();\r\n        let beginProxy = 0;\r\n        ///const Proxy* endProxy = m_proxyBuffer.End();\r\n        let endProxy = this.m_proxyBuffer.count;\r\n        ///const Proxy* firstProxy = std::lower_bound(beginProxy, endProxy, lowerTag);\r\n        let firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, lowerTag, b2ParticleSystem.Proxy.CompareProxyTag);\r\n        ///const Proxy* lastProxy = std::upper_bound(firstProxy, endProxy, upperTag);\r\n        let lastProxy = std_upper_bound(this.m_proxyBuffer.data, beginProxy, endProxy, upperTag, b2ParticleSystem.Proxy.CompareTagProxy);\r\n        b2Assert(beginProxy <= firstProxy);\r\n        b2Assert(firstProxy <= lastProxy);\r\n        b2Assert(lastProxy <= endProxy);\r\n        return new b2ParticleSystem.InsideBoundsEnumerator(this, lowerTag, upperTag, firstProxy, lastProxy);\r\n    }\r\n    UpdateAllParticleFlags() {\r\n        this.m_allParticleFlags = 0;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_allParticleFlags |= this.m_flagsBuffer.data[i];\r\n        }\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n    }\r\n    UpdateAllGroupFlags() {\r\n        this.m_allGroupFlags = 0;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            this.m_allGroupFlags |= group.m_groupFlags;\r\n        }\r\n        this.m_needsUpdateAllGroupFlags = false;\r\n    }\r\n    AddContact(a, b, contacts) {\r\n        let s_d = b2ParticleSystem.AddContact_s_d;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        b2Assert(contacts === this.m_contactBuffer);\r\n        ///b2Vec2 d = m_positionBuffer.data[b] - m_positionBuffer.data[a];\r\n        let d = b2Vec2.SubVV(pos_data[b], pos_data[a], s_d);\r\n        let distBtParticlesSq = b2Vec2.DotVV(d, d);\r\n        if (distBtParticlesSq < this.m_squaredDiameter) {\r\n            let invD = b2InvSqrt(distBtParticlesSq);\r\n            if (!isFinite(invD)) {\r\n                invD = 1.98177537e+019;\r\n            }\r\n            ///b2ParticleContact& contact = contacts.Append();\r\n            let contact = this.m_contactBuffer.data[this.m_contactBuffer.Append()];\r\n            contact.indexA = a;\r\n            contact.indexB = b;\r\n            contact.flags = this.m_flagsBuffer.data[a] | this.m_flagsBuffer.data[b];\r\n            contact.weight = 1 - distBtParticlesSq * invD * this.m_inverseDiameter;\r\n            ///contact.SetNormal(invD * d);\r\n            b2Vec2.MulSV(invD, d, contact.normal);\r\n        }\r\n    }\r\n    FindContacts_Reference(contacts) {\r\n        b2Assert(contacts === this.m_contactBuffer);\r\n        let beginProxy = 0;\r\n        let endProxy = this.m_proxyBuffer.count;\r\n        this.m_contactBuffer.count = 0;\r\n        for (let a = beginProxy, c = beginProxy; a < endProxy; a++) {\r\n            let rightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 0);\r\n            for (let b = a + 1; b < endProxy; b++) {\r\n                if (rightTag < this.m_proxyBuffer.data[b].tag)\r\n                    break;\r\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\r\n            }\r\n            let bottomLeftTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, -1, 1);\r\n            for (; c < endProxy; c++) {\r\n                if (bottomLeftTag <= this.m_proxyBuffer.data[c].tag)\r\n                    break;\r\n            }\r\n            let bottomRightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 1);\r\n            for (let b = c; b < endProxy; b++) {\r\n                if (bottomRightTag < this.m_proxyBuffer.data[b].tag)\r\n                    break;\r\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\r\n            }\r\n        }\r\n    }\r\n    ///void ReorderForFindContact(FindContactInput* reordered, int alignedCount) const;\r\n    ///void GatherChecksOneParticle(const uint32 bound, const int startIndex, const int particleIndex, int* nextUncheckedIndex, b2GrowableBuffer<FindContactCheck>& checks) const;\r\n    ///void GatherChecks(b2GrowableBuffer<FindContactCheck>& checks) const;\r\n    ///void FindContacts_Simd(b2GrowableBuffer<b2ParticleContact>& contacts) const;\r\n    FindContacts(contacts) {\r\n        this.FindContacts_Reference(contacts);\r\n    }\r\n    ///static void UpdateProxyTags(const uint32* const tags, b2GrowableBuffer<Proxy>& proxies);\r\n    ///static bool ProxyBufferHasIndex(int32 index, const Proxy* const a, int count);\r\n    ///static int NumProxiesWithSameTag(const Proxy* const a, const Proxy* const b, int count);\r\n    ///static bool AreProxyBuffersTheSame(const b2GrowableBuffer<Proxy>& a, const b2GrowableBuffer<Proxy>& b);\r\n    UpdateProxies_Reference(proxies) {\r\n        b2Assert(proxies === this.m_proxyBuffer);\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let inv_diam = this.m_inverseDiameter;\r\n        for (let k = 0; k < this.m_proxyBuffer.count; ++k) {\r\n            let proxy = this.m_proxyBuffer.data[k];\r\n            let i = proxy.index;\r\n            let p = pos_data[i];\r\n            proxy.tag = b2ParticleSystem.computeTag(inv_diam * p.x, inv_diam * p.y);\r\n        }\r\n    }\r\n    ///void UpdateProxies_Simd(b2GrowableBuffer<Proxy>& proxies) const;\r\n    UpdateProxies(proxies) {\r\n        this.UpdateProxies_Reference(proxies);\r\n    }\r\n    SortProxies(proxies) {\r\n        b2Assert(proxies === this.m_proxyBuffer);\r\n        ///std::sort(proxies.Begin(), proxies.End());\r\n        std_sort(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, b2ParticleSystem.Proxy.CompareProxyProxy);\r\n    }\r\n    FilterContacts(contacts) {\r\n        // Optionally filter the contact.\r\n        let contactFilter = this.GetParticleContactFilter();\r\n        if (contactFilter === null)\r\n            return;\r\n        /// contacts.RemoveIf(b2ParticleContactRemovePredicate(this, contactFilter));\r\n        b2Assert(contacts === this.m_contactBuffer);\r\n        const system = this;\r\n        let predicate = (contact) => {\r\n            return (contact.flags & b2ParticleFlag.b2_particleContactFilterParticle) && !contactFilter.ShouldCollideParticleParticle(system, contact.indexA, contact.indexB);\r\n        };\r\n        this.m_contactBuffer.RemoveIf(predicate);\r\n    }\r\n    NotifyContactListenerPreContact(particlePairs) {\r\n        let contactListener = this.GetParticleContactListener();\r\n        if (contactListener === null)\r\n            return;\r\n        ///particlePairs.Initialize(m_contactBuffer.Begin(), m_contactBuffer.GetCount(), GetFlagsBuffer());\r\n        particlePairs.Initialize(this.m_contactBuffer, this.m_flagsBuffer);\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    NotifyContactListenerPostContact(particlePairs) {\r\n        let contactListener = this.GetParticleContactListener();\r\n        if (contactListener === null)\r\n            return;\r\n        // Loop through all new contacts, reporting any new ones, and\r\n        // \"invalidating\" the ones that still exist.\r\n        ///const b2ParticleContact* const endContact = m_contactBuffer.End();\r\n        ///for (b2ParticleContact* contact = m_contactBuffer.Begin(); contact < endContact; ++contact)\r\n        for (let k = 0; k < this.m_contactBuffer.count; ++k) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            ///ParticlePair pair;\r\n            ///pair.first = contact.GetIndexA();\r\n            ///pair.second = contact.GetIndexB();\r\n            ///const int32 itemIndex = particlePairs.Find(pair);\r\n            let itemIndex = -1; // TODO\r\n            if (itemIndex >= 0) {\r\n                // Already touching, ignore this contact.\r\n                particlePairs.Invalidate(itemIndex);\r\n            }\r\n            else {\r\n                // Just started touching, inform the listener.\r\n                contactListener.BeginContactParticleParticle(this, contact);\r\n            }\r\n        }\r\n        // Report particles that are no longer touching.\r\n        // That is, any pairs that were not invalidated above.\r\n        ///const int32 pairCount = particlePairs.GetCount();\r\n        ///const ParticlePair* const pairs = particlePairs.GetBuffer();\r\n        ///const int8* const valid = particlePairs.GetValidBuffer();\r\n        ///for (int32 i = 0; i < pairCount; ++i)\r\n        ///{\r\n        ///  if (valid[i])\r\n        ///  {\r\n        ///    contactListener.EndContactParticleParticle(this, pairs[i].first, pairs[i].second);\r\n        ///  }\r\n        ///}\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    static b2ParticleContactIsZombie(contact) {\r\n        return (contact.flags & b2ParticleFlag.b2_zombieParticle) === b2ParticleFlag.b2_zombieParticle;\r\n    }\r\n    UpdateContacts(exceptZombie) {\r\n        this.UpdateProxies(this.m_proxyBuffer);\r\n        this.SortProxies(this.m_proxyBuffer);\r\n        ///b2ParticlePairSet particlePairs(&this.m_world.m_stackAllocator);\r\n        let particlePairs = new b2ParticleSystem.b2ParticlePairSet(); // TODO: static\r\n        this.NotifyContactListenerPreContact(particlePairs);\r\n        this.FindContacts(this.m_contactBuffer);\r\n        this.FilterContacts(this.m_contactBuffer);\r\n        this.NotifyContactListenerPostContact(particlePairs);\r\n        if (exceptZombie) {\r\n            this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);\r\n        }\r\n    }\r\n    NotifyBodyContactListenerPreContact(fixtureSet) {\r\n        let contactListener = this.GetFixtureContactListener();\r\n        if (contactListener === null)\r\n            return;\r\n        ///fixtureSet.Initialize(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.GetCount(), GetFlagsBuffer());\r\n        fixtureSet.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer);\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    NotifyBodyContactListenerPostContact(fixtureSet) {\r\n        let contactListener = this.GetFixtureContactListener();\r\n        if (contactListener === null)\r\n            return;\r\n        // Loop through all new contacts, reporting any new ones, and\r\n        // \"invalidating\" the ones that still exist.\r\n        ///for (b2ParticleBodyContact* contact = m_bodyContactBuffer.Begin(); contact !== m_bodyContactBuffer.End(); ++contact)\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            b2Assert(contact !== null);\r\n            ///FixtureParticle fixtureParticleToFind;\r\n            ///fixtureParticleToFind.first = contact.fixture;\r\n            ///fixtureParticleToFind.second = contact.index;\r\n            ///const int32 index = fixtureSet.Find(fixtureParticleToFind);\r\n            let index = -1; // TODO\r\n            if (index >= 0) {\r\n                // Already touching remove this from the set.\r\n                fixtureSet.Invalidate(index);\r\n            }\r\n            else {\r\n                // Just started touching, report it!\r\n                contactListener.BeginContactFixtureParticle(this, contact);\r\n            }\r\n        }\r\n        // If the contact listener is enabled, report all fixtures that are no\r\n        // longer in contact with particles.\r\n        ///const FixtureParticle* const fixtureParticles = fixtureSet.GetBuffer();\r\n        ///const int8* const fixtureParticlesValid = fixtureSet.GetValidBuffer();\r\n        ///const int32 fixtureParticleCount = fixtureSet.GetCount();\r\n        ///for (int32 i = 0; i < fixtureParticleCount; ++i)\r\n        ///{\r\n        ///  if (fixtureParticlesValid[i])\r\n        ///  {\r\n        ///    const FixtureParticle* const fixtureParticle = &fixtureParticles[i];\r\n        ///    contactListener.EndContactFixtureParticle(fixtureParticle.first, this, fixtureParticle.second);\r\n        ///  }\r\n        ///}\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    UpdateBodyContacts() {\r\n        let s_aabb = b2ParticleSystem.UpdateBodyContacts_s_aabb;\r\n        // If the particle contact listener is enabled, generate a set of\r\n        // fixture / particle contacts.\r\n        ///FixtureParticleSet fixtureSet(&m_world.m_stackAllocator);\r\n        let fixtureSet = new b2ParticleSystem.FixtureParticleSet(); // TODO: static\r\n        this.NotifyBodyContactListenerPreContact(fixtureSet);\r\n        if (this.m_stuckThreshold > 0) {\r\n            let particleCount = this.GetParticleCount();\r\n            for (let i = 0; i < particleCount; i++) {\r\n                // Detect stuck particles, see comment in\r\n                // b2ParticleSystem::DetectStuckParticle()\r\n                this.m_bodyContactCountBuffer.data[i] = 0;\r\n                if (this.m_timestamp > (this.m_lastBodyContactStepBuffer.data[i] + 1)) {\r\n                    this.m_consecutiveContactStepsBuffer.data[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        this.m_bodyContactBuffer.SetCount(0);\r\n        this.m_stuckParticleBuffer.SetCount(0);\r\n        let aabb = s_aabb;\r\n        this.ComputeAABB(aabb);\r\n        let callback = new b2ParticleSystem.UpdateBodyContactsCallback(this, this.GetFixtureContactFilter());\r\n        this.m_world.QueryAABB(callback, aabb);\r\n        if (this.m_def.strictContactCheck) {\r\n            this.RemoveSpuriousBodyContacts();\r\n        }\r\n        this.NotifyBodyContactListenerPostContact(fixtureSet);\r\n    }\r\n    Solve(step) {\r\n        let s_subStep = b2ParticleSystem.Solve_s_subStep;\r\n        if (this.m_count === 0) {\r\n            return;\r\n        }\r\n        // If particle lifetimes are enabled, destroy particles that are too old.\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            this.SolveLifetimes(step);\r\n        }\r\n        if (this.m_allParticleFlags & b2ParticleFlag.b2_zombieParticle) {\r\n            this.SolveZombie();\r\n        }\r\n        if (this.m_needsUpdateAllParticleFlags) {\r\n            this.UpdateAllParticleFlags();\r\n        }\r\n        if (this.m_needsUpdateAllGroupFlags) {\r\n            this.UpdateAllGroupFlags();\r\n        }\r\n        if (this.m_paused) {\r\n            return;\r\n        }\r\n        for (this.m_iterationIndex = 0; this.m_iterationIndex < step.particleIterations; this.m_iterationIndex++) {\r\n            ++this.m_timestamp;\r\n            let subStep = s_subStep.Copy(step);\r\n            subStep.dt /= step.particleIterations;\r\n            subStep.inv_dt *= step.particleIterations;\r\n            this.UpdateContacts(false);\r\n            this.UpdateBodyContacts();\r\n            this.ComputeWeight();\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\r\n                this.ComputeDepth();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_reactiveParticle) {\r\n                this.UpdatePairsAndTriadsWithReactiveParticles();\r\n            }\r\n            if (this.m_hasForce) {\r\n                this.SolveForce(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_viscousParticle) {\r\n                this.SolveViscous();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_repulsiveParticle) {\r\n                this.SolveRepulsive(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_powderParticle) {\r\n                this.SolvePowder(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_tensileParticle) {\r\n                this.SolveTensile(subStep);\r\n            }\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                this.SolveSolid(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_colorMixingParticle) {\r\n                this.SolveColorMixing();\r\n            }\r\n            this.SolveGravity(subStep);\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\r\n                this.SolveStaticPressure(subStep);\r\n            }\r\n            this.SolvePressure(subStep);\r\n            this.SolveDamping(subStep);\r\n            if (this.m_allParticleFlags & b2ParticleSystem.k_extraDampingFlags) {\r\n                this.SolveExtraDamping();\r\n            }\r\n            // SolveElastic and SolveSpring refer the current velocities for\r\n            // numerical stability, they should be called as late as possible.\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_elasticParticle) {\r\n                this.SolveElastic(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_springParticle) {\r\n                this.SolveSpring(subStep);\r\n            }\r\n            this.LimitVelocity(subStep);\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                this.SolveRigidDamping();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_barrierParticle) {\r\n                this.SolveBarrier(subStep);\r\n            }\r\n            // SolveCollision, SolveRigid and SolveWall should be called after\r\n            // other force functions because they may require particles to have\r\n            // specific velocities.\r\n            this.SolveCollision(subStep);\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                this.SolveRigid(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_wallParticle) {\r\n                this.SolveWall();\r\n            }\r\n            // The particle positions can be updated only at the end of substep.\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                ///m_positionBuffer.data[i] += subStep.dt * m_velocityBuffer.data[i];\r\n                this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt, this.m_velocityBuffer.data[i]);\r\n            }\r\n        }\r\n    }\r\n    SolveCollision(step) {\r\n        let s_aabb = b2ParticleSystem.SolveCollision_s_aabb;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // This function detects particles which are crossing boundary of bodies\r\n        // and modifies velocities of them so that they will move just in front of\r\n        // boundary. This function function also applies the reaction force to\r\n        // bodies as precisely as the numerical stability is kept.\r\n        let aabb = s_aabb;\r\n        aabb.lowerBound.x = +b2_maxFloat;\r\n        aabb.lowerBound.y = +b2_maxFloat;\r\n        aabb.upperBound.x = -b2_maxFloat;\r\n        aabb.upperBound.y = -b2_maxFloat;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            let v = vel_data[i];\r\n            let p1 = pos_data[i];\r\n            ///let p2 = p1 + step.dt * v;\r\n            let p2_x = p1.x + step.dt * v.x;\r\n            let p2_y = p1.y + step.dt * v.y;\r\n            ///aabb.lowerBound = b2Min(aabb.lowerBound, b2Min(p1, p2));\r\n            aabb.lowerBound.x = b2Min(aabb.lowerBound.x, b2Min(p1.x, p2_x));\r\n            aabb.lowerBound.y = b2Min(aabb.lowerBound.y, b2Min(p1.y, p2_y));\r\n            ///aabb.upperBound = b2Max(aabb.upperBound, b2Max(p1, p2));\r\n            aabb.upperBound.x = b2Max(aabb.upperBound.x, b2Max(p1.x, p2_x));\r\n            aabb.upperBound.y = b2Max(aabb.upperBound.y, b2Max(p1.y, p2_y));\r\n        }\r\n        let callback = new b2ParticleSystem.SolveCollisionCallback(this, step);\r\n        this.m_world.QueryAABB(callback, aabb);\r\n    }\r\n    LimitVelocity(step) {\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let criticalVelocitySquared = this.GetCriticalVelocitySquared(step);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            let v = vel_data[i];\r\n            let v2 = b2Vec2.DotVV(v, v);\r\n            if (v2 > criticalVelocitySquared) {\r\n                ///v *= b2Sqrt(criticalVelocitySquared / v2);\r\n                v.SelfMul(b2Sqrt(criticalVelocitySquared / v2));\r\n            }\r\n        }\r\n    }\r\n    SolveGravity(step) {\r\n        let s_gravity = b2ParticleSystem.SolveGravity_s_gravity;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        ///b2Vec2 gravity = step.dt * m_def.gravityScale * m_world.GetGravity();\r\n        let gravity = b2Vec2.MulSV(step.dt * this.m_def.gravityScale, this.m_world.GetGravity(), s_gravity);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            vel_data[i].SelfAdd(gravity);\r\n        }\r\n    }\r\n    SolveBarrier(step) {\r\n        let s_aabb = b2ParticleSystem.SolveBarrier_s_aabb;\r\n        let s_va = b2ParticleSystem.SolveBarrier_s_va;\r\n        let s_vb = b2ParticleSystem.SolveBarrier_s_vb;\r\n        let s_pba = b2ParticleSystem.SolveBarrier_s_pba;\r\n        let s_vba = b2ParticleSystem.SolveBarrier_s_vba;\r\n        let s_vc = b2ParticleSystem.SolveBarrier_s_vc;\r\n        let s_pca = b2ParticleSystem.SolveBarrier_s_pca;\r\n        let s_vca = b2ParticleSystem.SolveBarrier_s_vca;\r\n        let s_qba = b2ParticleSystem.SolveBarrier_s_qba;\r\n        let s_qca = b2ParticleSystem.SolveBarrier_s_qca;\r\n        let s_dv = b2ParticleSystem.SolveBarrier_s_dv;\r\n        let s_f = b2ParticleSystem.SolveBarrier_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // If a particle is passing between paired barrier particles,\r\n        // its velocity will be decelerated to avoid passing.\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            let flags = this.m_flagsBuffer.data[i];\r\n            ///if ((flags & b2ParticleSystem.k_barrierWallFlags) === b2ParticleSystem.k_barrierWallFlags)\r\n            if ((flags & b2ParticleSystem.k_barrierWallFlags) !== 0) {\r\n                vel_data[i].SetZero();\r\n            }\r\n        }\r\n        let tmax = b2_barrierCollisionTime * step.dt;\r\n        let mass = this.GetParticleMass();\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            let pair = this.m_pairBuffer.data[k];\r\n            if (pair.flags & b2ParticleFlag.b2_barrierParticle) {\r\n                let a = pair.indexA;\r\n                let b = pair.indexB;\r\n                let pa = pos_data[a];\r\n                let pb = pos_data[b];\r\n                /// b2AABB aabb;\r\n                let aabb = s_aabb;\r\n                ///aabb.lowerBound = b2Min(pa, pb);\r\n                b2Vec2.MinV(pa, pb, aabb.lowerBound);\r\n                ///aabb.upperBound = b2Max(pa, pb);\r\n                b2Vec2.MaxV(pa, pb, aabb.upperBound);\r\n                let aGroup = this.m_groupBuffer[a];\r\n                let bGroup = this.m_groupBuffer[b];\r\n                ///b2Vec2 va = GetLinearVelocity(aGroup, a, pa);\r\n                let va = this.GetLinearVelocity(aGroup, a, pa, s_va);\r\n                ///b2Vec2 vb = GetLinearVelocity(bGroup, b, pb);\r\n                let vb = this.GetLinearVelocity(bGroup, b, pb, s_vb);\r\n                ///b2Vec2 pba = pb - pa;\r\n                let pba = b2Vec2.SubVV(pb, pa, s_pba);\r\n                ///b2Vec2 vba = vb - va;\r\n                let vba = b2Vec2.SubVV(vb, va, s_vba);\r\n                ///InsideBoundsEnumerator enumerator = GetInsideBoundsEnumerator(aabb);\r\n                let enumerator = this.GetInsideBoundsEnumerator(aabb);\r\n                let c;\r\n                while ((c = enumerator.GetNext()) >= 0) {\r\n                    let pc = pos_data[c];\r\n                    let cGroup = this.m_groupBuffer[c];\r\n                    if (aGroup !== cGroup && bGroup !== cGroup) {\r\n                        ///b2Vec2 vc = GetLinearVelocity(cGroup, c, pc);\r\n                        let vc = this.GetLinearVelocity(cGroup, c, pc, s_vc);\r\n                        // Solve the equation below:\r\n                        //   (1-s)*(pa+t*va)+s*(pb+t*vb) = pc+t*vc\r\n                        // which expresses that the particle c will pass a line\r\n                        // connecting the particles a and b at the time of t.\r\n                        // if s is between 0 and 1, c will pass between a and b.\r\n                        ///b2Vec2 pca = pc - pa;\r\n                        let pca = b2Vec2.SubVV(pc, pa, s_pca);\r\n                        ///b2Vec2 vca = vc - va;\r\n                        let vca = b2Vec2.SubVV(vc, va, s_vca);\r\n                        let e2 = b2Vec2.CrossVV(vba, vca);\r\n                        let e1 = b2Vec2.CrossVV(pba, vca) - b2Vec2.CrossVV(pca, vba);\r\n                        let e0 = b2Vec2.CrossVV(pba, pca);\r\n                        let s, t;\r\n                        ///b2Vec2 qba, qca;\r\n                        let qba = s_qba, qca = s_qca;\r\n                        if (e2 === 0) {\r\n                            if (e1 === 0)\r\n                                continue;\r\n                            t = -e0 / e1;\r\n                            if (!(t >= 0 && t < tmax))\r\n                                continue;\r\n                            ///qba = pba + t * vba;\r\n                            b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                            ///qca = pca + t * vca;\r\n                            b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                            s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                            if (!(s >= 0 && s <= 1))\r\n                                continue;\r\n                        }\r\n                        else {\r\n                            let det = e1 * e1 - 4 * e0 * e2;\r\n                            if (det < 0)\r\n                                continue;\r\n                            let sqrtDet = b2Sqrt(det);\r\n                            let t1 = (-e1 - sqrtDet) / (2 * e2);\r\n                            let t2 = (-e1 + sqrtDet) / (2 * e2);\r\n                            ///if (t1 > t2) b2Swap(t1, t2);\r\n                            if (t1 > t2) {\r\n                                let tmp = t1;\r\n                                t1 = t2;\r\n                                t2 = tmp;\r\n                            }\r\n                            t = t1;\r\n                            ///qba = pba + t * vba;\r\n                            b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                            ///qca = pca + t * vca;\r\n                            b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                            ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\r\n                            s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                            if (!(t >= 0 && t < tmax && s >= 0 && s <= 1)) {\r\n                                t = t2;\r\n                                if (!(t >= 0 && t < tmax))\r\n                                    continue;\r\n                                ///qba = pba + t * vba;\r\n                                b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                                ///qca = pca + t * vca;\r\n                                b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                                ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\r\n                                s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                                if (!(s >= 0 && s <= 1))\r\n                                    continue;\r\n                            }\r\n                        }\r\n                        // Apply a force to particle c so that it will have the\r\n                        // interpolated velocity at the collision point on line ab.\r\n                        ///b2Vec2 dv = va + s * vba - vc;\r\n                        let dv = s_dv;\r\n                        dv.x = va.x + s * vba.x - vc.x;\r\n                        dv.y = va.y + s * vba.y - vc.y;\r\n                        ///b2Vec2 f = GetParticleMass() * dv;\r\n                        let f = b2Vec2.MulSV(mass, dv, s_f);\r\n                        if (this.IsRigidGroup(cGroup)) {\r\n                            // If c belongs to a rigid group, the force will be\r\n                            // distributed in the group.\r\n                            let mass = cGroup.GetMass();\r\n                            let inertia = cGroup.GetInertia();\r\n                            if (mass > 0) {\r\n                                ///cGroup.m_linearVelocity += 1 / mass * f;\r\n                                cGroup.m_linearVelocity.SelfMulAdd(1 / mass, f);\r\n                            }\r\n                            if (inertia > 0) {\r\n                                ///cGroup.m_angularVelocity += b2Cross(pc - cGroup.GetCenter(), f) / inertia;\r\n                                cGroup.m_angularVelocity += b2Vec2.CrossVV(b2Vec2.SubVV(pc, cGroup.GetCenter(), b2Vec2.s_t0), f) / inertia;\r\n                            }\r\n                        }\r\n                        else {\r\n                            ///m_velocityBuffer.data[c] += dv;\r\n                            vel_data[c].SelfAdd(dv);\r\n                        }\r\n                        // Apply a reversed force to particle c after particle\r\n                        // movement so that momentum will be preserved.\r\n                        ///ParticleApplyForce(c, -step.inv_dt * f);\r\n                        this.ParticleApplyForce(c, f.SelfMul(-step.inv_dt));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveStaticPressure(step) {\r\n        this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);\r\n        let criticalPressure = this.GetCriticalPressure(step);\r\n        let pressurePerWeight = this.m_def.staticPressureStrength * criticalPressure;\r\n        let maxPressure = b2_maxParticlePressure * criticalPressure;\r\n        let relaxation = this.m_def.staticPressureRelaxation;\r\n        /// Compute pressure satisfying the modified Poisson equation:\r\n        ///   Sum_for_j((p_i - p_j) * w_ij) + relaxation * p_i =\r\n        ///   pressurePerWeight * (w_i - b2_minParticleWeight)\r\n        /// by iterating the calculation:\r\n        ///   p_i = (Sum_for_j(p_j * w_ij) + pressurePerWeight *\r\n        ///         (w_i - b2_minParticleWeight)) / (w_i + relaxation)\r\n        /// where\r\n        ///   p_i and p_j are static pressure of particle i and j\r\n        ///   w_ij is contact weight between particle i and j\r\n        ///   w_i is sum of contact weight of particle i\r\n        for (let t = 0; t < this.m_def.staticPressureIterations; t++) {\r\n            ///memset(m_accumulationBuffer, 0, sizeof(*m_accumulationBuffer) * m_count);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                this.m_accumulationBuffer[i] = 0;\r\n            }\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                let contact = this.m_contactBuffer.data[k];\r\n                if (contact.flags & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    let a = contact.indexA;\r\n                    let b = contact.indexB;\r\n                    let w = contact.weight;\r\n                    this.m_accumulationBuffer[a] += w * this.m_staticPressureBuffer[b]; // a <- b\r\n                    this.m_accumulationBuffer[b] += w * this.m_staticPressureBuffer[a]; // b <- a\r\n                }\r\n            }\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                let w = this.m_weightBuffer[i];\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    let wh = this.m_accumulationBuffer[i];\r\n                    let h = (wh + pressurePerWeight * (w - b2_minParticleWeight)) /\r\n                        (w + relaxation);\r\n                    this.m_staticPressureBuffer[i] = b2Clamp(h, 0.0, maxPressure);\r\n                }\r\n                else {\r\n                    this.m_staticPressureBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ComputeWeight() {\r\n        // calculates the sum of contact-weights for each particle\r\n        // that means dimensionless density\r\n        ///memset(m_weightBuffer, 0, sizeof(*m_weightBuffer) * m_count);\r\n        for (let k = 0; k < this.m_count; k++) {\r\n            this.m_weightBuffer[k] = 0;\r\n        }\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            let w = contact.weight;\r\n            this.m_weightBuffer[a] += w;\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let w = contact.weight;\r\n            this.m_weightBuffer[a] += w;\r\n            this.m_weightBuffer[b] += w;\r\n        }\r\n    }\r\n    SolvePressure(step) {\r\n        let s_f = b2ParticleSystem.SolvePressure_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // calculates pressure as a linear function of density\r\n        let criticalPressure = this.GetCriticalPressure(step);\r\n        let pressurePerWeight = this.m_def.pressureStrength * criticalPressure;\r\n        let maxPressure = b2_maxParticlePressure * criticalPressure;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            let w = this.m_weightBuffer[i];\r\n            let h = pressurePerWeight * b2Max(0.0, w - b2_minParticleWeight);\r\n            this.m_accumulationBuffer[i] = b2Min(h, maxPressure);\r\n        }\r\n        // ignores particles which have their own repulsive force\r\n        if (this.m_allParticleFlags & b2ParticleSystem.k_noPressureFlags) {\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleSystem.k_noPressureFlags) {\r\n                    this.m_accumulationBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        // static pressure\r\n        if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\r\n            b2Assert(this.m_staticPressureBuffer !== null);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    this.m_accumulationBuffer[i] += this.m_staticPressureBuffer[i];\r\n                }\r\n            }\r\n        }\r\n        // applies pressure between each particles in contact\r\n        let velocityPerPressure = step.dt / (this.m_def.density * this.m_particleDiameter);\r\n        let inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            let b = contact.body;\r\n            let w = contact.weight;\r\n            let m = contact.mass;\r\n            let n = contact.normal;\r\n            let p = pos_data[a];\r\n            let h = this.m_accumulationBuffer[a] + pressurePerWeight * w;\r\n            ///b2Vec2 f = velocityPerPressure * w * m * h * n;\r\n            let f = b2Vec2.MulSV(velocityPerPressure * w * m * h, n, s_f);\r\n            ///m_velocityBuffer.data[a] -= GetParticleInvMass() * f;\r\n            vel_data[a].SelfMulSub(inv_mass, f);\r\n            b.ApplyLinearImpulse(f, p, true);\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let w = contact.weight;\r\n            let n = contact.normal;\r\n            let h = this.m_accumulationBuffer[a] + this.m_accumulationBuffer[b];\r\n            ///b2Vec2 f = velocityPerPressure * w * h * n;\r\n            let f = b2Vec2.MulSV(velocityPerPressure * w * h, n, s_f);\r\n            ///m_velocityBuffer.data[a] -= f;\r\n            vel_data[a].SelfSub(f);\r\n            ///m_velocityBuffer.data[b] += f;\r\n            vel_data[b].SelfAdd(f);\r\n        }\r\n    }\r\n    SolveDamping(step) {\r\n        let s_v = b2ParticleSystem.SolveDamping_s_v;\r\n        let s_f = b2ParticleSystem.SolveDamping_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // reduces normal velocity of each contact\r\n        let linearDamping = this.m_def.dampingStrength;\r\n        let quadraticDamping = 1 / this.GetCriticalVelocity(step);\r\n        let inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            let b = contact.body;\r\n            let w = contact.weight;\r\n            let m = contact.mass;\r\n            let n = contact.normal;\r\n            let p = pos_data[a];\r\n            ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n            let v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n            let vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                let damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\r\n                ///b2Vec2 f = damping * m * vn * n;\r\n                let f = b2Vec2.MulSV(damping * m * vn, n, s_f);\r\n                ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                vel_data[a].SelfMulAdd(inv_mass, f);\r\n                ///b.ApplyLinearImpulse(-f, p, true);\r\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let w = contact.weight;\r\n            let n = contact.normal;\r\n            ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n            let v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n            let vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                ///float32 damping = b2Max(linearDamping * w, b2Min(- quadraticDamping * vn, 0.5f));\r\n                let damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\r\n                ///b2Vec2 f = damping * vn * n;\r\n                let f = b2Vec2.MulSV(damping * vn, n, s_f);\r\n                ///this.m_velocityBuffer.data[a] += f;\r\n                vel_data[a].SelfAdd(f);\r\n                ///this.m_velocityBuffer.data[b] -= f;\r\n                vel_data[b].SelfSub(f);\r\n            }\r\n        }\r\n    }\r\n    SolveRigidDamping() {\r\n        let s_t0 = b2ParticleSystem.SolveRigidDamping_s_t0;\r\n        let s_t1 = b2ParticleSystem.SolveRigidDamping_s_t1;\r\n        let s_p = b2ParticleSystem.SolveRigidDamping_s_p;\r\n        let s_v = b2ParticleSystem.SolveRigidDamping_s_v;\r\n        let invMassA = [0.0], invInertiaA = [0.0], tangentDistanceA = [0.0]; // TODO: static\r\n        let invMassB = [0.0], invInertiaB = [0.0], tangentDistanceB = [0.0]; // TODO: static\r\n        // Apply impulse to rigid particle groups colliding with other objects\r\n        // to reduce relative velocity at the colliding point.\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let damping = this.m_def.dampingStrength;\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            let aGroup = this.m_groupBuffer[a];\r\n            if (this.IsRigidGroup(aGroup)) {\r\n                let b = contact.body;\r\n                let n = contact.normal;\r\n                let w = contact.weight;\r\n                let p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - aGroup.GetLinearVelocityFromWorldPoint(p);\r\n                let v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, s_t0), aGroup.GetLinearVelocityFromWorldPoint(p, s_t1), s_v);\r\n                let vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    // The group's average velocity at particle position 'p' is pushing\r\n                    // the particle into the body.\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, true, aGroup, a, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, p, n);\r\n                    // Calculate b.m_I from public functions of b2Body.\r\n                    ///this.InitDampingParameter(&invMassB, &invInertiaB, &tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\r\n                    this.InitDampingParameter(invMassB, invInertiaB, tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\r\n                    ///float32 f = damping * b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\r\n                    let f = damping * b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\r\n                    ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, f, n);\r\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], true, aGroup, a, f, n);\r\n                    ///b.ApplyLinearImpulse(-f * n, p, true);\r\n                    b.ApplyLinearImpulse(b2Vec2.MulSV(-f, n, b2Vec2.s_t0), p, true);\r\n                }\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            let n = contact.normal;\r\n            let w = contact.weight;\r\n            let aGroup = this.m_groupBuffer[a];\r\n            let bGroup = this.m_groupBuffer[b];\r\n            let aRigid = this.IsRigidGroup(aGroup);\r\n            let bRigid = this.IsRigidGroup(bGroup);\r\n            if (aGroup !== bGroup && (aRigid || bRigid)) {\r\n                ///b2Vec2 p = 0.5f * (this.m_positionBuffer.data[a] + this.m_positionBuffer.data[b]);\r\n                let p = b2Vec2.MidVV(pos_data[a], pos_data[b], s_p);\r\n                ///b2Vec2 v = GetLinearVelocity(bGroup, b, p) - GetLinearVelocity(aGroup, a, p);\r\n                let v = b2Vec2.SubVV(this.GetLinearVelocity(bGroup, b, p, s_t0), this.GetLinearVelocity(aGroup, a, p, s_t1), s_v);\r\n                let vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, aRigid, aGroup, a, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, p, n);\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassB, &invInertiaB, &tangentDistanceB, bRigid, bGroup, b, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, p, n);\r\n                    ///float32 f = damping * w * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\r\n                    let f = damping * w * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\r\n                    ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, f, n);\r\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], aRigid, aGroup, a, f, n);\r\n                    ///this.ApplyDamping(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, -f, n);\r\n                    this.ApplyDamping(invMassB[0], invInertiaB[0], tangentDistanceB[0], bRigid, bGroup, b, -f, n);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveExtraDamping() {\r\n        let s_v = b2ParticleSystem.SolveExtraDamping_s_v;\r\n        let s_f = b2ParticleSystem.SolveExtraDamping_s_f;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // Applies additional damping force between bodies and particles which can\r\n        // produce strong repulsive force. Applying damping force multiple times\r\n        // is effective in suppressing vibration.\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleSystem.k_extraDampingFlags) {\r\n                let b = contact.body;\r\n                let m = contact.mass;\r\n                let n = contact.normal;\r\n                let p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n                let v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n                ///float32 vn = b2Dot(v, n);\r\n                let vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    ///b2Vec2 f = 0.5f * m * vn * n;\r\n                    let f = b2Vec2.MulSV(0.5 * m * vn, n, s_f);\r\n                    ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                    vel_data[a].SelfMulAdd(inv_mass, f);\r\n                    ///b.ApplyLinearImpulse(-f, p, true);\r\n                    b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveWall() {\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_wallParticle) {\r\n                vel_data[i].SetZero();\r\n            }\r\n        }\r\n    }\r\n    SolveRigid(step) {\r\n        let s_position = b2ParticleSystem.SolveRigid_s_position;\r\n        let s_rotation = b2ParticleSystem.SolveRigid_s_rotation;\r\n        let s_transform = b2ParticleSystem.SolveRigid_s_transform;\r\n        let s_velocityTransform = b2ParticleSystem.SolveRigid_s_velocityTransform;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                group.UpdateStatistics();\r\n                ///b2Rot rotation(step.dt * group.m_angularVelocity);\r\n                let rotation = s_rotation;\r\n                rotation.SetAngle(step.dt * group.m_angularVelocity);\r\n                ///b2Transform transform(group.m_center + step.dt * group.m_linearVelocity - b2Mul(rotation, group.m_center), rotation);\r\n                let position = b2Vec2.AddVV(group.m_center, b2Vec2.SubVV(b2Vec2.MulSV(step.dt, group.m_linearVelocity, b2Vec2.s_t0), b2Rot.MulRV(rotation, group.m_center, b2Vec2.s_t1), b2Vec2.s_t0), s_position);\r\n                let transform = s_transform;\r\n                transform.SetPositionRotation(position, rotation);\r\n                ///group.m_transform = b2Mul(transform, group.m_transform);\r\n                b2Transform.MulXX(transform, group.m_transform, group.m_transform);\r\n                let velocityTransform = s_velocityTransform;\r\n                velocityTransform.p.x = step.inv_dt * transform.p.x;\r\n                velocityTransform.p.y = step.inv_dt * transform.p.y;\r\n                velocityTransform.q.s = step.inv_dt * transform.q.s;\r\n                velocityTransform.q.c = step.inv_dt * (transform.q.c - 1);\r\n                for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                    ///m_velocityBuffer.data[i] = b2Mul(velocityTransform, m_positionBuffer.data[i]);\r\n                    b2Transform.MulXV(velocityTransform, pos_data[i], vel_data[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveElastic(step) {\r\n        let s_pa = b2ParticleSystem.SolveElastic_s_pa;\r\n        let s_pb = b2ParticleSystem.SolveElastic_s_pb;\r\n        let s_pc = b2ParticleSystem.SolveElastic_s_pc;\r\n        let s_r = b2ParticleSystem.SolveElastic_s_r;\r\n        let s_t0 = b2ParticleSystem.SolveElastic_s_t0;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let elasticStrength = step.inv_dt * this.m_def.elasticStrength;\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            let triad = this.m_triadBuffer.data[k];\r\n            if (triad.flags & b2ParticleFlag.b2_elasticParticle) {\r\n                let a = triad.indexA;\r\n                let b = triad.indexB;\r\n                let c = triad.indexC;\r\n                let oa = triad.pa;\r\n                let ob = triad.pb;\r\n                let oc = triad.pc;\r\n                ///b2Vec2 pa = m_positionBuffer.data[a];\r\n                let pa = s_pa.Copy(pos_data[a]);\r\n                ///b2Vec2 pb = m_positionBuffer.data[b];\r\n                let pb = s_pb.Copy(pos_data[b]);\r\n                ///b2Vec2 pc = m_positionBuffer.data[c];\r\n                let pc = s_pc.Copy(pos_data[c]);\r\n                let va = vel_data[a];\r\n                let vb = vel_data[b];\r\n                let vc = vel_data[c];\r\n                ///pa += step.dt * va;\r\n                pa.SelfMulAdd(step.dt, va);\r\n                ///pb += step.dt * vb;\r\n                pb.SelfMulAdd(step.dt, vb);\r\n                ///pc += step.dt * vc;\r\n                pc.SelfMulAdd(step.dt, vc);\r\n                ///b2Vec2 midPoint = (float32) 1 / 3 * (pa + pb + pc);\r\n                let midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\r\n                let midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\r\n                ///pa -= midPoint;\r\n                pa.x -= midPoint_x;\r\n                pa.y -= midPoint_y;\r\n                ///pb -= midPoint;\r\n                pb.x -= midPoint_x;\r\n                pb.y -= midPoint_y;\r\n                ///pc -= midPoint;\r\n                pc.x -= midPoint_x;\r\n                pc.y -= midPoint_y;\r\n                ///b2Rot r;\r\n                let r = s_r;\r\n                r.s = b2Vec2.CrossVV(oa, pa) + b2Vec2.CrossVV(ob, pb) + b2Vec2.CrossVV(oc, pc);\r\n                r.c = b2Vec2.DotVV(oa, pa) + b2Vec2.DotVV(ob, pb) + b2Vec2.DotVV(oc, pc);\r\n                let r2 = r.s * r.s + r.c * r.c;\r\n                let invR = b2InvSqrt(r2);\r\n                if (!isFinite(invR)) {\r\n                    invR = 1.98177537e+019;\r\n                }\r\n                r.s *= invR;\r\n                r.c *= invR;\r\n                ///r.angle = Math.atan2(r.s, r.c); // TODO: optimize\r\n                let strength = elasticStrength * triad.strength;\r\n                ///va += strength * (b2Mul(r, oa) - pa);\r\n                b2Rot.MulRV(r, oa, s_t0);\r\n                b2Vec2.SubVV(s_t0, pa, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                va.SelfAdd(s_t0);\r\n                ///vb += strength * (b2Mul(r, ob) - pb);\r\n                b2Rot.MulRV(r, ob, s_t0);\r\n                b2Vec2.SubVV(s_t0, pb, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                vb.SelfAdd(s_t0);\r\n                ///vc += strength * (b2Mul(r, oc) - pc);\r\n                b2Rot.MulRV(r, oc, s_t0);\r\n                b2Vec2.SubVV(s_t0, pc, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                vc.SelfAdd(s_t0);\r\n            }\r\n        }\r\n    }\r\n    SolveSpring(step) {\r\n        let s_pa = b2ParticleSystem.SolveSpring_s_pa;\r\n        let s_pb = b2ParticleSystem.SolveSpring_s_pb;\r\n        let s_d = b2ParticleSystem.SolveSpring_s_d;\r\n        let s_f = b2ParticleSystem.SolveSpring_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let springStrength = step.inv_dt * this.m_def.springStrength;\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            let pair = this.m_pairBuffer.data[k];\r\n            if (pair.flags & b2ParticleFlag.b2_springParticle) {\r\n                ///int32 a = pair.indexA;\r\n                let a = pair.indexA;\r\n                ///int32 b = pair.indexB;\r\n                let b = pair.indexB;\r\n                ///b2Vec2 pa = m_positionBuffer.data[a];\r\n                let pa = s_pa.Copy(pos_data[a]);\r\n                ///b2Vec2 pb = m_positionBuffer.data[b];\r\n                let pb = s_pb.Copy(pos_data[b]);\r\n                ///b2Vec2& va = m_velocityBuffer.data[a];\r\n                let va = vel_data[a];\r\n                ///b2Vec2& vb = m_velocityBuffer.data[b];\r\n                let vb = vel_data[b];\r\n                ///pa += step.dt * va;\r\n                pa.SelfMulAdd(step.dt, va);\r\n                ///pb += step.dt * vb;\r\n                pb.SelfMulAdd(step.dt, vb);\r\n                ///b2Vec2 d = pb - pa;\r\n                let d = b2Vec2.SubVV(pb, pa, s_d);\r\n                ///float32 r0 = pair.distance;\r\n                let r0 = pair.distance;\r\n                ///float32 r1 = d.Length();\r\n                let r1 = d.Length();\r\n                ///float32 strength = springStrength * pair.strength;\r\n                let strength = springStrength * pair.strength;\r\n                ///b2Vec2 f = strength * (r0 - r1) / r1 * d;\r\n                let f = b2Vec2.MulSV(strength * (r0 - r1) / r1, d, s_f);\r\n                ///va -= f;\r\n                va.SelfSub(f);\r\n                ///vb += f;\r\n                vb.SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveTensile(step) {\r\n        let s_weightedNormal = b2ParticleSystem.SolveTensile_s_weightedNormal;\r\n        let s_s = b2ParticleSystem.SolveTensile_s_s;\r\n        let s_f = b2ParticleSystem.SolveTensile_s_f;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        b2Assert(this.m_accumulation2Buffer !== null);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_accumulation2Buffer[i] = new b2Vec2();\r\n            this.m_accumulation2Buffer[i].SetZero();\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                let w = contact.weight;\r\n                let n = contact.normal;\r\n                ///b2Vec2 weightedNormal = (1 - w) * w * n;\r\n                let weightedNormal = b2Vec2.MulSV((1 - w) * w, n, s_weightedNormal);\r\n                ///m_accumulation2Buffer[a] -= weightedNormal;\r\n                this.m_accumulation2Buffer[a].SelfSub(weightedNormal);\r\n                ///m_accumulation2Buffer[b] += weightedNormal;\r\n                this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);\r\n            }\r\n        }\r\n        let criticalVelocity = this.GetCriticalVelocity(step);\r\n        let pressureStrength = this.m_def.surfaceTensionPressureStrength * criticalVelocity;\r\n        let normalStrength = this.m_def.surfaceTensionNormalStrength * criticalVelocity;\r\n        let maxVelocityVariation = b2_maxParticleForce * criticalVelocity;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                let w = contact.weight;\r\n                let n = contact.normal;\r\n                let h = this.m_weightBuffer[a] + this.m_weightBuffer[b];\r\n                ///b2Vec2 s = m_accumulation2Buffer[b] - m_accumulation2Buffer[a];\r\n                let s = b2Vec2.SubVV(this.m_accumulation2Buffer[b], this.m_accumulation2Buffer[a], s_s);\r\n                let fn = b2Min(pressureStrength * (h - 2) + normalStrength * b2Vec2.DotVV(s, n), maxVelocityVariation) * w;\r\n                ///b2Vec2 f = fn * n;\r\n                let f = b2Vec2.MulSV(fn, n, s_f);\r\n                ///m_velocityBuffer.data[a] -= f;\r\n                vel_data[a].SelfSub(f);\r\n                ///m_velocityBuffer.data[b] += f;\r\n                vel_data[b].SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveViscous() {\r\n        let s_v = b2ParticleSystem.SolveViscous_s_v;\r\n        let s_f = b2ParticleSystem.SolveViscous_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let viscousStrength = this.m_def.viscousStrength;\r\n        let inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_viscousParticle) {\r\n                let b = contact.body;\r\n                let w = contact.weight;\r\n                let m = contact.mass;\r\n                let p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n                let v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n                ///b2Vec2 f = viscousStrength * m * w * v;\r\n                let f = b2Vec2.MulSV(viscousStrength * m * w, v, s_f);\r\n                ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                vel_data[a].SelfMulAdd(inv_mass, f);\r\n                ///b.ApplyLinearImpulse(-f, p, true);\r\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_viscousParticle) {\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                let w = contact.weight;\r\n                ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n                let v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n                ///b2Vec2 f = viscousStrength * w * v;\r\n                let f = b2Vec2.MulSV(viscousStrength * w, v, s_f);\r\n                ///m_velocityBuffer.data[a] += f;\r\n                vel_data[a].SelfAdd(f);\r\n                ///m_velocityBuffer.data[b] -= f;\r\n                vel_data[b].SelfSub(f);\r\n            }\r\n        }\r\n    }\r\n    SolveRepulsive(step) {\r\n        let s_f = b2ParticleSystem.SolveRepulsive_s_f;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let repulsiveStrength = this.m_def.repulsiveStrength * this.GetCriticalVelocity(step);\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_repulsiveParticle) {\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\r\n                    let w = contact.weight;\r\n                    let n = contact.normal;\r\n                    ///b2Vec2 f = repulsiveStrength * w * n;\r\n                    let f = b2Vec2.MulSV(repulsiveStrength * w, n, s_f);\r\n                    ///m_velocityBuffer.data[a] -= f;\r\n                    vel_data[a].SelfSub(f);\r\n                    ///m_velocityBuffer.data[b] += f;\r\n                    vel_data[b].SelfAdd(f);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolvePowder(step) {\r\n        let s_f = b2ParticleSystem.SolvePowder_s_f;\r\n        let pos_data = this.m_positionBuffer.data;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let powderStrength = this.m_def.powderStrength * this.GetCriticalVelocity(step);\r\n        let minWeight = 1.0 - b2_particleStride;\r\n        let inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            let a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_powderParticle) {\r\n                let w = contact.weight;\r\n                if (w > minWeight) {\r\n                    let b = contact.body;\r\n                    let m = contact.mass;\r\n                    let p = pos_data[a];\r\n                    let n = contact.normal;\r\n                    let f = b2Vec2.MulSV(powderStrength * m * (w - minWeight), n, s_f);\r\n                    vel_data[a].SelfMulSub(inv_mass, f);\r\n                    b.ApplyLinearImpulse(f, p, true);\r\n                }\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_powderParticle) {\r\n                let w = contact.weight;\r\n                if (w > minWeight) {\r\n                    let a = contact.indexA;\r\n                    let b = contact.indexB;\r\n                    let n = contact.normal;\r\n                    let f = b2Vec2.MulSV(powderStrength * (w - minWeight), n, s_f);\r\n                    vel_data[a].SelfSub(f);\r\n                    vel_data[b].SelfAdd(f);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveSolid(step) {\r\n        let s_f = b2ParticleSystem.SolveSolid_s_f;\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        // applies extra repulsive force from solid particle groups\r\n        this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\r\n        let ejectionStrength = step.inv_dt * this.m_def.ejectionStrength;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            let a = contact.indexA;\r\n            let b = contact.indexB;\r\n            if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\r\n                let w = contact.weight;\r\n                let n = contact.normal;\r\n                let h = this.m_depthBuffer[a] + this.m_depthBuffer[b];\r\n                let f = b2Vec2.MulSV(ejectionStrength * h * w, n, s_f);\r\n                vel_data[a].SelfSub(f);\r\n                vel_data[b].SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveForce(step) {\r\n        let vel_data = this.m_velocityBuffer.data;\r\n        let velocityPerForce = step.dt * this.GetParticleInvMass();\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            ///m_velocityBuffer.data[i] += velocityPerForce * m_forceBuffer[i];\r\n            vel_data[i].SelfMulAdd(velocityPerForce, this.m_forceBuffer[i]);\r\n        }\r\n        this.m_hasForce = false;\r\n    }\r\n    SolveColorMixing() {\r\n        // mixes color between contacting particles\r\n        b2Assert(this.m_colorBuffer.data !== null);\r\n        const colorMixing = 0.5 * this.m_def.colorMixingStrength;\r\n        if (colorMixing) {\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                let contact = this.m_contactBuffer.data[k];\r\n                let a = contact.indexA;\r\n                let b = contact.indexB;\r\n                if (this.m_flagsBuffer.data[a] & this.m_flagsBuffer.data[b] &\r\n                    b2ParticleFlag.b2_colorMixingParticle) {\r\n                    let colorA = this.m_colorBuffer.data[a];\r\n                    let colorB = this.m_colorBuffer.data[b];\r\n                    // Use the static method to ensure certain compilers inline\r\n                    // this correctly.\r\n                    b2Color.MixColors(colorA, colorB, colorMixing);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveZombie() {\r\n        // removes particles with zombie flag\r\n        let newCount = 0;\r\n        ///int32* newIndices = (int32*) this.m_world.m_stackAllocator.Allocate(sizeof(int32) * this.m_count);\r\n        let newIndices = []; // TODO: static\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            newIndices[i] = b2_invalidParticleIndex;\r\n        }\r\n        b2Assert(newIndices.length === this.m_count);\r\n        let allParticleFlags = 0;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            let flags = this.m_flagsBuffer.data[i];\r\n            if (flags & b2ParticleFlag.b2_zombieParticle) {\r\n                let destructionListener = this.m_world.m_destructionListener;\r\n                if ((flags & b2ParticleFlag.b2_destructionListenerParticle) && destructionListener) {\r\n                    destructionListener.SayGoodbyeParticle(this, i);\r\n                }\r\n                // Destroy particle handle.\r\n                if (this.m_handleIndexBuffer.data) {\r\n                    let handle = this.m_handleIndexBuffer.data[i];\r\n                    if (handle) {\r\n                        handle.SetIndex(b2_invalidParticleIndex);\r\n                        this.m_handleIndexBuffer.data[i] = null;\r\n                        ///m_handleAllocator.Free(handle);\r\n                    }\r\n                }\r\n                newIndices[i] = b2_invalidParticleIndex;\r\n            }\r\n            else {\r\n                newIndices[i] = newCount;\r\n                if (i !== newCount) {\r\n                    // Update handle to reference new particle index.\r\n                    if (this.m_handleIndexBuffer.data) {\r\n                        let handle = this.m_handleIndexBuffer.data[i];\r\n                        if (handle)\r\n                            handle.SetIndex(newCount);\r\n                        this.m_handleIndexBuffer.data[newCount] = handle;\r\n                    }\r\n                    this.m_flagsBuffer.data[newCount] = this.m_flagsBuffer.data[i];\r\n                    if (this.m_lastBodyContactStepBuffer.data) {\r\n                        this.m_lastBodyContactStepBuffer.data[newCount] = this.m_lastBodyContactStepBuffer.data[i];\r\n                    }\r\n                    if (this.m_bodyContactCountBuffer.data) {\r\n                        this.m_bodyContactCountBuffer.data[newCount] = this.m_bodyContactCountBuffer.data[i];\r\n                    }\r\n                    if (this.m_consecutiveContactStepsBuffer.data) {\r\n                        this.m_consecutiveContactStepsBuffer.data[newCount] = this.m_consecutiveContactStepsBuffer.data[i];\r\n                    }\r\n                    this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[i]);\r\n                    this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[i]);\r\n                    this.m_groupBuffer[newCount] = this.m_groupBuffer[i];\r\n                    if (this.m_hasForce) {\r\n                        this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[i]);\r\n                    }\r\n                    if (this.m_staticPressureBuffer) {\r\n                        this.m_staticPressureBuffer[newCount] = this.m_staticPressureBuffer[i];\r\n                    }\r\n                    if (this.m_depthBuffer) {\r\n                        this.m_depthBuffer[newCount] = this.m_depthBuffer[i];\r\n                    }\r\n                    if (this.m_colorBuffer.data) {\r\n                        this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[i]);\r\n                    }\r\n                    if (this.m_userDataBuffer.data) {\r\n                        this.m_userDataBuffer.data[newCount] = this.m_userDataBuffer.data[i];\r\n                    }\r\n                    if (this.m_expirationTimeBuffer.data) {\r\n                        this.m_expirationTimeBuffer.data[newCount] = this.m_expirationTimeBuffer.data[i];\r\n                    }\r\n                }\r\n                newCount++;\r\n                allParticleFlags |= flags;\r\n            }\r\n        }\r\n        // predicate functions\r\n        let Test = {\r\n            ///static bool IsProxyInvalid(const Proxy& proxy)\r\n            IsProxyInvalid: (proxy) => {\r\n                return proxy.index < 0;\r\n            },\r\n            ///static bool IsContactInvalid(const b2ParticleContact& contact)\r\n            IsContactInvalid: (contact) => {\r\n                return contact.indexA < 0 || contact.indexB < 0;\r\n            },\r\n            ///static bool IsBodyContactInvalid(const b2ParticleBodyContact& contact)\r\n            IsBodyContactInvalid: (contact) => {\r\n                return contact.index < 0;\r\n            },\r\n            ///static bool IsPairInvalid(const b2ParticlePair& pair)\r\n            IsPairInvalid: (pair) => {\r\n                return pair.indexA < 0 || pair.indexB < 0;\r\n            },\r\n            ///static bool IsTriadInvalid(const b2ParticleTriad& triad)\r\n            IsTriadInvalid: (triad) => {\r\n                return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0;\r\n            }\r\n        };\r\n        // update proxies\r\n        for (let k = 0; k < this.m_proxyBuffer.count; k++) {\r\n            let proxy = this.m_proxyBuffer.data[k];\r\n            proxy.index = newIndices[proxy.index];\r\n        }\r\n        this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);\r\n        // update contacts\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            contact.indexA = newIndices[contact.indexA];\r\n            contact.indexB = newIndices[contact.indexB];\r\n        }\r\n        this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);\r\n        // update particle-body contacts\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            contact.index = newIndices[contact.index];\r\n        }\r\n        this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);\r\n        // update pairs\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            let pair = this.m_pairBuffer.data[k];\r\n            pair.indexA = newIndices[pair.indexA];\r\n            pair.indexB = newIndices[pair.indexB];\r\n        }\r\n        this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);\r\n        // update triads\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            let triad = this.m_triadBuffer.data[k];\r\n            triad.indexA = newIndices[triad.indexA];\r\n            triad.indexB = newIndices[triad.indexB];\r\n            triad.indexC = newIndices[triad.indexC];\r\n        }\r\n        this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);\r\n        // Update lifetime indices.\r\n        if (this.m_indexByExpirationTimeBuffer.data) {\r\n            let writeOffset = 0;\r\n            for (let readOffset = 0; readOffset < this.m_count; readOffset++) {\r\n                let newIndex = newIndices[this.m_indexByExpirationTimeBuffer.data[readOffset]];\r\n                if (newIndex !== b2_invalidParticleIndex) {\r\n                    this.m_indexByExpirationTimeBuffer.data[writeOffset++] = newIndex;\r\n                }\r\n            }\r\n        }\r\n        // update groups\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            let firstIndex = newCount;\r\n            let lastIndex = 0;\r\n            let modified = false;\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                let j = newIndices[i];\r\n                if (j >= 0) {\r\n                    firstIndex = b2Min(firstIndex, j);\r\n                    lastIndex = b2Max(lastIndex, j + 1);\r\n                }\r\n                else {\r\n                    modified = true;\r\n                }\r\n            }\r\n            if (firstIndex < lastIndex) {\r\n                group.m_firstIndex = firstIndex;\r\n                group.m_lastIndex = lastIndex;\r\n                if (modified) {\r\n                    if (group.m_groupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                        this.SetGroupFlags(group, group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                group.m_firstIndex = 0;\r\n                group.m_lastIndex = 0;\r\n                if (!(group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)) {\r\n                    this.SetGroupFlags(group, group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed);\r\n                }\r\n            }\r\n        }\r\n        // update particle count\r\n        this.m_count = newCount;\r\n        ///m_world.m_stackAllocator.Free(newIndices);\r\n        this.m_allParticleFlags = allParticleFlags;\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n        // destroy bodies with no particles\r\n        for (let group = this.m_groupList; group;) {\r\n            let next = group.GetNext();\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed) {\r\n                this.DestroyParticleGroup(group);\r\n            }\r\n            group = next;\r\n        }\r\n    }\r\n    /**\r\n     * Destroy all particles which have outlived their lifetimes set\r\n     * by SetParticleLifetime().\r\n     */\r\n    SolveLifetimes(step) {\r\n        b2Assert(this.m_expirationTimeBuffer.data !== null);\r\n        b2Assert(this.m_indexByExpirationTimeBuffer.data !== null);\r\n        // Update the time elapsed.\r\n        this.m_timeElapsed = this.LifetimeToExpirationTime(step.dt);\r\n        // Get the floor (non-fractional component) of the elapsed time.\r\n        let quantizedTimeElapsed = this.GetQuantizedTimeElapsed();\r\n        let expirationTimes = this.m_expirationTimeBuffer.data;\r\n        let expirationTimeIndices = this.m_indexByExpirationTimeBuffer.data;\r\n        let particleCount = this.GetParticleCount();\r\n        // Sort the lifetime buffer if it's required.\r\n        if (this.m_expirationTimeBufferRequiresSorting) {\r\n            ///const ExpirationTimeComparator expirationTimeComparator(expirationTimes);\r\n            ///std::sort(expirationTimeIndices, expirationTimeIndices + particleCount, expirationTimeComparator);\r\n            /**\r\n             * Compare the lifetime of particleIndexA and particleIndexB\r\n             * returning true if the lifetime of A is greater than B for\r\n             * particles that will expire.  If either particle's lifetime is\r\n             * infinite (<= 0.0f) this function return true if the lifetime\r\n             * of A is lesser than B. When used with std::sort() this\r\n             * results in an array of particle indicies sorted in reverse\r\n             * order by particle lifetime.\r\n             *\r\n             * For example, the set of lifetimes\r\n             * (1.0, 0.7, 0.3, 0.0, -1.0, 2.0)\r\n             * would be sorted as\r\n             * (0.0, 1.0, -2.0, 1.0, 0.7, 0.3)\r\n             */\r\n            let ExpirationTimeComparator = (particleIndexA, particleIndexB) => {\r\n                let expirationTimeA = expirationTimes[particleIndexA];\r\n                let expirationTimeB = expirationTimes[particleIndexB];\r\n                let infiniteExpirationTimeA = expirationTimeA <= 0.0;\r\n                let infiniteExpirationTimeB = expirationTimeB <= 0.0;\r\n                return infiniteExpirationTimeA === infiniteExpirationTimeB ?\r\n                    expirationTimeA > expirationTimeB : infiniteExpirationTimeA;\r\n            };\r\n            std_sort(expirationTimeIndices, 0, particleCount, ExpirationTimeComparator);\r\n            this.m_expirationTimeBufferRequiresSorting = false;\r\n        }\r\n        // Destroy particles which have expired.\r\n        for (let i = particleCount - 1; i >= 0; --i) {\r\n            let particleIndex = expirationTimeIndices[i];\r\n            let expirationTime = expirationTimes[particleIndex];\r\n            // If no particles need to be destroyed, skip this.\r\n            if (quantizedTimeElapsed < expirationTime || expirationTime <= 0) {\r\n                break;\r\n            }\r\n            // Destroy this particle.\r\n            this.DestroyParticle(particleIndex);\r\n        }\r\n    }\r\n    RotateBuffer(start, mid, end) {\r\n        // move the particles assigned to the given group toward the end of array\r\n        if (start === mid || mid === end) {\r\n            return;\r\n        }\r\n        b2Assert(mid >= start && mid <= end);\r\n        function newIndices(i) {\r\n            if (i < start) {\r\n                return i;\r\n            }\r\n            else if (i < mid) {\r\n                return i + end - mid;\r\n            }\r\n            else if (i < end) {\r\n                return i + start - mid;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        ///std::rotate(m_flagsBuffer.data + start, m_flagsBuffer.data + mid, m_flagsBuffer.data + end);\r\n        std_rotate(this.m_flagsBuffer.data, start, mid, end);\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            ///std::rotate(m_lastBodyContactStepBuffer.data + start, m_lastBodyContactStepBuffer.data + mid, m_lastBodyContactStepBuffer.data + end);\r\n            std_rotate(this.m_lastBodyContactStepBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            ///std::rotate(m_bodyContactCountBuffer.data + start, m_bodyContactCountBuffer.data + mid, m_bodyContactCountBuffer.data + end);\r\n            std_rotate(this.m_bodyContactCountBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            ///std::rotate(m_consecutiveContactStepsBuffer.data + start, m_consecutiveContactStepsBuffer.data + mid, m_consecutiveContactStepsBuffer.data + end);\r\n            std_rotate(this.m_consecutiveContactStepsBuffer.data, start, mid, end);\r\n        }\r\n        ///std::rotate(m_positionBuffer.data + start, m_positionBuffer.data + mid, m_positionBuffer.data + end);\r\n        std_rotate(this.m_positionBuffer.data, start, mid, end);\r\n        ///std::rotate(m_velocityBuffer.data + start, m_velocityBuffer.data + mid, m_velocityBuffer.data + end);\r\n        std_rotate(this.m_velocityBuffer.data, start, mid, end);\r\n        ///std::rotate(m_groupBuffer + start, m_groupBuffer + mid, m_groupBuffer + end);\r\n        std_rotate(this.m_groupBuffer, start, mid, end);\r\n        if (this.m_hasForce) {\r\n            ///std::rotate(m_forceBuffer + start, m_forceBuffer + mid, m_forceBuffer + end);\r\n            std_rotate(this.m_forceBuffer, start, mid, end);\r\n        }\r\n        if (this.m_staticPressureBuffer) {\r\n            ///std::rotate(m_staticPressureBuffer + start, m_staticPressureBuffer + mid, m_staticPressureBuffer + end);\r\n            std_rotate(this.m_staticPressureBuffer, start, mid, end);\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            ///std::rotate(m_depthBuffer + start, m_depthBuffer + mid, m_depthBuffer + end);\r\n            std_rotate(this.m_depthBuffer, start, mid, end);\r\n        }\r\n        if (this.m_colorBuffer.data) {\r\n            ///std::rotate(m_colorBuffer.data + start, m_colorBuffer.data + mid, m_colorBuffer.data + end);\r\n            std_rotate(this.m_colorBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_userDataBuffer.data) {\r\n            ///std::rotate(m_userDataBuffer.data + start, m_userDataBuffer.data + mid, m_userDataBuffer.data + end);\r\n            std_rotate(this.m_userDataBuffer.data, start, mid, end);\r\n        }\r\n        // Update handle indices.\r\n        if (this.m_handleIndexBuffer.data) {\r\n            ///std::rotate(m_handleIndexBuffer.data + start, m_handleIndexBuffer.data + mid, m_handleIndexBuffer.data + end);\r\n            std_rotate(this.m_handleIndexBuffer.data, start, mid, end);\r\n            for (let i = start; i < end; ++i) {\r\n                let handle = this.m_handleIndexBuffer.data[i];\r\n                if (handle)\r\n                    handle.SetIndex(newIndices(handle.GetIndex()));\r\n            }\r\n        }\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            ///std::rotate(m_expirationTimeBuffer.data + start, m_expirationTimeBuffer.data + mid, m_expirationTimeBuffer.data + end);\r\n            std_rotate(this.m_expirationTimeBuffer.data, start, mid, end);\r\n            // Update expiration time buffer indices.\r\n            let particleCount = this.GetParticleCount();\r\n            let indexByExpirationTime = this.m_indexByExpirationTimeBuffer.data;\r\n            for (let i = 0; i < particleCount; ++i) {\r\n                indexByExpirationTime[i] = newIndices(indexByExpirationTime[i]);\r\n            }\r\n        }\r\n        // update proxies\r\n        for (let k = 0; k < this.m_proxyBuffer.count; k++) {\r\n            let proxy = this.m_proxyBuffer.data[k];\r\n            proxy.index = newIndices(proxy.index);\r\n        }\r\n        // update contacts\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            let contact = this.m_contactBuffer.data[k];\r\n            contact.indexA = newIndices(contact.indexA);\r\n            contact.indexB = newIndices(contact.indexB);\r\n        }\r\n        // update particle-body contacts\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            let contact = this.m_bodyContactBuffer.data[k];\r\n            contact.index = newIndices(contact.index);\r\n        }\r\n        // update pairs\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            let pair = this.m_pairBuffer.data[k];\r\n            pair.indexA = newIndices(pair.indexA);\r\n            pair.indexB = newIndices(pair.indexB);\r\n        }\r\n        // update triads\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            let triad = this.m_triadBuffer.data[k];\r\n            triad.indexA = newIndices(triad.indexA);\r\n            triad.indexB = newIndices(triad.indexB);\r\n            triad.indexC = newIndices(triad.indexC);\r\n        }\r\n        // update groups\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            group.m_firstIndex = newIndices(group.m_firstIndex);\r\n            group.m_lastIndex = newIndices(group.m_lastIndex - 1) + 1;\r\n        }\r\n    }\r\n    GetCriticalVelocity(step) {\r\n        return this.m_particleDiameter * step.inv_dt;\r\n    }\r\n    GetCriticalVelocitySquared(step) {\r\n        let velocity = this.GetCriticalVelocity(step);\r\n        return velocity * velocity;\r\n    }\r\n    GetCriticalPressure(step) {\r\n        return this.m_def.density * this.GetCriticalVelocitySquared(step);\r\n    }\r\n    GetParticleStride() {\r\n        return b2_particleStride * this.m_particleDiameter;\r\n    }\r\n    GetParticleMass() {\r\n        let stride = this.GetParticleStride();\r\n        return this.m_def.density * stride * stride;\r\n    }\r\n    GetParticleInvMass() {\r\n        ///return 1.777777 * this.m_inverseDensity * this.m_inverseDiameter * this.m_inverseDiameter;\r\n        // mass = density * stride^2, so we take the inverse of this.\r\n        let inverseStride = this.m_inverseDiameter * (1.0 / b2_particleStride);\r\n        return this.m_inverseDensity * inverseStride * inverseStride;\r\n    }\r\n    /**\r\n     * Get the world's contact filter if any particles with the\r\n     * b2_contactFilterParticle flag are present in the system.\r\n     */\r\n    GetFixtureContactFilter() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactFilterParticle) ?\r\n            this.m_world.m_contactManager.m_contactFilter : null;\r\n    }\r\n    /**\r\n     * Get the world's contact filter if any particles with the\r\n     * b2_particleContactFilterParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetParticleContactFilter() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_particleContactFilterParticle) ?\r\n            this.m_world.m_contactManager.m_contactFilter : null;\r\n    }\r\n    /**\r\n     * Get the world's contact listener if any particles with the\r\n     * b2_fixtureContactListenerParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetFixtureContactListener() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactListenerParticle) ?\r\n            this.m_world.m_contactManager.m_contactListener : null;\r\n    }\r\n    /**\r\n     * Get the world's contact listener if any particles with the\r\n     * b2_particleContactListenerParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetParticleContactListener() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_particleContactListenerParticle) ?\r\n            this.m_world.m_contactManager.m_contactListener : null;\r\n    }\r\n    SetUserOverridableBuffer(buffer, newData, newCapacity) {\r\n        b2Assert(((newData !== null) && (newCapacity > 0)) || ((newData === null) && (newCapacity === 0)));\r\n        ///if (!buffer.userSuppliedCapacity)\r\n        ///{\r\n        ///this.m_world.m_blockAllocator.Free(buffer.data, sizeof(T) * m_internalAllocatedCapacity);\r\n        ///}\r\n        buffer.data = newData;\r\n        buffer.userSuppliedCapacity = newCapacity;\r\n    }\r\n    SetGroupFlags(group, newFlags) {\r\n        let oldFlags = group.m_groupFlags;\r\n        if ((oldFlags ^ newFlags) & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n            // If the b2_solidParticleGroup flag changed schedule depth update.\r\n            newFlags |= b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth;\r\n        }\r\n        if (oldFlags & ~newFlags) {\r\n            // If any flags might be removed\r\n            this.m_needsUpdateAllGroupFlags = true;\r\n        }\r\n        if (~this.m_allGroupFlags & newFlags) {\r\n            // If any flags were added\r\n            if (newFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\r\n            }\r\n            this.m_allGroupFlags |= newFlags;\r\n        }\r\n        group.m_groupFlags = newFlags;\r\n    }\r\n    static BodyContactCompare(lhs, rhs) {\r\n        if (lhs.index === rhs.index) {\r\n            // Subsort by weight, decreasing.\r\n            return lhs.weight > rhs.weight;\r\n        }\r\n        return lhs.index < rhs.index;\r\n    }\r\n    RemoveSpuriousBodyContacts() {\r\n        // At this point we have a list of contact candidates based on AABB\r\n        // overlap.The AABB query that  generated this returns all collidable\r\n        // fixtures overlapping particle bounding boxes.  This breaks down around\r\n        // vertices where two shapes intersect, such as a \"ground\" surface made\r\n        // of multiple b2PolygonShapes; it potentially applies a lot of spurious\r\n        // impulses from normals that should not actually contribute.  See the\r\n        // Ramp example in Testbed.\r\n        //\r\n        // To correct for this, we apply this algorithm:\r\n        //   * sort contacts by particle and subsort by weight (nearest to farthest)\r\n        //   * for each contact per particle:\r\n        //      - project a point at the contact distance along the inverse of the\r\n        //        contact normal\r\n        //      - if this intersects the fixture that generated the contact, apply\r\n        //         it, otherwise discard as impossible\r\n        //      - repeat for up to n nearest contacts, currently we get good results\r\n        //        from n=3.\r\n        ///std::sort(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleSystem::BodyContactCompare);\r\n        std_sort(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, b2ParticleSystem.BodyContactCompare);\r\n        ///int32 discarded = 0;\r\n        ///std::remove_if(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleBodyContactRemovePredicate(this, &discarded));\r\n        ///\r\n        ///m_bodyContactBuffer.SetCount(m_bodyContactBuffer.GetCount() - discarded);\r\n        let s_n = b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;\r\n        let s_pos = b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;\r\n        let s_normal = b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;\r\n        // Max number of contacts processed per particle, from nearest to farthest.\r\n        // This must be at least 2 for correctness with concave shapes; 3 was\r\n        // experimentally arrived at as looking reasonable.\r\n        let k_maxContactsPerPoint = 3;\r\n        const system = this;\r\n        // Index of last particle processed.\r\n        let lastIndex = -1;\r\n        // Number of contacts processed for the current particle.\r\n        let currentContacts = 0;\r\n        // Output the number of discarded contacts.\r\n        // let discarded = 0;\r\n        let b2ParticleBodyContactRemovePredicate = (contact) => {\r\n            // This implements the selection criteria described in\r\n            // RemoveSpuriousBodyContacts().\r\n            // This functor is iterating through a list of Body contacts per\r\n            // Particle, ordered from near to far.  For up to the maximum number of\r\n            // contacts we allow per point per step, we verify that the contact\r\n            // normal of the Body that genenerated the contact makes physical sense\r\n            // by projecting a point back along that normal and seeing if it\r\n            // intersects the fixture generating the contact.\r\n            if (contact.index !== lastIndex) {\r\n                currentContacts = 0;\r\n                lastIndex = contact.index;\r\n            }\r\n            if (currentContacts++ > k_maxContactsPerPoint) {\r\n                // ++discarded;\r\n                return true;\r\n            }\r\n            // Project along inverse normal (as returned in the contact) to get the\r\n            // point to check.\r\n            ///b2Vec2 n = contact.normal;\r\n            let n = s_n.Copy(contact.normal);\r\n            // weight is 1-(inv(diameter) * distance)\r\n            ///n *= system.m_particleDiameter * (1 - contact.weight);\r\n            n.SelfMul(system.m_particleDiameter * (1 - contact.weight));\r\n            ///b2Vec2 pos = system.m_positionBuffer.data[contact.index] + n;\r\n            let pos = b2Vec2.AddVV(system.m_positionBuffer.data[contact.index], n, s_pos);\r\n            // pos is now a point projected back along the contact normal to the\r\n            // contact distance. If the surface makes sense for a contact, pos will\r\n            // now lie on or in the fixture generating\r\n            if (!contact.fixture.TestPoint(pos)) {\r\n                let childCount = contact.fixture.GetShape().GetChildCount();\r\n                for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n                    let normal = s_normal;\r\n                    let distance = contact.fixture.ComputeDistance(pos, normal, childIndex);\r\n                    if (distance < b2_linearSlop) {\r\n                        return false;\r\n                    }\r\n                }\r\n                // ++discarded;\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.m_bodyContactBuffer.count = std_remove_if(this.m_bodyContactBuffer.data, b2ParticleBodyContactRemovePredicate, this.m_bodyContactBuffer.count);\r\n    }\r\n    DetectStuckParticle(particle) {\r\n        // Detect stuck particles\r\n        //\r\n        // The basic algorithm is to allow the user to specify an optional\r\n        // threshold where we detect whenever a particle is contacting\r\n        // more than one fixture for more than threshold consecutive\r\n        // steps. This is considered to be \"stuck\", and these are put\r\n        // in a list the user can query per step, if enabled, to deal with\r\n        // such particles.\r\n        if (this.m_stuckThreshold <= 0) {\r\n            return;\r\n        }\r\n        // Get the state variables for this particle.\r\n        ///int32 * const consecutiveCount = &m_consecutiveContactStepsBuffer.data[particle];\r\n        ///int32 * const lastStep = &m_lastBodyContactStepBuffer.data[particle];\r\n        ///int32 * const bodyCount = &m_bodyContactCountBuffer.data[particle];\r\n        // This is only called when there is a body contact for this particle.\r\n        ///++(*bodyCount);\r\n        ++this.m_bodyContactCountBuffer.data[particle];\r\n        // We want to only trigger detection once per step, the first time we\r\n        // contact more than one fixture in a step for a given particle.\r\n        ///if (*bodyCount === 2)\r\n        if (this.m_bodyContactCountBuffer.data[particle] === 2) {\r\n            ///++(*consecutiveCount);\r\n            ++this.m_consecutiveContactStepsBuffer.data[particle];\r\n            ///if (*consecutiveCount > m_stuckThreshold)\r\n            if (this.m_consecutiveContactStepsBuffer.data[particle] > this.m_stuckThreshold) {\r\n                ///int32& newStuckParticle = m_stuckParticleBuffer.Append();\r\n                ///newStuckParticle = particle;\r\n                this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = particle;\r\n            }\r\n        }\r\n        ///*lastStep = m_timestamp;\r\n        this.m_lastBodyContactStepBuffer.data[particle] = this.m_timestamp;\r\n    }\r\n    /**\r\n     * Determine whether a particle index is valid.\r\n     */\r\n    ValidateParticleIndex(index) {\r\n        return index >= 0 && index < this.GetParticleCount() &&\r\n            index !== b2_invalidParticleIndex;\r\n    }\r\n    /**\r\n     * Get the time elapsed in\r\n     * b2ParticleSystemDef::lifetimeGranularity.\r\n     */\r\n    GetQuantizedTimeElapsed() {\r\n        ///return (int32)(m_timeElapsed >> 32);\r\n        return Math.floor(this.m_timeElapsed / 0x100000000);\r\n    }\r\n    /**\r\n     * Convert a lifetime in seconds to an expiration time.\r\n     */\r\n    LifetimeToExpirationTime(lifetime) {\r\n        ///return m_timeElapsed + (int64)((lifetime / m_def.lifetimeGranularity) * (float32)(1LL << 32));\r\n        return this.m_timeElapsed + Math.floor(((lifetime / this.m_def.lifetimeGranularity) * 0x100000000));\r\n    }\r\n    ForceCanBeApplied(flags) {\r\n        return !(flags & b2ParticleFlag.b2_wallParticle);\r\n    }\r\n    PrepareForceBuffer() {\r\n        if (!this.m_hasForce) {\r\n            ///memset(m_forceBuffer, 0, sizeof(*m_forceBuffer) * m_count);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                this.m_forceBuffer[i].SetZero();\r\n            }\r\n            this.m_hasForce = true;\r\n        }\r\n    }\r\n    IsRigidGroup(group) {\r\n        return (group !== null) && ((group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0);\r\n    }\r\n    GetLinearVelocity(group, particleIndex, point, out) {\r\n        if (this.IsRigidGroup(group)) {\r\n            return group.GetLinearVelocityFromWorldPoint(point, out);\r\n        }\r\n        else {\r\n            ///return m_velocityBuffer.data[particleIndex];\r\n            return out.Copy(this.m_velocityBuffer.data[particleIndex]);\r\n        }\r\n    }\r\n    InitDampingParameter(invMass, invInertia, tangentDistance, mass, inertia, center, point, normal) {\r\n        ///*invMass = mass > 0 ? 1 / mass : 0;\r\n        invMass[0] = mass > 0 ? 1 / mass : 0;\r\n        ///*invInertia = inertia > 0 ? 1 / inertia : 0;\r\n        invInertia[0] = inertia > 0 ? 1 / inertia : 0;\r\n        ///*tangentDistance = b2Cross(point - center, normal);\r\n        tangentDistance[0] = b2Vec2.CrossVV(b2Vec2.SubVV(point, center, b2Vec2.s_t0), normal);\r\n    }\r\n    InitDampingParameterWithRigidGroupOrParticle(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, point, normal) {\r\n        if (isRigidGroup) {\r\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, group.GetMass(), group.GetInertia(), group.GetCenter(), point, normal);\r\n        }\r\n        else {\r\n            let flags = this.m_flagsBuffer.data[particleIndex];\r\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, flags & b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, point, point, normal);\r\n        }\r\n    }\r\n    ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, normalVelocity) {\r\n        let invMass = invMassA + invInertiaA * tangentDistanceA * tangentDistanceA +\r\n            invMassB + invInertiaB * tangentDistanceB * tangentDistanceB;\r\n        return invMass > 0 ? normalVelocity / invMass : 0;\r\n    }\r\n    ApplyDamping(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, impulse, normal) {\r\n        if (isRigidGroup) {\r\n            ///group.m_linearVelocity += impulse * invMass * normal;\r\n            group.m_linearVelocity.SelfMulAdd(impulse * invMass, normal);\r\n            ///group.m_angularVelocity += impulse * tangentDistance * invInertia;\r\n            group.m_angularVelocity += impulse * tangentDistance * invInertia;\r\n        }\r\n        else {\r\n            ///m_velocityBuffer.data[particleIndex] += impulse * invMass * normal;\r\n            this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse * invMass, normal);\r\n        }\r\n    }\r\n}\r\nb2ParticleSystem.xTruncBits = 12;\r\nb2ParticleSystem.yTruncBits = 12;\r\nb2ParticleSystem.tagBits = 8 * 4; // 8u * sizeof(uint32);\r\nb2ParticleSystem.yOffset = 1 << (b2ParticleSystem.yTruncBits - 1);\r\nb2ParticleSystem.yShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits;\r\nb2ParticleSystem.xShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits - b2ParticleSystem.xTruncBits;\r\nb2ParticleSystem.xScale = 1 << b2ParticleSystem.xShift;\r\nb2ParticleSystem.xOffset = b2ParticleSystem.xScale * (1 << (b2ParticleSystem.xTruncBits - 1));\r\nb2ParticleSystem.yMask = ((1 << b2ParticleSystem.yTruncBits) - 1) << b2ParticleSystem.yShift;\r\nb2ParticleSystem.xMask = ~b2ParticleSystem.yMask;\r\nb2ParticleSystem.DestroyParticlesInShape_s_aabb = new b2AABB();\r\nb2ParticleSystem.CreateParticleGroup_s_transform = new b2Transform();\r\nb2ParticleSystem.ComputeCollisionEnergy_s_v = new b2Vec2();\r\nb2ParticleSystem.QueryShapeAABB_s_aabb = new b2AABB();\r\nb2ParticleSystem.QueryPointAABB_s_aabb = new b2AABB();\r\nb2ParticleSystem.RayCast_s_aabb = new b2AABB();\r\nb2ParticleSystem.RayCast_s_p = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_v = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_n = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_point = new b2Vec2();\r\n/**\r\n * All particle types that require creating pairs\r\n */\r\nb2ParticleSystem.k_pairFlags = b2ParticleFlag.b2_springParticle;\r\n/**\r\n * All particle types that require creating triads\r\n */\r\nb2ParticleSystem.k_triadFlags = b2ParticleFlag.b2_elasticParticle;\r\n/**\r\n * All particle types that do not produce dynamic pressure\r\n */\r\nb2ParticleSystem.k_noPressureFlags = b2ParticleFlag.b2_powderParticle | b2ParticleFlag.b2_tensileParticle;\r\n/**\r\n * All particle types that apply extra damping force with bodies\r\n */\r\nb2ParticleSystem.k_extraDampingFlags = b2ParticleFlag.b2_staticPressureParticle;\r\nb2ParticleSystem.k_barrierWallFlags = b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_wallParticle;\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge = new b2EdgeShape();\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d = new b2Vec2();\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p = new b2Vec2();\r\nb2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb = new b2AABB();\r\nb2ParticleSystem.CreateParticlesFillShapeForGroup_s_p = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dab = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dbc = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dca = new b2Vec2();\r\nb2ParticleSystem.AddContact_s_d = new b2Vec2();\r\nb2ParticleSystem.UpdateBodyContacts_s_aabb = new b2AABB();\r\nb2ParticleSystem.Solve_s_subStep = new b2TimeStep();\r\nb2ParticleSystem.SolveCollision_s_aabb = new b2AABB();\r\nb2ParticleSystem.SolveGravity_s_gravity = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_aabb = new b2AABB();\r\nb2ParticleSystem.SolveBarrier_s_va = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vb = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_pba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vc = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_pca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_qba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_qca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_dv = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_f = new b2Vec2();\r\nb2ParticleSystem.SolvePressure_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveDamping_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_t0 = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_t1 = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_p = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveExtraDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveExtraDamping_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRigid_s_position = new b2Vec2();\r\nb2ParticleSystem.SolveRigid_s_rotation = new b2Rot();\r\nb2ParticleSystem.SolveRigid_s_transform = new b2Transform();\r\nb2ParticleSystem.SolveRigid_s_velocityTransform = new b2Transform();\r\nb2ParticleSystem.SolveElastic_s_pa = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_pb = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_pc = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_r = new b2Rot();\r\nb2ParticleSystem.SolveElastic_s_t0 = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_pa = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_pb = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_d = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_weightedNormal = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_s = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveViscous_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveViscous_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRepulsive_s_f = new b2Vec2();\r\nb2ParticleSystem.SolvePowder_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveSolid_s_f = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_n = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_pos = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_normal = new b2Vec2();\r\n(function (b2ParticleSystem) {\r\n    class UserOverridableBuffer {\r\n        constructor() {\r\n            this.data = null;\r\n            this.userSuppliedCapacity = 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.UserOverridableBuffer = UserOverridableBuffer;\r\n    class Proxy {\r\n        constructor() {\r\n            this.index = b2_invalidParticleIndex;\r\n            this.tag = 0;\r\n        }\r\n        static CompareProxyProxy(a, b) {\r\n            return a.tag < b.tag;\r\n        }\r\n        static CompareTagProxy(a, b) {\r\n            return a < b.tag;\r\n        }\r\n        static CompareProxyTag(a, b) {\r\n            return a.tag < b;\r\n        }\r\n    }\r\n    b2ParticleSystem.Proxy = Proxy;\r\n    class InsideBoundsEnumerator {\r\n        /**\r\n         * InsideBoundsEnumerator enumerates all particles inside the\r\n         * given bounds.\r\n         *\r\n         * Construct an enumerator with bounds of tags and a range of\r\n         * proxies.\r\n         */\r\n        constructor(system, lower, upper, first, last) {\r\n            this.m_system = system;\r\n            this.m_xLower = (lower & b2ParticleSystem.xMask) >>> 0;\r\n            this.m_xUpper = (upper & b2ParticleSystem.xMask) >>> 0;\r\n            this.m_yLower = (lower & b2ParticleSystem.yMask) >>> 0;\r\n            this.m_yUpper = (upper & b2ParticleSystem.yMask) >>> 0;\r\n            this.m_first = first;\r\n            this.m_last = last;\r\n            b2Assert(this.m_first <= this.m_last);\r\n        }\r\n        /**\r\n         * Get index of the next particle. Returns\r\n         * b2_invalidParticleIndex if there are no more particles.\r\n         */\r\n        GetNext() {\r\n            while (this.m_first < this.m_last) {\r\n                let xTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.xMask) >>> 0;\r\n                // #if B2_ASSERT_ENABLED\r\n                ///let yTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.yMask) >>> 0;\r\n                ///b2Assert(yTag >= this.m_yLower);\r\n                ///b2Assert(yTag <= this.m_yUpper);\r\n                // #endif\r\n                if (xTag >= this.m_xLower && xTag <= this.m_xUpper) {\r\n                    return (this.m_system.m_proxyBuffer.data[this.m_first++]).index;\r\n                }\r\n                this.m_first++;\r\n            }\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.InsideBoundsEnumerator = InsideBoundsEnumerator;\r\n    class ParticleListNode {\r\n        constructor() {\r\n            /**\r\n             * The head of the list.\r\n             */\r\n            this.list = null;\r\n            /**\r\n             * The next node in the list.\r\n             */\r\n            this.next = null;\r\n            /**\r\n             * Number of entries in the list. Valid only for the node at the\r\n             * head of the list.\r\n             */\r\n            this.count = 0;\r\n            /**\r\n             * Particle index.\r\n             */\r\n            this.index = 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.ParticleListNode = ParticleListNode;\r\n    /**\r\n     * @constructor\r\n     */\r\n    class FixedSetAllocator {\r\n        Allocate(itemSize, count) {\r\n            // TODO\r\n            return count;\r\n        }\r\n        Clear() {\r\n            // TODO\r\n        }\r\n        GetCount() {\r\n            // TODO\r\n            return 0;\r\n        }\r\n        Invalidate(itemIndex) {\r\n            // TODO\r\n        }\r\n        GetValidBuffer() {\r\n            // TODO\r\n            return [];\r\n        }\r\n        GetBuffer() {\r\n            // TODO\r\n            return [];\r\n        }\r\n        SetCount(count) {\r\n            // TODO\r\n        }\r\n    }\r\n    b2ParticleSystem.FixedSetAllocator = FixedSetAllocator;\r\n    class FixtureParticle {\r\n        constructor(fixture, particle) {\r\n            this.second = b2_invalidParticleIndex;\r\n            this.first = fixture;\r\n            this.second = particle;\r\n        }\r\n    }\r\n    b2ParticleSystem.FixtureParticle = FixtureParticle;\r\n    class FixtureParticleSet extends b2ParticleSystem.FixedSetAllocator {\r\n        Initialize(bodyContactBuffer, flagsBuffer) {\r\n            // TODO\r\n        }\r\n        Find(pair) {\r\n            // TODO\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.FixtureParticleSet = FixtureParticleSet;\r\n    class ParticlePair {\r\n        constructor(particleA, particleB) {\r\n            this.first = b2_invalidParticleIndex;\r\n            this.second = b2_invalidParticleIndex;\r\n            this.first = particleA;\r\n            this.second = particleB;\r\n        }\r\n    }\r\n    b2ParticleSystem.ParticlePair = ParticlePair;\r\n    class b2ParticlePairSet extends b2ParticleSystem.FixedSetAllocator {\r\n        Initialize(contactBuffer, flagsBuffer) {\r\n            // TODO\r\n        }\r\n        Find(pair) {\r\n            // TODO\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.b2ParticlePairSet = b2ParticlePairSet;\r\n    class ConnectionFilter {\r\n        /**\r\n         * Is the particle necessary for connection?\r\n         * A pair or a triad should contain at least one 'necessary'\r\n         * particle.\r\n         */\r\n        IsNecessary(index) {\r\n            return true;\r\n        }\r\n        /**\r\n         * An additional condition for creating a pair.\r\n         */\r\n        ShouldCreatePair(a, b) {\r\n            return true;\r\n        }\r\n        /**\r\n         * An additional condition for creating a triad.\r\n         */\r\n        ShouldCreateTriad(a, b, c) {\r\n            return true;\r\n        }\r\n    }\r\n    b2ParticleSystem.ConnectionFilter = ConnectionFilter;\r\n    class DestroyParticlesInShapeCallback extends b2QueryCallback {\r\n        constructor(system, shape, xf, callDestructionListener) {\r\n            super();\r\n            this.m_callDestructionListener = false;\r\n            this.m_destroyed = 0;\r\n            this.m_system = system;\r\n            this.m_shape = shape;\r\n            this.m_xf = xf;\r\n            this.m_callDestructionListener = callDestructionListener;\r\n            this.m_destroyed = 0;\r\n        }\r\n        ReportFixture(fixture) {\r\n            return false;\r\n        }\r\n        ReportParticle(particleSystem, index) {\r\n            if (particleSystem !== this.m_system)\r\n                return false;\r\n            b2Assert(index >= 0 && index < this.m_system.m_count);\r\n            if (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[index])) {\r\n                this.m_system.DestroyParticle(index, this.m_callDestructionListener);\r\n                this.m_destroyed++;\r\n            }\r\n            return true;\r\n        }\r\n        Destroyed() {\r\n            return this.m_destroyed;\r\n        }\r\n    }\r\n    b2ParticleSystem.DestroyParticlesInShapeCallback = DestroyParticlesInShapeCallback;\r\n    class JoinParticleGroupsFilter extends b2ParticleSystem.ConnectionFilter {\r\n        constructor(threshold) {\r\n            super();\r\n            this.m_threshold = 0;\r\n            this.m_threshold = threshold;\r\n        }\r\n        /**\r\n         * An additional condition for creating a pair.\r\n         */\r\n        ShouldCreatePair(a, b) {\r\n            return (a < this.m_threshold && this.m_threshold <= b) ||\r\n                (b < this.m_threshold && this.m_threshold <= a);\r\n        }\r\n        /**\r\n         * An additional condition for creating a triad.\r\n         */\r\n        ShouldCreateTriad(a, b, c) {\r\n            return (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) &&\r\n                (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c);\r\n        }\r\n    }\r\n    b2ParticleSystem.JoinParticleGroupsFilter = JoinParticleGroupsFilter;\r\n    class CompositeShape extends b2Shape {\r\n        constructor(shapes, shapeCount = shapes.length) {\r\n            super(b2ShapeType.e_unknown, 0);\r\n            this.m_shapeCount = 0;\r\n            this.m_shapes = shapes;\r\n            this.m_shapeCount = shapeCount;\r\n        }\r\n        Clone() {\r\n            b2Assert(false);\r\n            throw new Error();\r\n        }\r\n        GetChildCount() {\r\n            return 1;\r\n        }\r\n        /**\r\n         * @see b2Shape::TestPoint\r\n         */\r\n        TestPoint(xf, p) {\r\n            for (let i = 0; i < this.m_shapeCount; i++) {\r\n                if (this.m_shapes[i].TestPoint(xf, p)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeDistance\r\n         */\r\n        ComputeDistance(xf, p, normal, childIndex) {\r\n            b2Assert(false);\r\n            return 0;\r\n        }\r\n        /**\r\n         * Implement b2Shape.\r\n         */\r\n        RayCast(output, input, xf, childIndex) {\r\n            b2Assert(false);\r\n            return false;\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeAABB\r\n         */\r\n        ComputeAABB(aabb, xf, childIndex) {\r\n            let s_subaabb = new b2AABB();\r\n            aabb.lowerBound.x = +b2_maxFloat;\r\n            aabb.lowerBound.y = +b2_maxFloat;\r\n            aabb.upperBound.x = -b2_maxFloat;\r\n            aabb.upperBound.y = -b2_maxFloat;\r\n            b2Assert(childIndex === 0);\r\n            for (let i = 0; i < this.m_shapeCount; i++) {\r\n                let childCount = this.m_shapes[i].GetChildCount();\r\n                for (let j = 0; j < childCount; j++) {\r\n                    let subaabb = s_subaabb;\r\n                    this.m_shapes[i].ComputeAABB(subaabb, xf, j);\r\n                    aabb.Combine1(subaabb);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeMass\r\n         */\r\n        ComputeMass(massData, density) {\r\n            b2Assert(false);\r\n        }\r\n        SetupDistanceProxy(proxy, index) {\r\n            b2Assert(false);\r\n        }\r\n        ComputeSubmergedArea(normal, offset, xf, c) {\r\n            b2Assert(false);\r\n            return 0;\r\n        }\r\n        Dump(log) {\r\n            b2Assert(false);\r\n        }\r\n    }\r\n    b2ParticleSystem.CompositeShape = CompositeShape;\r\n    class ReactiveFilter extends b2ParticleSystem.ConnectionFilter {\r\n        constructor(flagsBuffer) {\r\n            super();\r\n            this.m_flagsBuffer = flagsBuffer;\r\n        }\r\n        IsNecessary(index) {\r\n            return (this.m_flagsBuffer.data[index] & b2ParticleFlag.b2_reactiveParticle) !== 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.ReactiveFilter = ReactiveFilter;\r\n    class UpdateBodyContactsCallback extends b2FixtureParticleQueryCallback {\r\n        constructor(system, contactFilter) {\r\n            super(system); // base class constructor\r\n            this.m_contactFilter = contactFilter;\r\n        }\r\n        ShouldCollideFixtureParticle(fixture, particleSystem, particleIndex) {\r\n            // Call the contact filter if it's set, to determine whether to\r\n            // filter this contact.  Returns true if contact calculations should\r\n            // be performed, false otherwise.\r\n            if (this.m_contactFilter) {\r\n                let flags = this.m_system.GetFlagsBuffer();\r\n                if (flags[particleIndex] & b2ParticleFlag.b2_fixtureContactFilterParticle) {\r\n                    return this.m_contactFilter.ShouldCollideFixtureParticle(fixture, this.m_system, particleIndex);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        ReportFixtureAndParticle(fixture, childIndex, a) {\r\n            let s_n = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;\r\n            let s_rp = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;\r\n            let ap = this.m_system.m_positionBuffer.data[a];\r\n            let n = s_n;\r\n            let d = fixture.ComputeDistance(ap, n, childIndex);\r\n            if (d < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(fixture, this.m_system, a)) {\r\n                let b = fixture.GetBody();\r\n                let bp = b.GetWorldCenter();\r\n                let bm = b.GetMass();\r\n                let bI = b.GetInertia() - bm * b.GetLocalCenter().LengthSquared();\r\n                let invBm = bm > 0 ? 1 / bm : 0;\r\n                let invBI = bI > 0 ? 1 / bI : 0;\r\n                let invAm = this.m_system.m_flagsBuffer.data[a] &\r\n                    b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass();\r\n                ///b2Vec2 rp = ap - bp;\r\n                let rp = b2Vec2.SubVV(ap, bp, s_rp);\r\n                let rpn = b2Vec2.CrossVV(rp, n);\r\n                let invM = invAm + invBm + invBI * rpn * rpn;\r\n                ///b2ParticleBodyContact& contact = m_system.m_bodyContactBuffer.Append();\r\n                let contact = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];\r\n                contact.index = a;\r\n                contact.body = b;\r\n                contact.fixture = fixture;\r\n                contact.weight = 1 - d * this.m_system.m_inverseDiameter;\r\n                ///contact.normal = -n;\r\n                contact.normal.Copy(n.SelfNeg());\r\n                contact.mass = invM > 0 ? 1 / invM : 0;\r\n                this.m_system.DetectStuckParticle(a);\r\n            }\r\n        }\r\n    }\r\n    UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n = new b2Vec2();\r\n    UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp = new b2Vec2();\r\n    b2ParticleSystem.UpdateBodyContactsCallback = UpdateBodyContactsCallback;\r\n    class SolveCollisionCallback extends b2FixtureParticleQueryCallback {\r\n        constructor(system, step) {\r\n            super(system); // base class constructor\r\n            this.m_step = step;\r\n        }\r\n        ReportFixtureAndParticle(fixture, childIndex, a) {\r\n            let s_p1 = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p1;\r\n            let s_output = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_output;\r\n            let s_input = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_input;\r\n            let s_p = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p;\r\n            let s_v = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_v;\r\n            let s_f = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_f;\r\n            let body = fixture.GetBody();\r\n            let ap = this.m_system.m_positionBuffer.data[a];\r\n            let av = this.m_system.m_velocityBuffer.data[a];\r\n            let output = s_output;\r\n            let input = s_input;\r\n            if (this.m_system.m_iterationIndex === 0) {\r\n                // Put 'ap' in the local space of the previous frame\r\n                ///b2Vec2 p1 = b2MulT(body.m_xf0, ap);\r\n                let p1 = b2Transform.MulTXV(body.m_xf0, ap, s_p1);\r\n                if (fixture.GetShape().GetType() === b2ShapeType.e_circleShape) {\r\n                    // Make relative to the center of the circle\r\n                    ///p1 -= body.GetLocalCenter();\r\n                    p1.SelfSub(body.GetLocalCenter());\r\n                    // Re-apply rotation about the center of the circle\r\n                    ///p1 = b2Mul(body.m_xf0.q, p1);\r\n                    b2Rot.MulRV(body.m_xf0.q, p1, p1);\r\n                    // Subtract rotation of the current frame\r\n                    ///p1 = b2MulT(body.m_xf.q, p1);\r\n                    b2Rot.MulTRV(body.m_xf.q, p1, p1);\r\n                    // Return to local space\r\n                    ///p1 += body.GetLocalCenter();\r\n                    p1.SelfAdd(body.GetLocalCenter());\r\n                }\r\n                // Return to global space and apply rotation of current frame\r\n                ///input.p1 = b2Mul(body.m_xf, p1);\r\n                b2Transform.MulXV(body.m_xf, p1, input.p1);\r\n            }\r\n            else {\r\n                ///input.p1 = ap;\r\n                input.p1.Copy(ap);\r\n            }\r\n            ///input.p2 = ap + m_step.dt * av;\r\n            b2Vec2.AddVMulSV(ap, this.m_step.dt, av, input.p2);\r\n            input.maxFraction = 1;\r\n            if (fixture.RayCast(output, input, childIndex)) {\r\n                let n = output.normal;\r\n                ///b2Vec2 p = (1 - output.fraction) * input.p1 + output.fraction * input.p2 + b2_linearSlop * n;\r\n                let p = s_p;\r\n                p.x = (1 - output.fraction) * input.p1.x + output.fraction * input.p2.x + b2_linearSlop * n.x;\r\n                p.y = (1 - output.fraction) * input.p1.y + output.fraction * input.p2.y + b2_linearSlop * n.y;\r\n                ///b2Vec2 v = m_step.inv_dt * (p - ap);\r\n                let v = s_v;\r\n                v.x = this.m_step.inv_dt * (p.x - ap.x);\r\n                v.y = this.m_step.inv_dt * (p.y - ap.y);\r\n                ///m_system.m_velocityBuffer.data[a] = v;\r\n                this.m_system.m_velocityBuffer.data[a].Copy(v);\r\n                ///b2Vec2 f = m_step.inv_dt * m_system.GetParticleMass() * (av - v);\r\n                let f = s_f;\r\n                f.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.x - v.x);\r\n                f.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.y - v.y);\r\n                this.m_system.ParticleApplyForce(a, f);\r\n            }\r\n        }\r\n        ReportParticle(system, index) {\r\n            return false;\r\n        }\r\n    }\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_p1 = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_output = new b2RayCastOutput();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_input = new b2RayCastInput();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_p = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_v = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_f = new b2Vec2();\r\n    b2ParticleSystem.SolveCollisionCallback = SolveCollisionCallback;\r\n})(b2ParticleSystem || (b2ParticleSystem = {}));\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_epsilon, b2_linearSlop, b2_maxSubSteps, b2_maxTOIContacts } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Vec2, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2Color, b2DrawFlags } from \"../Common/b2Draw\";\r\nimport { b2AABB, b2RayCastInput, b2RayCastOutput, b2TestOverlapShape } from \"../Collision/b2Collision\";\r\nimport { b2TimeOfImpact, b2TOIInput, b2TOIOutput, b2TOIOutputState } from \"../Collision/b2TimeOfImpact\";\r\nimport { b2ShapeType } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2JointType } from \"./Joints/b2Joint\";\r\nimport { b2JointFactory } from \"./Joints/b2JointFactory\";\r\nimport { b2Body, b2BodyType } from \"./b2Body\";\r\nimport { b2ContactManager } from \"./b2ContactManager\";\r\nimport { b2Island } from \"./b2Island\";\r\nimport { b2Profile, b2TimeStep } from \"./b2TimeStep\";\r\nimport { b2QueryCallback } from \"./b2WorldCallbacks\";\r\nimport { b2RayCastCallback } from \"./b2WorldCallbacks\";\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_maxFloat } from \"../Common/b2Settings\";\r\nimport { b2CalculateParticleIterations } from \"../Particle/b2Particle\";\r\nimport { b2ParticleSystem } from \"../Particle/b2ParticleSystem\";\r\n// #endif\r\n/// The world class manages all physics entities, dynamic simulation,\r\n/// and asynchronous queries. The world also contains efficient memory\r\n/// management facilities.\r\nexport class b2World {\r\n    // #endif\r\n    /// Construct a world object.\r\n    /// @param gravity the world gravity vector.\r\n    constructor(gravity) {\r\n        // b2BlockAllocator m_blockAllocator;\r\n        // b2StackAllocator m_stackAllocator;\r\n        this.m_newFixture = false;\r\n        this.m_locked = false;\r\n        this.m_clearForces = true;\r\n        this.m_contactManager = new b2ContactManager();\r\n        this.m_bodyList = null;\r\n        this.m_jointList = null;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_particleSystemList = null;\r\n        // #endif\r\n        this.m_bodyCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_gravity = new b2Vec2();\r\n        this.m_allowSleep = true;\r\n        this.m_destructionListener = null;\r\n        this.m_debugDraw = null;\r\n        // This is used to compute the time step ratio to\r\n        // support a variable time step.\r\n        this.m_inv_dt0 = 0;\r\n        // These are for debugging the solver.\r\n        this.m_warmStarting = true;\r\n        this.m_continuousPhysics = true;\r\n        this.m_subStepping = false;\r\n        this.m_stepComplete = true;\r\n        this.m_profile = new b2Profile();\r\n        this.m_island = new b2Island();\r\n        this.s_stack = [];\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        this.m_gravity.Copy(gravity);\r\n    }\r\n    /// Register a destruction listener. The listener is owned by you and must\r\n    /// remain in scope.\r\n    SetDestructionListener(listener) {\r\n        this.m_destructionListener = listener;\r\n    }\r\n    /// Register a contact filter to provide specific control over collision.\r\n    /// Otherwise the default filter is used (b2_defaultFilter). The listener is\r\n    /// owned by you and must remain in scope.\r\n    SetContactFilter(filter) {\r\n        this.m_contactManager.m_contactFilter = filter;\r\n    }\r\n    /// Register a contact event listener. The listener is owned by you and must\r\n    /// remain in scope.\r\n    SetContactListener(listener) {\r\n        this.m_contactManager.m_contactListener = listener;\r\n    }\r\n    /// Register a routine for debug drawing. The debug draw functions are called\r\n    /// inside with b2World::DrawDebugData method. The debug draw object is owned\r\n    /// by you and must remain in scope.\r\n    SetDebugDraw(debugDraw) {\r\n        this.m_debugDraw = debugDraw;\r\n    }\r\n    /// Create a rigid body given a definition. No reference to the definition\r\n    /// is retained.\r\n    /// @warning This function is locked during callbacks.\r\n    CreateBody(def) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return null;\r\n        }\r\n        const b = new b2Body(def, this);\r\n        // Add to world doubly linked list.\r\n        b.m_prev = null;\r\n        b.m_next = this.m_bodyList;\r\n        if (this.m_bodyList) {\r\n            this.m_bodyList.m_prev = b;\r\n        }\r\n        this.m_bodyList = b;\r\n        ++this.m_bodyCount;\r\n        return b;\r\n    }\r\n    /// Destroy a rigid body given a definition. No reference to the definition\r\n    /// is retained. This function is locked during callbacks.\r\n    /// @warning This automatically deletes all associated shapes and joints.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyBody(b) {\r\n        ///b2Assert(this.m_bodyCount > 0);\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return;\r\n        }\r\n        // Delete the attached joints.\r\n        let je = b.m_jointList;\r\n        while (je) {\r\n            const je0 = je;\r\n            je = je.next;\r\n            if (this.m_destructionListener) {\r\n                this.m_destructionListener.SayGoodbyeJoint(je0.joint);\r\n            }\r\n            this.DestroyJoint(je0.joint);\r\n            b.m_jointList = je;\r\n        }\r\n        b.m_jointList = null;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        // @see b2Controller list\r\n        let coe = b.m_controllerList;\r\n        while (coe) {\r\n            const coe0 = coe;\r\n            coe = coe.nextController;\r\n            coe0.controller.RemoveBody(b);\r\n        }\r\n        // #endif\r\n        // Delete the attached contacts.\r\n        let ce = b.m_contactList;\r\n        while (ce) {\r\n            const ce0 = ce;\r\n            ce = ce.next;\r\n            this.m_contactManager.Destroy(ce0.contact);\r\n        }\r\n        b.m_contactList = null;\r\n        // Delete the attached fixtures. This destroys broad-phase proxies.\r\n        let f = b.m_fixtureList;\r\n        while (f) {\r\n            const f0 = f;\r\n            f = f.m_next;\r\n            if (this.m_destructionListener) {\r\n                this.m_destructionListener.SayGoodbyeFixture(f0);\r\n            }\r\n            f0.DestroyProxies(this.m_contactManager.m_broadPhase);\r\n            f0.Destroy();\r\n            b.m_fixtureList = f;\r\n            b.m_fixtureCount -= 1;\r\n        }\r\n        b.m_fixtureList = null;\r\n        b.m_fixtureCount = 0;\r\n        // Remove world body list.\r\n        if (b.m_prev) {\r\n            b.m_prev.m_next = b.m_next;\r\n        }\r\n        if (b.m_next) {\r\n            b.m_next.m_prev = b.m_prev;\r\n        }\r\n        if (b === this.m_bodyList) {\r\n            this.m_bodyList = b.m_next;\r\n        }\r\n        --this.m_bodyCount;\r\n    }\r\n    /// Create a joint to constrain bodies together. No reference to the definition\r\n    /// is retained. This may cause the connected bodies to cease colliding.\r\n    /// @warning This function is locked during callbacks.\r\n    CreateJoint(def) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return null;\r\n        }\r\n        const j = b2JointFactory.Create(def, null);\r\n        // Connect to the world list.\r\n        j.m_prev = null;\r\n        j.m_next = this.m_jointList;\r\n        if (this.m_jointList) {\r\n            this.m_jointList.m_prev = j;\r\n        }\r\n        this.m_jointList = j;\r\n        ++this.m_jointCount;\r\n        // Connect to the bodies' doubly linked lists.\r\n        // j.m_edgeA.joint = j;\r\n        // j.m_edgeA.other = j.m_bodyB;\r\n        j.m_edgeA.prev = null;\r\n        j.m_edgeA.next = j.m_bodyA.m_jointList;\r\n        if (j.m_bodyA.m_jointList)\r\n            j.m_bodyA.m_jointList.prev = j.m_edgeA;\r\n        j.m_bodyA.m_jointList = j.m_edgeA;\r\n        // j.m_edgeB.joint = j;\r\n        // j.m_edgeB.other = j.m_bodyA;\r\n        j.m_edgeB.prev = null;\r\n        j.m_edgeB.next = j.m_bodyB.m_jointList;\r\n        if (j.m_bodyB.m_jointList)\r\n            j.m_bodyB.m_jointList.prev = j.m_edgeB;\r\n        j.m_bodyB.m_jointList = j.m_edgeB;\r\n        const bodyA = def.bodyA;\r\n        const bodyB = def.bodyB;\r\n        // If the joint prevents collisions, then flag any contacts for filtering.\r\n        if (!def.collideConnected) {\r\n            let edge = bodyB.GetContactList();\r\n            while (edge) {\r\n                if (edge.other === bodyA) {\r\n                    // Flag the contact for filtering at the next time step (where either\r\n                    // body is awake).\r\n                    edge.contact.FlagForFiltering();\r\n                }\r\n                edge = edge.next;\r\n            }\r\n        }\r\n        // Note: creating a joint doesn't wake the bodies.\r\n        return j;\r\n    }\r\n    /// Destroy a joint. This may cause the connected bodies to begin colliding.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyJoint(j) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return;\r\n        }\r\n        const collideConnected = j.m_collideConnected;\r\n        // Remove from the doubly linked list.\r\n        if (j.m_prev) {\r\n            j.m_prev.m_next = j.m_next;\r\n        }\r\n        if (j.m_next) {\r\n            j.m_next.m_prev = j.m_prev;\r\n        }\r\n        if (j === this.m_jointList) {\r\n            this.m_jointList = j.m_next;\r\n        }\r\n        // Disconnect from island graph.\r\n        const bodyA = j.m_bodyA;\r\n        const bodyB = j.m_bodyB;\r\n        // Wake up connected bodies.\r\n        bodyA.SetAwake(true);\r\n        bodyB.SetAwake(true);\r\n        // Remove from body 1.\r\n        if (j.m_edgeA.prev) {\r\n            j.m_edgeA.prev.next = j.m_edgeA.next;\r\n        }\r\n        if (j.m_edgeA.next) {\r\n            j.m_edgeA.next.prev = j.m_edgeA.prev;\r\n        }\r\n        if (j.m_edgeA === bodyA.m_jointList) {\r\n            bodyA.m_jointList = j.m_edgeA.next;\r\n        }\r\n        j.m_edgeA.prev = null;\r\n        j.m_edgeA.next = null;\r\n        // Remove from body 2\r\n        if (j.m_edgeB.prev) {\r\n            j.m_edgeB.prev.next = j.m_edgeB.next;\r\n        }\r\n        if (j.m_edgeB.next) {\r\n            j.m_edgeB.next.prev = j.m_edgeB.prev;\r\n        }\r\n        if (j.m_edgeB === bodyB.m_jointList) {\r\n            bodyB.m_jointList = j.m_edgeB.next;\r\n        }\r\n        j.m_edgeB.prev = null;\r\n        j.m_edgeB.next = null;\r\n        b2JointFactory.Destroy(j, null);\r\n        ///b2Assert(this.m_jointCount > 0);\r\n        --this.m_jointCount;\r\n        // If the joint prevents collisions, then flag any contacts for filtering.\r\n        if (!collideConnected) {\r\n            let edge = bodyB.GetContactList();\r\n            while (edge) {\r\n                if (edge.other === bodyA) {\r\n                    // Flag the contact for filtering at the next time step (where either\r\n                    // body is awake).\r\n                    edge.contact.FlagForFiltering();\r\n                }\r\n                edge = edge.next;\r\n            }\r\n        }\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    CreateParticleSystem(def) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return null;\r\n        }\r\n        const p = new b2ParticleSystem(def, this);\r\n        // Add to world doubly linked list.\r\n        p.m_prev = null;\r\n        p.m_next = this.m_particleSystemList;\r\n        if (this.m_particleSystemList) {\r\n            this.m_particleSystemList.m_prev = p;\r\n        }\r\n        this.m_particleSystemList = p;\r\n        return p;\r\n    }\r\n    DestroyParticleSystem(p) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return;\r\n        }\r\n        // Remove world particleSystem list.\r\n        if (p.m_prev) {\r\n            p.m_prev.m_next = p.m_next;\r\n        }\r\n        if (p.m_next) {\r\n            p.m_next.m_prev = p.m_prev;\r\n        }\r\n        if (p === this.m_particleSystemList) {\r\n            this.m_particleSystemList = p.m_next;\r\n        }\r\n    }\r\n    CalculateReasonableParticleIterations(timeStep) {\r\n        if (this.m_particleSystemList === null) {\r\n            return 1;\r\n        }\r\n        function GetSmallestRadius(world) {\r\n            let smallestRadius = b2_maxFloat;\r\n            for (let system = world.GetParticleSystemList(); system !== null; system = system.m_next) {\r\n                smallestRadius = b2Min(smallestRadius, system.GetRadius());\r\n            }\r\n            return smallestRadius;\r\n        }\r\n        // Use the smallest radius, since that represents the worst-case.\r\n        return b2CalculateParticleIterations(this.m_gravity.Length(), GetSmallestRadius(this), timeStep);\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    Step(dt, velocityIterations, positionIterations, particleIterations = this.CalculateReasonableParticleIterations(dt)) {\r\n        // #else\r\n        // public Step(dt: number, velocityIterations: number, positionIterations: number): void {\r\n        // #endif\r\n        const stepTimer = b2World.Step_s_stepTimer.Reset();\r\n        // If new fixtures were added, we need to find the new contacts.\r\n        if (this.m_newFixture) {\r\n            this.m_contactManager.FindNewContacts();\r\n            this.m_newFixture = false;\r\n        }\r\n        this.m_locked = true;\r\n        const step = b2World.Step_s_step;\r\n        step.dt = dt;\r\n        step.velocityIterations = velocityIterations;\r\n        step.positionIterations = positionIterations;\r\n        // #if B2_ENABLE_PARTICLE\r\n        step.particleIterations = particleIterations;\r\n        // #endif\r\n        if (dt > 0) {\r\n            step.inv_dt = 1 / dt;\r\n        }\r\n        else {\r\n            step.inv_dt = 0;\r\n        }\r\n        step.dtRatio = this.m_inv_dt0 * dt;\r\n        step.warmStarting = this.m_warmStarting;\r\n        // Update contacts. This is where some contacts are destroyed.\r\n        const timer = b2World.Step_s_timer.Reset();\r\n        this.m_contactManager.Collide();\r\n        this.m_profile.collide = timer.GetMilliseconds();\r\n        // Integrate velocities, solve velocity constraints, and integrate positions.\r\n        if (this.m_stepComplete && step.dt > 0) {\r\n            const timer = b2World.Step_s_timer.Reset();\r\n            // #if B2_ENABLE_PARTICLE\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                p.Solve(step); // Particle Simulation\r\n            }\r\n            // #endif\r\n            this.Solve(step);\r\n            this.m_profile.solve = timer.GetMilliseconds();\r\n        }\r\n        // Handle TOI events.\r\n        if (this.m_continuousPhysics && step.dt > 0) {\r\n            const timer = b2World.Step_s_timer.Reset();\r\n            this.SolveTOI(step);\r\n            this.m_profile.solveTOI = timer.GetMilliseconds();\r\n        }\r\n        if (step.dt > 0) {\r\n            this.m_inv_dt0 = step.inv_dt;\r\n        }\r\n        if (this.m_clearForces) {\r\n            this.ClearForces();\r\n        }\r\n        this.m_locked = false;\r\n        this.m_profile.step = stepTimer.GetMilliseconds();\r\n    }\r\n    /// Manually clear the force buffer on all bodies. By default, forces are cleared automatically\r\n    /// after each call to Step. The default behavior is modified by calling SetAutoClearForces.\r\n    /// The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain\r\n    /// a fixed sized time step under a variable frame-rate.\r\n    /// When you perform sub-stepping you will disable auto clearing of forces and instead call\r\n    /// ClearForces after all sub-steps are complete in one pass of your game loop.\r\n    /// @see SetAutoClearForces\r\n    ClearForces() {\r\n        for (let body = this.m_bodyList; body; body = body.m_next) {\r\n            body.m_force.SetZero();\r\n            body.m_torque = 0;\r\n        }\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    DrawParticleSystem(system) {\r\n        const particleCount = system.GetParticleCount();\r\n        if (particleCount) {\r\n            const radius = system.GetRadius();\r\n            const positionBuffer = system.GetPositionBuffer();\r\n            if (system.m_colorBuffer.data) {\r\n                const colorBuffer = system.GetColorBuffer();\r\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);\r\n            }\r\n            else {\r\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, null, particleCount);\r\n            }\r\n        }\r\n    }\r\n    DrawDebugData() {\r\n        if (this.m_debugDraw === null) {\r\n            return;\r\n        }\r\n        const flags = this.m_debugDraw.GetFlags();\r\n        const color = b2World.DrawDebugData_s_color.SetRGB(0, 0, 0);\r\n        if (flags & b2DrawFlags.e_shapeBit) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                const xf = b.m_xf;\r\n                this.m_debugDraw.PushTransform(xf);\r\n                for (let f = b.GetFixtureList(); f; f = f.m_next) {\r\n                    if (!b.IsActive()) {\r\n                        color.SetRGB(0.5, 0.5, 0.3);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                        color.SetRGB(0.5, 0.9, 0.5);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (b.GetType() === b2BodyType.b2_kinematicBody) {\r\n                        color.SetRGB(0.5, 0.5, 0.9);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (!b.IsAwake()) {\r\n                        color.SetRGB(0.6, 0.6, 0.6);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else {\r\n                        color.SetRGB(0.9, 0.7, 0.7);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                }\r\n                this.m_debugDraw.PopTransform(xf);\r\n            }\r\n        }\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (flags & b2DrawFlags.e_particleBit) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                this.DrawParticleSystem(p);\r\n            }\r\n        }\r\n        // #endif\r\n        if (flags & b2DrawFlags.e_jointBit) {\r\n            for (let j = this.m_jointList; j; j = j.m_next) {\r\n                this.DrawJoint(j);\r\n            }\r\n        }\r\n        /*\r\n        if (flags & b2DrawFlags.e_pairBit) {\r\n          color.SetRGB(0.3, 0.9, 0.9);\r\n          for (let contact = this.m_contactManager.m_contactList; contact; contact = contact.m_next) {\r\n            const fixtureA = contact.GetFixtureA();\r\n            const fixtureB = contact.GetFixtureB();\r\n    \r\n            const cA = fixtureA.GetAABB().GetCenter();\r\n            const cB = fixtureB.GetAABB().GetCenter();\r\n    \r\n            this.m_debugDraw.DrawSegment(cA, cB, color);\r\n          }\r\n        }\r\n        */\r\n        if (flags & b2DrawFlags.e_aabbBit) {\r\n            color.SetRGB(0.9, 0.3, 0.9);\r\n            const bp = this.m_contactManager.m_broadPhase;\r\n            const vs = b2World.DrawDebugData_s_vs;\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                if (!b.IsActive()) {\r\n                    continue;\r\n                }\r\n                for (let f = b.GetFixtureList(); f; f = f.m_next) {\r\n                    for (let i = 0; i < f.m_proxyCount; ++i) {\r\n                        const proxy = f.m_proxies[i];\r\n                        const aabb = bp.GetFatAABB(proxy.treeNode);\r\n                        vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\r\n                        vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\r\n                        vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\r\n                        vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\r\n                        this.m_debugDraw.DrawPolygon(vs, 4, color);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (flags & b2DrawFlags.e_centerOfMassBit) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                const xf = b2World.DrawDebugData_s_xf;\r\n                xf.q.Copy(b.m_xf.q);\r\n                xf.p.Copy(b.GetWorldCenter());\r\n                this.m_debugDraw.DrawTransform(xf);\r\n            }\r\n        }\r\n        // #if B2_ENABLE_CONTROLLER  \r\n        // @see b2Controller list\r\n        if (flags & b2DrawFlags.e_controllerBit) {\r\n            for (let c = this.m_controllerList; c; c = c.m_next) {\r\n                c.Draw(this.m_debugDraw);\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    /// Query the world for all fixtures that potentially overlap the\r\n    /// provided AABB.\r\n    /// @param callback a user implemented callback class.\r\n    /// @param aabb the query box.\r\n    QueryAABB(callback, aabb) {\r\n        const broadPhase = this.m_contactManager.m_broadPhase;\r\n        function WorldQueryWrapper(proxy) {\r\n            const fixture_proxy = broadPhase.GetUserData(proxy);\r\n            ///b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            ///const index: number = fixture_proxy.childIndex;\r\n            if (callback instanceof b2QueryCallback) {\r\n                return callback.ReportFixture(fixture);\r\n            }\r\n            else /* if (typeof(callback) === 'function') */ {\r\n                return callback(fixture);\r\n            }\r\n        }\r\n        broadPhase.Query(WorldQueryWrapper, aabb);\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryAABB(callback, aabb);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryShape(callback, shape, transform) {\r\n        const broadPhase = this.m_contactManager.m_broadPhase;\r\n        function WorldQueryWrapper(proxy) {\r\n            const fixture_proxy = broadPhase.GetUserData(proxy);\r\n            ///b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            ///const index: number = fixture_proxy.childIndex;\r\n            if (b2TestOverlapShape(shape, 0, fixture.GetShape(), 0, transform, fixture.GetBody().GetTransform())) {\r\n                if (callback instanceof b2QueryCallback) {\r\n                    return callback.ReportFixture(fixture);\r\n                }\r\n                else /* if (typeof(callback) === 'function') */ {\r\n                    return callback(fixture);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        const aabb = b2World.QueryShape_s_aabb;\r\n        shape.ComputeAABB(aabb, transform, 0); // TODO\r\n        broadPhase.Query(WorldQueryWrapper, aabb);\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryAABB(callback, aabb);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryPoint(callback, point) {\r\n        const broadPhase = this.m_contactManager.m_broadPhase;\r\n        function WorldQueryWrapper(proxy) {\r\n            const fixture_proxy = broadPhase.GetUserData(proxy);\r\n            ///b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            ///const index: number = fixture_proxy.childIndex;\r\n            if (fixture.TestPoint(point)) {\r\n                if (callback instanceof b2QueryCallback) {\r\n                    return callback.ReportFixture(fixture);\r\n                }\r\n                else /* if (typeof(callback) === 'function') */ {\r\n                    return callback(fixture);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        const aabb = b2World.QueryPoint_s_aabb;\r\n        aabb.lowerBound.Set(point.x - b2_linearSlop, point.y - b2_linearSlop);\r\n        aabb.upperBound.Set(point.x + b2_linearSlop, point.y + b2_linearSlop);\r\n        broadPhase.Query(WorldQueryWrapper, aabb);\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryAABB(callback, aabb);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    RayCast(callback, point1, point2) {\r\n        const broadPhase = this.m_contactManager.m_broadPhase;\r\n        function WorldRayCastWrapper(input, proxy) {\r\n            const fixture_proxy = broadPhase.GetUserData(proxy);\r\n            ///b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            const index = fixture_proxy.childIndex;\r\n            const output = b2World.RayCast_s_output;\r\n            const hit = fixture.RayCast(output, input, index);\r\n            if (hit) {\r\n                const fraction = output.fraction;\r\n                const point = b2World.RayCast_s_point;\r\n                point.Set((1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y);\r\n                if (callback instanceof b2RayCastCallback) {\r\n                    return callback.ReportFixture(fixture, point, output.normal, fraction);\r\n                }\r\n                else /* if (typeof(callback) === 'function') */ {\r\n                    return callback(fixture, point, output.normal, fraction);\r\n                }\r\n            }\r\n            return input.maxFraction;\r\n        }\r\n        const input = b2World.RayCast_s_input;\r\n        input.maxFraction = 1;\r\n        input.p1.Copy(point1);\r\n        input.p2.Copy(point2);\r\n        broadPhase.RayCast(WorldRayCastWrapper, input);\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2RayCastCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.RayCast(callback, point1, point2);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    RayCastOne(point1, point2) {\r\n        let result = null;\r\n        let min_fraction = 1;\r\n        function WorldRayCastOneWrapper(fixture, point, normal, fraction) {\r\n            if (fraction < min_fraction) {\r\n                min_fraction = fraction;\r\n                result = fixture;\r\n            }\r\n            return min_fraction;\r\n        }\r\n        this.RayCast(WorldRayCastOneWrapper, point1, point2);\r\n        return result;\r\n    }\r\n    RayCastAll(point1, point2, out = []) {\r\n        function WorldRayCastAllWrapper(fixture, point, normal, fraction) {\r\n            out.push(fixture);\r\n            return 1;\r\n        }\r\n        this.RayCast(WorldRayCastAllWrapper, point1, point2);\r\n        return out;\r\n    }\r\n    /// Get the world body list. With the returned body, use b2Body::GetNext to get\r\n    /// the next body in the world list. A NULL body indicates the end of the list.\r\n    /// @return the head of the world body list.\r\n    GetBodyList() {\r\n        return this.m_bodyList;\r\n    }\r\n    /// Get the world joint list. With the returned joint, use b2Joint::GetNext to get\r\n    /// the next joint in the world list. A NULL joint indicates the end of the list.\r\n    /// @return the head of the world joint list.\r\n    GetJointList() {\r\n        return this.m_jointList;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    GetParticleSystemList() {\r\n        return this.m_particleSystemList;\r\n    }\r\n    // #endif\r\n    /// Get the world contact list. With the returned contact, use b2Contact::GetNext to get\r\n    /// the next contact in the world list. A NULL contact indicates the end of the list.\r\n    /// @return the head of the world contact list.\r\n    /// @warning contacts are created and destroyed in the middle of a time step.\r\n    /// Use b2ContactListener to avoid missing contacts.\r\n    GetContactList() {\r\n        return this.m_contactManager.m_contactList;\r\n    }\r\n    /// Enable/disable sleep.\r\n    SetAllowSleeping(flag) {\r\n        if (flag === this.m_allowSleep) {\r\n            return;\r\n        }\r\n        this.m_allowSleep = flag;\r\n        if (!this.m_allowSleep) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                b.SetAwake(true);\r\n            }\r\n        }\r\n    }\r\n    GetAllowSleeping() {\r\n        return this.m_allowSleep;\r\n    }\r\n    /// Enable/disable warm starting. For testing.\r\n    SetWarmStarting(flag) {\r\n        this.m_warmStarting = flag;\r\n    }\r\n    GetWarmStarting() {\r\n        return this.m_warmStarting;\r\n    }\r\n    /// Enable/disable continuous physics. For testing.\r\n    SetContinuousPhysics(flag) {\r\n        this.m_continuousPhysics = flag;\r\n    }\r\n    GetContinuousPhysics() {\r\n        return this.m_continuousPhysics;\r\n    }\r\n    /// Enable/disable single stepped continuous physics. For testing.\r\n    SetSubStepping(flag) {\r\n        this.m_subStepping = flag;\r\n    }\r\n    GetSubStepping() {\r\n        return this.m_subStepping;\r\n    }\r\n    /// Get the number of broad-phase proxies.\r\n    GetProxyCount() {\r\n        return this.m_contactManager.m_broadPhase.GetProxyCount();\r\n    }\r\n    /// Get the number of bodies.\r\n    GetBodyCount() {\r\n        return this.m_bodyCount;\r\n    }\r\n    /// Get the number of joints.\r\n    GetJointCount() {\r\n        return this.m_jointCount;\r\n    }\r\n    /// Get the number of contacts (each may have 0 or more contact points).\r\n    GetContactCount() {\r\n        return this.m_contactManager.m_contactCount;\r\n    }\r\n    /// Get the height of the dynamic tree.\r\n    GetTreeHeight() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeHeight();\r\n    }\r\n    /// Get the balance of the dynamic tree.\r\n    GetTreeBalance() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeBalance();\r\n    }\r\n    /// Get the quality metric of the dynamic tree. The smaller the better.\r\n    /// The minimum is 1.\r\n    GetTreeQuality() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeQuality();\r\n    }\r\n    /// Change the global gravity vector.\r\n    SetGravity(gravity, wake = true) {\r\n        if (!b2Vec2.IsEqualToV(this.m_gravity, gravity)) {\r\n            this.m_gravity.Copy(gravity);\r\n            if (wake) {\r\n                for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                    b.SetAwake(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /// Get the global gravity vector.\r\n    GetGravity() {\r\n        return this.m_gravity;\r\n    }\r\n    /// Is the world locked (in the middle of a time step).\r\n    IsLocked() {\r\n        return this.m_locked;\r\n    }\r\n    /// Set flag to control automatic clearing of forces after each time step.\r\n    SetAutoClearForces(flag) {\r\n        this.m_clearForces = flag;\r\n    }\r\n    /// Get the flag that controls automatic clearing of forces after each time step.\r\n    GetAutoClearForces() {\r\n        return this.m_clearForces;\r\n    }\r\n    /// Shift the world origin. Useful for large worlds.\r\n    /// The body shift formula is: position -= newOrigin\r\n    /// @param newOrigin the new origin with respect to the old origin\r\n    ShiftOrigin(newOrigin) {\r\n        ///b2Assert(!this.IsLocked());\r\n        if (this.IsLocked()) {\r\n            return;\r\n        }\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_xf.p.SelfSub(newOrigin);\r\n            b.m_sweep.c0.SelfSub(newOrigin);\r\n            b.m_sweep.c.SelfSub(newOrigin);\r\n        }\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.ShiftOrigin(newOrigin);\r\n        }\r\n        this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);\r\n    }\r\n    /// Get the contact manager for testing.\r\n    GetContactManager() {\r\n        return this.m_contactManager;\r\n    }\r\n    /// Get the current profile.\r\n    GetProfile() {\r\n        return this.m_profile;\r\n    }\r\n    /// Dump the world into the log file.\r\n    /// @warning this should be called outside of a time step.\r\n    Dump(log) {\r\n        if (this.m_locked) {\r\n            return;\r\n        }\r\n        log(\"const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\\n\", this.m_gravity.x, this.m_gravity.y);\r\n        log(\"this.m_world.SetGravity(g);\\n\");\r\n        log(\"const bodies: b2Body[] = [];\\n\");\r\n        log(\"const joints: b2Joint[] = [];\\n\");\r\n        let i = 0;\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_islandIndex = i;\r\n            b.Dump(log);\r\n            ++i;\r\n        }\r\n        i = 0;\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.m_index = i;\r\n            ++i;\r\n        }\r\n        // First pass on joints, skip gear joints.\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            if (j.m_type === b2JointType.e_gearJoint) {\r\n                continue;\r\n            }\r\n            log(\"{\\n\");\r\n            j.Dump(log);\r\n            log(\"}\\n\");\r\n        }\r\n        // Second pass on joints, only gear joints.\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            if (j.m_type !== b2JointType.e_gearJoint) {\r\n                continue;\r\n            }\r\n            log(\"{\\n\");\r\n            j.Dump(log);\r\n            log(\"}\\n\");\r\n        }\r\n    }\r\n    DrawJoint(joint) {\r\n        const bodyA = joint.GetBodyA();\r\n        const bodyB = joint.GetBodyB();\r\n        const xf1 = bodyA.m_xf;\r\n        const xf2 = bodyB.m_xf;\r\n        const x1 = xf1.p;\r\n        const x2 = xf2.p;\r\n        const p1 = joint.GetAnchorA(b2World.DrawJoint_s_p1);\r\n        const p2 = joint.GetAnchorB(b2World.DrawJoint_s_p2);\r\n        const color = b2World.DrawJoint_s_color.SetRGB(0.5, 0.8, 0.8);\r\n        switch (joint.m_type) {\r\n            case b2JointType.e_distanceJoint:\r\n                this.m_debugDraw.DrawSegment(p1, p2, color);\r\n                break;\r\n            case b2JointType.e_pulleyJoint:\r\n                {\r\n                    const pulley = joint;\r\n                    const s1 = pulley.GetGroundAnchorA();\r\n                    const s2 = pulley.GetGroundAnchorB();\r\n                    this.m_debugDraw.DrawSegment(s1, p1, color);\r\n                    this.m_debugDraw.DrawSegment(s2, p2, color);\r\n                    this.m_debugDraw.DrawSegment(s1, s2, color);\r\n                }\r\n                break;\r\n            case b2JointType.e_mouseJoint:\r\n                // don't draw this\r\n                this.m_debugDraw.DrawSegment(p1, p2, color);\r\n                break;\r\n            default:\r\n                this.m_debugDraw.DrawSegment(x1, p1, color);\r\n                this.m_debugDraw.DrawSegment(p1, p2, color);\r\n                this.m_debugDraw.DrawSegment(x2, p2, color);\r\n        }\r\n    }\r\n    DrawShape(fixture, color) {\r\n        const shape = fixture.GetShape();\r\n        switch (shape.m_type) {\r\n            case b2ShapeType.e_circleShape:\r\n                {\r\n                    const circle = shape;\r\n                    const center = circle.m_p;\r\n                    const radius = circle.m_radius;\r\n                    const axis = b2Vec2.UNITX;\r\n                    this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);\r\n                }\r\n                break;\r\n            case b2ShapeType.e_edgeShape:\r\n                {\r\n                    const edge = shape;\r\n                    const v1 = edge.m_vertex1;\r\n                    const v2 = edge.m_vertex2;\r\n                    this.m_debugDraw.DrawSegment(v1, v2, color);\r\n                }\r\n                break;\r\n            case b2ShapeType.e_chainShape:\r\n                {\r\n                    const chain = shape;\r\n                    const count = chain.m_count;\r\n                    const vertices = chain.m_vertices;\r\n                    let v1 = vertices[0];\r\n                    this.m_debugDraw.DrawCircle(v1, 0.05, color);\r\n                    for (let i = 1; i < count; ++i) {\r\n                        const v2 = vertices[i];\r\n                        this.m_debugDraw.DrawSegment(v1, v2, color);\r\n                        this.m_debugDraw.DrawCircle(v2, 0.05, color);\r\n                        v1 = v2;\r\n                    }\r\n                }\r\n                break;\r\n            case b2ShapeType.e_polygonShape:\r\n                {\r\n                    const poly = shape;\r\n                    const vertexCount = poly.m_count;\r\n                    const vertices = poly.m_vertices;\r\n                    this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    Solve(step) {\r\n        // #if B2_ENABLE_PARTICLE\r\n        // update previous transforms\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_xf0.Copy(b.m_xf);\r\n        }\r\n        // #endif\r\n        // #if B2_ENABLE_CONTROLLER\r\n        // @see b2Controller list\r\n        for (let controller = this.m_controllerList; controller; controller = controller.m_next) {\r\n            controller.Step(step);\r\n        }\r\n        // #endif\r\n        this.m_profile.solveInit = 0;\r\n        this.m_profile.solveVelocity = 0;\r\n        this.m_profile.solvePosition = 0;\r\n        // Size the island for the worst case.\r\n        const island = this.m_island;\r\n        island.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, null, // this.m_stackAllocator,\r\n        this.m_contactManager.m_contactListener);\r\n        // Clear all the island flags.\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_islandFlag = false;\r\n        }\r\n        for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n            c.m_islandFlag = false;\r\n        }\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.m_islandFlag = false;\r\n        }\r\n        // Build and simulate all awake islands.\r\n        ///const stackSize: number = this.m_bodyCount;\r\n        const stack = this.s_stack;\r\n        for (let seed = this.m_bodyList; seed; seed = seed.m_next) {\r\n            if (seed.m_islandFlag) {\r\n                continue;\r\n            }\r\n            if (!seed.IsAwake() || !seed.IsActive()) {\r\n                continue;\r\n            }\r\n            // The seed can be dynamic or kinematic.\r\n            if (seed.GetType() === b2BodyType.b2_staticBody) {\r\n                continue;\r\n            }\r\n            // Reset island and stack.\r\n            island.Clear();\r\n            let stackCount = 0;\r\n            stack[stackCount++] = seed;\r\n            seed.m_islandFlag = true;\r\n            // Perform a depth first search (DFS) on the constraint graph.\r\n            while (stackCount > 0) {\r\n                // Grab the next body off the stack and add it to the island.\r\n                const b = stack[--stackCount];\r\n                ///b2Assert(b.IsActive());\r\n                island.AddBody(b);\r\n                // Make sure the body is awake.\r\n                b.SetAwake(true);\r\n                // To keep islands as small as possible, we don't\r\n                // propagate islands across static bodies.\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    continue;\r\n                }\r\n                // Search all contacts connected to this body.\r\n                for (let ce = b.m_contactList; ce; ce = ce.next) {\r\n                    const contact = ce.contact;\r\n                    // Has this contact already been added to an island?\r\n                    if (contact.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    // Is this contact solid and touching?\r\n                    if (!contact.IsEnabled() || !contact.IsTouching()) {\r\n                        continue;\r\n                    }\r\n                    // Skip sensors.\r\n                    const sensorA = contact.m_fixtureA.m_isSensor;\r\n                    const sensorB = contact.m_fixtureB.m_isSensor;\r\n                    if (sensorA || sensorB) {\r\n                        continue;\r\n                    }\r\n                    island.AddContact(contact);\r\n                    contact.m_islandFlag = true;\r\n                    const other = ce.other;\r\n                    // Was the other body already added to this island?\r\n                    if (other.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    ///b2Assert(stackCount < stackSize);\r\n                    stack[stackCount++] = other;\r\n                    other.m_islandFlag = true;\r\n                }\r\n                // Search all joints connect to this body.\r\n                for (let je = b.m_jointList; je; je = je.next) {\r\n                    if (je.joint.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    const other = je.other;\r\n                    // Don't simulate joints connected to inactive bodies.\r\n                    if (!other.IsActive()) {\r\n                        continue;\r\n                    }\r\n                    island.AddJoint(je.joint);\r\n                    je.joint.m_islandFlag = true;\r\n                    if (other.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    ///b2Assert(stackCount < stackSize);\r\n                    stack[stackCount++] = other;\r\n                    other.m_islandFlag = true;\r\n                }\r\n            }\r\n            const profile = new b2Profile();\r\n            island.Solve(profile, step, this.m_gravity, this.m_allowSleep);\r\n            this.m_profile.solveInit += profile.solveInit;\r\n            this.m_profile.solveVelocity += profile.solveVelocity;\r\n            this.m_profile.solvePosition += profile.solvePosition;\r\n            // Post solve cleanup.\r\n            for (let i = 0; i < island.m_bodyCount; ++i) {\r\n                // Allow static bodies to participate in other islands.\r\n                const b = island.m_bodies[i];\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    b.m_islandFlag = false;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < stack.length; ++i) {\r\n            if (!stack[i])\r\n                break;\r\n            stack[i] = null;\r\n        }\r\n        const timer = new b2Timer();\r\n        // Synchronize fixtures, check for out of range bodies.\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            // If a body was not in an island then it did not move.\r\n            if (!b.m_islandFlag) {\r\n                continue;\r\n            }\r\n            if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                continue;\r\n            }\r\n            // Update fixtures (for broad-phase).\r\n            b.SynchronizeFixtures();\r\n        }\r\n        // Look for new contacts.\r\n        this.m_contactManager.FindNewContacts();\r\n        this.m_profile.broadphase = timer.GetMilliseconds();\r\n    }\r\n    SolveTOI(step) {\r\n        // b2Island island(2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, &m_stackAllocator, m_contactManager.m_contactListener);\r\n        const island = this.m_island;\r\n        island.Initialize(2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, null, this.m_contactManager.m_contactListener);\r\n        if (this.m_stepComplete) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                b.m_islandFlag = false;\r\n                b.m_sweep.alpha0 = 0;\r\n            }\r\n            for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n                // Invalidate TOI\r\n                c.m_toiFlag = false;\r\n                c.m_islandFlag = false;\r\n                c.m_toiCount = 0;\r\n                c.m_toi = 1;\r\n            }\r\n        }\r\n        // Find TOI events and solve them.\r\n        for (;;) {\r\n            // Find the first TOI.\r\n            let minContact = null;\r\n            let minAlpha = 1;\r\n            for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n                // Is this contact disabled?\r\n                if (!c.IsEnabled()) {\r\n                    continue;\r\n                }\r\n                // Prevent excessive sub-stepping.\r\n                if (c.m_toiCount > b2_maxSubSteps) {\r\n                    continue;\r\n                }\r\n                let alpha = 1;\r\n                if (c.m_toiFlag) {\r\n                    // This contact has a valid cached TOI.\r\n                    alpha = c.m_toi;\r\n                }\r\n                else {\r\n                    const fA = c.GetFixtureA();\r\n                    const fB = c.GetFixtureB();\r\n                    // Is there a sensor?\r\n                    if (fA.IsSensor() || fB.IsSensor()) {\r\n                        continue;\r\n                    }\r\n                    const bA = fA.GetBody();\r\n                    const bB = fB.GetBody();\r\n                    const typeA = bA.m_type;\r\n                    const typeB = bB.m_type;\r\n                    ///b2Assert(typeA !== b2BodyType.b2_staticBody || typeB !== b2BodyType.b2_staticBody);\r\n                    const activeA = bA.IsAwake() && typeA !== b2BodyType.b2_staticBody;\r\n                    const activeB = bB.IsAwake() && typeB !== b2BodyType.b2_staticBody;\r\n                    // Is at least one body active (awake and dynamic or kinematic)?\r\n                    if (!activeA && !activeB) {\r\n                        continue;\r\n                    }\r\n                    const collideA = bA.IsBullet() || typeA !== b2BodyType.b2_dynamicBody;\r\n                    const collideB = bB.IsBullet() || typeB !== b2BodyType.b2_dynamicBody;\r\n                    // Are these two non-bullet dynamic bodies?\r\n                    if (!collideA && !collideB) {\r\n                        continue;\r\n                    }\r\n                    // Compute the TOI for this contact.\r\n                    // Put the sweeps onto the same time interval.\r\n                    let alpha0 = bA.m_sweep.alpha0;\r\n                    if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\r\n                        alpha0 = bB.m_sweep.alpha0;\r\n                        bA.m_sweep.Advance(alpha0);\r\n                    }\r\n                    else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\r\n                        alpha0 = bA.m_sweep.alpha0;\r\n                        bB.m_sweep.Advance(alpha0);\r\n                    }\r\n                    ///b2Assert(alpha0 < 1);\r\n                    const indexA = c.GetChildIndexA();\r\n                    const indexB = c.GetChildIndexB();\r\n                    // Compute the time of impact in interval [0, minTOI]\r\n                    const input = b2World.SolveTOI_s_toi_input;\r\n                    input.proxyA.SetShape(fA.GetShape(), indexA);\r\n                    input.proxyB.SetShape(fB.GetShape(), indexB);\r\n                    input.sweepA.Copy(bA.m_sweep);\r\n                    input.sweepB.Copy(bB.m_sweep);\r\n                    input.tMax = 1;\r\n                    const output = b2World.SolveTOI_s_toi_output;\r\n                    b2TimeOfImpact(output, input);\r\n                    // Beta is the fraction of the remaining portion of the .\r\n                    const beta = output.t;\r\n                    if (output.state === b2TOIOutputState.e_touching) {\r\n                        alpha = b2Min(alpha0 + (1 - alpha0) * beta, 1);\r\n                    }\r\n                    else {\r\n                        alpha = 1;\r\n                    }\r\n                    c.m_toi = alpha;\r\n                    c.m_toiFlag = true;\r\n                }\r\n                if (alpha < minAlpha) {\r\n                    // This is the minimum TOI found so far.\r\n                    minContact = c;\r\n                    minAlpha = alpha;\r\n                }\r\n            }\r\n            if (minContact === null || 1 - 10 * b2_epsilon < minAlpha) {\r\n                // No more TOI events. Done!\r\n                this.m_stepComplete = true;\r\n                break;\r\n            }\r\n            // Advance the bodies to the TOI.\r\n            const fA = minContact.GetFixtureA();\r\n            const fB = minContact.GetFixtureB();\r\n            const bA = fA.GetBody();\r\n            const bB = fB.GetBody();\r\n            const backup1 = b2World.SolveTOI_s_backup1.Copy(bA.m_sweep);\r\n            const backup2 = b2World.SolveTOI_s_backup2.Copy(bB.m_sweep);\r\n            bA.Advance(minAlpha);\r\n            bB.Advance(minAlpha);\r\n            // The TOI contact likely has some new contact points.\r\n            minContact.Update(this.m_contactManager.m_contactListener);\r\n            minContact.m_toiFlag = false;\r\n            ++minContact.m_toiCount;\r\n            // Is the contact solid?\r\n            if (!minContact.IsEnabled() || !minContact.IsTouching()) {\r\n                // Restore the sweeps.\r\n                minContact.SetEnabled(false);\r\n                bA.m_sweep.Copy(backup1);\r\n                bB.m_sweep.Copy(backup2);\r\n                bA.SynchronizeTransform();\r\n                bB.SynchronizeTransform();\r\n                continue;\r\n            }\r\n            bA.SetAwake(true);\r\n            bB.SetAwake(true);\r\n            // Build the island\r\n            island.Clear();\r\n            island.AddBody(bA);\r\n            island.AddBody(bB);\r\n            island.AddContact(minContact);\r\n            bA.m_islandFlag = true;\r\n            bB.m_islandFlag = true;\r\n            minContact.m_islandFlag = true;\r\n            // Get contacts on bodyA and bodyB.\r\n            // const bodies: b2Body[] = [bA, bB];\r\n            for (let i = 0; i < 2; ++i) {\r\n                const body = (i === 0) ? (bA) : (bB); // bodies[i];\r\n                if (body.m_type === b2BodyType.b2_dynamicBody) {\r\n                    for (let ce = body.m_contactList; ce; ce = ce.next) {\r\n                        if (island.m_bodyCount === island.m_bodyCapacity) {\r\n                            break;\r\n                        }\r\n                        if (island.m_contactCount === island.m_contactCapacity) {\r\n                            break;\r\n                        }\r\n                        const contact = ce.contact;\r\n                        // Has this contact already been added to the island?\r\n                        if (contact.m_islandFlag) {\r\n                            continue;\r\n                        }\r\n                        // Only add static, kinematic, or bullet bodies.\r\n                        const other = ce.other;\r\n                        if (other.m_type === b2BodyType.b2_dynamicBody &&\r\n                            !body.IsBullet() && !other.IsBullet()) {\r\n                            continue;\r\n                        }\r\n                        // Skip sensors.\r\n                        const sensorA = contact.m_fixtureA.m_isSensor;\r\n                        const sensorB = contact.m_fixtureB.m_isSensor;\r\n                        if (sensorA || sensorB) {\r\n                            continue;\r\n                        }\r\n                        // Tentatively advance the body to the TOI.\r\n                        const backup = b2World.SolveTOI_s_backup.Copy(other.m_sweep);\r\n                        if (!other.m_islandFlag) {\r\n                            other.Advance(minAlpha);\r\n                        }\r\n                        // Update the contact points\r\n                        contact.Update(this.m_contactManager.m_contactListener);\r\n                        // Was the contact disabled by the user?\r\n                        if (!contact.IsEnabled()) {\r\n                            other.m_sweep.Copy(backup);\r\n                            other.SynchronizeTransform();\r\n                            continue;\r\n                        }\r\n                        // Are there contact points?\r\n                        if (!contact.IsTouching()) {\r\n                            other.m_sweep.Copy(backup);\r\n                            other.SynchronizeTransform();\r\n                            continue;\r\n                        }\r\n                        // Add the contact to the island\r\n                        contact.m_islandFlag = true;\r\n                        island.AddContact(contact);\r\n                        // Has the other body already been added to the island?\r\n                        if (other.m_islandFlag) {\r\n                            continue;\r\n                        }\r\n                        // Add the other body to the island.\r\n                        other.m_islandFlag = true;\r\n                        if (other.m_type !== b2BodyType.b2_staticBody) {\r\n                            other.SetAwake(true);\r\n                        }\r\n                        island.AddBody(other);\r\n                    }\r\n                }\r\n            }\r\n            const subStep = b2World.SolveTOI_s_subStep;\r\n            subStep.dt = (1 - minAlpha) * step.dt;\r\n            subStep.inv_dt = 1 / subStep.dt;\r\n            subStep.dtRatio = 1;\r\n            subStep.positionIterations = 20;\r\n            subStep.velocityIterations = step.velocityIterations;\r\n            // #if B2_ENABLE_PARTICLE\r\n            subStep.particleIterations = step.particleIterations;\r\n            // #endif\r\n            subStep.warmStarting = false;\r\n            island.SolveTOI(subStep, bA.m_islandIndex, bB.m_islandIndex);\r\n            // Reset island flags and synchronize broad-phase proxies.\r\n            for (let i = 0; i < island.m_bodyCount; ++i) {\r\n                const body = island.m_bodies[i];\r\n                body.m_islandFlag = false;\r\n                if (body.m_type !== b2BodyType.b2_dynamicBody) {\r\n                    continue;\r\n                }\r\n                body.SynchronizeFixtures();\r\n                // Invalidate all contact TOIs on this displaced body.\r\n                for (let ce = body.m_contactList; ce; ce = ce.next) {\r\n                    ce.contact.m_toiFlag = false;\r\n                    ce.contact.m_islandFlag = false;\r\n                }\r\n            }\r\n            // Commit fixture proxy movements to the broad-phase so that new contacts are created.\r\n            // Also, some contacts can be destroyed.\r\n            this.m_contactManager.FindNewContacts();\r\n            if (this.m_subStepping) {\r\n                this.m_stepComplete = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // #if B2_ENABLE_CONTROLLER\r\n    AddController(controller) {\r\n        ///b2Assert(controller.m_world === null, \"Controller can only be a member of one world\");\r\n        controller.m_world = this;\r\n        controller.m_next = this.m_controllerList;\r\n        controller.m_prev = null;\r\n        if (this.m_controllerList)\r\n            this.m_controllerList.m_prev = controller;\r\n        this.m_controllerList = controller;\r\n        ++this.m_controllerCount;\r\n        return controller;\r\n    }\r\n    RemoveController(controller) {\r\n        ///b2Assert(controller.m_world === this, \"Controller is not a member of this world\");\r\n        if (controller.m_prev)\r\n            controller.m_prev.m_next = controller.m_next;\r\n        if (controller.m_next)\r\n            controller.m_next.m_prev = controller.m_prev;\r\n        if (this.m_controllerList === controller)\r\n            this.m_controllerList = controller.m_next;\r\n        --this.m_controllerCount;\r\n        controller.m_prev = null;\r\n        controller.m_next = null;\r\n        controller.m_world = null;\r\n        return controller;\r\n    }\r\n}\r\n// #endif\r\n/// Take a time step. This performs collision detection, integration,\r\n/// and constraint solution.\r\n/// @param timeStep the amount of time to simulate, this should not vary.\r\n/// @param velocityIterations for the velocity constraint solver.\r\n/// @param positionIterations for the position constraint solver.\r\nb2World.Step_s_step = new b2TimeStep();\r\nb2World.Step_s_stepTimer = new b2Timer();\r\nb2World.Step_s_timer = new b2Timer();\r\n// #endif\r\n/// Call this to draw shapes and other debug draw data.\r\nb2World.DrawDebugData_s_color = new b2Color(0, 0, 0);\r\nb2World.DrawDebugData_s_vs = b2Vec2.MakeArray(4);\r\nb2World.DrawDebugData_s_xf = new b2Transform();\r\nb2World.QueryShape_s_aabb = new b2AABB();\r\nb2World.QueryPoint_s_aabb = new b2AABB();\r\n/// Ray-cast the world for all fixtures in the path of the ray. Your callback\r\n/// controls whether you get the closest point, any point, or n-points.\r\n/// The ray-cast ignores shapes that contain the starting point.\r\n/// @param callback a user implemented callback class.\r\n/// @param point1 the ray starting point\r\n/// @param point2 the ray ending point\r\nb2World.RayCast_s_input = new b2RayCastInput();\r\nb2World.RayCast_s_output = new b2RayCastOutput();\r\nb2World.RayCast_s_point = new b2Vec2();\r\nb2World.DrawJoint_s_p1 = new b2Vec2();\r\nb2World.DrawJoint_s_p2 = new b2Vec2();\r\nb2World.DrawJoint_s_color = new b2Color(0.5, 0.8, 0.8);\r\nb2World.SolveTOI_s_subStep = new b2TimeStep();\r\nb2World.SolveTOI_s_backup = new b2Sweep();\r\nb2World.SolveTOI_s_backup1 = new b2Sweep();\r\nb2World.SolveTOI_s_backup2 = new b2Sweep();\r\nb2World.SolveTOI_s_toi_input = new b2TOIInput();\r\nb2World.SolveTOI_s_toi_output = new b2TOIOutput();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2Atan2, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\n///\r\nexport class b2RopeDef {\r\n    constructor() {\r\n        ///\r\n        this.vertices = [];\r\n        ///\r\n        this.count = 0;\r\n        ///\r\n        this.masses = [];\r\n        ///\r\n        this.gravity = new b2Vec2(0, 0);\r\n        ///\r\n        this.damping = 0.1;\r\n        /// Stretching stiffness\r\n        this.k2 = 0.9;\r\n        /// Bending stiffness. Values above 0.5 can make the simulation blow up.\r\n        this.k3 = 0.1;\r\n    }\r\n}\r\n///\r\nexport class b2Rope {\r\n    constructor() {\r\n        this.m_count = 0;\r\n        this.m_ps = null;\r\n        this.m_p0s = null;\r\n        this.m_vs = null;\r\n        this.m_ims = null;\r\n        this.m_Ls = null;\r\n        this.m_as = null;\r\n        this.m_gravity = new b2Vec2();\r\n        this.m_damping = 0;\r\n        this.m_k2 = 1;\r\n        this.m_k3 = 0.1;\r\n    }\r\n    GetVertexCount() {\r\n        return this.m_count;\r\n    }\r\n    GetVertices() {\r\n        return this.m_ps;\r\n    }\r\n    ///\r\n    Initialize(def) {\r\n        ///b2Assert(def.count >= 3);\r\n        this.m_count = def.count;\r\n        // this.m_ps = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_ps = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_p0s = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_p0s = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_vs = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_vs = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_ims = (float32*)b2Alloc(this.m_count * sizeof(float32));\r\n        this.m_ims = b2MakeNumberArray(this.m_count);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_ps[i].Copy(def.vertices[i]);\r\n            this.m_p0s[i].Copy(def.vertices[i]);\r\n            this.m_vs[i].SetZero();\r\n            const m = def.masses[i];\r\n            if (m > 0) {\r\n                this.m_ims[i] = 1 / m;\r\n            }\r\n            else {\r\n                this.m_ims[i] = 0;\r\n            }\r\n        }\r\n        const count2 = this.m_count - 1;\r\n        const count3 = this.m_count - 2;\r\n        // this.m_Ls = (float32*)be2Alloc(count2 * sizeof(float32));\r\n        this.m_Ls = b2MakeNumberArray(count2);\r\n        // this.m_as = (float32*)b2Alloc(count3 * sizeof(float32));\r\n        this.m_as = b2MakeNumberArray(count3);\r\n        for (let i = 0; i < count2; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            this.m_Ls[i] = b2Vec2.DistanceVV(p1, p2);\r\n        }\r\n        for (let i = 0; i < count3; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const p3 = this.m_ps[i + 2];\r\n            const d1 = b2Vec2.SubVV(p2, p1, b2Vec2.s_t0);\r\n            const d2 = b2Vec2.SubVV(p3, p2, b2Vec2.s_t1);\r\n            const a = b2Vec2.CrossVV(d1, d2);\r\n            const b = b2Vec2.DotVV(d1, d2);\r\n            this.m_as[i] = b2Atan2(a, b);\r\n        }\r\n        this.m_gravity.Copy(def.gravity);\r\n        this.m_damping = def.damping;\r\n        this.m_k2 = def.k2;\r\n        this.m_k3 = def.k3;\r\n    }\r\n    ///\r\n    Step(h, iterations) {\r\n        if (h === 0) {\r\n            return;\r\n        }\r\n        const d = Math.exp(-h * this.m_damping);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_p0s[i].Copy(this.m_ps[i]);\r\n            if (this.m_ims[i] > 0) {\r\n                this.m_vs[i].SelfMulAdd(h, this.m_gravity);\r\n            }\r\n            this.m_vs[i].SelfMul(d);\r\n            this.m_ps[i].SelfMulAdd(h, this.m_vs[i]);\r\n        }\r\n        for (let i = 0; i < iterations; ++i) {\r\n            this.SolveC2();\r\n            this.SolveC3();\r\n            this.SolveC2();\r\n        }\r\n        const inv_h = 1 / h;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            b2Vec2.MulSV(inv_h, b2Vec2.SubVV(this.m_ps[i], this.m_p0s[i], b2Vec2.s_t0), this.m_vs[i]);\r\n        }\r\n    }\r\n    SolveC2() {\r\n        const count2 = this.m_count - 1;\r\n        for (let i = 0; i < count2; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const d = b2Vec2.SubVV(p2, p1, b2Rope.s_d);\r\n            const L = d.Normalize();\r\n            const im1 = this.m_ims[i];\r\n            const im2 = this.m_ims[i + 1];\r\n            if (im1 + im2 === 0) {\r\n                continue;\r\n            }\r\n            const s1 = im1 / (im1 + im2);\r\n            const s2 = im2 / (im1 + im2);\r\n            p1.SelfMulSub(this.m_k2 * s1 * (this.m_Ls[i] - L), d);\r\n            p2.SelfMulAdd(this.m_k2 * s2 * (this.m_Ls[i] - L), d);\r\n            // this.m_ps[i] = p1;\r\n            // this.m_ps[i + 1] = p2;\r\n        }\r\n    }\r\n    SetAngle(angle) {\r\n        const count3 = this.m_count - 2;\r\n        for (let i = 0; i < count3; ++i) {\r\n            this.m_as[i] = angle;\r\n        }\r\n    }\r\n    SolveC3() {\r\n        const count3 = this.m_count - 2;\r\n        for (let i = 0; i < count3; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const p3 = this.m_ps[i + 2];\r\n            const m1 = this.m_ims[i];\r\n            const m2 = this.m_ims[i + 1];\r\n            const m3 = this.m_ims[i + 2];\r\n            const d1 = b2Vec2.SubVV(p2, p1, b2Rope.s_d1);\r\n            const d2 = b2Vec2.SubVV(p3, p2, b2Rope.s_d2);\r\n            const L1sqr = d1.LengthSquared();\r\n            const L2sqr = d2.LengthSquared();\r\n            if (L1sqr * L2sqr === 0) {\r\n                continue;\r\n            }\r\n            const a = b2Vec2.CrossVV(d1, d2);\r\n            const b = b2Vec2.DotVV(d1, d2);\r\n            let angle = b2Atan2(a, b);\r\n            const Jd1 = b2Vec2.MulSV((-1 / L1sqr), d1.SelfSkew(), b2Rope.s_Jd1);\r\n            const Jd2 = b2Vec2.MulSV((1 / L2sqr), d2.SelfSkew(), b2Rope.s_Jd2);\r\n            const J1 = b2Vec2.NegV(Jd1, b2Rope.s_J1);\r\n            const J2 = b2Vec2.SubVV(Jd1, Jd2, b2Rope.s_J2);\r\n            const J3 = Jd2;\r\n            let mass = m1 * b2Vec2.DotVV(J1, J1) + m2 * b2Vec2.DotVV(J2, J2) + m3 * b2Vec2.DotVV(J3, J3);\r\n            if (mass === 0) {\r\n                continue;\r\n            }\r\n            mass = 1 / mass;\r\n            let C = angle - this.m_as[i];\r\n            while (C > b2_pi) {\r\n                angle -= 2 * b2_pi;\r\n                C = angle - this.m_as[i];\r\n            }\r\n            while (C < -b2_pi) {\r\n                angle += 2 * b2_pi;\r\n                C = angle - this.m_as[i];\r\n            }\r\n            const impulse = -this.m_k3 * mass * C;\r\n            p1.SelfMulAdd((m1 * impulse), J1);\r\n            p2.SelfMulAdd((m2 * impulse), J2);\r\n            p3.SelfMulAdd((m3 * impulse), J3);\r\n            // this.m_ps[i] = p1;\r\n            // this.m_ps[i + 1] = p2;\r\n            // this.m_ps[i + 2] = p3;\r\n        }\r\n    }\r\n    Draw(draw) {\r\n        const c = new b2Color(0.4, 0.5, 0.7);\r\n        for (let i = 0; i < this.m_count - 1; ++i) {\r\n            draw.DrawSegment(this.m_ps[i], this.m_ps[i + 1], c);\r\n        }\r\n    }\r\n}\r\n///\r\nb2Rope.s_d = new b2Vec2();\r\nb2Rope.s_d1 = new b2Vec2();\r\nb2Rope.s_d2 = new b2Vec2();\r\nb2Rope.s_Jd1 = new b2Vec2();\r\nb2Rope.s_Jd2 = new b2Vec2();\r\nb2Rope.s_J1 = new b2Vec2();\r\nb2Rope.s_J2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/**\r\n\\mainpage Box2D API Documentation\r\n\r\n\\section intro_sec Getting Started\r\n\r\nFor documentation please see http://box2d.org/documentation.html\r\n\r\nFor discussion please visit http://box2d.org/forum\r\n*/\r\n// These include files constitute the main Box2D API\r\nexport * from \"./Common/b2Settings\";\r\nexport * from \"./Common/b2Math\";\r\nexport * from \"./Common/b2Draw\";\r\nexport * from \"./Common/b2Timer\";\r\nexport * from \"./Common/b2GrowableStack\";\r\nexport * from \"./Common/b2BlockAllocator\";\r\nexport * from \"./Common/b2StackAllocator\";\r\nexport * from \"./Collision/b2Collision\";\r\nexport * from \"./Collision/b2Distance\";\r\nexport * from \"./Collision/b2BroadPhase\";\r\nexport * from \"./Collision/b2DynamicTree\";\r\nexport * from \"./Collision/b2TimeOfImpact\";\r\nexport * from \"./Collision/b2CollideCircle\";\r\nexport * from \"./Collision/b2CollidePolygon\";\r\nexport * from \"./Collision/b2CollideEdge\";\r\nexport * from \"./Collision/Shapes/b2Shape\";\r\nexport * from \"./Collision/Shapes/b2CircleShape\";\r\nexport * from \"./Collision/Shapes/b2PolygonShape\";\r\nexport * from \"./Collision/Shapes/b2EdgeShape\";\r\nexport * from \"./Collision/Shapes/b2ChainShape\";\r\nexport * from \"./Dynamics/b2Fixture\";\r\nexport * from \"./Dynamics/b2Body\";\r\nexport * from \"./Dynamics/b2World\";\r\nexport * from \"./Dynamics/b2WorldCallbacks\";\r\nexport * from \"./Dynamics/b2Island\";\r\nexport * from \"./Dynamics/b2TimeStep\";\r\nexport * from \"./Dynamics/b2ContactManager\";\r\nexport * from \"./Dynamics/Contacts/b2Contact\";\r\nexport * from \"./Dynamics/Contacts/b2ContactFactory\";\r\nexport * from \"./Dynamics/Contacts/b2ContactSolver\";\r\nexport * from \"./Dynamics/Contacts/b2CircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2PolygonContact\";\r\nexport * from \"./Dynamics/Contacts/b2PolygonAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2EdgeAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2EdgeAndPolygonContact\";\r\nexport * from \"./Dynamics/Contacts/b2ChainAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2ChainAndPolygonContact\";\r\nexport * from \"./Dynamics/Joints/b2Joint\";\r\nexport * from \"./Dynamics/Joints/b2JointFactory\";\r\nexport * from \"./Dynamics/Joints/b2AreaJoint\";\r\nexport * from \"./Dynamics/Joints/b2DistanceJoint\";\r\nexport * from \"./Dynamics/Joints/b2FrictionJoint\";\r\nexport * from \"./Dynamics/Joints/b2GearJoint\";\r\nexport * from \"./Dynamics/Joints/b2MotorJoint\";\r\nexport * from \"./Dynamics/Joints/b2MouseJoint\";\r\nexport * from \"./Dynamics/Joints/b2PrismaticJoint\";\r\nexport * from \"./Dynamics/Joints/b2PulleyJoint\";\r\nexport * from \"./Dynamics/Joints/b2RevoluteJoint\";\r\nexport * from \"./Dynamics/Joints/b2RopeJoint\";\r\nexport * from \"./Dynamics/Joints/b2WeldJoint\";\r\nexport * from \"./Dynamics/Joints/b2WheelJoint\";\r\n// #if B2_ENABLE_PARTICLE\r\nexport * from \"./Particle/b2Particle\";\r\nexport * from \"./Particle/b2ParticleGroup\";\r\nexport * from \"./Particle/b2ParticleSystem\";\r\n// #endif\r\nexport * from \"./Rope/b2Rope\";\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm94MkQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9Cb3gyRC9Cb3gyRC9Cb3gyRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGOzs7Ozs7OztFQVFFO0FBRUYsb0RBQW9EO0FBRXBELGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyxpQkFBaUIsQ0FBQztBQUNoQyxjQUFjLGlCQUFpQixDQUFDO0FBQ2hDLGNBQWMsa0JBQWtCLENBQUM7QUFDakMsY0FBYywwQkFBMEIsQ0FBQztBQUN6QyxjQUFjLDJCQUEyQixDQUFDO0FBQzFDLGNBQWMsMkJBQTJCLENBQUM7QUFFMUMsY0FBYyx5QkFBeUIsQ0FBQztBQUN4QyxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsMEJBQTBCLENBQUM7QUFDekMsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLDRCQUE0QixDQUFDO0FBQzNDLGNBQWMsNkJBQTZCLENBQUM7QUFDNUMsY0FBYyw4QkFBOEIsQ0FBQztBQUM3QyxjQUFjLDJCQUEyQixDQUFDO0FBRTFDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYyxrQ0FBa0MsQ0FBQztBQUNqRCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMsZ0NBQWdDLENBQUM7QUFDL0MsY0FBYyxpQ0FBaUMsQ0FBQztBQUVoRCxjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMsbUJBQW1CLENBQUM7QUFDbEMsY0FBYyxvQkFBb0IsQ0FBQztBQUNuQyxjQUFjLDZCQUE2QixDQUFDO0FBQzVDLGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLDZCQUE2QixDQUFDO0FBRTVDLGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxzQ0FBc0MsQ0FBQztBQUNyRCxjQUFjLHFDQUFxQyxDQUFDO0FBQ3BELGNBQWMscUNBQXFDLENBQUM7QUFDcEQsY0FBYyxzQ0FBc0MsQ0FBQztBQUNyRCxjQUFjLCtDQUErQyxDQUFDO0FBQzlELGNBQWMsNENBQTRDLENBQUM7QUFDM0QsY0FBYyw2Q0FBNkMsQ0FBQztBQUM1RCxjQUFjLDZDQUE2QyxDQUFDO0FBQzVELGNBQWMsOENBQThDLENBQUM7QUFFN0QsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLGtDQUFrQyxDQUFDO0FBQ2pELGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxtQ0FBbUMsQ0FBQztBQUNsRCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxnQ0FBZ0MsQ0FBQztBQUMvQyxjQUFjLGdDQUFnQyxDQUFDO0FBQy9DLGNBQWMsb0NBQW9DLENBQUM7QUFDbkQsY0FBYyxpQ0FBaUMsQ0FBQztBQUNoRCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYywrQkFBK0IsQ0FBQztBQUM5QyxjQUFjLGdDQUFnQyxDQUFDO0FBRS9DLHlCQUF5QjtBQUN6QixjQUFjLHVCQUF1QixDQUFDO0FBQ3RDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxTQUFTO0FBRVQsY0FBYyxlQUFlLENBQUMifQ==","﻿\r\nimport {\r\n\tb2Vec2, b2Transform, b2Rot,\r\n\tb2Body, b2Fixture,\r\n\tb2Contact,\r\n} from \"./Physics.js\";\r\n\r\nimport { IRenderer } from \"../IRenderer.js\";\r\nimport { Rectangle } from \"../math.js\";\r\n\r\n\r\nexport class FootholdChain {\r\n\t/**\r\n\t * @param {number} id\r\n\t */\r\n\tconstructor(id) {\r\n\t\tthis.id = id;\r\n\r\n\t\t/** @type {FootholdSingle[]} */\r\n\t\tthis.footholds = [];\r\n\r\n\t\tthis.bound = new Rectangle();\r\n\r\n\t\tthis.loop = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {FootholdSingle} head - foothold chain head\r\n\t * @param {FootholdSingle[]} map_footholds - map footholds\r\n\t * @param {function} type - foothold constructor\r\n\t */\r\n\tinit(head, map_footholds, type) {\r\n\t\tlet left, top, right, bottom;\r\n\r\n\t\tleft = head.x1;\r\n\t\ttop = head.y1;\r\n\t\tright = head.x2;\r\n\t\tbottom = head.y2;\r\n\r\n\t\tfor (let fh = head, childIndex = 0; fh != null; fh = map_footholds[fh.next], ++childIndex) {\r\n\t\t\tleft = Math.min(left, fh.x1, fh.x2);\r\n\t\t\ttop = Math.min(top, fh.y1, fh.y2);\r\n\t\t\tright = Math.max(right, fh.x1, fh.x2);\r\n\t\t\tbottom = Math.max(bottom, fh.y1, fh.y2);\r\n\r\n\t\t\tthis.footholds.push(fh);\r\n\r\n\t\t\tif (fh.next == head.id) {\r\n\t\t\t\tthis.loop = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.bound.parse(left, top, right, bottom);\r\n\r\n\t\tthis.FootholdType = type;\r\n\r\n\t\tif (type == FootholdSingle) {\r\n\t\t\tthis.footholds.forEach((fh, childIndex) => {\r\n\t\t\t\tfh.init(this, childIndex);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (type == FootholdChainChild) {\r\n\t\t\tlet center = this.bound.center;\r\n\t\t\tlet xf = new b2Transform();\r\n\r\n\t\t\txf.SetPositionXY(center.x, center.y);\r\n\r\n\t\t\tthis.footholds.forEach((fh, childIndex) => {\r\n\t\t\t\tfh.init(this, childIndex, xf);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} childIndex\r\n\t * @returns {FootholdChainChild}\r\n\t */\r\n\tgetFootholdFromContact(childIndex) {\r\n\t\treturn this.footholds[childIndex];\r\n\t}\r\n}\r\n\r\nexport class FootholdSingle {\r\n\t/**\r\n\t * @param {object} _raw\r\n\t * @param {number} index\r\n\t * @param {number} layerIndex\r\n\t * @param {number} groupIndex\r\n\t */\r\n\tconstructor(_raw, index, layerIndex, groupIndex) {\r\n\t\tthis._raw = _raw;\r\n\r\n\t\t// ground.footholds\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.layer = layerIndex | 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.group = groupIndex | 0;\r\n\r\n\t\t/** @type {number} - in ground.footholds */\r\n\t\tthis.id = index;\r\n\t\t\r\n\t\t/** @type {number} - prev id */\r\n\t\tthis.prev = _raw.prev ? (_raw.prev - 1) : null;\r\n\r\n\t\t/** @type {number} - next id */\r\n\t\tthis.next = _raw.next ? (_raw.next - 1) : null;\r\n\r\n\t\t// chain.footholds\r\n\r\n\t\t/** @type {FootholdChain} */\r\n\t\tthis.chain = null;\r\n\r\n\t\t/** @type {number} - in chain.footholds */\r\n\t\tthis.childIndex = null;\r\n\r\n\t\t// body\r\n\t\t\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.body = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.m_angle = 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.m_length = 0;\r\n\r\n\t\t// debug\r\n\r\n\t\t/** @type {number} - this和next_fh的夾角 */\r\n\t\tthis.next_a = undefined;\r\n\r\n\t\tthis.next_a_deg = undefined;\r\n\t\t\r\n\t\tthis.$showDebugInfo = false;\r\n\t}\r\n\t\r\n\tgetFootholdFromContact() {\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {FootholdChain} chain\r\n\t * @param {number} childIndex\r\n\t * @param {b2Transform} body_xf\r\n\t */\r\n\tinit(chain, childIndex, body_xf) {\r\n\t\tlet x1, y1, x2, y2;\r\n\t\t\r\n\t\tthis.chain = this;\r\n\t\tthis.childIndex = childIndex;\r\n\r\n\t\tx1 = this.x1 / $gv.CANVAS_SCALE;\r\n\t\ty1 = this.y1 / $gv.CANVAS_SCALE;\r\n\t\tx2 = this.x2 / $gv.CANVAS_SCALE;\r\n\t\ty2 = this.y2 / $gv.CANVAS_SCALE;\r\n\r\n\t\tconst dx = x2 - x1;\r\n\t\tconst dy = y2 - y1;\r\n\r\n\t\tif (dy == 0) {\r\n\t\t\tthis.m_angle = dx < 0 ? Math.PI : 0;\r\n\t\t\tthis.m_length = dx;\r\n\t\t}\r\n\t\telse if (dx == 0) {\r\n\t\t\tthis.m_angle = dy < 0 ? (-Math.PI * 0.5) : (Math.PI * 0.5);\r\n\t\t\tthis.m_length = dy;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.m_angle = Math.atan2(dy, dx);\r\n\t\t\tthis.m_length = Math.sqrt(dy ** 2 + dx ** 2);\r\n\t\t}\r\n\t}\r\n\r\n\tGetVertex1() {\r\n\t\treturn new b2Vec2(this.x1 / $gv.CANVAS_SCALE, this.y1 / $gv.CANVAS_SCALE);\r\n\t}\r\n\r\n\tGetVertex2() {\r\n\t\treturn new b2Vec2(this.x2 / $gv.CANVAS_SCALE, this.y2 / $gv.CANVAS_SCALE);\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\tGetWorldCenter() {\r\n\t\treturn this.body.GetWorldCenter();\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @param {b2Vec2} worldPoint\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLocalPoint(worldPoint, out) {\r\n\t\treturn this.body.GetLocalPoint(worldPoint, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @param {b2Vec2} worldPoint\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n\t\treturn this.body.GetLinearVelocityFromWorldPoint(worldPoint, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t * @param {b2Vec2} worldVector\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLocalVector(worldVector, out) {\r\n\t\treturn this.body.GetLocalVector(worldVector, out);\r\n\t}\r\n\r\n\t/** @type {FootholdSingle} */\r\n\tget next_fh() {\r\n\t\tconst footholds = this.body.m_world.ground.footholds;\r\n\t\treturn footholds[this.next];\r\n\t}\r\n\t/** @type {FootholdSingle} */\r\n\tget prev_fh() {\r\n\t\tconst footholds = this.body.m_world.ground.footholds;\r\n\t\treturn footholds[this.prev];\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget x1() { return this._raw.x1; }\r\n\t/** @type {number} */\r\n\tget y1() { return this._raw.y1; }\r\n\t/** @type {number} */\r\n\tget x2() { return this._raw.x2; }\r\n\t/** @type {number} */\r\n\tget y2() { return this._raw.y2; }\r\n\r\n\tget is_empty() {\r\n\t\treturn this.is_first && this.is_last;\r\n\t}\r\n\tget is_first() {\r\n\t\treturn this._raw.prev == 0;\r\n\t}\r\n\tget is_last() {\r\n\t\treturn this._raw.next == 0;\r\n\t}\r\n\tget is_wall() {\r\n\t\treturn this.x1 == this.x2;\r\n\t}\r\n\tget _is_horizontal_floor() {\r\n\t\treturn this.y1 == this.y2;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t */\r\n\t_drawLine(ctx) {\r\n\t\tctx.beginPath()\r\n\t\tctx.moveTo(this.x1, this.y1);\r\n\t\tctx.lineTo(this.x2, this.y2);\r\n\t\tctx.stroke();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t */\r\n\t_drawLineV01(ctx) {\r\n\t\tif (this.m_hasVertex0) {\r\n\t\t\tctx.beginPath()\r\n\t\t\tctx.moveTo(this.x0, this.y0);\r\n\t\t\tctx.lineTo(this.x1, this.y1);\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t */\r\n\t_drawLineV23(ctx) {\r\n\t\tif (this.m_hasVertex3) {\r\n\t\t\tctx.beginPath()\r\n\t\t\tctx.moveTo(this.x2, this.y2);\r\n\t\t\tctx.lineTo(this.x3, this.y3);\r\n\t\t\tctx.stroke();\r\n\t\t}\r\n\t}\r\n\r\n\t$_text_pos(x1, y1, x2, y2) {\r\n\t\treturn {\r\n\t\t\tx: (x2 + x1) / 2,\r\n\t\t\ty: Math.max(y2, y1),\r\n\t\t};\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\t$drawDebugInfo(renderer) {\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tconst fh = this;\r\n\t\tconst text = `[${fh.id}](${fh.x1}, ${fh.y1})[${fh.group}]{${fh._raw.piece}}∠${fh.next_a_deg}`;\r\n\r\n\t\tconst ta = ctx.textAlign, tb = ctx.textBaseline;\r\n\t\tconst tp = this.$_text_pos(fh.x1, fh.y1, fh.x2, fh.y2);\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"top\";\r\n\r\n\t\tctx.lineWidth = 5;\r\n\t\tctx.strokeStyle = \"#000\";\r\n\t\tfh._drawLine(ctx);\r\n\r\n\t\tctx.lineWidth = 2.5;\r\n\t\tctx.strokeStyle = \"#FF00FF\";\r\n\t\tfh._drawLine(ctx);\r\n\r\n\t\tctx.lineWidth = 2.5;\r\n\t\tctx.strokeStyle = \"#000\";\r\n\t\tctx.strokeText(text, tp.x, tp.y);\r\n\r\n\t\tctx.fillStyle = \"#FFF\";\r\n\t\tctx.fillText(text, tp.x, tp.y);\r\n\r\n\t\t//ctx.fillText(`[${fh.piece}][1](${fh.x2}, ${fh.y2})`, fh.x2, fh.y2);\r\n\r\n\t\tctx.textAlign = ta;\r\n\t\tctx.textBaseline = tb;\r\n\t}\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {string} color\r\n\t */\r\n\t$drawDebugInfo2(renderer, color) {\r\n\t\tconst ctx = renderer.ctx;\r\n\t\tconst fh = this;\r\n\t\tconst text = `${fh.prev}<${fh.id}>${fh.next} C{${fh.chain.id}} (${fh.x1}, ${fh.y1})(${fh.x2}, ${fh.y2}) L[${fh.layer}] G[${fh.group}] P{${fh._raw.piece}}∠${fh.next_a_deg}`;\r\n\r\n\t\tlet ta = ctx.textAlign, tb = ctx.textBaseline;\r\n\t\tconst tp = this.$_text_pos(fh.x1, fh.y1, fh.x2, fh.y2);\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"top\";\r\n\r\n\t\tctx.lineWidth = 5;\r\n\t\tctx.strokeStyle = \"#000\";\r\n\t\tfh._drawLine(ctx);\r\n\r\n\t\tctx.lineWidth = 2.5;\r\n\t\tctx.strokeStyle = color || \"#FF00FF\";\r\n\t\tfh._drawLine(ctx);\r\n\t\t\r\n\t\t//ctx.strokeStyle = \"#FF0\";\r\n\t\t//fh._drawLineV01(ctx);\r\n\t\t//fh._drawLineV23(ctx);\r\n\r\n\t\tctx.lineWidth = 2.5;\r\n\t\tctx.strokeStyle = \"#000\";\r\n\t\tctx.strokeText(text, tp.x, tp.y);\r\n\r\n\t\tctx.fillStyle = \"#FFF\";\r\n\t\tctx.fillText(text, tp.x, tp.y);\r\n\r\n\t\t//ctx.fillText(`[${fh.piece}][1](${fh.x2}, ${fh.y2})`, fh.x2, fh.y2);\r\n\r\n\t\tctx.textAlign = ta;\r\n\t\tctx.textBaseline = tb;\r\n\t}\r\n}\r\n\r\nexport class FootholdChainChild extends FootholdSingle {\r\n\tconstructor(_raw, index, layerIndex, groupIndex) {\r\n\t\tsuper(_raw, index, layerIndex, groupIndex);\r\n\r\n\t\t/** @type {b2Transform} - local */\r\n\t\tthis.m_xf = new b2Transform();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {FootholdChain} chain\r\n\t * @param {number} childIndex\r\n\t * @param {b2Transform} body_xf\r\n\t */\r\n\tinit(chain, childIndex, body_xf) {\r\n\t\tsuper.init(chain, childIndex, body_xf);\r\n\t\t\r\n\t\tb2Vec2.AddVV(this.GetVertex1(), this.GetVertex2(), this.m_xf.p);\r\n\t\tb2Vec2.MulVS(this.m_xf.p, 0.5, this.m_xf.p);\r\n\t\tthis.m_xf.SetRotationAngle(this.m_angle);\r\n\r\n\t\tb2Transform.MulTXX(this.m_xf, body_xf, this.m_xf);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tGetWorldCenter() {\r\n\t\tconst xf = new b2Transform();\r\n\t\tb2Transform.MulXX(this.m_xf, this.body.m_xf, xf);\r\n\t\treturn xf.p;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {b2Vec2} worldPoint\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLocalPoint(worldPoint, out) {\r\n\t\tconst xf = new b2Transform();\r\n\t\tb2Transform.MulXX(this.m_xf, this.body.m_xf, xf);\r\n\t\treturn b2Transform.MulTXV(xf, worldPoint, out);\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {b2Vec2} worldPoint\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n\t\tconst body = this.body;\r\n\t\treturn b2Vec2.AddVCrossSV(body.m_linearVelocity, body.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.GetWorldCenter(), b2Vec2.s_t0), out);\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {b2Vec2} worldVector\r\n\t * @param {b2Vec2} out\r\n\t */\r\n\tGetLocalVector(worldVector, out) {\r\n\t\tconst xf = new b2Transform();\r\n\t\tb2Transform.MulXX(this.m_xf, this.body.m_xf, xf);\r\n\t\treturn b2Rot.MulTRV(xf.q, worldVector, out);\r\n\t}\r\n}\r\n","﻿\r\nimport {\r\n\tb2_polygonRadius,\r\n\tb2Vec2,\r\n\tb2BodyType, b2BodyDef, b2FixtureDef,\r\n\tb2PolygonShape, b2EdgeShape, b2ChainShape,\r\n\tb2Body, b2Fixture,\r\n\tb2Contact, b2Manifold, b2ContactImpulse, b2WorldManifold\r\n} from \"./Physics.js\";\r\n\r\nimport { Vec2, Rectangle } from \"../math.js\";\r\n\r\nimport { World, GRAVITY } from \"./World.js\";\r\nimport { FootholdChain, FootholdSingle, FootholdChainChild} from \"./Foothold.js\";\r\n\r\nimport { PPlayer } from \"./PPlayer.js\";\r\nimport { FilterHelper } from \"./Filter.js\";\r\n\r\n\r\nexport const Foothold = FootholdSingle;\r\n//const Foothold = FootholdChainChild;\r\n\r\n\r\n/**\r\n * 可以防止player卡在foothold裡面\r\n */\r\nwindow.CREATE_SOLID_FOOTHOLD = false;\r\n/**\r\n * polygon + edge\r\n */\r\nwindow.CREATE_SOLID_AND_EDGE_FOOTHOLD = false;\r\n\r\n/**\r\n * b2EdgeShape ghost vertex\r\n */\r\nwindow.USE_GHOST_VERTEX = true;\r\n\r\nwindow.FOOTHOLD_IS_BULLET = true;\r\n\r\n/**\r\n * @param {number} left\r\n * @param {number} right\r\n * @param {number} interpolater - 0~1\r\n */\r\nfunction lerp(left, right, interpolater) {\r\n\treturn left + interpolater * (right - left);\r\n}\r\n\r\nexport class Ground {\r\n\tconstructor() {\r\n\t\t/** @type {b2Body[]} */\r\n\t\tthis.bodies = null;\r\n\r\n\t\t/** @type {Foothold[]} */\r\n\t\tthis.footholds = null;\r\n\t\t\r\n\t\t/** @type {Rectangle[]} */\r\n\t\tthis.rectChains = null;\r\n\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\tthis.footholds = [];\r\n\t\tthis.bodies = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @param {object} data\r\n\t * @param {World} world\r\n\t */\r\n\tload(map_raw_data, world) {\r\n\t\tif (!(\"foothold\" in map_raw_data)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (let layerIndex in map_raw_data.foothold) {\r\n\t\t\tlet groups = map_raw_data.foothold[layerIndex];\r\n\r\n\t\t\t//foothold[5] maybe is Bounding-Box(loop line)\r\n\r\n\t\t\tfor (let groupIndex in groups) {\r\n\t\t\t\tlet segment = groups[groupIndex];\r\n\t\t\t\tfor (let k in segment) {\r\n\t\t\t\t\tconst index = k - 1;\r\n\r\n\t\t\t\t\tlet fh = new Foothold(segment[k], index, layerIndex, groupIndex);\r\n\r\n\t\t\t\t\tthis.footholds[index] = fh;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {FootholdChain[]} */\r\n\t\tlet chains = [];\r\n\r\n\t\tlet chainId = 0;\r\n\t\tlet rectChains = this.rectChains = [];\r\n\r\n\t\tfor (let i = 0; i < this.footholds.length; ++i) {\r\n\t\t\tconst foothold = this.footholds[i];\r\n\t\t\t\r\n\t\t\tif (foothold.chain == null) {\r\n\t\t\t\t/** @type {foothold} */\r\n\t\t\t\tlet head;\r\n\r\n\t\t\t\tfor (let fh = foothold; fh != null; fh = this.footholds[fh.prev]) {\r\n\t\t\t\t\tif (fh.prev != null && fh.prev == foothold.id) {\r\n\t\t\t\t\t\thead = fh;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!head) {\r\n\t\t\t\t\thead = foothold;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet chain = new FootholdChain(chainId);\r\n\r\n\t\t\t\tchain.init(head, this.footholds, Foothold);\r\n\r\n\t\t\t\tif (Foothold == FootholdSingle) {\r\n\t\t\t\t\tif (window.CREATE_SOLID_AND_EDGE_FOOTHOLD) {\r\n\t\t\t\t\t\tthis._create_foothold(world, chain, false);//edge\r\n\t\t\t\t\t\tthis._create_foothold(world, chain, true);//polygon\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._create_foothold(world, chain, window.CREATE_SOLID_FOOTHOLD);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (Foothold == FootholdChainChild) {\r\n\t\t\t\t\tthis._create_chain(world, chain);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchains.push(chain);\r\n\r\n\t\t\t\trectChains[chainId] = chain.bound;\r\n\t\t\t\t\r\n\t\t\t\tchainId++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @param {FootholdChain} chain\r\n\t */\r\n\t_create_chain(world, chain) {\r\n\t\t/** @type {b2Body} */\r\n\t\tlet body;\r\n\r\n\t\t/** @type {b2ChainShape} */\r\n\t\tlet shape;\r\n\r\n\t\t{\r\n\t\t\tlet bdef = new b2BodyDef();\r\n\r\n\t\t\tconst center = chain.bound.center;\r\n\r\n\t\t\tbdef.type = b2BodyType.b2_kinematicBody;//可移動\r\n\t\t\tbdef.position.Set(center.x / $gv.CANVAS_SCALE, center.y / $gv.CANVAS_SCALE);\r\n\t\t\tbdef.angle = 0;\r\n\t\t\tbdef.gravityScale = 0;\r\n\t\t\tbdef.linearDamping = 1;\r\n\t\t\tbdef.bullet = true;\r\n\t\t\tbdef.userData = this;\r\n\r\n\t\t\tbody = world.CreateBody(bdef);\r\n\t\t\tbody.$type = \"ground\";\r\n\r\n\t\t\tthis.bodies.push(body);\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tshape = new b2ChainShape();\r\n\r\n\t\t\t/** @type {b2Vec2[]} */\r\n\t\t\tlet vertices = [body.GetLocalPoint(chain.footholds[0].GetVertex1(), new b2Vec2())];\r\n\r\n\t\t\tfor (let i = 0; i < chain.footholds.length; ++i) {\r\n\t\t\t\tconst fh = chain.footholds[i];\r\n\r\n\t\t\t\tvertices.push(body.GetLocalPoint(fh.GetVertex2(), new b2Vec2()));\r\n\r\n\t\t\t\tfh.body = body;\r\n\t\t\t\tfh._chain = chain;\r\n\t\t\t}\r\n\r\n\t\t\tif (chain.loop) {\r\n\t\t\t\tshape.CreateLoop(vertices);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshape.CreateChain(vertices);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tlet fdef = new b2FixtureDef();\r\n\t\t\tfdef.shape = shape;\r\n\t\t\tfdef.density = 1;\r\n\t\t\tfdef.filter.Copy(FilterHelper.get(\"foothold\"));\r\n\t\t\tfdef.friction = 1;\r\n\t\t\tfdef.restitution = 0;\r\n\t\t\tfdef.userData = chain;\r\n\r\n\t\t\tlet fixture = body.CreateFixture(fdef);\r\n\r\n\t\t\t//fixture.beginContact = this.beginContact_bodyBase_oneway;\r\n\t\t\tfixture.endContact = this.endContact_bodyBase_oneway;\r\n\t\t\tfixture.preSolve = this.preSolveGround_bodyBase_oneway;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @param {FootholdChain} chain\r\n\t * @param {boolean} is_solid\r\n\t */\r\n\t_create_foothold(world, chain, is_solid) {\r\n\t\tlet bdef = new b2BodyDef();\r\n\t\tlet fdef = new b2FixtureDef();\r\n\r\n\t\t/** @type {b2PolygonShape&b2EdgeShape} */\r\n\t\tlet shape;\r\n\r\n\r\n\t\tif (is_solid) {\r\n\t\t\tshape = new b2PolygonShape();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tshape = new b2EdgeShape();\r\n\t\t}\r\n\r\n\t\tbdef.type = b2BodyType.b2_kinematicBody;//可移動\r\n\t\tbdef.linearDamping = 1;\r\n\t\tbdef.gravityScale = 0;\r\n\t\tbdef.userData = this;\r\n\t\tbdef.bullet = window.FOOTHOLD_IS_BULLET;\r\n\r\n\t\tfdef.shape = shape;\r\n\t\tfdef.density = 1;\r\n\t\tfdef.filter.Copy(FilterHelper.get(\"foothold\"));\r\n\t\tfdef.friction = 1;\r\n\t\tfdef.restitution = 0;\r\n\t\t//fdef.userData = chain;\r\n\r\n\t\tfor (let i = 0; i < chain.footholds.length; ++i) {\r\n\t\t\tconst fh = chain.footholds[i];\r\n\t\t\t//if (fh.is_wall) {\r\n\t\t\t//\tthis._create_wall(fh);\r\n\t\t\t//\tcontinue;\r\n\t\t\t//}\r\n\t\t\tlet x1, y1, x2, y2;\r\n\r\n\t\t\tx1 = fh.x1 / $gv.CANVAS_SCALE;\r\n\t\t\ty1 = fh.y1 / $gv.CANVAS_SCALE;\r\n\t\t\tx2 = fh.x2 / $gv.CANVAS_SCALE;\r\n\t\t\ty2 = fh.y2 / $gv.CANVAS_SCALE;\r\n\r\n\t\t\tcreate.call(this, fh);\r\n\t\t\t\r\n\t\t\tconst next = this.footholds[fh.next];\r\n\t\t\tif (next) {\r\n\t\t\t\tlet x1n, y1n, x2n, y2n;\r\n\t\t\t\tlet nx1, ny1, nx2, ny2;\r\n\r\n\t\t\t\tnx1 = next.x1 / $gv.CANVAS_SCALE;\r\n\t\t\t\tny1 = next.y1 / $gv.CANVAS_SCALE;\r\n\t\t\t\tnx2 = next.x2 / $gv.CANVAS_SCALE;\r\n\t\t\t\tny2 = next.y2 / $gv.CANVAS_SCALE;\r\n\r\n\t\t\t\tlet v1 = new b2Vec2(x1 - x2, y1 - y2);\r\n\t\t\t\tlet v2 = new b2Vec2(nx2 - nx1, ny2 - ny1);\r\n\t\t\t\tlet a = Math.atan2(b2Vec2.CrossVV(v1, v2), b2Vec2.DotVV(v1, v2));\r\n\r\n\t\t\t\tfh.next_a = a;\r\n\t\t\t\tfh.next_a_deg = Math.abs(Math.trunc(a * 180 / Math.PI)) % 180;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/**\r\n\t\t * @param {Foothold} fh\r\n\t\t * @param {number} x1\r\n\t\t * @param {number} y1\r\n\t\t * @param {number} x2\r\n\t\t * @param {number} y2\r\n\t\t */\r\n\t\tfunction create(fh) {\r\n\t\t\tb2Vec2.AddVV(fh.GetVertex1(), fh.GetVertex2(), bdef.position);\r\n\t\t\tb2Vec2.MulVS(bdef.position, 0.5, bdef.position);\r\n\r\n\t\t\tlet hlen = fh.m_length * 0.5;\r\n\t\t\tbdef.angle = fh.m_angle;\r\n\r\n\t\t\tlet body = world.CreateBody(bdef);\r\n\t\t\tbody.$type = \"ground\";\r\n\r\n\t\t\tif (is_solid) {\r\n\t\t\t\tshape.SetAsBox(hlen, b2_polygonRadius);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tshape.m_vertex1.Set(-hlen, 0)\r\n\t\t\t\tshape.m_vertex2.Set(hlen, 0);\r\n\r\n\t\t\t\tif (window.USE_GHOST_VERTEX) {\r\n\t\t\t\t\tif (fh.prev != null) {\r\n\t\t\t\t\t\tconst prev = this.footholds[fh.prev];\r\n\t\t\t\t\t\tshape.m_hasVertex0 = true;\r\n\t\t\t\t\t\tshape.m_vertex0.Copy(prev.GetVertex2());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fh.next != null) {\r\n\t\t\t\t\t\tconst next = this.footholds[fh.next];\r\n\t\t\t\t\t\tshape.m_hasVertex3 = true;\r\n\t\t\t\t\t\tshape.m_vertex3.Copy(next.GetVertex1());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfdef.userData = fh;\r\n\r\n\t\t\tlet fixture = body.CreateFixture(fdef);\r\n\r\n\t\t\t//fixture.beginContact = this.beginContact_bodyBase_oneway;\r\n\t\t\tfixture.endContact = this.endContact_bodyBase_oneway;\r\n\t\t\tfixture.preSolve = this.preSolveGround_bodyBase_oneway;\r\n\r\n\t\t\tfh.body = body;\r\n\t\t\tthis.bodies.push(body);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {{left: number, right: number}}\r\n\t */\r\n\t_compute_left_right_border() {\r\n\t\tlet left = null, right = null;\r\n\t\tfor (let i = 0; i < this.footholds.length; ++i) {\r\n\t\t\tlet fh = this.footholds[i];\r\n\t\t\t//if (fh.layer == 5) {\r\n\t\t\t\tlet x1, x2;\r\n\t\t\t\t\r\n\t\t\t\tif (fh.x1 < fh.x2) {\r\n\t\t\t\t\tx1 = fh.x1;\r\n\t\t\t\t\tx2 = fh.x2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tx1 = fh.x2;\r\n\t\t\t\t\tx2 = fh.x1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (left == null || x1 < left) {\r\n\t\t\t\t\tleft = x1;\r\n\t\t\t\t}\r\n\t\t\t\tif (right == null || x2 > right) {\r\n\t\t\t\t\tright = x2;\r\n\t\t\t\t}\r\n\t\t\t\t//if (left != null) {\r\n\t\t\t\t//\tleft = Math.min(left, fh.x1, fh.x2);\r\n\t\t\t\t//}\r\n\t\t\t\t//else {\r\n\t\t\t\t//\tleft = Math.min(fh.x1, fh.x2);\r\n\t\t\t\t//}\r\n\t\t\t\t//else {\r\n\t\t\t\t//\tright = Math.max(fh.x1, fh.x2);\r\n\t\t\t\t//}\r\n\t\t\t//}\r\n\t\t}\r\n\t\treturn { left, right };\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t * @param {number} childIndexA\r\n\t * @param {number} childIndexB\r\n\t */\r\n\tbeginContact_bodyBase_oneway(contact, fa, fb, childIndexA, childIndexB) {\r\n\t\tif (fb.$type == \"player\") {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\tlet numPoints, worldManifold;\r\n\t\tconst playerBody = fb.GetBody();\r\n\r\n\t\t/** @type {Foothold} */\r\n\t\tconst fh = this.getFootholdFromContact(childIndexA);\r\n\t\t\r\n\t\t/** @type {PPlayer} */\r\n\t\tconst player = fb.GetUserData();\r\n\t\tif (!player || !player.body || player.body.$type != \"player\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (player.state.ladder) {\r\n\t\t\tcontact.SetEnabled(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (!contact.IsTouching()) {\r\n\t\t\tdebugger;\r\n\t\t\tconsole.log(\"J: \" + player.state.jump);\r\n\t\t}\r\n\r\n\t\tconst $fh = player.$foothold;\r\n\t\tconst player_pos = player.foot_walk.GetWorldCenter();//player.getPosition();\r\n\t\tconst relative_position = fh.GetLocalPoint(player_pos, new b2Vec2());\r\n\t\tconst platformFaceY = b2_polygonRadius * 2;\r\n\r\n\t\tconst foot_width = player.chara_profile.foot_width - b2_polygonRadius;\r\n\r\n\t\tif (numPoints == null) {\r\n\t\t\tnumPoints = contact.GetManifold().pointCount;\r\n\t\t\tworldManifold = new b2WorldManifold();\r\n\t\t\tcontact.GetWorldManifold(worldManifold);\r\n\t\t}\r\n\r\n\t\t//check if contact points are moving into platform\r\n\t\tfor (let i = 0; i < numPoints; ++i) {\r\n\t\t\tconst cpoint = worldManifold.points[i];\r\n\t\t\tconst pointVelPlatform = fh.GetLinearVelocityFromWorldPoint(cpoint, new b2Vec2());\r\n\t\t\tconst pointVelOther = playerBody.GetLinearVelocityFromWorldPoint(cpoint, new b2Vec2());\r\n\t\t\tconst point = new b2Vec2(pointVelOther.x - pointVelPlatform.x, pointVelOther.y - pointVelPlatform.y);\r\n\t\t\tconst relativeVel = fh.GetLocalVector(point, new b2Vec2());\r\n\t\t\t\r\n\t\t\t//let dist = b2Vec2.SubVV(cpoint, player_pos, new b2Vec2());\r\n\t\t\t//let length = dist.Length();\r\n\t\t\t//\r\n\t\t\t//player._$footCFDist = length;\r\n\t\t\t//player._$footCFSub = Math.abs(length - player.chara_profile.foot_width);\r\n\t\t\t//\r\n\t\t\t//if (player.$foothold && player.$foothold != fh) {\r\n\t\t\t//\tif (player._$footCFSub > b2_polygonRadius) {\r\n\t\t\t//\t\tplayer.leave_$fh = fh;\r\n\t\t\t//\t\tcontinue;\r\n\t\t\t//\t}\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\tif (relative_position.y <= -foot_width) {\r\n\t\t\t\tif (relativeVel.y > 1) {//if moving down faster than 1 m/s, handle as before\r\n\t\t\t\t\t//player._foothold = fh;\r\n\t\t\t\t\tif (fh.is_wall || player._which_foothold_contact(fh, cpoint)) {\r\n\t\t\t\t\t\tnormal_contact(cpoint);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//else {\r\n\t\t\t\t\t//\tnormal_contact(cpoint);\r\n\t\t\t\t\t//\treturn;//not primary, normal contact \r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\telse if (relativeVel.y > -1) { //if moving slower than 1 m/s\r\n\t\t\t\t\t//borderline case, moving only slightly out of platform\r\n\t\t\t\t\t//player._foothold = fh;\r\n\t\t\t\t\tif (fh.is_wall || player._which_foothold_contact(fh, cpoint)) {\r\n\t\t\t\t\t\tif (player.$foothold && player.$foothold.id != fh.id) {\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnormal_contact(cpoint);\r\n\t\t\t\t\t\treturn;//contact point is less than 5cm inside front face of platfrom\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//else {\r\n\t\t\t\t\t//\tnormal_contact(cpoint);\r\n\t\t\t\t\t//\treturn;//not primary, normal contact\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//no points are moving into platform, contact should not be solid\r\n\t\tcontact.SetEnabled(false);\r\n\r\n\t\t/**\r\n\t\t * @param {b2Vec2} cpoint\r\n\t\t */\r\n\t\tfunction normal_contact(cpoint) {\r\n\t\t\tif (fh.is_wall) {\r\n\t\t\t\tcontact.SetFriction(0);\r\n\r\n\t\t\t\tif (player.prev_$fh &&\r\n\t\t\t\t\tplayer.prev_$fh.chain != fh.chain &&\r\n\t\t\t\t\tplayer.prev_$fh.layer != fh.layer\r\n\t\t\t\t) {\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (player.$foothold &&\r\n\t\t\t\t\tplayer.$foothold.chain != fh.chain &&\r\n\t\t\t\t\tplayer.$foothold.layer != fh.layer\r\n\t\t\t\t) {\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (player.state.dropDown && player.leave_$fh != null) {\r\n\t\t\t\t//HACK: ?? foothold edge\r\n\t\t\t\tif (player.leave_$fh == player.$foothold && player.$foothold != fh) {\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (playerBody.$type == \"pl_ft_walk\" &&// player.leave_$fh &&\r\n\t\t\t\t\tplayer.leave_$fh.id != fh.id &&\r\n\t\t\t\t\tplayer.leave_$fh.chain.id != fh.chain.id &&\r\n\t\t\t\t\t(player.leave_$fh.prev == null || player.leave_$fh.prev != fh.id) &&\r\n\t\t\t\t\t(player.leave_$fh.next == null || player.leave_$fh.next != fh.id)\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst foot = player.foot_walk.GetPosition();\r\n\t\t\t\t\tif (cpoint.y > foot.y) {\r\n\t\t\t\t\t\tplayer.leave_$fh = null;\r\n\t\t\t\t\t\tplayer.state.dropDown = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tplayer.state.dropDown = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (player.leave_$fh && player.leave_$fh == fh) {\r\n\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet ccc = $fh && (\r\n\t\t\t\tfh.is_wall ||\r\n\t\t\t\t(fh == player._foothold && (fh.y1 < $fh.y1 || fh.y2 < $fh.y2)) ||\r\n\t\t\t\t(fh != player._foothold && (fh.y1 > $fh.y1 || fh.y2 > $fh.y2))\r\n\t\t\t);\r\n\t\t\tif (ccc && $fh != fh && (!player._$fallEdge || player._$fallEdge != $fh)) {\r\n\t\t\t\tif (fh.chain.id != $fh.chain.id &&\r\n\t\t\t\t\t(!$fh.prev || $fh.y1 != fh.y2) &&\r\n\t\t\t\t\t(!$fh.next || $fh.y2 != fh.y1)\r\n\t\t\t\t) {\r\n\t\t\t\t\tplayer.leave_$fh = fh;\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (player._$fallEdge && player._$fallEdge == fh) {\r\n\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tif ((fh.prev == null && (cpoint.x * $gv.CANVAS_SCALE) < fh.x1) ||\r\n\t\t\t\t\t(fh.next == null && (cpoint.x * $gv.CANVAS_SCALE) > fh.x2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tplayer.state.jump = true;\r\n\r\n\t\t\t\t\tplayer._$fallEdge = fh;\r\n\r\n\t\t\t\t\tplayer._foothold = null;\r\n\t\t\t\t\tplayer._foot_at = null;\r\n\t\t\t\t\t//\r\n\t\t\t\t\tplayer.$foothold = null;\r\n\r\n\t\t\t\t\tcontact.SetEnabled(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t//player._$fallEdge = null;//??\r\n\r\n\t\t\t\t//if (fh._is_horizontal_floor && !player.state.dropDown) {//防止反彈\r\n\t\t\t\t//\tplayerBody.ApplyForceToCenter(GRAVITY/*.Clone().SelfMul(10)*/);\r\n\t\t\t\t//}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t * @param {number} childIndexA\r\n\t * @param {number} childIndexB\r\n\t */\r\n\tendContact_bodyBase_oneway(contact, fa, fb, childIndexA, childIndexB) {\r\n\t\t/** @type {PPlayer} */\r\n\t\tconst player = fb.GetUserData();\r\n\t\tif (!player) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/** @type {Foothold} */\r\n\t\tconst fh = this.getFootholdFromContact(childIndexA);\r\n\r\n\t\tif (player._foot_contact_list.length) {\r\n\t\t\tplayer._foot_contact_list.forEach((fc, i) => {\r\n\t\t\t\tif (fc.foothold == fh) {\r\n\t\t\t\t\tplayer._foot_contact_list.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (player._$fallEdge && fh == player._$fallEdge) {\r\n\t\t\tplayer._$fallEdge = null;\r\n\t\t}\r\n\t\telse if (player._foothold && fh == player._foothold) {\r\n\t\t\tif (player._foot_contact_list.length) {\r\n\t\t\t\tplayer.prev_$fh = player.$foothold;\r\n\r\n\t\t\t\tlet max = player._foot_contact_list.pop();\r\n\t\t\t\tplayer.$foothold = max.foothold;\r\n\t\t\t\tplayer._foothold = max.foothold;\r\n\t\t\t\tplayer._foot_at = max.position;\r\n\t\t\t\tplayer._foothold_priority = max.priority;\r\n\t\t\t\t//console.log(\"end contact: contact old foothold: fh == player._foothold\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tplayer._foothold = null;//正常離開地面\r\n\t\t\t\tplayer._foot_at = null;\r\n\t\t\t\tplayer.prev_$fh = null;\r\n\t\t\t\t//console.log(\"end contact: 正常離開地面: fh == player._foothold\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (player.$foothold && fh == player.$foothold) {\r\n\t\t\tif (player._foot_contact_list.length) {\r\n\t\t\t\tplayer.prev_$fh = player.$foothold;\r\n\r\n\t\t\t\tlet max = player._foot_contact_list.pop();\r\n\t\t\t\tplayer.$foothold = max.foothold;\r\n\t\t\t\tplayer._foothold = max.foothold;\r\n\t\t\t\tplayer._foot_at = max.position;\r\n\t\t\t\tplayer._foothold_priority = max.priority;\r\n\t\t\t\t//console.log(\"end contact: contact old foothold: fh == player.$foothold\");\r\n\t\t\t}\r\n\t\t\telse {//afterStep\r\n\t\t\t\tif (player._foothold) {\r\n\t\t\t\t\tplayer.prev_$fh = player.$foothold;\r\n\r\n\t\t\t\t\tplayer.$foothold = player._foothold;\r\n\t\t\t\t\t//console.log(\"end contact: contact other foothold\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tplayer.$foothold = null;//正常離開地面\r\n\t\t\t\t\tplayer._foot_at = null;\r\n\t\t\t\t\tplayer.prev_$fh = null;\r\n\t\t\t\t\t//console.info(\"end contact: 正常離開地面: fh == player.$foothold\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (player.leave_$fh && player.leave_$fh == fh) {\r\n\t\t\tplayer.leave_$fh = null;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Manifold} oldManifold\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t * @param {number} childIndexA\r\n\t * @param {number} childIndexB\r\n\t */\r\n\tpreSolveGround_bodyBase_oneway(contact, oldManifold, fa, fb, childIndexA, childIndexB) {\r\n\t\t/** @type {Ground} */\r\n\t\tlet that = fa.GetBody().GetUserData();\r\n\r\n\t\t/** @type {Foothold} */\r\n\t\tlet target = this;\r\n\r\n\t\tthat.beginContact_bodyBase_oneway.call(target, contact, fa, fb, childIndexA, childIndexB);\r\n\t\t\r\n\t\t//if (contact.IsEnabled() && contact.IsTouching()) {\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t */\r\n\tunload(world) {\r\n\t\tfor (let i = 0; i < this.bodies.length; ++i) {\r\n\t\t\tworld.DestroyBody(this.bodies[i]);\r\n\t\t}\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {object} data\r\n\t */\r\n\taddFoothold(data) {\r\n\t\tthis.footholds.push(new Foothold(data));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\t$drawDebugInfo(renderer) {\r\n\t\tif ($gv.m_display_foothold) {\r\n\t\t\tconst ctx = renderer.ctx;\r\n\r\n\t\t\tctx.lineJoin = \"round\";\r\n\t\t\tctx.lineCap = \"round\";\r\n\t\t\tfor (let i = 0; i < this.footholds.length; ++i) {\r\n\t\t\t\tlet fh = this.footholds[i];\r\n\t\t\t\tif (fh == null) {//line end\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (fh.$showDebugInfo) {\r\n\t\t\t\t\tfh.$drawDebugInfo(renderer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t$showDebugInfo(layer, group, isShow, isHide) {\r\n\t\tif (isShow == null) {\r\n\t\t\tisShow = true;\r\n\t\t}\r\n\t\tif (isHide == null) {\r\n\t\t\tisHide = false;\r\n\t\t}\r\n\t\tfor (let fh of this.footholds) {\r\n\t\t\tif (fh.layer == layer && fh.group == group) {\r\n\t\t\t\tfh.$showDebugInfo = isShow;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfh.$showDebugInfo = isHide;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t$showDebugInfoByLayer(layer, isShow, isHide) {\r\n\t\tif (isShow == null) {\r\n\t\t\tisShow = true;\r\n\t\t}\r\n\t\tif (isHide == null) {\r\n\t\t\tisHide = false;\r\n\t\t}\r\n\t\tfor (let fh of this.footholds) {\r\n\t\t\tif (fh.layer == layer) {\r\n\t\t\t\tfh.$showDebugInfo = isShow;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfh.$showDebugInfo = isHide;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//static $showDebugInfoByGroup() {\r\n\t//}\r\n\t$hideAllDebugInfo() {\r\n\t\tfor (let fh of this.footholds) {\r\n\t\t\tfh.$showDebugInfo = false;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nGround.Foothold = Foothold;\r\n\r\n","﻿\r\nimport { Vec2 } from \"../math.js\";\r\n\r\n\r\nexport class ActionAnimationFrameData {\r\n\tconstructor() {\r\n\t\t/** @type {number} */\r\n\t\tthis.delay = 0;\r\n\r\n\t\t/** @type {Vec2} */\r\n\t\tthis.move = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.action = 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.frame = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * from loaded raw data\r\n\t * @param {ActionAnimationFrameData} raw\r\n\t * @param {string} action\r\n\t * @param {number} frame\r\n\t */\r\n\t_load(raw, action, frame) {\r\n\t\tthis._raw = raw;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.delay = raw.delay;\r\n\r\n\t\t/** @type {Vec2} */\r\n\t\tif (raw.move) {\r\n\t\t\tthis.move = new Vec2(raw.move.x, raw.move.y);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.move = new Vec2(0, 0);\r\n\t\t}\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.action = raw.action || action;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.frame = raw.frame || frame;\r\n\t}\r\n}\r\n\r\nexport class ActionAnimation {\r\n\tconstructor(raw) {\r\n\t\t/** @returns {ActionAnimationFrameData[]} */\r\n\t\tthis.frames = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis._action = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.time = 0;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.frame = 0;\r\n\r\n\t\t/** @type {number} this.delay = delay < 0 ? -delay:0; if (this.delay == 0) launch attack */\r\n\t\tthis.delay = 0;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.loop = false;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis._is_end = false;\r\n\t}\r\n\r\n\t/**\r\n\t * from loaded data\r\n\t * @param {string} action\r\n\t */\r\n\t_load(action) {\r\n\t\tthis._action = action;\r\n\t\tthis.frames = ActionAnimation.Adef[action];\r\n\t}\r\n\r\n\t/**\r\n\t * from loaded data\r\n\t * @param {string} action\r\n\t */\r\n\treload(action) {\r\n\t\tthis.reset();\r\n\t\tthis._load(action);\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.time = 0;\r\n\t\tthis.frame = 0;\r\n\t\tthis._is_end = false;\r\n\t}\r\n\r\n\t/**\r\n\t * update action delay, target.action, target.action_frame, target.tx, target.ty\r\n\t * @param {number} stamp\r\n\t * @param {CharacterRenderer} target\r\n\t */\r\n\tupdate(stamp, target) {\r\n\t\tif (!this.frames) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst fdat = this.fdat;\r\n\t\tlet delay = 0;\r\n\r\n\t\tif (!fdat) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.time = this.time + stamp;\r\n\r\n\t\tif (fdat.delay < 0) {\r\n\t\t\tfdat.delay = -fdat.delay;\r\n\t\t}\r\n\r\n\t\tif (fdat.delay > 0) {\r\n\t\t\tdelay = fdat.delay;\r\n\t\t\tthis.delay = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelay = -fdat.delay;\r\n\t\t\tthis.delay = delay;\r\n\t\t}\r\n\r\n\t\tif (this.time > delay) {\r\n\t\t\tthis.frame = ++this.frame;\r\n\t\t\tthis.time = 0;\r\n\t\t}\r\n\r\n\t\t//translate target position\r\n\t\tif (fdat.move) {\r\n\t\t\ttarget.tx = -fdat.move.x * target.front;\r\n\t\t\ttarget.ty = fdat.move.y;//Y 軸相反\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttarget.tx = 0;\r\n\t\t\ttarget.ty = 0;\r\n\t\t}\r\n\t\tif (this.isEnd()) {\r\n\t\t\ttarget.tx = 0;\r\n\t\t\ttarget.ty = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// 改變 action & action_frame 會造成迴圈: this.reload(this._action)\r\n\t\ttarget._action = fdat.action;\r\n\t\ttarget._action_frame = fdat.frame;\r\n\r\n\t\tif (!this.frames || this.fdat == null) {\r\n\t\t\tthis._is_end = true;\r\n\t\t}\r\n\t\telse if (!this.loop) {\r\n\t\t\tthis._is_end = false;\r\n\t\t}\r\n\t\tif (this.frames.length <= 1) {\r\n\t\t\tthis._is_end = true;\r\n\t\t}\r\n\t}\r\n\r\n\tisEnd() {\r\n\t\treturn this._is_end;\r\n\t}\r\n\r\n\tgetTotalTime() {\r\n\t\treturn this.frames.reduce((total, frame) => total + frame.delay, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * frame data\r\n\t * @returns {ActionAnimationFrameData}\r\n\t */\r\n\tget fdat() {\r\n\t\treturn this.frames[this.frame];\r\n\t}\r\n\r\n\tstatic async Init() {\r\n\t\t/** @type {{[action:string]:ActionAnimationFrameData[]}} */\r\n\t\tlet raw = await $get.data(ActionAnimation._base_path);\r\n\r\n\t\tlet aadef = Object.assign({}, raw);\r\n\t\t\r\n\t\tdelete aadef['info'];\r\n\r\n\t\tfor (let actName in aadef) {\r\n\t\t\tlet aa = aadef[actName];\r\n\t\t\taadef[actName] = Object.values(aa).map((_fdef, frame) => {\r\n\t\t\t\tlet fdef = new ActionAnimationFrameData();\r\n\t\t\t\tfdef._load(_fdef, actName, frame);\r\n\t\t\t\treturn fdef;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//action definition\r\n\t\tActionAnimation.Adef = aadef;\r\n\r\n\t\twindow.CharacterActionAnimationDefinition = aadef;\r\n\t}\r\n\r\n\tstatic get _base_path() {\r\n\t\treturn \"/Character/00002000\";\r\n\t}\r\n}\r\n/**\r\n * action definition\r\n * @type {{[action:string]:ActionAnimationFrameData[]}}\r\n */\r\nActionAnimation.Adef = null;\r\n\r\n","﻿\r\nimport { ItemCategoryInfo } from \"../../public/javascripts/resource.js\";\r\n\r\nimport { Sprite } from \"./Sprite\";\r\n\r\nimport { KeySlotData } from \"../ui/Basic/KeySlotData.js\";\r\n\r\n\r\n/** @type {$ItemRawData} */\r\nlet _loadedItem = {};\r\n\r\nwindow.$loadedItem = _loadedItem;\r\n\r\n\r\nclass $ItemRawData {\r\n\tconstructor() {\r\n\t}\r\n}\r\n\r\n\r\n//class ItemInfo {\r\n//\t/**\r\n//\t * @param {{}} _rawInfo\r\n//\t */\r\n//\tconstructor(_raw) {\r\n//\t\tthis.icon = new Sprite(_raw.icon);\r\n//\t\tthis.iconRaw = new Sprite(_raw.iconRaw);\r\n//\t}\r\n//\r\n//\t/**\r\n//\t * @param {string} itemId\r\n//\t * @returns {Promise<Sprite[]>}\r\n//\t */\r\n//\tload(itemId, loadSprite = false) {\r\n//\t\tlet url = ItemCategoryInfo.getIconUrl(itemId);\r\n//\t\tlet rawUrl = ItemCategoryInfo.getIconRawUrl(itemId);\r\n//\r\n//\t\tthis.icon._url = url;\r\n//\t\tthis.iconRaw._url = rawUrl;\r\n//\r\n//\t\t// 目前用不到 Sprite\r\n//\t\t// UI 只會用到 _raw, Image\r\n//\r\n//\t\tif (loadSprite) {\r\n//\t\t\t//manual load\r\n//\t\t\tthis.icon.__loadTexture();\r\n//\t\t\tthis.iconRaw.__loadTexture();\r\n//\r\n//\t\t\treturn Promise.all([this.icon.$promise, this.iconRaw.$promise]);\r\n//\t\t}\r\n//\t}\r\n//}\r\n\r\nexport class ItemBase {\r\n\t/**\r\n\t * @param {string} itemId\r\n\t * @param {{}} _raw\r\n\t */\r\n\tconstructor(itemId, _raw) {\r\n\t\t//this.assign(this, _raw);\r\n\r\n\t\t/**\r\n\t\t * @readonly\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis._raw = null;\r\n\r\n\t\t/**\r\n\t\t * @readonly\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.id = null;\r\n\r\n\t\tObject.defineProperties(this, {\r\n\t\t\t\"_raw\": {\r\n\t\t\t\tvalue: _raw\r\n\t\t\t},\r\n\t\t\t\"id\": {\r\n\t\t\t\tvalue: itemId\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!this._raw.info) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\r\n\t\tthis._raw.info.id = itemId;\r\n\t\tthis._raw.info.name = \"<loading>\";\r\n\t\tthis._raw.info.desc = \"<loading>\";\r\n\t\tthis._raw.info.__v = window.DATA_TAG + window.DATA_VERSION;\r\n\r\n\t\tlet isItem = ItemCategoryInfo.isItem(itemId);\r\n\r\n\t\tif (!isItem) {\r\n\t\t\tthis._raw.info.icon = {};\r\n\t\t\tthis._raw.info.iconRaw = {};\r\n\t\t}\r\n\r\n\t\tthis._raw.info.icon[\"\"] = ItemCategoryInfo.getIconUrl(itemId);\r\n\t\tthis._raw.info.iconRaw[\"\"] = ItemCategoryInfo.getIconRawUrl(itemId);\r\n\r\n\t\tif (isItem) {\r\n\t\t\tthis._load();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._raw.info.name = itemId;\r\n\t\t\tthis._raw.info.desc = \"<not item>\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * load name and desc\r\n\t */\r\n\tasync _load() {\r\n\t\tlet data = await ItemCategoryInfo.loadString(this.id);\r\n\r\n\t\tthis._raw.info.name = data.name;\r\n\t\tthis._raw.info.desc = data.desc;\r\n\t}\r\n}\r\n\r\nexport class ItemEquip extends ItemBase {\r\n}\r\nItemEquip.prototype.$test_proto_prop = 123;\r\n\r\nexport class ItemConsume extends ItemBase {\r\n}\r\n\r\nexport class ItemEtc extends ItemBase {\r\n}\r\n\r\nexport class ItemInstall extends ItemBase {\r\n}\r\n\r\nexport class ItemCash extends ItemBase {\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {string} itemId\r\n * @param {...Partial<T>} props\r\n * @returns {Promise<T>}\r\n */\r\nfunction _createItemSync(itemId, ...props) {\r\n\tlet itemPrototype = _loadedItem[itemId];\r\n\tif (!itemPrototype) {\r\n\t\tthrow new TypeError();\r\n\t}\r\n\r\n\t/** @type {string} - 1 digit */\r\n\tlet typeId = itemId[0];\r\n\r\n\t/** @type {ItemEquip | ItemConsume | ItemEtc | ItemInstall | ItemCash} */\r\n\tlet _itemType;\r\n\r\n\tswitch (typeId) {\r\n\t\tcase '0':\r\n\t\t\t_itemType = ItemEquip;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"未完成\");\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\tlet item = new _itemType(itemId, itemPrototype);\r\n\r\n\tif (props && props.length) {\r\n\t\tObject.assign(item, ...props);\r\n\t}\r\n\r\n\treturn item;\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {string} itemId\r\n * @param {...Partial<T>} props\r\n * @returns {Promise<T>}\r\n */\r\nexport async function $createItem(itemId, ...props) {\r\n\t/** @type {string} - 1 digit */\r\n\tlet typeId = itemId[0];\r\n\t/** @type {string} */\r\n\tlet url;\r\n\r\n\t/** @type {ItemEquip | ItemConsume | ItemEtc | ItemInstall | ItemCash} */\r\n\tlet _itemType;\r\n\r\n\tswitch (typeId) {\r\n\t\tcase '0':\r\n\t\t\t_itemType = ItemEquip;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"未完成\");\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\turl = ItemCategoryInfo.getDataPath(itemId);\r\n\r\n\tlet itemPrototype = await $get.data(url);// raw\r\n\tif (!itemPrototype) {\r\n\t\tconsole.warn(\"item not exist: \" + itemId);\r\n\t\treturn null;\r\n\t}\r\n\t_loadedItem[itemId] = itemPrototype;\r\n\r\n\tlet item = new _itemType(itemId, itemPrototype);\r\n\r\n\tif (props && props.length) {\r\n\t\tObject.assign(item, ...props);\r\n\t}\r\n\r\n\treturn item;\r\n}\r\n\r\n\r\nexport class ItemSlot extends KeySlotData {\r\n\t/**\r\n\t * @template T\r\n\t * @param {number} itemSlot\r\n\t * @param {number} itemSN\r\n\t * @param {T extends ItemBase ? T : never} itemData\r\n\t * @param {number} amount\r\n\t */\r\n\tconstructor(itemSlot, itemSN, itemData, amount) {\r\n\t\tsuper();\r\n\r\n\t\tthis.SN = itemSN;\r\n\t\tthis.slot = itemSlot;\r\n\t\tthis.amount = amount;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * @type {ItemEquip | ItemConsume | ItemEtc | ItemInstall | ItemCash} - item props\r\n\t\t */\r\n\t\tthis.data = itemData;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @template T\r\n\t * @param {number} itemSlot\r\n\t * @param {number} itemSN\r\n\t * @param {T extends ItemBase ? T : never} itemData\r\n\t * @param {number} amount\r\n\t */\r\n\tassign(itemSlot, itemSN, itemData, amount) {\r\n\t\tthis.SN = itemSN;\r\n\t\tthis.slot = itemSlot;\r\n\t\tthis.amount = amount;\r\n\r\n\t\tthis.data = itemData;\r\n\t}\r\n\r\n\t_clear() {\r\n\t\tthis.data = null;\r\n\t\tthis.amount = 0;\r\n\t}\r\n\r\n\tisEmpty() {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif ((!this.data && this.amount) || (this.data && !this.amount)) {\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn !this.data && !this.amount;\r\n\t}\r\n\r\n\tgetData() {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {ItemEquip | ItemConsume | ItemEtc | ItemInstall | ItemCash} data\r\n\t */\r\n\tsetData(data) {\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} text\r\n\t */\r\n\tstatic parse(text) {\r\n\t\tif (text.__proto__ == String.prototype) {\r\n\t\t\tlet iSlot = new ItemSlot();\r\n\t\t\tlet o = JSON.parse(text);\r\n\t\t\t//iSlot.SN = o.SN;\r\n\t\t\t//iSlot.slot = o.slot;\r\n\t\t\t//iSlot.amount = o.amount;\r\n\t\t\t//iSlot.itemId = o.itemId;\r\n\t\t\tObject.assign(iSlot, o);\r\n\t\t\treturn iSlot;\r\n\t\t}\r\n\t\tthrow new TypeError();\r\n\t}\r\n}\r\n","﻿\r\nclass CharacterBaseStat {\r\n\tconstructor() {\r\n\t\tthis.hp = 8855;\r\n\t\tthis.mp = 5246;\r\n\t\tthis.mhp = 28855;\r\n\t\tthis.mmp = 25246;\r\n\t\tthis.exp = 55;\r\n\r\n\t\tthis.str = 123;\r\n\t\tthis.luk = 4;\r\n\t\tthis.dex = 999;\r\n\t\tthis.int = 4;\r\n\t}\r\n}\r\n\r\nclass CharacterTemporaryStat {\r\n}\r\n\r\nconst symbol_job = Symbol(\"job\");\r\nconst symbol_onJobChange = Symbol(\"onJobChange\");\r\n\r\nclass CharacterStat extends CharacterBaseStat {\r\n\tconstructor(sceneChara) {\r\n\t\tsuper();\r\n\r\n\t\tthis._$sceneChara = sceneChara;\r\n\r\n\t\tthis.level = 150;\r\n\r\n\t\t//this._job = 3;\r\n\t\t//this._spec_job = 3;\r\n\r\n\t\t///** @type {number} - 最大屬性攻擊 */\r\n\t\t//this.currentMaxBaseDamage = 10000;\r\n\r\n\t\t///** @type {number} - 最小屬性攻擊 */\r\n\t\t//this.currentMinBaseDamage = 1000;\r\n\r\n\t\t/** @type {number} - 爆擊率 0~100 */\r\n\t\tthis.critRate = 50;\r\n\r\n\t\t/** @type {number} - 爆擊傷害 0~100 */\r\n\t\tthis.critDamage = 80;\r\n\r\n\t\t///** @type {number} - 最大爆擊傷害 0~100 */\r\n\t\t//this.maxCritDamage = 80;\r\n\r\n\t\t///** @type {number} - 最小爆擊傷害 0~100 */\r\n\t\t//this.minCritDamage = 40;\r\n\t}\r\n\r\n\t/** @type {number} */\r\n\tget job() {\r\n\t\treturn this[symbolStatJob];\r\n\t}\r\n\tset job(value) {\r\n\t\tthis[symbolStatJob] = value;\r\n\r\n\t\tconst onJobChange = this[symbol_onJobChange];\r\n\r\n\t\tif (_onJobChange) {\r\n\t\t\t_onJobChange()\r\n\t\t}\r\n\t}\r\n\r\n\t/** @param {function():void} cbfunc */\r\n\tonJobChange(cbfunc) {\r\n\t\tthis[symbol_onJobChange] = cbfunc;\r\n\t}\r\n\r\n\t_getTotalAttack() {\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/** @returns {number} - 最大屬性攻擊 */\r\n\tgetCurrentMaxBaseDamage() {\r\n\t\t//return this.currentMaxBaseDamage;\r\n\t\treturn 1.30 * (4 * this.dex + this.str) * (this._getTotalAttack() / 100);\r\n\t}\r\n\t/** @returns {number} - 最小屬性攻擊 */\r\n\tgetCurrentMinBaseDamage() {\r\n\t\t//return this.currentMinBaseDamage;\r\n\t\treturn 1.30 * (this.dex + this.str) * (this._getTotalAttack() / 100);\r\n\t}\r\n\t/** @returns {number} - 爆擊率 0~100 */\r\n\tgetCritRate() {\r\n\t\treturn this.critRate;\r\n\t}\r\n\t/** @returns {number} - 爆擊傷害 0~100 */\r\n\tgetCritDamage() {\r\n\t\treturn this.critDamage;\r\n\t}\r\n\t///** @returns {number} - 最大爆擊傷害 0~100 */\r\n\t//getMaxCritDamage() {\r\n\t//\treturn this._$maxCritDamage;\r\n\t//}\r\n\t///** @returns {number} - 最小爆擊傷害 0~100 */\r\n\t//getMinCritDamage() {\r\n\t//\treturn this._$minCritDamage;\r\n\t//}\r\n\r\n\tgetHpPercentS() {\r\n\t\treturn (this.hp * 100 / this.mhp).toFixed(0);\r\n\t}\r\n\tgetMpPercentS() {\r\n\t\treturn (this.mp * 100 / this.mmp).toFixed(0);\r\n\t}\r\n\tgetExpPercentS() {\r\n\t\treturn (this.exp * 100 / this.getNextExp()).toFixed(2);\r\n\t}\r\n\tgetNextExp() {\r\n\t\treturn 100;\r\n\t}\r\n}\r\n\r\n//?? packet\r\nclass $RemotePlayerData {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.id = undefined;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.equips_code = null;\r\n\t}\r\n}\r\n//?? packet\r\nclass $PlayerData extends $RemotePlayerData {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t/** @type {CharacterStat} */\r\n\t\tthis.stat = undefined;\r\n\t}\r\n\r\n\tgetRemoteData() {\r\n\t\treturn {\r\n\t\t\tid: this.id,\r\n\t\t\tmapId: this.mapId,\r\n\t\t\tequips_code: this.equips_code,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule.exports = {\r\n\tCharacterStat,\r\n\t$RemotePlayerData, $PlayerData,\r\n};\r\n","\r\nwindow.DownloadData = (function () {\r\n\tlet a = document.createElement(\"a\");\r\n\tdocument.body.appendChild(a);\r\n\ta.style = \"display: none\";\r\n\ta.target = \"_blank\";\r\n\treturn function (text, type, fileName) {\r\n\t\tlet blob = new Blob([text], { type: type || \"octet/stream\" });\r\n\t\tlet url = window.URL.createObjectURL(blob);\r\n\t\tif (fileName && fileName != \"\") {\r\n\t\t\ta.href = url;\r\n\t\t\ta.download = fileName;\r\n\t\t\ta.click();\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//a.href = url;\r\n\t\t\t//a.click();\r\n\t\t\twindow.open(url, '_blank');\r\n\t\t}\r\n\t\twindow.URL.revokeObjectURL(url);\r\n\t};\r\n}());\r\n\r\nwindow.SelectText = function (elem) {\r\n\tvar range, selection;\r\n\r\n\tif (document.body.createTextRange) {\r\n\t\trange = document.body.createTextRange();\r\n\t\trange.moveToElementText(elem);\r\n\t\trange.select();\r\n\t}\r\n\telse if (window.getSelection) {\r\n\t\tselection = window.getSelection();\r\n\t\trange = document.createRange();\r\n\t\trange.selectNodeContents(elem);\r\n\t\tselection.removeAllRanges();\r\n\t\tselection.addRange(range);\r\n\t}\r\n}\r\nwindow.copyToClipboard = function (text) {\r\n\tvar $temp = $(\"<input>\");\r\n\t$(\"body\").append($temp);\r\n\t$temp.val(text).select();\r\n\tdocument.execCommand(\"copy\");\r\n\t$temp.remove();\r\n}\r\n\r\n/**\r\n * disable textNode \"#text\"\r\n * @param {string} xml - xml\r\n * @param {string[]=} arrayTags - optional\r\n * @returns {object}\r\n */\r\nfunction parseXml(xml, arrayTags) {\r\n\tvar dom = null;\r\n\tif (window.DOMParser) {\r\n\t\tdom = (new DOMParser()).parseFromString(xml, \"text/xml\");\r\n\t}\r\n\telse if (window.ActiveXObject) {\r\n\t\tdom = new ActiveXObject('Microsoft.XMLDOM');\r\n\t\tdom.async = false;\r\n\t\tif (!dom.loadXML(xml)) {\r\n\t\t\tthrow dom.parseError.reason + \" \" + dom.parseError.srcText;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tthrow \"cannot parse xml string!\";\r\n\t}\r\n\r\n\tfunction isArray(o) {\r\n\t\treturn Object.prototype.toString.apply(o) === '[object Array]';\r\n\t}\r\n\r\n\tfunction parseNode(xmlNode, result) {\r\n\t\tif (xmlNode.nodeName == \"#text\" && xmlNode.nodeValue.trim() == \"\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar jsonNode = {};\r\n\t\tvar existing = result[xmlNode.nodeName];\r\n\t\tif (existing) {\r\n\t\t\tif (!isArray(existing)) {\r\n\t\t\t\tresult[xmlNode.nodeName] = [existing, jsonNode];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tresult[xmlNode.nodeName].push(jsonNode);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (arrayTags && arrayTags.indexOf(xmlNode.nodeName) != -1) {\r\n\t\t\t\tresult[xmlNode.nodeName] = [jsonNode];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tresult[xmlNode.nodeName] = jsonNode;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (xmlNode.attributes) {\r\n\t\t\tvar length = xmlNode.attributes.length;\r\n\t\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\t\tvar attribute = xmlNode.attributes[i];\r\n\t\t\t\tjsonNode[attribute.nodeName] = attribute.nodeValue;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar length = xmlNode.childNodes.length;\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tparseNode(xmlNode.childNodes[i], jsonNode);\r\n\t\t}\r\n\t}\r\n\r\n\tvar result = {};\r\n\tif (dom.childNodes.length) {\r\n\t\tparseNode(dom.childNodes[0], result);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n","﻿\r\nimport { Rectangle, Vec2 } from \"../math.js\";\r\n\r\nimport {\r\n\tb2Vec2,\r\n\tb2BodyType, b2BodyDef, b2FixtureDef,\r\n\tb2Body, b2Fixture,\r\n\tb2PolygonShape, b2CircleShape,\r\n\tb2Contact, b2Manifold,\r\n\tFixtureContactListener,\r\n} from \"./Physics.js\";\r\n\r\nimport { World } from \"./World.js\";\r\n\r\nimport { PPlayer } from \"./PPlayer.js\";\r\nimport { SceneSkill, SkillEffectAnimation } from \"../Skill.js\";\r\n\r\nimport { AttackInfo } from \"../../Common/AttackInfo.js\";\r\n\r\nimport { BaseSceneCharacter } from \"../SceneCharacter.js\";//?? SceneCharacter, SceneRemoteCharacter\r\nimport { FilterHelper } from \"./Filter.js\";\r\n\r\n\r\nexport class PBullet {\r\n\t/**\r\n\t * @param {PPlayer} owner\r\n\t * @param {SceneSkill} skill\r\n\t * @param {SkillEffectAnimation} bulletRenderer\r\n\t */\r\n\tconstructor(owner, skill, bulletRenderer) {\r\n\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\tif (!owner || !skill || !bulletRenderer) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\talert(\"new PBullet(owner, skill)\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis.owner = owner;\r\n\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.body = null;\r\n\r\n\t\t/** @type {SceneSkill} */\r\n\t\tthis.skill = skill;\r\n\r\n\t\t/** @type {SkillEffectAnimation} */\r\n\t\tthis.bulletRenderer = bulletRenderer;\r\n\r\n\t\t/** @type {BaseBulletMoveFunc} */\r\n\t\tthis.bulletMoveFunc = null;\r\n\r\n\t\t/** @type {-1|1} */\r\n\t\tthis.front = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Partial<FixtureContactListener>=} listener\r\n\t */\r\n\t_create(listener) {\r\n\t\tconst world = this.owner.body.GetWorld();\r\n\r\n\t\tlet bdef = new b2BodyDef();\r\n\t\tlet fdef = new b2FixtureDef();\r\n\t\tlet shape = new b2PolygonShape();\r\n\r\n\t\tconst cx = (this.bulletRenderer.textures[0]._raw.__w * 0.5) / $gv.CANVAS_SCALE;\r\n\t\tconst cy = (this.bulletRenderer.textures[0]._raw.__h * 0.5) / $gv.CANVAS_SCALE;\r\n\r\n\t\tlet { x, y } = this.owner.body.GetWorldCenter();\r\n\t\tconst front = this.owner.state.front;\r\n\r\n\t\t//TODO: set bullet position, front, angle\r\n\r\n\t\tbdef.type = b2BodyType.b2_kinematicBody;\r\n\t\tif (front > 0) {\r\n\t\t\tbdef.position.Set(x + cx, y);\r\n\t\t}\r\n\t\telse if (front < 0) {\r\n\t\t\tbdef.position.Set(x - cx, y);\r\n\t\t}\r\n\t\telse {//?? center position\r\n\t\t\tbdef.position.Set(x, y);\r\n\t\t}\r\n\t\tbdef.angle = 0;//???\r\n\t\tbdef.gravityScale = 0;\r\n\t\tbdef.allowSleep = false;\r\n\t\tbdef.bullet = true;\r\n\t\tbdef.fixedRotation = true;\r\n\t\tbdef.userData = this;\r\n\r\n\t\tthis.body = world.CreateBody(bdef);\r\n\r\n\t\tshape.SetAsBox(cx, cy);//renderer origin is center\r\n\t\t\r\n\t\t//TODO: implement filter: player_bullet\r\n\t\tfdef.shape = shape;\r\n\t\tfdef.filter.Copy(FilterHelper.get(\"bullet\"));\r\n\t\t//fdef.filter.Copy(FilterHelper.get(\"pvp_bullet\"));\r\n\t\t\r\n\t\tfdef.userData = this;\r\n\r\n\t\tlet fixture = this.body.CreateFixture(fdef);\r\n\r\n\t\tif (listener) {\r\n\t\t\tObject.keys(FixtureContactListener.prototype).forEach(key => fixture[key] = listener[key]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfixture.preSolve = bullet_default_preSolve;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tgetPosition() {\r\n\t\treturn this.body.GetPosition();\r\n\t}\r\n\r\n\t/**\r\n\t * default is horizontal move front\r\n\t * @param {BaseBulletMoveFunc=} bulletMoveFunc\r\n\t * @param {number=} linearVelocityX - unit is meter\r\n\t * @param {number=} linearVelocityY - unit is meter\r\n\t */\r\n\tlaunch(bulletMoveFunc, linearVelocityX, linearVelocityY) {\r\n\t\tif (bulletMoveFunc) {\r\n\t\t\tdebugger;\r\n\r\n\t\t\tthis.bulletMoveFunc = bulletMoveFunc;\r\n\t\t\t//TODO: this.bulletMoveFunc.Step\r\n\t\t\t//TODO: this.bulletMoveFunc.AfterStep\r\n\r\n\t\t\tthis.body.addStep(bulletMoveFunc.Step.bind(bulletMoveFunc, this));\r\n\t\t\tthis.body.addAfterStep(bulletMoveFunc.AfterStep.bind(bulletMoveFunc, this));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.body.m_linearVelocity.Set(linearVelocityX, linearVelocityY);\r\n\r\n\t\t\t//TODO: time to live, range limit\r\n\t\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\t\tthis.body.AfterStep = () => {\r\n\t\t\t\t\tthis.$tick = (this.$tick | 0) + 1;\r\n\t\t\t\t\tif (this.$tick > (window.$FIRE_BULLET_TIME_TO_LIVE || 60)) {\r\n\t\t\t\t\t\tthis.bulletRenderer.destroy();\r\n\t\t\t\t\t\tthis.destroy();\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tif (this.body) {\r\n\t\t\tthis.body.m_world.DestroyBody(this.body);\r\n\t\t\tthis.body = null;\r\n\r\n\t\t\t//this.bulletRenderer.destroy();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Manifold} oldManifold\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nfunction bullet_default_preSolve(contact, oldManifold, fa, fb) {\r\n\t/** @type {PPlayer} */\r\n\tconst targetPlayer = fb.m_userData;\r\n\tif (!targetPlayer) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/** @type {BaseSceneCharacter} */\r\n\tconst targetChara = targetPlayer.chara;//not implement yet\r\n\tif (!targetChara) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/** @type {PBullet} */\r\n\tconst that = fa.m_userData;\r\n\r\n\t/** @type {PPlayer} */\r\n\tconst ownerPlayer = that.owner;\r\n\t\r\n\t//not from self\r\n\tif (ownerPlayer == targetPlayer) {\r\n\t\treturn;\r\n\t}\r\n\tthat.skill.addAttack(targetChara);\r\n\r\n\tcontact.SetEnabled(false);\r\n\r\n\tthat.bulletRenderer.destroy();\r\n\tthat.destroy();\r\n}\r\n\r\n\r\n/**\r\n * 子彈的移動方式\r\n */\r\nexport class BaseBulletMoveFunc {\r\n\tconstructor() {\r\n\t}\r\n\r\n\t//TODO: base bullet move function\r\n\r\n\t/**\r\n\t * @param {PBullet} bullet\r\n\t */\r\n\tinit(bullet) {\r\n\t}\r\n\r\n\t/**\r\n\t * before update\r\n\t * @param {PBullet} bullet\r\n\t */\r\n\tStep(bullet) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PBullet} bullet\r\n\t */\r\n\tAfterStep(bullet) {\r\n\t}\r\n}\r\n\r\n\r\n\t///**\r\n\t// * b2Vec2(meter) to Vec2 (pixel)\r\n\t// * @returns {Vec2}\r\n\t// */\r\n\t//getPosition() { }","﻿\r\nimport { IRenderer } from \"./IRenderer.js\";\r\nimport { Sprite } from \"./Sprite.js\";\r\nimport { Animation } from \"./Animation\";\r\nimport { SceneObject } from \"./SceneObject\";\r\nimport { ActionAnimation } from './Renderer/CharacterActionAnimation.js';\r\nimport { CharacterAnimationBase } from \"./Renderer/CharacterRenderer.js\";\r\nimport { PPlayer } from \"./Physics/PPlayer.js\";\r\nimport { SceneCharacter } from \"./SceneCharacter.js\";\r\nimport { World } from \"./Physics/World.js\";\r\nimport { PBullet } from \"./Physics/PBullet.js\";\r\nimport { AttackInfo, AttackPair } from \"../Common/AttackInfo.js\";\r\n\r\nimport { Vec2 } from \"./math.js\";//dev\r\n\r\n\r\n// skill timeline\r\n//\r\n// 以 ActionAnimation 控制流程\r\n// skill 必須要有 ActionAnimation 才能正確運作(開始、結束)\r\n//\r\n// # normal skill\r\n// -delay1        | delay2\r\n// _init          | update\r\n// defaultAction  | wait current_action end\r\n//                | SkillEffect\r\n//\r\n// # rapid skill\r\n// delay1      | delay2         | delay3\r\n// _init       | control/update | update\r\n// prepare     | loop           | end\r\n// SkillEffect | SkillEffect    | SkillEffect\r\n\r\n\r\n/**\r\n * 23001002(藝術跳躍)\r\n * 24001002(幻影瞬步)\r\n */\r\nlet jump2_info = {\r\n\ttype: 40,\r\n\tcasterMove: 1,\r\n\tavaliableInJumpingState: 1\r\n};\r\n\r\n/**\r\n * 23121000(伊修塔爾之環): localhost/xml2/Skill/2312/skill/23121000\r\n */\r\nlet rapid_attack_info = {\r\n\ttype: 2,\r\n\tknockbackLimit: 80,\r\n\trapidAttack: 1\r\n};\r\n\r\n\r\nclass _SkillInfo {\r\n\tconstructor() {\r\n\t\tthis.type = 40;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.casterMove = 1;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.avaliableInJumpingState = 1;\r\n\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.areaAttack = 1;\r\n\r\n\t\tthis.knockbackLimit = 80;\r\n\r\n\t\t/** @type {boolean} */\r\n\t\tthis.rapidAttack = 1;\r\n\t}\r\n}\r\nclass _SkillCommonData {\r\n\tconstructor() {\r\n\t\t/** @type {Vec2} */\r\n\t\tthis.lt = null;//new Vec2(-200, -113)\r\n\r\n\t\t/** @type {Vec2} */\r\n\t\tthis.rb = null;//new Vec2(-10, 0)\r\n\r\n\t\t/** @type {string} - code */\r\n\t\tthis.mpCon = \"3 + d(x / 6)\";\r\n\r\n\t\t/** @type {string} - code */\r\n\t\tthis.damage = \"175 + 8 * x\";\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.mobCount = 6;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.attackCount = 1;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.maxLevel = 20;\r\n\t}\r\n}\r\nclass _SkillData {\r\n\tconstructor() {\r\n\t\t/** @type {{ [actType: number]: string }} */\r\n\t\tthis.action = {\r\n\t\t\t\"0\": \"dualVulcanLoop\"\r\n\t\t};\r\n\r\n\t\t/** @type {_SkillCommonData} */\r\n\t\tthis.common = null;\r\n\r\n\t\t/** @type {_SkillInfo} */\r\n\t\tthis.info = null;\r\n\r\n\t\t/** @type {SkillEffectAnimation} - ? type */\r\n\t\tthis.effect = null;\r\n\r\n\t\t/** @type {SkillEffectAnimation} - ? type */\r\n\t\tthis.prepare = null;\r\n\r\n\t\t/** @type {SkillEffectAnimation} - ? type */\r\n\t\tthis.keydown = null;\r\n\r\n\t\t/** @type {SkillEffectAnimation} - ? type */\r\n\t\tthis.keydown0 = null;\r\n\r\n\t\t/** @type {SkillEffectAnimation} - ? type */\r\n\t\tthis.keydownend = null;\r\n\r\n\t\t/** @type {{[skill_id:string]:{[type:number]:number}}} */\r\n\t\tthis.finalAttack = {\r\n\t\t\t\"23100006\": {\r\n\t\t\t\t\"0\": 52\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.masterLevel = 10;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.combatOrders = 1;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.weapon = 52;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.subWeapon = 35;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.psd = 1;\r\n\r\n\t\t/** @type {number} - ?? */\r\n\t\tthis.psdSkill = {\r\n\t\t\t23111002: {}\r\n\t\t};\r\n\r\n\t\t/** @type {{[skill_id:string]:number}} */\r\n\t\tthis.req = {\r\n\t\t\t\"23111000\": 20\r\n\t\t};\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.canJobRidingUse = 1;\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport class SkillEffectAnimation extends Animation {\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\r\n\t\t/** @type {{x: number, y: number, front:-1|1}} */\r\n\t\tthis.targetRenderer = null;\r\n\r\n\t\t/** @type {PBullet} */\r\n\t\tthis.$physics = null;\r\n\r\n\t\tthis.is_loop = false;\r\n\r\n\t\tthis.opacity = 1;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string|number} type - ??\r\n\t * @param {string} url - ??\r\n\t * @param {object} raw - ??\r\n\t */\r\n\tload(type) {\r\n\t\tif (!this._raw) {\r\n\t\t\tthrow new Error(\"Not implement. skill data is loaded\");\r\n\t\t\tthis._url = [this._url, type].join(\"/\");\r\n\t\t\treturn super.load();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (Array.isArray(this._raw[0])) {\r\n\t\t\t\t/** @type {Sprite[]} */\r\n\t\t\t\tthis.textures = this._raw[type];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/** @type {Sprite[]} */\r\n\t\t\t\tthis.textures = this._raw;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tsuper.destroy();\r\n\r\n\t\tthis.$physics = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.$physics) {\r\n\t\t\tthis.update_p(stamp);\r\n\t\t}\r\n\t\telse if (this.targetRenderer) {\r\n\t\t\tthis.update_r(stamp);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\tif (this.$physics) {\r\n\t\t\tthis.render_p(renderer);\r\n\t\t}\r\n\t\telse if (this.targetRenderer) {\r\n\t\t\tthis.render_r(renderer);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate_p(stamp) {\r\n\t\tsuper.update(stamp);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender_p(renderer) {\r\n\t\tconst pos = this.$physics.getPosition();\r\n\t\tconst front = this.$physics.front;\r\n\t\tconst x = pos.x * $gv.CANVAS_SCALE;\r\n\t\tconst y = pos.y * $gv.CANVAS_SCALE;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\t//renderer.pushGlobalAlpha();\r\n\r\n\t\trenderer.globalAlpha = this.opacity;\r\n\t\tthis.draw(renderer, x, y, 0, front > 0);\r\n\r\n\t\t//renderer.popGlobalAlpha();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate_r(stamp) {\r\n\t\tstamp *= this.targetRenderer.getSpeed();\r\n\t\t\r\n\t\tsuper.update(stamp);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender_r(renderer) {\r\n\t\tthis.x = this.targetRenderer.x + this.targetRenderer.tx;//TODO: crr.tx and crr.ty ??\r\n\t\tthis.y = this.targetRenderer.y + this.targetRenderer.ty;\r\n\r\n\t\t//renderer.pushGlobalAlpha();\r\n\r\n\t\trenderer.globalAlpha = this.opacity;\r\n\t\tthis.draw(renderer, this.x, this.y, 0, this.targetRenderer.front > 0);\r\n\r\n\t\t//renderer.popGlobalAlpha();\r\n\t}\r\n}\r\n\r\nclass SkillHitAnimation extends SkillEffectAnimation {\r\n\tconstructor(raw, url) {\r\n\t\tsuper(raw, url);\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * TODO: SceneObject 取代 EffectManager\r\n */\r\nexport class EffectManager {\r\n\tconstructor() {\r\n\t}\r\n\t\r\n\tstatic AddEffect(effect) {\r\n\t\teffect.update(0);//init effect position\r\n\t\t\r\n\t\tEffectManager._effects.push(effect);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tstatic Update(stamp) {\r\n\t\tconst effects = EffectManager._effects;\r\n\t\t\r\n\t\tEffectManager._effects = effects.filter(function (eff) {\r\n\t\t\tif (!eff.isEnd()) {\r\n\t\t\t\teff.update(stamp);\r\n\t\t\t}\r\n\t\t\tif (eff.isEnd()) {\r\n\t\t\t\teff.destroy();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\tstatic Render(renderer) {\r\n\t\trenderer.pushGlobalAlpha();\r\n\r\n\t\tconst effects = EffectManager._effects;\r\n\t\tfor (let i = 0; i < effects.length; ++i) {\r\n\t\t\teffects[i].render(renderer);\r\n\t\t}\r\n\r\n\t\trenderer.popGlobalAlpha();\r\n\t}\r\n}\r\n/** @type {Animation[]} */\r\nEffectManager._effects = [];\r\n\r\nwindow.$EffectManager = EffectManager;\r\n\r\n\r\n\r\n/**\r\n * \r\n */\r\nclass SkillAnimationBase {\r\n\t///**\r\n\t// * @param {object} raw\r\n\t// * @param {string} url\r\n\t// */\r\n\tconstructor(/*raw, url*/) {\r\n\t\t//this._raw = raw;\r\n\r\n\t\t/**\r\n\t\t * @type {_SkillData}\r\n\t\t */\r\n\t\tthis.data = null;\r\n\t\t\r\n\t\t/** @type {string} */\r\n\t\tthis.url = null;\r\n\t\t\r\n\t\t//this.textures = {\r\n\t\t//\teffect: [],\r\n\t\t//\thit: {\r\n\t\t//\t\t\"0\": []\r\n\t\t//\t},\r\n\t\t//}\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.skillId = null;\r\n\r\n\t\t/**\r\n\t\t * actType = GetJobInfo(chara).avaliableWeapon.indexOf(ItemInfo.get(chara.weapon).type)\r\n\t\t */\r\n\t\tthis.actType = 0;\r\n\t\t\r\n\t\t/** @type {SceneObject} */\r\n\t\tthis._owner = null;\r\n\r\n\t\t/** @type {CharacterAnimationBase} */\r\n\t\tthis._crr = null;\r\n\r\n\t\t/** @type {ActionAnimation} */\r\n\t\tthis._actani = null;\r\n\t\t\r\n\t\t/** @type {number} - skill type */\r\n\t\tthis.type = 0;\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis._$is_end = false;\r\n\t\t\r\n\t\t/** @type {boolean} */\r\n\t\tthis.is_launch = false;\r\n\t\t\r\n\t\t//if (raw && url) {\r\n\t\t//\tthis.__load(url, raw, null);\r\n\t\t//}\r\n\r\n\t\t/** @type {\"prepare\"|\"keydown\"|\"keydownend\"} */\r\n\t\tthis.state = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\t_init() {\r\n\t\tthis._applyDefaultAction();\r\n\t}\r\n\r\n\tget is_end() {\r\n\t\treturn this._$is_end;\r\n\t}\r\n\tset is_end(value) {\r\n\t\tthis._$is_end = value;\r\n\t\tif (value) {\r\n\t\t\tthis.owner.$physics.state.invokeSkill = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @type {SceneObject} */\r\n\tget owner() {\r\n\t\treturn this._owner;\r\n\t}\r\n\tset owner(value) {\r\n\t\tif (!value) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._owner = value;\r\n\r\n\t\tthis._crr = value.renderer;\r\n\t\tif (!this._crr) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//const chara = value; //??\r\n\t\t//this.actType = GetJobInfo(chara).avaliableWeapon.indexOf(ItemInfo.get(chara.weapon).type)\r\n\r\n\t\tthis._actani = this._crr.actani;\r\n\t\tif (!this._actani) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @alias owner\r\n\t * @returns {SceneCharacter}\r\n\t */\r\n\tget _owner_player() {\r\n\t\treturn this._owner;\r\n\t}\r\n\tset _owner_player(value) {\r\n\t\tthis.owner = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} action\r\n\t */\r\n\t_applyAction(action) {\r\n\t\tif (this._actani && this.data) {\r\n\t\t\tconst actions = this.data.action;\r\n\t\t\tthis._actani.reload(action);//action ? 0, 1\r\n\t\t\tthis._actani.loop = false;\r\n\r\n\t\t\tthis.owner.$physics.state.invokeSkill = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/** skill default action */\r\n\t_applyDefaultAction() {\r\n\t\tconst actions = this.data.action;\r\n\t\tthis._applyAction(actions[this.actType]);\r\n\t}\r\n\t\r\n\t/**\r\n\t * download data, load texture\r\n\t * @param {string} skillId\r\n\t */\r\n\tasync _load(skillId) {\r\n\t\tconst jobID = /^(\\d+)\\d{4}$/.exec(skillId)[1];\r\n\r\n\t\tconst url = `${this.constructor._base_path}/${jobID}/skill/${skillId}`;\r\n\r\n\t\tconst raw = await $get.data(url);\r\n\t\tif (!raw) {\r\n\t\t\talert(\"SkillAnimationBase\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.data = raw;\r\n\t\t\r\n\t\tthis.url = url;\r\n\r\n\t\tthis.skillId = skillId;\r\n\r\n\t\tthis.type = this.data.info ? (this.data.info.type || 0) : 0;//const\r\n\r\n\t\tthis.__proto__ = this._decide_type().prototype;\r\n\t\t{\r\n\t\t\tthis._loadTexture(raw);\r\n\r\n\t\t\tthis._init();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * copy\r\n\t * @param {SkillAnimationBase} skill_anim\r\n\t * @param {SkillAnimationBase} proto - skill prototype\r\n\t */\r\n\t_assign(skill_anim, proto) {\r\n\t\tthis.data = skill_anim.data;\r\n\t\t\r\n\t\tthis.url = skill_anim.url;\r\n\r\n\t\tthis.skillId = skill_anim.skillId;\r\n\t\t\r\n\t\tthis.type = skill_anim.type;//const\r\n\r\n\t\tthis.__proto__ = this._decide_type().prototype;\r\n\t\t{\r\n\t\t\tthis._init();\r\n\t\t}\r\n\t}\r\n\t\r\n\t_loadTexture() {\r\n\t\tfor (let effName of this._effect_names) {\r\n\t\t\tlet eff = this.data[effName];\r\n\t\t\tif (eff) {\r\n\t\t\t\tthis.data[effName] = arrNd_texture(eff, [this.url, effName].join(\"/\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction arrNd_texture(arrNd/*, url*/) {\r\n\t\t\tif (\"0\" in arrNd[0]) {\r\n\t\t\t\treturn arr2d_texture(arrNd/*, url*/);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn arr1d_texture(arrNd/*, url*/);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction arr1d_texture(arr1d/*, url*/) {\r\n\t\t\tlet effect = [];\r\n\t\t\tfor (let  i = 0; i in arr1d; ++i) {\r\n\t\t\t\tlet data = arr1d[i];\r\n\t\t\t\tlet tex = new Sprite(data);\r\n\t\t\t\t//tex._url = `${url}/${i}`;\r\n\t\t\t\teffect[i] = tex;\r\n\t\t\t}\r\n\t\t\teffect.action = arr1d.action;\r\n\t\t\treturn effect;\r\n\t\t}\r\n\t\tfunction arr2d_texture(arr2d/*, url*/) {\r\n\t\t\tlet hit = [];\r\n\t\t\tfor (let i = 0; i in arr2d; ++i) {\r\n\t\t\t\t//const url_i = `${url}/${i}`;\r\n\t\t\t\tlet group = arr2d[i];\r\n\t\t\t\thit[i] = [];\r\n\t\t\t\tfor (let  j = 0; j in group; ++j) {\r\n\t\t\t\t\tlet data = group[j];\r\n\t\t\t\t\tlet tex = new Sprite(data);\r\n\t\t\t\t\t//tex._url = `${url_i}/${j}`;\r\n\t\t\t\t\thit[i][j] = tex;\r\n\t\t\t\t}\r\n\t\t\t\thit[i].action = group.action;\r\n\t\t\t}\r\n\t\t\treturn hit;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * reset and restart\r\n\t */\r\n\treset() {\r\n\t\tthis._actani.reset();\r\n\t\tthis.is_launch = false;\r\n\t}\r\n\r\n\t/**\r\n\t * onKeydown + onKeyup\r\n\t * TODO: 可控制方向的技能\r\n\t * @virtual\r\n\t * @param {Partial<_ArrowKey>} inputKey - keyDown tick counter\r\n\t * @param {number} keyDown - keyDown tick counter\r\n\t * @param {number} keyUp - is keyUp\r\n\t * @returns {boolean} - cancel player default control\r\n\t */\r\n\tcontrol(inputKey, keyDown, keyUp) {\r\n\t}\r\n\t\r\n\t/**\r\n\t * TODO: 自動攻擊、被動技能、debuf\r\n\t * @virtual\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tif (this.$promise) {\r\n\t\t\t//Now loading...\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.is_launch = true;\r\n\t\t\tthis.is_end = true;\r\n\t\t\tconsole.warn(\"Skill not implement: \" + this.skillId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * no timer\r\n\t * @param {number} stamp\r\n\t */\r\n\t_default_update(stamp) {\r\n\t\t//stamp *= this.targetRenderer.getSpeed();\r\n\r\n\t\tif (this._actani) {\r\n\t\t\tif (this._actani.delay) {// not start yet\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if (!this.is_launch) {\r\n\t\t\t\tthis._addEffect();\r\n\r\n\t\t\t\tthis.is_launch = true;\r\n\t\t\t}\r\n\t\t\tif (this._actani.isEnd()) {\r\n\t\t\t\tthis.is_end = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.is_launch = true;\r\n\t\t\tthis.is_end = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tisEnd() {\r\n\t\treturn this.is_end;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SceneObject} targetObject\r\n\t */\r\n\taddAttack(targetObject) {\r\n\t\t/** @type {SceneCharacter} */\r\n\t\tconst owner = this._owner;\r\n\r\n\t\tlet attack = new AttackPair();\r\n\r\n\t\t//attack.objectid = targetObject.$objectid;\r\n\t\tattack.setTargetObject(targetObject);\r\n\r\n\t\tattack.allDamage.length = this.data.common.attackCount;\r\n\r\n\t\t////apply damage\r\n\t\t//for (let i = 0; i < attack.allDamage.length; ++i) {\r\n\t\t//\ttargetObject.damage(owner, 123);\r\n\t\t//}\r\n\t\t////\r\n\t\t//targetObject.knockback(chara, 16, 16);\r\n\r\n\t\tthis.attackInfo.allAttack.push(attack);\r\n\t}\r\n\r\n\tcreateBullet(effectName) {\r\n\t\tlet eff, bullet;\r\n\r\n\t\t//bullet renderer\r\n\t\t{\r\n\t\t\teff = this._addEffect(effectName);\r\n\r\n\t\t\teff.is_loop = true;\r\n\t\t}\r\n\r\n\t\t//bullet physics\r\n\t\t{\r\n\t\t\tbullet = new PBullet(this.owner.$physics, this, eff);\r\n\r\n\t\t\tbullet._create();\r\n\r\n\t\t\tbullet.launch(null, this.owner.$physics.state.front * (window.$BULLET_SPEED | 32), 0);\r\n\t\t}\r\n\r\n\t\t//link renderer and physics\r\n\t\teff.$physics = bullet;\r\n\r\n\t\treturn bullet;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {boolean} [isBullet=false]\r\n\t */\r\n\t_addDefaultEffect(isBullet) {\r\n\t\tthis._applyDefaultAction();\r\n\t\tthis._addEffect(\"effect\", isBullet);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} [effectName=\"effect\"]\r\n\t * @param {boolean} [isBullet=false]\r\n\t */\r\n\t_addEffect(effectName = \"effect\", isBullet) {\r\n\t\tlet action = this.data[effectName].action;\r\n\t\tif (action) {\r\n\t\t\tthis._applyAction(action);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst type = this.actType;\r\n\t\t\tlet effect = new SkillEffectAnimation(this.data[effectName], [this.url, effectName].join(\"/\"));\r\n\r\n\t\t\tif (isBullet) {\r\n\t\t\t\t//...??\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\teffect.targetRenderer = this._crr;\r\n\t\t\t}\r\n\t\t\teffect.load(type);\r\n\r\n\t\t\tEffectManager.AddEffect(effect);\r\n\r\n\t\t\treturn effect;\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} x\r\n\t * @param {number} y\r\n\t * @param {{x: number, y: number}=} target\r\n\t * @param {number=} type\r\n\t */\r\n\t_addHitEffect(x, y, target, type) {\r\n\t\tlet hit = new SkillHitAnimation();\r\n\t\t\r\n\t\thit.target = target;\r\n\t\t\r\n\t\thit.load(this.url + \"/hit/\" + type, this.data.hit, type);\r\n\t\t\r\n\t\tEffectManager.AddEffect(hit);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @returns {function():(T extends SkillAnimationBase)}\r\n\t */\r\n\t_decide_type() {\r\n\t\tconst info = this.data.info;\r\n\r\n\t\t//TODO: register skill\r\n\r\n\t\tswitch (this.type) {\r\n\t\t\tcase 1:\r\n\t\t\tcase 2:\r\n\t\t\t\tif (info.rapidAttack) {\r\n\t\t\t\t\treturn _SkillAnimation_RapidAttack;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 40:\r\n\t\t\t\tif (info.casterMove && info.avaliableInJumpingState) {\r\n\t\t\t\t\treturn _SkillAnimation_N_Jump;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn _SkillAnimation_Default;\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\tget _effect_names() {\r\n\t\treturn [\"effect\", \"hit\"];\r\n\t}\r\n\t\r\n\tstatic get _base_path() {\r\n\t\treturn \"/Skill\";\r\n\t}\r\n}\r\n\r\nclass _SkillAnimation_Default extends SkillAnimationBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthrow new TypeError(\"constructor\");\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_init() {\r\n\t\tthis._applyDefaultAction();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis._default_update(stamp);\r\n\t}\r\n}\r\n\r\nclass _SkillAnimation_RapidAttack extends SkillAnimationBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthrow new TypeError(\"constructor\");\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_init() {\r\n\t\tthis._applyDefaultAction();\r\n\r\n\t\tthis.state = \"prepare\";\r\n\t\tthis._state_func = this._prepare;\r\n\t\tthis.current_effect = this._addEffect(this.state);\r\n\r\n\t\t/** animation */\r\n\t\tthis.time = 0;\r\n\r\n\t\t/** fire bullet */\r\n\t\tthis.tick = 0;\r\n\r\n\t\tthis.fadeTotalTime = this._actani.getTotalTime();\r\n\r\n\t\tthis._crr.fixed_speed = true;\r\n\t}\r\n\r\n\t_prepare() {\r\n\t\tthis.current_effect.opacity = this.time / this.fadeTotalTime;\r\n\t\tif (this.current_effect.opacity > 1) {\r\n\t\t\tthis.current_effect.opacity = 1;\r\n\t\t}\r\n\r\n\t\tif (this._actani.isEnd()) {\r\n\t\t\tthis.current_effect.opacity = 0;//prepare\r\n\t\t\tthis.current_effect.destroy();\r\n\r\n\t\t\tthis.state = \"keydown\";\r\n\t\t\tthis._state_func = this._keydown;\r\n\t\t\tthis.current_effect = this._addEffect(this.state);\r\n\r\n\t\t\tthis._actani.loop = true;\r\n\t\t\tthis.current_effect.is_loop = true;\r\n\r\n\t\t\tthis.time = 0;//reset\r\n\t\t}\r\n\t}\r\n\t_keydown() {\r\n\t\tif (this._actani.isEnd()) {\r\n\t\t\t//this.current_effect.reset();\r\n\t\t\t//this.current_effect.opacity = 1;\r\n\t\t\t//this._actani.reset();\r\n\t\t\tthis.time = 0;//reset\r\n\t\t}\r\n\t}\r\n\t_keydownend() {\r\n\t\tthis.current_effect.opacity = 1 - (this.time / this.fadeTotalTime);\r\n\t\tif (this.current_effect.opacity < 0) {\r\n\t\t\tthis.current_effect.opacity = 0;\r\n\t\t}\r\n\r\n\t\tif (this._actani.isEnd()) {\r\n\t\t\tthis.current_effect.opacity = 0;//keydownend\r\n\t\t\tthis.current_effect.destroy();\r\n\r\n\t\t\tthis._crr.fixed_speed = false;\r\n\t\t\tthis.is_launch = true;\r\n\t\t\tthis.is_end = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {Partial<_ArrowKey>} inputKey - keyDown tick counter\r\n\t * @param {number} keyDown - keyDown tick counter\r\n\t * @param {number} keyUp - is keyUp\r\n\t * @returns {boolean} - cancel player default control\r\n\t */\r\n\tcontrol(inputKey, keyDown, keyUp) {\r\n\t\tswitch (this.state) {\r\n\t\t\tcase \"prepare\":\r\n\t\t\tcase \"keydown\":\r\n\t\t\t\tif (!keyDown || keyUp) {\r\n\t\t\t\t\tthis.current_effect.opacity = 0;//keydown\r\n\t\t\t\t\tthis.current_effect.destroy();\r\n\r\n\t\t\t\t\tthis.state = \"keydownend\";\r\n\t\t\t\t\tthis._state_func = this._keydownend;\r\n\t\t\t\t\tthis.current_effect = this._addEffect(this.state);\r\n\t\t\t\t\tthis.fadeTotalTime = this._actani.getTotalTime();\r\n\r\n\t\t\t\t\tthis._actani.loop = false;\r\n\t\t\t\t\tthis.time = 0;//reset\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\t//keydown(first step): prepare\r\n\t\t//keydown(second step): keydown + keydown0\r\n\t\t//keyup: keydownend\r\n\r\n\t\tstamp *= this._crr.getSpeed();\r\n\t\tthis.time += stamp;\r\n\r\n\t\t++this.tick;\r\n\r\n\t\tthis._state_func();\r\n\r\n\t\tif (this.tick % (window.$FIRE_BULLET_T | 3) == (window.$FIRE_BULLET_T2 | 2) && this.state != \"keydownend\") {\r\n\t\t\tthis.createBullet(\"ball\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @virtual\r\n\t */\r\n\tget _effect_names() {\r\n\t\treturn [\"prepare\", \"keydown\", \"keydownend\", \"hit\", \"ball\"];\r\n\t}\r\n}\r\n\r\nclass _SkillAnimation_N_Jump extends SkillAnimationBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthrow new TypeError(\"constructor\");\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_init() {\r\n\t\tthis.jump_max_count = (window.jump_max_count || 2);\r\n\t}\r\n\r\n\tjump2() {\r\n\t\tconst crr = this._crr;\r\n\t\t//const body = this._owner_player.$physics.body;\r\n\t\tconst foot_walk = this._owner_player.$physics.foot_walk;\r\n\r\n\t\tconst pos = this._owner_player.$physics.getPosition();\r\n\t\tconsole.log(\"pos: { x: %o, y: %o }\", pos.x, pos.y);\r\n\r\n\t\t//body.ConstantVelocityWorldCenter2((window.$NJmpX || 40) * crr.front, (window.$NJmpY || 0));\r\n\t\tfoot_walk.ConstantVelocityWorldCenter2((window.$NJmpX || 40) * crr.front, (window.$NJmpY || 0));\r\n\r\n\t\tthis._addDefaultEffect();\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {Partial<_ArrowKey>} inputKey - keyDown tick counter\r\n\t * @param {number} keyDown - keyDown tick counter\r\n\t * @param {number} keyUp - is keyUp\r\n\t * @returns {boolean} - cancel player default control\r\n\t */\r\n\tcontrol(inputKey, keyDown, keyUp) {\r\n\t\tif (!this._owner) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst $physics = this._owner.$physics;\r\n\r\n\t\tif ($physics.state.jump_count == 0) {\r\n\t\t\tif (keyDown == 1 && $physics.state.jump) {\r\n\t\t\t\tthis.jump2();\r\n\t\t\t\t$physics.state.jump_count += 2;\r\n\t\t\t}\r\n\t\t\telse {//normal jump\r\n\t\t\t\tinputKey.jump = inputKey.jump ? Math.max(keyDown, inputKey.jump) : keyDown;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ($physics.state.jump) {\r\n\t\t\tif (keyDown == 1 && $physics.state.jump_count < this.jump_max_count) {\r\n\t\t\t\tthis.jump2();\r\n\t\t\t\t$physics.state.jump_count += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tconst $physics = this._owner.$physics;\r\n\r\n\t\tif ($physics.state.jump_count > 1) {\r\n\t\t\tif ($physics.$foothold || this._actani.isEnd()) {\r\n\t\t\t\tthis.is_end = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if ($physics.$foothold) {//!$physics._isCanJump()\r\n\t\t\tif (this._actani.isEnd()) {\r\n\t\t\t\tthis.is_end = true;\r\n\t\t\t}\r\n\t\t\telse if ($gv.m_editor_mode) {\r\n\t\t\t\tthis.is_end = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this._actani.isEnd()) {\r\n\t\t\tthis.is_end = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * TODO: add skill\r\n */\r\nclass __SkillAnimation_Template extends SkillAnimationBase {\r\n\t/**\r\n\t * @override\r\n\t */\r\n\t_init() {\r\n\t\tthis._applyDefaultAction();\r\n\t\t// ...\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t}\r\n}\r\n\r\nexport class SceneSkill extends SkillAnimationBase {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t/** @type {AttackInfo} */\r\n\t\tthis.attackInfo = new AttackInfo();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} skillId\r\n\t * @param {SceneObject} owner\r\n\t */\r\n\tload(skillId, owner) {\r\n\t\tthis.owner = owner;\r\n\r\n\t\tif (!skillId) {\r\n\t\t\tthrow new Error(\"1 argument required\");\r\n\t\t}\r\n\t\t\r\n\t\tif (String(skillId).length <= 4) {\r\n\t\t\tthrow new Error(\"skill ID format\");\r\n\t\t}\r\n\t\t//skillId = 1120017;//1001005;// jobId + 4-digit\r\n\r\n\t\tthis.attackInfo.skill = skillId;\r\n\t\t\r\n\t\tlet loaded_skill = SceneSkill.__loaded_skill[skillId];\r\n\t\tif (loaded_skill && loaded_skill.data) {\r\n\t\t\tthis._assign(loaded_skill);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet promise = this._load(skillId, owner);\r\n\r\n\t\t\tthis.$promise = promise;\r\n\r\n\t\t\tSceneSkill.__loaded_skill[skillId] = this;\r\n\r\n\t\t\tpromise.then(() => {\r\n\t\t\t\tdelete this.$promise;\r\n\t\t\t});\r\n\r\n\t\t\treturn promise;\r\n\t\t}\r\n\t}\r\n}\r\nSceneSkill.__loaded_skill = {};\r\n\r\nwindow.$SceneSkill = SceneSkill;\r\n\r\nclass _ArrowKey {\r\n\tconstructor() {\r\n\t\tthis.left = 0;\r\n\t\tthis.up = 0;\r\n\t\tthis.right = 0;\r\n\t\tthis.down = 0;\r\n\t}\r\n}\r\n","﻿/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\nimport {\r\n\tb2_pi,\r\n\tb2Vec2, b2Rot, b2DegToRad, b2Transform, b2AABB,\r\n\tb2Color, b2Draw, b2DrawFlags,\r\n\tb2Body, b2Fixture,\r\n\tb2Joint,\r\n} from \"./Physics.js\";\r\nimport { Rectangle } from \"../math.js\";\r\n\r\n\r\nfunction setFlags(flags, bit, flag) {\r\n\treturn flag ? (flags | bit):(flags & ~bit);\r\n}\r\n\r\nclass DebugDraw extends b2Draw {\r\n\t/**\r\n\t * This class implements debug drawing callbacks that are\r\n\t * invoked inside b2World::Step.\r\n\t * @export\r\n\t * @constructor\r\n\t * @extends {b2Draw}\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t */\r\n\tconstructor(ctx) {\r\n\t\tsuper(...arguments);\r\n\r\n\t\t/**\r\n\t\t * @type {CanvasRenderingContext2D}\r\n\t\t */\r\n\t\tthis.m_ctx = ctx;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.axis_length = 1;\r\n\r\n\t\t/**\r\n\t\t * @type {b2Rot}\r\n\t\t */\r\n\t\tthis.viewRotation = new b2Rot(b2DegToRad(0));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.viewZoom = 1;\r\n\t\t\r\n\t\tthis.flag_drawShape = true;\r\n\t\tthis.flag_drawJoint = true;\r\n\t\tthis.flag_drawAabb = false;\r\n\t\tthis.flag_drawCenterOfMass = true;\r\n\t\tthis.flag_drawController = true;\r\n\t\tthis.flag_drawParticle = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tget canvasScale() {\r\n\t\treturn $gv.CANVAS_SCALE;\r\n\t}\r\n\tset canvasScale(value) {\r\n\t\t$gv.CANVAS_SCALE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Rectangle}\r\n\t */\r\n\tget viewRect() {\r\n\t\treturn $gv.m_viewRect;\r\n\t}\r\n\r\n\tset flag_drawAll(flag) { this.m_drawFlags = flag ? b2DrawFlags.e_all : b2DrawFlags.e_none;  }\r\n\tset flag_drawShape(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_shapeBit, flag); }\r\n\tset flag_drawJoint(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_jointBit, flag); }\r\n\tset flag_drawAabb(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_aabbBit, flag); }\r\n\tset flag_drawPair(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_pairBit, flag); }\r\n\tset flag_drawCenterOfMass(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_centerOfMassBit, flag); }\r\n\tset flag_drawParticle(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_particleBit, flag); }\r\n\tset flag_drawController(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_controllerBit, flag); }\r\n\t\r\n\tget flag_drawAll() { this.m_drawFlags; }\r\n\tget flag_drawShape() { return this.m_drawFlags & b2DrawFlags.e_shapeBit; }\r\n\tget flag_drawJoint() { return this.m_drawFlags & b2DrawFlags.e_jointBit; }\r\n\tget flag_drawAabb() { return this.m_drawFlags & b2DrawFlags.e_aabbBit; }\r\n\tget flag_drawPair() { return this.m_drawFlags & b2DrawFlags.e_pairBit; }\r\n\tget flag_drawCenterOfMass() { return this.m_drawFlags & b2DrawFlags.e_centerOfMassBit; }\r\n\tget flag_drawParticle() { return this.m_drawFlags & b2DrawFlags.e_particleBit; }\r\n\tget flag_drawController() { return this.m_drawFlags & b2DrawFlags.e_controllerBit; }\r\n\r\n\tget flagNames() {\r\n\t\treturn [\r\n\t\t\t\"flag_drawAll\",\r\n\t\t\t\"flag_drawShape\",\r\n\t\t\t\"flag_drawJoint\",\r\n\t\t\t\"flag_drawAabb\",\r\n\t\t\t\"flag_drawPair\",\r\n\t\t\t\"flag_drawCenterOfMass\",\r\n\t\t\t\"flag_drawParticle\",\r\n\t\t\t\"flag_drawController\",\r\n\t\t];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.PushTransform = function (xf)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tctx.save();\r\n\t//ctx.translate(xf.p.x, xf.p.y);\r\n\t//ctx.rotate(xf.q.GetAngle());\r\n\tctx.transform(xf.q.c, xf.q.s, -xf.q.s, xf.q.c, xf.p.x, xf.p.y);\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.PopTransform = function (xf)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tctx.restore();\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2[]} vertices\r\n * @param {number} vertexCount\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color)\r\n{\r\n\tif (!vertexCount) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(vertices[0].x, vertices[0].y);\r\n\tfor (let i = 1; i < vertexCount; i++)\r\n\t{\r\n\t\tctx.lineTo(vertices[i].x, vertices[i].y);\r\n\t}\r\n\tctx.closePath();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} vertices\r\n * @param {number} vertexCount\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color)\r\n{\r\n\tif (!vertexCount) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(vertices[0].x, vertices[0].y);\r\n\tfor (let i = 1; i < vertexCount; i++)\r\n\t{\r\n\t\tctx.lineTo(vertices[i].x, vertices[i].y);\r\n\t}\r\n\tctx.closePath();\r\n\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\tctx.fill();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} center\r\n * @param {number} radius\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawCircle = function (center, radius, color)\r\n{\r\n\tif (!radius) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.arc(center.x, center.y, radius, 0, b2_pi * 2, true);\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} center\r\n * @param {number} radius\r\n * @param {b2Vec2} axis\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color)\r\n{\r\n\tif (!radius) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tlet cx = center.x;\r\n\tlet cy = center.y;\r\n\tctx.beginPath();\r\n\tctx.arc(cx, cy, radius, 0, b2_pi * 2, true);\r\n\tctx.moveTo(cx, cy);\r\n\tctx.lineTo((cx + axis.x * radius), (cy + axis.y * radius));\r\n\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\tctx.fill();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} centers\r\n * @param {number} radius\r\n * @param {b2Color} colors\r\n * @param {number} count\r\n */\r\nDebugDraw.prototype.DrawParticles = function (centers, radius, colors, count) {\r\n\tconst ctx = this.m_ctx;\r\n\tif (ctx) {\r\n\t\tif (colors !== null) {\r\n\t\t\tfor (let i = 0; i < count; ++i) {\r\n\t\t\t\tlet center = centers[i];\r\n\t\t\t\t/** @type {b2Color} */let color = colors[i];\r\n\t\t\t\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\t\t\t\tctx.fillRect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\r\n\t\t\t\t///ctx.beginPath(); ctx.arc(center.x, center.y, radius, 0, box2d.b2_pi * 2, true); ctx.fill();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctx.fillStyle = \"rgba(255,255,255,0.5)\";\r\n\t\t\tctx.beginPath();\r\n\t\t\tfor (let i = 0; i < count; ++i) {\r\n\t\t\t\tlet center = centers[i];\r\n\t\t\t\tctx.rect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\r\n\t\t\t\t///ctx.beginPath(); ctx.arc(center.x, center.y, radius, 0, box2d.b2_pi * 2, true); ctx.fill();\r\n\t\t\t}\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} p1\r\n * @param {b2Vec2} p2\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSegment = function (p1, p2, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(p1.x, p1.y);\r\n\tctx.lineTo(p2.x, p2.y);\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.DrawTransform = function (xf)\r\n{\r\n\tif (this.axis_length == 0) {\r\n\t\treturn;\r\n\t}\r\n\t// viewport -> canvas\r\n\tlet cs = this.canvasScale;\r\n\tif (!this.viewRect.collide4f2(xf.p.x * cs, xf.p.y * cs, this.axis_length * cs, this.axis_length * cs)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tthis.PushTransform(xf);\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(0, 0);\r\n\tctx.lineTo(this.axis_length, 0);\r\n\tctx.strokeStyle = b2Color.RED.MakeStyleString(1);\r\n\tctx.stroke();\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(0, 0);\r\n\tctx.lineTo(0, this.axis_length);\r\n\tctx.strokeStyle = b2Color.GREEN.MakeStyleString(1);\r\n\tctx.stroke();\r\n\r\n\tthis.PopTransform(xf);\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} p\r\n * @param {number} size\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawPoint = function (p, size, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.fillStyle = color.MakeStyleString();\r\n\tsize /= this.viewZoom;\r\n\tsize /= this.canvasScale;\r\n\tlet hsize = size / 2;\r\n\tctx.fillRect(p.x - hsize, p.y - hsize, size, size);\r\n}\r\n\r\n/**\r\n * @export\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {string} format\r\n * @param {...string|number} var_args\r\n */\r\nDebugDraw.prototype.DrawString = function (x, y, format, var_args)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tconst font = ctx.font;\r\n\r\n\tlet args = Array.prototype.slice.call(arguments);\r\n\tlet string = goog.string.format.apply(null, args.slice(2));\r\n\r\n\tctx.save();\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.font = '18pt helvetica';//'9pt lucida console';\r\n\t\tlet color = DebugDraw.prototype.DrawString.s_color;\r\n\t\tctx.fillStyle = color.MakeStyleString();\r\n\t\tctx.fillText(string, x, y);\r\n\tctx.restore();\r\n\r\n\tctx.font = font;\r\n}\r\nDebugDraw.prototype.DrawString.s_color = new b2Color(0.9, 0.6, 0.6);\r\n\r\n/**\r\n * @export\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {string} format\r\n * @param {...string|number} var_args\r\n */\r\nDebugDraw.prototype.DrawStringWorld = function (x, y, format, var_args)\r\n{\r\n\tlet p = DebugDraw.prototype.DrawStringWorld.s_p.Set(x, y);\r\n\r\n\t// world -> viewport\r\n\tlet vt = this.viewCenter;\r\n\tb2Vec2.SubVV(p, vt, p);\r\n\tlet vr = this.viewRotation;\r\n\tb2Rot.MulTRV(vr, p, p);\r\n\tlet vs = this.viewZoom;\r\n\tb2Vec2.MulSV(vs, p, p);\r\n\r\n\t// viewport -> canvas\r\n\tlet cs = this.canvasScale;\r\n\tb2Vec2.MulSV(cs, p, p);\r\n\tp.y *= -1;\r\n\tlet cc = DebugDraw.prototype.DrawStringWorld.s_cc.Set(0.5 * this.m_canvas.width, 0.5 * this.m_canvas.height);\r\n\tb2Vec2.AddVV(p, cc, p);\r\n\r\n\tlet ctx = this.m_ctx;\r\n\tconst font = ctx.font;\r\n\r\n\tlet args = Array.prototype.slice.call(arguments);\r\n\tlet string = goog.string.format.apply(null, args.slice(2));\r\n\r\n\tctx.save();\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.font = '18pt helvetica';//'9pt lucida console';\r\n\t\tlet color = DebugDraw.prototype.DrawStringWorld.s_color;\r\n\t\tctx.fillStyle = color.MakeStyleString();\r\n\t\tctx.fillText(string, p.x, p.y);\r\n\tctx.restore();\r\n\r\n\tctx.font = font;\r\n}\r\nDebugDraw.prototype.DrawStringWorld.s_p = new b2Vec2();\r\nDebugDraw.prototype.DrawStringWorld.s_cc = new b2Vec2();\r\nDebugDraw.prototype.DrawStringWorld.s_color = new b2Color(0.5, 0.9, 0.5);\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2AABB} aabb\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawAABB = function (aabb, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.strokeStyle = color.MakeStyleString();\r\n\tlet x = aabb.lowerBound.x;\r\n\tlet y = aabb.lowerBound.y;\r\n\tlet w = aabb.upperBound.x - aabb.lowerBound.x;\r\n\tlet h = aabb.upperBound.y - aabb.lowerBound.y;\r\n\tctx.strokeRect(x, y, w, h);\r\n}\r\n\r\nexport default DebugDraw;\r\n","﻿\r\nimport {\r\n\tb2_linearSlop,\r\n\tb2Vec2,\r\n\tb2BodyType, b2BodyDef, b2FixtureDef,\r\n\tb2PolygonShape, b2EdgeShape,\r\n\tb2Body,\r\n\tb2Contact, b2Manifold, b2ContactImpulse, b2WorldManifold\r\n} from \"./Physics.js\";\r\n\r\nimport { World } from \"./World\";\r\nimport { PPlayer } from \"./PPlayer.js\";\r\nimport { FilterHelper } from \"./Filter.js\";\r\n\r\n\r\nexport class MapLadderRope {\r\n\tconstructor(raw) {\r\n\t\t/** @type {number} - is ladder ? 1 : 0 */\r\n\t\tthis.l = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.uf = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.x = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.y1 = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.y2 = null;\r\n\r\n\t\t/** @type {number} - ?? */\r\n\t\tthis.page = null;\r\n\r\n\t\t/** @type {number} - select obj from layeredObject[layer] where obj.piece == piece */\r\n\t\tthis.piece = null;\r\n\r\n\t\tObject.assign(this, raw);\r\n\t}\r\n\r\n\tisLadder() {\r\n\t\treturn !!this.l;\r\n\t}\r\n}\r\n\r\n\r\nexport class LadderRope extends MapLadderRope {\r\n\tconstructor(raw) {\r\n\t\tsuper(raw);\r\n\r\n\t\t/** @type {b2Body} */\r\n\t\tthis.body = null;\r\n\t}\r\n\r\n\tcalcHeight() {\r\n\t\treturn (this.y2 - this.y1);\r\n\t}\r\n\tcalcHalfHeight() {\r\n\t\treturn (this.y2 - this.y1) * 0.5;\r\n\t}\r\n\tcalcWidth() {\r\n\t\treturn (this.isLadder() ? 16 : 4);\r\n\t}\r\n\tcalcHalfWidth() {\r\n\t\treturn (this.isLadder() ? 16 : 4) * 0.5;\r\n\t}\r\n\tcalcLength() {\r\n\t\treturn (this.y2 - this.y1) / $gv.CANVAS_SCALE;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t */\r\n\t_create(world) {\r\n\t\tlet bdef = new b2BodyDef();\r\n\t\tlet fdef = new b2FixtureDef();\r\n\t\tlet shape = new b2PolygonShape();\r\n\r\n\t\tconst x = this.x / $gv.CANVAS_SCALE;\r\n\t\tconst y1 = this.y1 / $gv.CANVAS_SCALE;\r\n\t\tconst y2 = this.y2 / $gv.CANVAS_SCALE;\r\n\t\tconst hwidth = this.calcHalfWidth() / $gv.CANVAS_SCALE;\r\n\t\tconst hheight = (y2 - y1) * 0.5;\r\n\r\n\t\tbdef.type = b2BodyType.b2_kinematicBody;//可移動\r\n\t\tbdef.position.Set(x, y1);\r\n\r\n\t\tbdef.angle = 0;\r\n\t\tbdef.gravityScale = 0;\r\n\t\t//bdef.allowSleep = true;\r\n\t\t//bdef.bullet = true;\r\n\t\tbdef.fixedRotation = true;\r\n\t\tbdef.userData = this;\r\n\r\n\t\tthis.body = world.CreateBody(bdef);\r\n\r\n\t\tshape.SetAsBox(hwidth, hheight + 0.5, new b2Vec2(0, hheight - 0.5), 0);\r\n\r\n\t\tfdef.shape = shape;\r\n\t\tfdef.filter.Copy(FilterHelper.get(\"ladder\"));\r\n\r\n\t\tfdef.isSensor = true;\r\n\t\tfdef.userData = this;\r\n\r\n\t\tlet fixture = this.body.CreateFixture(fdef);\r\n\r\n\t\tfixture.beginContact = this.beginContact.bind(this);\r\n\t\tfixture.endContact = this.endContact.bind(this);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tbeginContact(contact, fa, fb) {\r\n\t\t/** @type {PPlayer} */\r\n\t\tconst targetPlayer = fb.m_userData;\r\n\t\tif (!targetPlayer) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!targetPlayer.state.ladder) {\r\n\t\t\ttargetPlayer.contactLadder(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tendContact(contact, fa, fb) {\r\n\t\t/** @type {PPlayer} */\r\n\t\tconst targetPlayer = fb.m_userData;\r\n\t\tif (!targetPlayer) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttargetPlayer.leaveLadder();\r\n\t}\r\n}\r\n\r\n\r\nexport class MapLadderRopeLoader {\r\n\t/**\r\n\t * @param {{[prop:string]:any}} map_raw_data\r\n\t * @param {World} world\r\n\t * @returns {LadderRope[]}\r\n\t */\r\n\tstatic load(map_raw_data, world) {\r\n\t\t/** @type {LadderRope[]} */\r\n\t\tlet ladderRopes = [];\r\n\r\n\t\tfor (let i in map_raw_data.ladderRope) {\r\n\t\t\tlet raw = map_raw_data.ladderRope[i];\r\n\t\t\tlet idx = parseInt(i, 10) - 1;\r\n\t\t\tif (idx >= 0 && Number.isSafeInteger(idx)) {\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//TODO: ?? ladderRope\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t\tlet ladderRope = new LadderRope(raw);\r\n\t\t\tladderRope._$index = i;\r\n\t\t\tladderRope._create(world);\r\n\t\t\tladderRopes.push(ladderRope);\r\n\t\t};\r\n\r\n\t\treturn ladderRopes;\r\n\t}\r\n}\r\n\r\n","﻿\r\nimport { PRemoteCharacter } from \"./PPlayer.js\";\r\n\r\nimport { Animation } from \"../Animation.js\";\r\n\r\n\r\nwindow.$MobAction_Move_Priority = 2;\r\nwindow.$MobAction_Jump_Priority = 1;\r\n\r\n\r\nexport class MobActionController {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\t/** @type {string} - ?? */\r\n\t\tthis._name = null;\r\n\r\n\t\t/** @type {Animation} */\r\n\t\tthis._ani = animation;\r\n\t}\r\n\r\n\t/** @type {number} - int */\r\n\tget priority() {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tinit() {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tisEnd(pMob) {\r\n\t\tlet end = this._ani.isEnd();\r\n\t\tif (end) {\r\n\t\t\tthis.onEnd(pMob);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tonEnd(pMob) {\r\n\t}\r\n}\r\n\r\nexport class MobAction_Stand extends MobActionController {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis._name = \"stand\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t\t//保持停止。\r\n\t\tpMob.ikey[\"left\"] = 0;\r\n\t\tpMob.ikey[\"right\"] = 0;\r\n\t}\r\n}\r\n\r\nexport class _MobAction_Move extends MobActionController {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis._name = \"move\";\r\n\t\tthis.front = 0;\r\n\t}\r\n\r\n\t/** @type {number} - int */\r\n\tget priority() {\r\n\t\treturn window.$MobAction_Move_Priority;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\tlet name = pMob.action._name;\r\n\r\n\t\t//switch (pMob.action._name) {\r\n\t\t//\tcase \"attack\":\r\n\t\t//\t\treturn false;\r\n\t\t//\tdefault:\r\n\t\t\t\tif (name.startsWith(\"attack\")) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t//\t\tbreak;\r\n\t\t//}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport class MobAction_MoveLeft extends _MobAction_Move {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis.front = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\treturn super.isValid(pMob) && (!pMob.state.jump || this.front == pMob.state.front);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t\tpMob.ikey[\"left\"] = 1;\r\n\t\tpMob.ikey[\"right\"] = 0;\r\n\t}\r\n\t\r\n\t///**\r\n\t// * @param {PMob} pMob\r\n\t// */\r\n\t//onEnd(pMob) {\r\n\t//\tpMob.ikey[\"left\"] = 0;//不停止移動，下個動作在處理。\r\n\t//}\r\n}\r\n\r\nexport class MobAction_MoveRight extends _MobAction_Move {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis.front = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\treturn super.isValid(pMob) && (!pMob.state.jump || this.front == pMob.state.front);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t\tpMob.ikey[\"left\"] = 0;\r\n\t\tpMob.ikey[\"right\"] = 1;\r\n\t}\r\n\t\r\n\t///**\r\n\t// * @param {PMob} pMob\r\n\t// */\r\n\t//onEnd(pMob) {\r\n\t//\tpMob.ikey[\"right\"] = 0;//不停止移動，下個動作在處理。\r\n\t//}\r\n}\r\n\r\nexport class MobAction_Jump extends MobActionController {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis._name = \"jump\";\r\n\t\t//this.move = false;\r\n\t}\r\n\r\n\t/** @type {number} - int */\r\n\tget priority() {\r\n\t\treturn window.$MobAction_Jump_Priority;\r\n\t}\r\n\r\n\tinit() {\r\n\t\t//this.move = 1 || Math.random() > 0.5;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\tlet name = pMob.action._name;\r\n\r\n\t\tswitch (pMob.action._name) {\r\n\t\t\tcase \"attack\":\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\t\t\t\tif (name.startsWith(\"attack\")) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn !pMob.state.jump;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t\tif (pMob.state.walk) {\r\n\t\t\tif (pMob.state.front < 0) {\r\n\t\t\t\tpMob.ikey[\"left\"] = 1;\r\n\t\t\t}\r\n\t\t\telse if (pMob.state.front > 0) {\r\n\t\t\t\tpMob.ikey[\"right\"] = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpMob.ikey[\"jump\"] = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tonEnd(pMob) {\r\n\t\t//if (this.move) {\r\n\t\t//\tif (pMob.state.front < 0) {\r\n\t\t//\t\tpMob.ikey[\"left\"] = 0;\r\n\t\t//\t}\r\n\t\t//\telse if (pMob.state.front > 0) {\r\n\t\t//\t\tpMob.ikey[\"right\"] = 0;\r\n\t\t//\t}\r\n\t\t//}\r\n\t\tpMob.ikey[\"jump\"] = 0;\r\n\t}\r\n}\r\n\r\nexport class MobAction_Attack extends MobActionController {\r\n\t/**\r\n\t * @param {Animation} animation\r\n\t */\r\n\tconstructor(animation) {\r\n\t\tsuper(animation);\r\n\t\tthis._name = \"attack\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid(pMob) {\r\n\t\treturn pMob.action.isEnd();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {PMob} pMob\r\n\t */\r\n\tupdate(pMob) {\r\n\t}\r\n}\r\n\r\nexport class PMob extends PRemoteCharacter {\r\n\t/**\r\n\t * @param {MapMob} mapMob\r\n\t */\r\n\tconstructor(mapMob) {\r\n\t\tsuper();\r\n\t\t\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis.attackTarget = true;\r\n\t\t\r\n\t\t/** @type {PPlayer} */\r\n\t\tthis._enable_rx = false;\r\n\t\t\r\n\t\t/** @type {MapMob} */\r\n\t\tthis.chara = mapMob;\r\n\r\n\t\t//TODO: move this code to ??\r\n\t\tif (mapMob) {\r\n\t\t\tif (mapMob.renderer.isFlyMob()) {\r\n\t\t\t\tthis.setMovementSpeed(this._info.flySpeed);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setMovementSpeed(this._info.speed);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/** @type {Rectangle} */\r\n\t\tthis.activityRegion = null;\r\n\t\t\r\n\t\tthis.$debugControl = false;\r\n\r\n\t\t/** @type {{[action:string]:number}} */\r\n\t\tthis.ikey = {};\r\n\r\n\t\t/** @type {MobActionController[]} */\r\n\t\tthis.actions = [];\r\n\r\n\t\t/** @type {MobActionController} */\r\n\t\tthis.action = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {} param - ??\r\n\t */\r\n\t_registerAction(param) {\r\n\t\tthis.actions.push(param);\r\n\t}\r\n\r\n\t/**\r\n\t * {[action:string]:{ controller:MobActionController, renderer:Animation }}\r\n\t * @param {{[action:string]:Animation}} actions\r\n\t * @param {{[action:string]:MobActionController[]} =act_map\r\n\t */\r\n\t_loadAction(actions, act_map) {\r\n\t\tact_map = act_map || {\r\n\t\t\tstand: [MobAction_Stand],\r\n\t\t\tmove: [MobAction_MoveLeft, MobAction_MoveRight],\r\n\t\t\tjump: [MobAction_Jump],\r\n\t\t};\r\n\t\t\r\n\t\tObject.keys(actions).forEach(key => {\r\n\t\t\tif (actions[key] && act_map[key]) {\r\n\t\t\t\tconst list = act_map[key];\r\n\t\t\t\tfor (let type of list) {\r\n\t\t\t\t\tlet controller = new type(actions[key]);\r\n\t\t\t\t\tlet priority = controller.priority;\r\n\r\n\t\t\t\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\t\t\t\tif (!(Number.isSafeInteger(priority) && priority > 0)) {\r\n\t\t\t\t\t\t\tdebugger;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (let i = 0; i < priority; ++i) {\r\n\t\t\t\t\t\tthis._registerAction(controller);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.warn(\"未完成 MobActionController: \" + key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.action = this.actions[0];\r\n\t\tif (!this.action) {\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t}\r\n\t\r\n\tget _info() {\r\n\t\treturn this.chara.renderer._raw.info;\r\n\t}\r\n\tget hasBodyDamage() {\r\n\t\tif (this._info.bodyAttack != 0 && this._info.bodyAttack != 1) {\r\n\t\t\talert(\"bodyAttack:\" + this._info.bodyAttack);\r\n\t\t}\r\n\t\treturn this._info.bodyAttack != 0;\r\n\t}\r\n\tget _speed() {\r\n\t\treturn this._info.speed;\r\n\t}\r\n\tget _pushed() {\r\n\t\treturn this._info.pushed;\r\n\t}\r\n\tget _fs() {\r\n\t\treturn this._info.fs;\r\n\t}\r\n\tget _category() {\r\n\t\treturn this._info.category;\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @returns {string}\r\n\t */\r\n\tget _body_category() {\r\n\t\treturn \"mob\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {World} world\r\n\t * @returns {void}\r\n\t */\r\n\t_create(world) {\r\n\t\tsuper._create(world);\r\n\t\t\r\n\t\tthis.setPosition(this.chara.x / $gv.CANVAS_SCALE, this.chara.y / $gv.CANVAS_SCALE, true);\r\n\t\t\r\n\t\tthis._appleMobCategory(this._category);\r\n\t}\r\n\t_appleMobCategory(category) {\r\n\t\tswitch (category) {\r\n\t\t\tcase 1:\r\n\t\t\tcase 6:\r\n\t\t\t\tthis.__setAsWalkOnlyMob();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tthis.__setAsJumpDropMob();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.__setAsWalkOnlyMob();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.chara.front = this.chara.spawn.f ? 1:-1;\r\n\t}\r\n\t__setAsWalkOnlyMob() {\r\n\t\tconst ground = this.body.GetWorld().ground;\r\n\t\t\r\n\t\tconst fhId = this.chara.spawn.fh;\r\n\t\t\r\n\t\tif (fhId >= 0) {\r\n\t\t\tlet fh = ground.footholds[fhId];\r\n\r\n\t\t\tthis.activityRegion = ground.rectChains[fh.chain];\r\n\t\t}\r\n\t}\r\n\t__setAsJumpDropMob() {\r\n\t}\r\n\t\r\n\tisCanMove() {\r\n\t\treturn !(this._info.ignoreMoveImpact || this._walker_omega == 0 || this._info.noFlip);\r\n\t}\r\n\t\r\n\t/** @override */\r\n\tcontrol() {\r\n\t\tif (this.isCanMove()) {\r\n\t\t\tswitch (this._category) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis._control_basic(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tthis._control_basic(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis._control_basic(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//this.ikey[\"jump\"] = 0;\r\n\t\t\t//this.ikey[\"left\"] = 0;\r\n\t\t\t//this.ikey[\"right\"] = 0;\r\n\r\n\t\t\tsuper.control(this.ikey);\r\n\t\t}\r\n\t}\r\n\t_control_basic(isAllowJump) {\r\n\t\tif (this.action) {\r\n\t\t\tif (this.action.isEnd(this)) {\r\n\t\t\t\tlet actions = this.actions.filter(act => act.isValid(this));\r\n\t\t\t\tlet next = Math.trunc(Math.random() * 100) % actions.length;\r\n\r\n\t\t\t\tthis.action = actions[next];\r\n\r\n\t\t\t\tif (!this.action) {\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.action.init();\r\n\r\n\t\t\t\t//console.log(\"mob: \" + this.action.name);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t}\r\n\r\n\t\t\tthis.action.update(this);\r\n\t\t}\r\n\t}\r\n\r\n\tstop() {\r\n\t\tconst empty = {};\r\n\t\tthis.ikey = empty;\r\n\t\tsuper.control(empty);\r\n\t}\r\n\t\r\n\tStep() {\t\t\r\n\t\tsuper.Step();\r\n\t\t\r\n\t\tthis.control();\r\n\t\t\r\n\t\tlet rx0, rx1, limit_action;\r\n\t\t\r\n\t\tif (this.attackTarget && this.activityRegion) {\r\n\t\t\trx0 = this.activityRegion.left;\r\n\t\t\trx1 = this.activityRegion.right;\r\n\t\t\tlimit_action = true;\r\n\t\t}\r\n\t\telse if (!this._enable_rx) {\r\n\t\t\trx0 = this.chara.spawn.rx0;\r\n\t\t\trx1 = this.chara.spawn.rx1;\r\n\t\t\tlimit_action = false;\r\n\t\t}\r\n\t\t\r\n\t\tif (limit_action) {\r\n\t\t\tconst cbpos = this.body.GetPosition();\r\n\t\t\tconst x = cbpos.x * $gv.CANVAS_SCALE;\r\n\t\t\tconst y = cbpos.y * $gv.CANVAS_SCALE;\r\n\t\t\tconst dx0 = rx0 - x;\r\n\t\t\tconst dx1 = x - rx1;\r\n\t\t\t\r\n\t\t\tif (dx0 > 0) {\r\n\t\t\t\tconst fwpos = this.foot_walk.GetPosition();\r\n\t\t\t\tthis.body.SetPositionXY(rx0 / $gv.CANVAS_SCALE, cbpos.y);\r\n\t\t\t\tthis.foot_walk.SetPositionXY(rx0 / $gv.CANVAS_SCALE, fwpos.y);\r\n\t\t\t}\r\n\t\t\telse if (dx1 > 0) {\r\n\t\t\t\tconst fwpos = this.foot_walk.GetPosition();\r\n\t\t\t\tthis.body.SetPositionXY(rx1 / $gv.CANVAS_SCALE, cbpos.y);\r\n\t\t\t\tthis.foot_walk.SetPositionXY(rx1 / $gv.CANVAS_SCALE, fwpos.y);\r\n\r\n\t\t\t\tif (!this.attackTarget) {\r\n\t\t\t\t\tthis.state.front *= -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tAfterStep() {\r\n\t\tsuper.AfterStep();\r\n\t\t\r\n\t\tconst pos = this.getPosition();\r\n\t\tconst x = pos.x * $gv.CANVAS_SCALE;\r\n\t\tconst y = pos.y * $gv.CANVAS_SCALE;\r\n\t\t\r\n\t\tthis.chara.x = x;\r\n\t\tthis.chara.y = y;\r\n\t\t\r\n\t\tif (!this._info.noFlip) {\r\n\t\t\tthis.chara.front = -this.state.front;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","\r\nimport { Randomizer } from \"../math.js\";\r\n\r\nimport { Animation } from \"../Animation.js\";\r\nimport { SceneObject } from \"../SceneObject.js\";\r\n\r\nexport class MobSkillBallDefinition {\r\n\tconstructor() {\r\n\t\tthis.createDelay = 0;\r\n\t\tthis.collisionDelay = 0;\r\n\t\tthis.duration = 0;\r\n\t\t\r\n\t\tthis.moveSpeed = 0;\r\n\t\tthis.angle = 0;\r\n\t\t\r\n\t\tthis.flip = false;\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis._speed_x = 0;//uint: px/second\r\n\t\tthis._speed_y = 0;//uint: px/second\r\n\t}\r\n}\r\n\r\nexport class MobSkillBallBase extends SceneObject {\r\n\t/**\r\n\t * @param {MobSkillBallDefinition} ballDef\r\n\t * @param {{[x:string]:Animation} animations\r\n\t */\r\n\tconstructor(ballDef, animations) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tballDef = Object.assign(new this._BallDefinition(), ballDef);\r\n\t\t\r\n\t\tthis.createDelay = ballDef.createDelay;\r\n\t\tthis.collisionDelay = ballDef.collisionDelay;\r\n\t\tthis.duration = ballDef.duration;\r\n\t\t\r\n\t\tthis.moveSpeed = ballDef.moveSpeed;\r\n\t\tthis.angle = ballDef.angle * Math.PI / 180;//deg to rad\r\n\t\t\r\n\t\tthis.x = ballDef.x;\r\n\t\tthis.y = ballDef.y;\r\n\t\t\r\n\t\tif (this.moveSpeed) {\r\n\t\t\tthis._speed_x = Math.cos(this.angle + Math.PI) * this.moveSpeed;//uint: px/second\r\n\t\t\tthis._speed_y = Math.sin(this.angle + Math.PI) * this.moveSpeed;//uint: px/second\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._speed_x = 0;//uint: px/second\r\n\t\t\tthis._speed_y = 0;//uint: px/second\r\n\t\t}\r\n\t\t\r\n\t\tthis.state = this.E_BEFORE_CREATE;\r\n\t}\r\n\t\r\n\tget E_BEFORE_CREATE() { return 0; }\r\n\tget E_CREATED() { return 1; }\r\n\tget E_BEGIN_COLLISION() { return 2; }\r\n\tget E_ENG_COLLISION() { return 3; }\r\n\t\r\n\t/** @param {PWorld} pWorld */\r\n\tcreate(pWorld) {\r\n\t\tthis.state = this.E_CREATED;\r\n\t\tif (this.collisionDelay > 0) {\r\n\t\t\tthis.enablePhysics = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tbegin_collision() {\r\n\t\tthis.enablePhysics = true;\r\n\t\tthis.state = this.E_BEGIN_COLLISION;\r\n\t}\r\n\t\r\n\tend_collision() {\r\n\t\tthis.enablePhysics = false;\r\n\t\tthis.state = this.E_ENG_COLLISION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * debug\r\n\t * @param {PWorld} pWorld\r\n\t */\r\n\tupdate(stamp, pWorld) {\r\n\t\tif (this.state == this.E_BEFORE_CREATE) {\r\n\t\t\tthis.createDelay -= stamp;\r\n\t\t\tif (this.createDelay <= 0) {\r\n\t\t\t\tthis.create();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.state == this.E_CREATED) {\r\n\t\t\t\tthis.collisionDelay -= stamp;\r\n\t\t\t\tif (this.collisionDelay <= 0) {\r\n\t\t\t\t\tthis.begin_collision();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.state == this.E_BEGIN_COLLISION) {\r\n\t\t\t\tif (this.duration > 0) {\r\n\t\t\t\t\tthis.duration -= stamp;\r\n\t\t\t\t\tif (this.duration) {\r\n\t\t\t\t\t\tthis.end_collision();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!window.$stop) {//debug\r\n\t\t\t\tthis.x += this._speed_x * stamp / 1000;//debug\r\n\t\t\t\tthis.y += this._speed_y * stamp / 1000;//debug\r\n\t\t\t}\r\n\t\t\tthis.renderer.update(stamp);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} engine\r\n\t */\r\n\trender(engine) {\r\n\t\tif (this.state != this.E_BEFORE_CREATE) {\r\n\t\t\tconst flip = this.flip;\r\n\t\t\tthis.renderer.draw(engine, this.x, this.y, this.angle, flip);\r\n\t\t}\r\n\t}\r\n\t\r\n\tget _BallDefinition() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n}\r\n\r\nexport class MobSkillBase {\r\n\tconstructor(_raw, _url) {\r\n\t\tthis._raw = _raw;\r\n\t\tthis._url = _url;\r\n\t\t\r\n\t\tthis.level = null;\r\n\t\t\r\n\t\tthis.animations = {};\r\n\t}\r\n\t\r\n\t/** @param {number} level */\r\n\tasync load(level) {\r\n\t\tthis.level = level;\r\n\t\t\r\n\t\tif (!this._raw && !this._url) {\r\n\t\t\tthis._url = [this._base_path, level].join(\"/\");\r\n\t\t\t\r\n\t\t\tthis._raw = await $get.data(this._url);\r\n\t\t}\r\n\t\t\r\n\t\tfor (let name of this._anima_name_list) {\r\n\t\t\t//name = \"ball0\";\r\n\t\t\tlet anima = new Animation(this._raw[name], [this._url, name].join(\"/\"));\r\n\t\t\tanima.is_loop = true;\r\n\t\t\tanima.load();\r\n\t\t\tthis.animations[name] = anima;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @returns {void} */\r\n\tinvoke() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\t\r\n\t/** @returns {string[]} */\r\n\tget _anima_name_list() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n\t\r\n\t/** @returns {string} */\r\n\tget _base_path() {\r\n\t\tthrow new Error(\"Not implement\");\r\n\t}\r\n}\r\n\r\n","﻿\r\nexport class KeySlotData {\r\n}\r\n\r\n","\r\n/**\r\n * usage:\r\n *\tvar fairyDust = new FairyDust();\r\n *\tfairyDust.load(4).then(()=>fairyDust.invoke());\r\n */\r\n\r\nimport { Randomizer } from \"../math.js\";\r\n\r\nimport { Animation } from \"../Animation.js\";\r\nimport { SceneObject } from \"../SceneObject.js\";\r\n\r\nimport { MobSkillBallDefinition, MobSkillBallBase, MobSkillBase } from \"./MobSkillBase.js\";\r\n\r\n\r\nclass FairyDustBallDefinition extends MobSkillBallDefinition {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.scale = 0;// 1~3\r\n\t}\r\n}\r\n\r\nexport class FairyDustBall extends MobSkillBallBase {\r\n\t/**\r\n\t * @param {FairyDustBallDefinition} ballDef\r\n\t */\r\n\tconstructor(ballDef, animations) {\r\n\t\tsuper(ballDef, animations);\r\n\t\t\r\n\t\tthis.x = 1000;\r\n\t\tthis.y = -80;\r\n\t\t\r\n\t\t//this.scale = ballDef.scale;\r\n\t\t\r\n\t\tthis.renderer = animations[\"ball\" + ballDef.scale].clone();\r\n\t}\r\n\t\r\n\t/** @param {PWorld} pWorld */\r\n\tcreate(pWorld) {\r\n\t\tthis.$physics = {// make dummy for debug\r\n\t\t\tstate: {}\r\n\t\t};\r\n\t\t\r\n\t\tsuper.create(pWorld);//complete create\r\n\t}\r\n\t\r\n\tget _BallDefinition() {\r\n\t\treturn FairyDustBallDefinition;\r\n\t}\r\n}\r\nexport class FairyDustBallHit extends SceneObject {\r\n\tconstructor(target, animations) {\r\n\t\tsuper();\r\n\t\t//MouseJoint\r\n\t\t//World.CreateJoint()\r\n\t}\r\n}\r\n\r\nexport class FairyDust extends MobSkillBase {\r\n\tconstructor(_raw, _url) {\r\n\t\tsuper(_raw, _url);\r\n\t}\r\n\t\r\n\t/** @param {4|10} level */\r\n\t\r\n\tinvoke() {\r\n\t\tconst s = this._raw.s;\r\n\t\tconst s2 = this._raw.s2;\r\n\t\tconst v = this._raw.v;\r\n\t\tconst v2 = this._raw.v2;\r\n\t\tconst w = this._raw.w;\r\n\t\tconst w2 = this._raw.w2;\r\n\t\tconst u = this._raw.u;\r\n\t\tlet x = this._raw.x;\r\n\t\t\r\n\t\tfor (let i = 0, max = Randomizer.randInt(w, w + w2); i < max; i++) {\r\n\t\t\tx += Randomizer.nextInt(x);\r\n\t\t\tlet ball = new FairyDustBall({\r\n\t\t\t\tscale: Randomizer.nextInt(3),\r\n\t\t\t\tcreateDelay: u,\r\n\t\t\t\tmoveSpeed: v + Randomizer.nextInt(v2),\r\n\t\t\t\tangle: x + Randomizer.randInt(s, s2),\r\n\t\t\t}, this.animations);\r\n\t\t\t$gv.SceneObjectMgr.addToScene(10, ball);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @returns {string[]} */\r\n\tget _anima_name_list() {\r\n\t\treturn [\"ball0\", \"ball1\", \"ball2\"];\r\n\t}\r\n\t\r\n\tget _base_path() {\r\n\t\treturn \"/Skill/MobSkill/238/level\";\r\n\t}\r\n}\r\n\r\nexport class _FairyDust extends FairyDust {\r\n\tconstructor(_raw, _url) {\r\n\t\tsuper(_raw, _url);\r\n\t}\r\n\t/** @override */\r\n\tload(level) {\r\n\t\tif (!this._raw && !this._url) {\r\n\t\t\tthis._raw = window.MOB_SKILL_RAW[238].level[level];\r\n\t\t\tthis._url = [this._base_path, level].join(\"/\");\r\n\t\t}\r\n\t\tsuper.load(level);\r\n\t}\r\n}\r\n\r\n","﻿\r\nlet LoginPacket = require(\"./LoginPacket.js\");\r\nlet ChatPacket = require(\"./ChatPacket.js\");\r\nlet CharacterPacket = require(\"./CharacterPacket.js\");\r\n\r\nlet ex = Object.assign({},\r\n\tLoginPacket,\r\n\tChatPacket,\r\n\tCharacterPacket\r\n);\r\n\r\nmodule.exports = ex;\r\n","﻿\r\nimport { Animation } from \"../Animation.js\"\r\nimport { IRenderer } from \"../IRenderer.js\";\r\n\r\n/**\r\n * @interface\r\n */\r\nexport class Drawable {\r\n\tconstructor() {\r\n\t\t/** @type {number} = 0~1 */\r\n\t\tthis.opacity = 1;\r\n\t}\r\n\r\n\tdestroy() {\r\n\t}\r\n\r\n\tisEnd() {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthrow new Error();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\tthrow new Error();\r\n\t}\r\n}\r\n\r\nexport class Layer {\r\n\tconstructor() {\r\n\t\t/** @type {Drawable[]} */\r\n\t\tthis.objects = [];\r\n\r\n\t\tthis.opacity = 1;\r\n\t}\r\n\t\r\n\tadd(obj) {\r\n\t\tthis.objects.push(obj);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis.objects = this.objects.filter(function (obj) {\r\n\t\t\tif (obj.isEnd()) {\r\n\t\t\t\tobj.destroy();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tobj.update(stamp);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\tif (this.opacity > 0) {\r\n\t\t\tconst opacity = this.opacity;\r\n\r\n\t\t\trenderer.pushGlobalAlpha();\r\n\r\n\t\t\tthis.objects.forEach(function (obj) {\r\n\t\t\t\trenderer.globalAlpha = obj.opacity * opacity;\r\n\r\n\t\t\t\tobj.render(renderer);\r\n\t\t\t});\r\n\r\n\t\t\trenderer.popGlobalAlpha();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n","﻿\r\nimport { IRenderer } from \"../IRenderer\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Drawable, Layer } from \"./Layer\";\r\nimport { DamagePair, AttackInfo } from \"../../Common/AttackInfo\";\r\n\r\n// 123\r\n// NoRed[1][1], NoRed[0][2], NoRed[0][3], ...\r\n\r\nclass _DamageSkin {\r\n\tconstructor() {\r\n\t\t/** @type {DamageNumberTextures} */\r\n\t\tthis.NoRed = null;\r\n\t\t/** @type {DamageNumberTextures} */\r\n\t\tthis.NoCri = null;\r\n\t}\r\n}\r\nclass _DamageSkinDefault extends _DamageSkin {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tthis.NoBlue = null;\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tthis.NoViolet = null;\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tthis.NoProduction = null;\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tthis.NoKite = null;\r\n\t}\r\n}\r\n\r\n\r\n/** @type {{default:_DamageSkinDefault,[skin:string]:_DamageSkin}} */\r\nconst loaded_skin = {};\r\n\r\nclass DamageNumberTextures {\r\n\tconstructor() {\r\n\t\t/** @type {Sprite} */\r\n\t\tfor (let i = 0; i <= 9; ++i) {\r\n\t\t\tthis[i] = null;\r\n\t\t}\r\n\t\tthis.addedCanvasH = 0;\r\n\t}\r\n\t/**\r\n\t * @param {string} path\r\n\t */\r\n\tasync _load(path) {\r\n\t\tconst _raw = await $get.data(path);\r\n\t\t\r\n\t\tObject.keys(_raw).forEach(key => {\r\n\t\t\tlet texture = new Sprite(_raw[key]);\r\n\r\n\t\t\ttexture._url = [path, key].join(\"/\");\r\n\r\n\t\t\tthis[key] = texture;\r\n\t\t});\r\n\r\n\t\tthis.addedCanvasH = _raw.addedCanvasH | 0;\r\n\t}\r\n}\r\n/** @type {Sprite} */\r\nDamageNumberTextures.prototype.Miss = null;\r\n/** @type {Sprite} */\r\nDamageNumberTextures.prototype.guard = null;\r\n/** @type {Sprite} */\r\nDamageNumberTextures.prototype.shot = null;\r\n/** @type {Sprite} */\r\nDamageNumberTextures.prototype.effect = null;\r\n\r\n\r\nfunction font_adv(texture) {\r\n\treturn texture.width * 3 / 4;\r\n}\r\n\r\nfunction draw_axis(ctx, x, y) {\r\n\tctx.strokeStyle = \"#F00\";\r\n\tctx.beginPath();\r\n\tctx.moveTo(x, y);\r\n\tctx.lineTo(x, y + 10);\r\n\tctx.stroke();\r\n\r\n\tctx.strokeStyle = \"#0F0\";\r\n\tctx.beginPath();\r\n\tctx.moveTo(x, y);\r\n\tctx.lineTo(x + 10, y);\r\n\tctx.stroke();\r\n}\r\n\r\nclass DamageNumberRenderer {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis._url = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.style = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.skin = null;\r\n\r\n\t\t/** @type {DamageNumberTextures[]} - this.textures[is_first_num ? 1:0][num] */\r\n\t\tthis.textures = [];\r\n\r\n\t\t/** @type {number[]} */\r\n\t\tthis.rand_y = [0];\r\n\t\tfor (let i = 1, sign = Math.random() > 0.5 ? -1:1; i < DamageNumberRenderer.max_display_digit; ++i) {\r\n\t\t\tthis.rand_y[i] = Math.random() * DamageNumberRenderer.max_rand_y * sign;\r\n\t\t\tsign *= -1;\r\n\t\t}\r\n\r\n\t\t///** @type {Promise<void>} */\r\n\t\t//this._$promise = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {DamageNumberRenderer} other\r\n\t */\r\n\t_copy(other) {\r\n\t\tthis._url = other._url;\r\n\t\tthis.skin = other.skin;\r\n\t\tthis.style = other.style;\r\n\t\tthis.textures = other.textures;\r\n\r\n\t\t//loading\r\n\t\tif (this._$promise) {\r\n\t\t\tthis._$promise = other._$promise;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t * @returns {Promise<DamageNumberRenderer>}\r\n\t */\r\n\tasync _load(skin, style) {\r\n\t\tlet tasks = [];\r\n\t\tlet url;\r\n\r\n\t\tif (skin == \"default\") {\r\n\t\t\turl = this._default_base_path + style;\r\n\t\t}\r\n\t\telse {\r\n\t\t\turl = this._skin_base_path + [skin, style].join(\"/\");\r\n\t\t}\r\n\r\n\t\tif (!loaded_skin[skin]) {\r\n\t\t\tloaded_skin[skin] = {};\r\n\t\t}\r\n\t\tloaded_skin[skin][style] = this;\r\n\r\n\t\tthis._url = url;\r\n\t\tthis.skin = skin;\r\n\t\tthis.style = style;\r\n\r\n\t\tfor (let i = 0; i <= 1; ++i) {\r\n\t\t\tconst sPath = url + i;\r\n\t\t\t\r\n\t\t\tthis.textures[i] = new DamageNumberTextures();\r\n\r\n\t\t\ttasks[i] = this.textures[i]._load(sPath);\r\n\t\t}\r\n\r\n\t\tawait Promise.all(tasks);\r\n\r\n\t\treturn this;\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t * @returns {Promise<DamageNumberRenderer>}\r\n\t */\r\n\tasync load(skin, style) {\r\n\t\tlet loaded;\r\n\r\n\t\tif (loaded_skin[skin]) {\r\n\t\t\tloaded = loaded_skin[skin][style];\r\n\t\t}\r\n\r\n\t\tif (loaded) {\r\n\t\t\tthis._copy(skin, loaded);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._$promise = this._load(skin, style);\r\n\r\n\t\t\tawait this._$promise;\r\n\r\n\t\t\tdelete this._$promise;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t * @param {number} damage\r\n\t * @param {boolean} critical\r\n\t * @param {number} cx\r\n\t * @param {number} cy\r\n\t */\r\n\tdraw(renderer, damage, critical, cx, cy) {\r\n\t\tlet str_damage = damage.toFixed(0);\r\n\r\n\t\t/** @type {Sprite} */\r\n\t\tlet texture;\r\n\t\tlet text_width = 0;\r\n\r\n\t\t{\r\n\t\t\ttexture = this.textures[1][str_damage[0]];\r\n\t\t\ttext_width += -texture.x;\r\n\t\t\ttext_width += font_adv(texture);\r\n\r\n\t\t\tfor (let i = 1; i < str_damage.length - 1; ++i) {\r\n\t\t\t\ttexture = this.textures[0][str_damage[i]];\r\n\r\n\t\t\t\ttext_width += font_adv(texture);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tlet x = cx - text_width / 2;\r\n\r\n\t\t\ttexture = this.textures[1][str_damage[0]];\r\n\t\t\ttexture.draw2(x, cy);\r\n\t\t\tx += font_adv(texture);\r\n\r\n\t\t\tfor (let i = 1; i < str_damage.length; ++i) {\r\n\t\t\t\ttexture = this.textures[0][str_damage[i]];\r\n\r\n\t\t\t\ttexture.draw2(x, cy + this.rand_y[i]);\r\n\r\n\t\t\t\tx += font_adv(texture);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._display_axis) {\r\n\t\t\tconst ctx = renderer.ctx;\r\n\t\t\tlet x = cx - text_width / 2;\r\n\r\n\t\t\ttexture = this.textures[1][str_damage[0]];\r\n\t\t\tdraw_axis(ctx, x, cy);\r\n\t\t\tx += font_adv(texture);\r\n\r\n\t\t\tfor (let i = 1; i < str_damage.length; ++i) {\r\n\t\t\t\ttexture = this.textures[0][str_damage[i]];\r\n\r\n\t\t\t\tdraw_axis(ctx, x, cy + this.rand_y[i]);\r\n\r\n\t\t\t\tx += font_adv(texture);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget _default_base_path() {\r\n\t\treturn \"/Effect/BasicEff\";\r\n\t}\r\n\tget _skin_base_path() {\r\n\t\treturn \"/Effect/BasicEff/damageSkin/\";\r\n\t}\r\n}\r\nDamageNumberRenderer.loaded_skin = loaded_skin;\r\nDamageNumberRenderer.max_display_digit = Math.trunc(Math.log10(Number.MAX_SAFE_INTEGER) + 1);\r\nDamageNumberRenderer.max_rand_y = 5;\r\n\r\n\r\nexport class DamageNumber extends Drawable {\r\n\t/**\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t * @param {DamagePair} damagePair\r\n\t * @param {number} x - center_x\r\n\t * @param {number} y - bottom_y\r\n\t * @param {number} delay\r\n\t */\r\n\tconstructor(skin, style, damagePair, x, y, delay) {\r\n\t\tsuper();\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\tthis.vy = DamageNumber.move_y / DamageNumber.time_tt;\r\n\r\n\t\tthis.delay = delay;\r\n\t\tthis.time = 0;\r\n\t\tthis.state = 0;\r\n\r\n\t\tthis.damagePair = damagePair;\r\n\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tthis.renderer;\r\n\r\n\t\tthis._load(skin, style);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t * @param {number} recursive\r\n\t */\r\n\t_load(skin, style, recursive) {\r\n\t\t/** @type {DamageNumberRenderer} */\r\n\t\tlet loaded;\r\n\t\t\r\n\t\tif (loaded_skin[skin]) {\r\n\t\t\tloaded = loaded_skin[skin][style];\r\n\t\t}\r\n\r\n\t\tif (loaded) {\r\n\t\t\tthis.renderer = loaded;\r\n\r\n\t\t\tthis._$promise = this.renderer._$promise;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.renderer = new DamageNumberRenderer();\r\n\t\t\tthis._$promise = this.renderer.load(skin, style);\r\n\t\t}\r\n\t\tif (this._$promise) {\r\n\t\t\tthis.render = this.$noRender;\r\n\r\n\t\t\tthis._$promise\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tdelete this.render;\r\n\t\t\t\t\tdelete this._$promise;\r\n\t\t\t\t}).catch(() => {\r\n\t\t\t\t\tdelete this._$promise;\r\n\t\t\t\t\tconsole.error(`Can't load damageSkin[${skin}][${style}]`);\r\n\r\n\t\t\t\t\tif (recursive) {\r\n\t\t\t\t\t\tthrow Error();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tconsole.log(`try load damageSkin[\"default\"][${style}]`);\r\n\t\t\t\t\t\tthis._load(\"default\", style, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t$noRender() {\r\n\t\t// nothing\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tthis.state = 2;\r\n\t}\r\n\r\n\tisEnd() {\r\n\t\treturn this.state >= 1 && this.time > 1000;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t\tthis.time += stamp;\r\n\r\n\t\tif (this.delay && this.time >= this.delay) {\r\n\t\t\tthis.time = 0;\r\n\t\t\tthis.delay = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.y += this.vy * stamp;\r\n\r\n\t\t\tif (this.state == 0) {\r\n\t\t\t\tthis.vy = this.vy * DamageNumber.move_avy;\r\n\r\n\t\t\t\tif (this.time > DamageNumber.time_d1) {\r\n\t\t\t\t\tthis.time = 0;\r\n\t\t\t\t\tthis.state = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (this.state == 1) {\r\n\t\t\t\tthis.vy = this.vy * DamageNumber.move_avy2;\r\n\r\n\t\t\t\tif (this.time < DamageNumber.time_d2) {\r\n\t\t\t\t\tthis.opacity = 1 - (this.time / DamageNumber.time_d2);\r\n\t\t\t\t\t//this.opacity = Math.clamp(this.opacity, 0, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {IRenderer} renderer\r\n\t */\r\n\trender(renderer) {\r\n\t\tthis.renderer.draw(renderer, this.damagePair.realDamage, this.damagePair.critical, this.x, this.y);\r\n\t}\r\n}\r\nDamageNumber.time_d1 = 1000;\r\nDamageNumber.time_d2 = 1000;\r\nDamageNumber.time_tt = DamageNumber.time_d1 + DamageNumber.time_d2;\r\nDamageNumber.move_y = -300;\r\nDamageNumber.move_avy = 1.001;\r\nDamageNumber.move_avy2 = 0.99;\r\n\r\nexport class DamageNumberTest extends DamageNumber {\r\n\t/**\r\n\t * @param {number} stamp\r\n\t */\r\n\tupdate(stamp) {\r\n\t}\r\n\tisEnd() {\r\n\t\treturn this.is_end;\r\n\t}\r\n}\r\n\r\nexport class DamageNumberLayer extends Layer {\r\n\t//constructor() {\r\n\t//\tsuper();\r\n\t//}\r\n\r\n\t/**\r\n\t * @param {number} realDamage\r\n\t * @param {number} critical\r\n\t * @param {number} x - center_x\r\n\t * @param {number} y - bottom_y\r\n\t * @param {number} delay\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t */\r\n\t_addTest(realDamage = 9876543210, critical = false, x = 0, y = 0, delay = 0, skin = null, style = \"NoRed\") {\r\n\t\tthis.objects.push(new DamageNumber(skin, style, new DamagePair(realDamage, critical), x, y, delay));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} realDamage\r\n\t * @param {number} critical\r\n\t * @param {number} x - center_x\r\n\t * @param {number} y - bottom_y\r\n\t * @param {number} delay\r\n\t * @param {string} skin\r\n\t * @param {string} style\r\n\t */\r\n\t_addTest2(realDamage = 9876543210, critical = false, x = 0, y = 0, delay = 0, skin = null, style = \"NoRed\") {\r\n\t\tthis.objects.push(new DamageNumberTest(skin, style, new DamagePair(realDamage, critical), x, y, delay));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} style\r\n\t * @param {AttackInfo} attackInfo\r\n\t */\r\n\t_addAttack(skin, style, attackInfo) {\r\n\t\tattackInfo.allAttack.forEach(attack => {\r\n\t\t\tlet target = attack.getTargetObject();\r\n\t\t\tif (target) {\r\n\t\t\t\tconst pos = target.$physics.getPosition();\r\n\t\t\t\tlet x, y;\r\n\r\n\t\t\t\tx = pos.x * $gv.CANVAS_SCALE;\r\n\t\t\t\ty = pos.y * $gv.CANVAS_SCALE - 70;\r\n\r\n\t\t\t\tattack.allDamage.forEach(damage => {\r\n\t\t\t\t\tthis.addDamagePair(skin, style, damage, x, y);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @template K\r\n\t * @param {string} skin\r\n\t * @param {K extends keyof loaded_skin[skin] ? K:never} style\r\n\t * @param {DamagePair} damagePair\r\n\t * @param {number} x - center_x\r\n\t * @param {number} y - bottom_y\r\n\t * @param {number} delay\r\n\t */\r\n\taddDamagePair(skin, style, damagePair, x, y, delay = 0) {\r\n\t\tthis.objects.push(new DamageNumber(skin, style, damagePair, x, y, delay));\r\n\t}\r\n}\r\n\r\n\r\nexport const damageNumberLayer = new DamageNumberLayer();\r\n\r\nwindow.$damageNumberLayer = damageNumberLayer;\r\nwindow.$DamageNumber = DamageNumber\r\nwindow.$DamageNumberTest = DamageNumberTest;\r\nwindow.$DamageNumberRenderer = DamageNumberRenderer;\r\n//DamageNumberRenderer.prototype._display_axis = true;\r\n\r\n","\r\nimport { Randomizer } from \"../math.js\";\r\n\r\nimport { Animation } from \"../Animation.js\";\r\nimport { SceneObject } from \"../SceneObject.js\";\r\n\r\nimport { MobSkillBallDefinition, MobSkillBallBase, MobSkillBase } from \"./MobSkillBase.js\";\r\n\r\nclass FlowerTrapBallDefinition extends MobSkillBallDefinition {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.size = 0;// 1~3\r\n\t}\r\n}\r\n\r\nexport class FlowerTrapBall extends MobSkillBallBase {\r\n\t/**\r\n\t * @param {FlowerTrapBallDefinition} ballDef\r\n\t */\r\n\tconstructor(ballDef, animations) {\r\n\t\tsuper(ballDef, animations);\r\n\t\t\r\n\t\tthis.renderer = animations[ballDef.size].clone();\r\n\t}\r\n\t\r\n\t/** @param {PWorld} pWorld */\r\n\tcreate(pWorld) {\r\n\t\tthis.$physics = {// make dummy for debug\r\n\t\t\tstate: {}\r\n\t\t};\r\n\t\t\r\n\t\tsuper.create(pWorld);//complete create\r\n\t}\r\n\t\r\n\tget _BallDefinition() {\r\n\t\treturn FlowerTrapBallDefinition;\r\n\t}\r\n}\r\n\r\nexport class FlowerTrap extends MobSkillBase {\r\n\tconstructor(_raw, _url) {\r\n\t\tsuper(_raw, _url);\r\n\t\tthis.patterns = {};\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {number} pattern - 0~2 int\r\n\t * @param {number} x - int\r\n\t * @param {number} y - int\r\n\t * @param {boolean} flip - not sure\r\n\t */\r\n\t_invoke(pattern, x, y, flip) {\r\n\t\tconst pats = this._raw[\"pattern\" + pattern];\r\n\t\tfor (let i = 0; i in pats; ++i) {\r\n\t\t\tconst pat = pats[i];\r\n\t\t\tlet mx, my, angle;\r\n\t\t\t\r\n\t\t\tmx = x + (flip ? (-pat.pos.x) : (pat.pos.x));\r\n\t\t\tmy = y + pat.pos.y;\r\n\t\t\tangle = pat.angle - 90;//texture is vertical, angle - 90deg\r\n\t\t\t\r\n\t\t\tlet ball = new FlowerTrapBall({\r\n\t\t\t\tx: mx, y: my, angle: angle,\r\n\t\t\t\tsize: pat.size,\r\n\t\t\t\tcreateDelay: pat.createDelay,\r\n\t\t\t\tcollisionDelay: pat.collisionDelay,\r\n\t\t\t\tduration: pat.duration\r\n\t\t\t}, this.animations);\r\n\t\t\t\r\n\t\t\t$gv.SceneObjectMgr.addToScene(10, ball);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** @returns {void} */\r\n\tinvoke() {\r\n\t\tthis._invoke(Randomizer.nextInt(3), 1000, 48, Randomizer.nextBoolean());\r\n\t}\r\n\t\r\n\t/** @returns {string[]} */\r\n\tget _anima_name_list() {\r\n\t\treturn [\"XL\", \"L\", \"M\", \"S\"];\r\n\t}\r\n\t\r\n\t/** @returns {string} */\r\n\tget _base_path() {\r\n\t\treturn \"/Skill/MobSkill/238/level\";\r\n\t}\r\n}\r\n\r\n","﻿\r\nimport { CharacterStat, $RemotePlayerData, $PlayerData } from \"../../Common/PlayerData\";\r\n\r\nexport class $RequestPacket_SelectChara {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.charaId = undefined;\r\n\t}\r\n}\r\nexport class $ResponsePacket_SelectChara {\r\n\tconstructor() {\r\n\t\t/** @type {$PlayerData} */\r\n\t\tthis.charaData = null;\r\n\r\n\t\t/** @type {$RemotePlayerData[]} */\r\n\t\tthis.remoteCharacters = null;\r\n\t}\r\n}\r\n","﻿\r\n\r\nexport class $Packet_CharacterChat {\r\n\tconstructor() {\r\n\t\t/** @type {number} - chat type */\r\n\t\tthis.type = null;\r\n\r\n\t\t/** @type {number} - ChatBalloon style */\r\n\t\tthis.$style = null;\r\n\r\n\t\t/** @type {string} - chat text */\r\n\t\tthis.text = null;\r\n\t}\r\n}\r\n","﻿\r\nimport { CharacterMoveElem } from \"../../Client/PMovePath\";\r\n\r\n/**\r\n * @type {{[x:string]:string}[]}\r\n */\r\nconst keyboard_map = [{\r\n\tArrowUp: \"up\",\r\n\tArrowLeft: \"left\",\r\n\tArrowDown: \"down\",\r\n\tArrowRight: \"right\",\r\n\tz: \"jump\",\r\n\tx: \"skill_1\",\r\n\tc: \"skill_2\",\r\n\tv: \"skill_3\",\r\n},\r\n{\r\n\tw: \"up\",\r\n\ta: \"left\",\r\n\ts: \"down\",\r\n\td: \"right\",\r\n\tq: \"jump\",\r\n\tx: \"skill_1\",\r\n\tc: \"skill_2\",\r\n\tv: \"skill_3\",\r\n}];\r\n\r\nexport class $Packet_CharacterMove {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.id = undefined;\r\n\r\n\t\t/** @type {CharacterMoveElem[]} */\r\n\t\tthis.path = [];\r\n\r\n\t\t/** @type {number} - time stamp */\r\n\t\tthis.stamp = (new Date().getTime());\r\n\t}\r\n\tcapture(chara) {\r\n\t\tconst phy = chara.$physics;\r\n\t\tconst body = phy.body;\r\n\t\tlet elem = new CharacterMoveElem();\r\n\r\n\t\t{\r\n\t\t\tconst crr = chara.renderer;\r\n\r\n\t\t\telem.action = crr.action;\r\n\t\t\t//elem.action_frame = crr.action_frame;\r\n\t\t\telem.emotion = crr.emotion;\r\n\t\t\t//elem.emotion_frame = crr.emotion_frame;\r\n\t\t}\r\n\r\n\t\telem.isAwake = body.IsAwake();\r\n\t\tif (elem.isAwake) {\r\n\r\n\t\t\tlet pos = phy.getPosition();\r\n\t\t\tlet vel = body.GetLinearVelocity();\r\n\r\n\t\t\telem.x = pos.x;\r\n\t\t\telem.y = pos.y;\r\n\t\t\telem.vx = vel.x;\r\n\t\t\telem.vy = vel.y;\r\n\t\t\t//elem.fx = force.x;\r\n\t\t\t//elem.fy = force.y;\r\n\r\n\t\t\telem.pState = phy.state;\r\n\r\n\t\t\telem.elapsed = (new Date().getTime()) - this.stamp;\r\n\t\t}\r\n\r\n\t\tthis.path.push(elem);\r\n\t}\r\n}\r\n\r\nclass $CharacterMoveItemElem {\r\n\tconstructor() {\r\n\t\t/** @type {number} */\r\n\t\tthis.from = null;\r\n\r\n\t\t/** @type {number} */\r\n\t\tthis.to = null;\r\n\r\n\t\t/** @type {string} - equip id */\r\n\t\tthis.item = null;\r\n\t}\r\n}\r\nclass $Packet_CharacterMoveItem {\r\n\tconstructor() {\r\n\t\t/** @type {$CharacterMoveItemElem} */\r\n\t\tthis.elem = [];\r\n\t}\r\n}\r\n\r\nclass $Packet_CharacterSkill {\r\n\tconstructor() {\r\n\t\t/** @type {string} */\r\n\t\tthis.skillId = null;\r\n\t}\r\n}\r\n"],"sourceRoot":""}