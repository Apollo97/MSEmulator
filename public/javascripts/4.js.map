{"version":3,"sources":["webpack:///./src/game/init.js","webpack:///./public/javascripts/resource.js","webpack:///./src/game/Physics/Physics.js","webpack:///./src/game/Physics/Filter.js","webpack:///./src/box2d.ts/build/Common/b2Settings.js","webpack:///./src/box2d.ts/build/Common/b2Math.js","webpack:///./src/box2d.ts/build/Common/b2Draw.js","webpack:///./src/box2d.ts/build/Common/b2Timer.js","webpack:///./src/box2d.ts/build/Common/b2GrowableStack.js","webpack:///./src/box2d.ts/build/Common/b2BlockAllocator.js","webpack:///./src/box2d.ts/build/Common/b2StackAllocator.js","webpack:///./src/box2d.ts/build/Collision/b2Distance.js","webpack:///./src/box2d.ts/build/Collision/b2Collision.js","webpack:///./src/box2d.ts/build/Collision/b2DynamicTree.js","webpack:///./src/box2d.ts/build/Collision/b2BroadPhase.js","webpack:///./src/box2d.ts/build/Collision/b2TimeOfImpact.js","webpack:///./src/box2d.ts/build/Collision/b2CollideCircle.js","webpack:///./src/box2d.ts/build/Collision/b2CollidePolygon.js","webpack:///./src/box2d.ts/build/Collision/b2CollideEdge.js","webpack:///./src/box2d.ts/build/Collision/Shapes/b2Shape.js","webpack:///./src/box2d.ts/build/Dynamics/b2Body.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2Joint.js","webpack:///./src/box2d.ts/build/Collision/Shapes/b2CircleShape.js","webpack:///./src/box2d.ts/build/Collision/Shapes/b2PolygonShape.js","webpack:///./src/box2d.ts/build/Collision/Shapes/b2EdgeShape.js","webpack:///./src/box2d.ts/build/Collision/Shapes/b2ChainShape.js","webpack:///./src/box2d.ts/build/Dynamics/b2Fixture.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2DistanceJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2AreaJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2FrictionJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2GearJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2MotorJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2MouseJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2PrismaticJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2PulleyJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2RevoluteJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2RopeJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2WeldJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Joints/b2WheelJoint.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2Contact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2CircleContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2PolygonContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2PolygonAndCircleContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2EdgeAndCircleContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2EdgeAndPolygonContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2ChainAndCircleContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2ChainAndPolygonContact.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2ContactFactory.js","webpack:///./src/box2d.ts/build/Dynamics/b2WorldCallbacks.js","webpack:///./src/box2d.ts/build/Dynamics/b2ContactManager.js","webpack:///./src/box2d.ts/build/Dynamics/b2TimeStep.js","webpack:///./src/box2d.ts/build/Dynamics/Contacts/b2ContactSolver.js","webpack:///./src/box2d.ts/build/Dynamics/b2Island.js","webpack:///./src/box2d.ts/build/Particle/b2Particle.js","webpack:///./src/box2d.ts/build/Particle/b2ParticleGroup.js","webpack:///./src/box2d.ts/build/Particle/b2StackQueue.js","webpack:///./src/box2d.ts/build/Particle/b2VoronoiDiagram.js","webpack:///./src/box2d.ts/build/Particle/b2ParticleSystem.js","webpack:///./src/box2d.ts/build/Dynamics/b2World.js","webpack:///./src/box2d.ts/build/Controllers/b2Controller.js","webpack:///./src/box2d.ts/build/Controllers/b2BuoyancyController.js","webpack:///./src/box2d.ts/build/Controllers/b2ConstantAccelController.js","webpack:///./src/box2d.ts/build/Controllers/b2ConstantForceController.js","webpack:///./src/box2d.ts/build/Controllers/b2GravityController.js","webpack:///./src/box2d.ts/build/Controllers/b2TensorDampingController.js","webpack:///./src/box2d.ts/build/Rope/b2Rope.js","webpack:///./src/box2d.ts/build/Box2D.js","webpack:///./src/game/Physics/DebugDraw.js"],"names":["GlobalVar","[object Object]","isMobile","test","navigator","userAgent","this","is_mobile","m_is_run","MAX_FPS","FRAME_ELAPSED","CANVAS_SCALE","m_editor_mode","m_display_foothold","m_display_physics_debug","m_display_debug_info","m_debugDraw","_Physics_DebugDraw_js__WEBPACK_IMPORTED_MODULE_4__","m_display_selected_object","m_selected_object","m_hover_object","m_viewRect","_math_js__WEBPACK_IMPORTED_MODULE_3__","m_is_rendering_map","m_display_back","m_display_front","m_display_mapobj","m_display_maptile","m_display_particle_system","m_display_skeletal_anim","m_display_portal","m_display_name_label","m_display_player","m_display_other_player","m_display_life","m_display_npc","m_display_mob","NameLabel_default_style","ChatBalloon_default_style","ChatBalloon_display_duration","input_keyDown","input_keyUp","mouse_move","mouse_x","mouse_y","mouse_dl","mouse_ul","mouse_dm","mouse_um","mouse_dr","mouse_ur","SceneObjectMgr","layeredObjects","i","lo","Object","defineProperty","enumerable","writable","value","Update","stamp","layer","length","uid","update","RenderLayer","engine","render","addToScene","obj","Number","isSafeInteger","TypeError","$layer","$objectid","destroy","$gv","window","$failed_urls","$archive","character_emotion_list","character_action_list","ItemCategoryInfo","id_prefix","imgDir","listPath","slot","categoryName","type","stringPath","path","FragmentType","dataDir","stringDir","iconPath","iconRawPath","alert","Math","trunc","s","Error","defineProperties","itemId","results","info","get","padStart","Promise","all","$get","data","then","a","name","ex","assign","id","desc","__v","DATA_TAG","DATA_VERSION","icon","iconRaw","getIconUrl","getIconRawUrl","_info","slice","console","warn","_id","job","$ItemCategoryInfo","Equip","Consume","Etc","Install","Cash","typeName","0","1","2","3","4","typeId","0000","0001","0002","0003","0004","0100","0101","0102","0103","0104","0105","0106","0107","0108","0109","0110","0121","0122","0123","0124","0125","0126","0127","0128","0130","0131","0132","0133","0134","013526","013530","0136","0137","0138","0140","0141","0142","0143","0144","0145","0146","0147","0148","0149","0150","0151","0152","0153","0154","0155","0156","0157","0158","0170","019","0301","_categoryList","info_map","list","set","Set","cat","key","has","add","push","ResourceManager","cateInfo","dp","es","equip_map","url","$setValue","JSON","parse","resolve","reject","xhr","XMLHttpRequest","open","timeout","onload","status","responseText","ontimeout","e","onabort","send","root_path","$ROOT_PATH","archive","failed_urls","endsWith","ps","split","target","lastIndex","origin_value","$getValue","$ResourceManager","symbol_isPack","Symbol","url_startsWith_protocol","RegExp","prototype","bind","_setValueByPath","is_pack","startsWith","_getValueFromArchiveByPath","_path","_getDataPathByUrl","$getValueAsync","async","result","pack","packUrl","task","jsonText","packSync","dataUrl","dataSync","listUrl","listSync","keys","imageUrl","soundMp3Url","soundWavUrl","assetUrl","asset","ItemAttrNormalize","item","gender","g","_equip","regexp_getHairStyleID","regexp_getFaceStyleID","regexp_getHairColor","regexp_getFaceColor","CharacterRenderConfig","style","m","match","color","id_1","id_2","getColorHairID","getColorFaceID","String","ItemTypeInfo","Hat","Cape","Top","Overall","Glove","Bottom","Shield","Shoes","Eye Decoration","Earrings","Face Accessory","Face","Hair","external","equip","cate","load_external_resource","raw","_external_raw","typeInfo","overallCategory","clz","toLowerCase","subCategory","getFaceColor","getHairColor","it","cash","isCash","","error","external_resource_promise","_concat_external_resource_p","category","origin_data","_concat_external_resource","concat_external_resource","id_map","Map","forEach","ori_item","_name","_desc","$foreign","trigger_update_external_equip_list","load_extern_item_data","_raw","default_","frameBooks","default","frames","_act","act","j","frame","effects","_frags","frags","k","_frag","image","origin","originOrZero","center","map","mapOffset","z","position","islot","metaInfo","vslot","box2d","__webpack_require__","FilterHelper","b2Vec2","b2Body","b2Fixture","b2Contact","b2Manifold","b2ContactImpulse","b2ContactListener","$box2d","b2Vec2_temp","$type","Step","_on_step","fn","AfterStep","_on_after_step","addStep","func","addAfterStep","SetLinearVelocity2","x","y","SetLinearVelocity","ApplyForceToCenter2","ApplyForceToCenter","ApplyLinearImpulseToCenter2","ApplyLinearImpulseToCenter","Acceleration","desiredVel","sourceVel","point","GetWorldCenter","velChange","SubVV","GetMass","ix","iy","impulse","ApplyLinearImpulse","AccelerationX","desiredVelX","velChangeX","AccelerationY","desiredVelY","velChangeY","ConstantVelocity","GetLinearVelocity","ConstantVelocity2","pointX","pointY","ConstantVelocityWorldCenter2","ConstantVelocityX","ConstantVelocityY","beginContact","contact","fa","fb","endContact","preSolve","oldManifold","postSolve","getOwnerID","host","GetUserData","owner","module","exports","FixtureContactListener","filter_preset","next_category","_box2d_ts_build_Box2D_js__WEBPACK_IMPORTED_MODULE_0__","preset","maskBits","categoryBits","debugName","debugCategory","groupIndex","filter_table","filter_list","registerCategory","contactFilter","Fixture","filterName","GetFilterData","GetBody","GetType","ShouldCollideConnected","ShouldCollide","b2Assert","condition","args","b2Maybe","def","undefined","b2_maxFloat","b2_epsilon","b2_epsilon_sq","b2_pi","b2_maxManifoldPoints","b2_maxPolygonVertices","b2_aabbExtension","b2_aabbMultiplier","b2_linearSlop","b2_angularSlop","b2_polygonRadius","b2_maxSubSteps","b2_maxTOIContacts","b2_velocityThreshold","b2_maxLinearCorrection","b2_maxAngularCorrection","b2_maxTranslation","b2_maxTranslationSquared","b2_maxRotation","b2_maxRotationSquared","b2_baumgarte","b2_toiBaumgarte","b2_invalidParticleIndex","b2_particleStride","b2_minParticleWeight","b2_maxParticlePressure","b2_maxParticleForce","b2_maxTriadDistanceSquared","b2_minParticleSystemBufferCapacity","b2_barrierCollisionTime","b2_timeToSleep","b2_linearSleepTolerance","b2_angularSleepTolerance","b2Alloc","size","b2Free","mem","b2Log","message","b2Version","major","minor","revision","b2_version","b2ParseInt","v","parseInt","b2ParseUInt","abs","b2MakeArray","init","b2MakeNullArray","b2MakeNumberArray","b2_pi_over_180","b2_180_over_pi","b2_two_pi","b2Abs","b2Min","min","b2Max","max","b2Clamp","hi","b2Swap","b","tmp","b2IsValid","isFinite","b2Sq","n","b2InvSqrt","sqrt","b2Sqrt","b2Pow","pow","b2DegToRad","degrees","b2RadToDeg","radians","b2Cos","cos","b2Sin","sin","b2Acos","acos","b2Asin","asin","b2Atan2","atan2","b2NextPowerOfTwo","b2IsPowerOfTwo","b2Random","random","b2RandomRange","b2Math_b2Vec2","other","Length","inv_length","c","out","v_x","v_y","c_x","c_y","ZERO","UNITX","UNITY","s_t0","s_t1","s_t2","s_t3","b2Vec2_zero","b2Vec3","a_x","a_y","a_z","b_x","b_y","b_z","b2Mat22","ey","Copy","c1","c2","SetVV","r1c1","r1c2","r2c1","r2c2","SetSSSS","SetAngle","SetZero","d","det","a11","a12","a21","a22","SelfAbs","GetInverse","M","SelfAdd","SelfSub","M_ex","M_ey","A","B","A_ex","A_ey","B_ex","B_ey","A_ex_x","A_ex_y","A_ey_x","A_ey_y","B_ex_x","B_ex_y","B_ey_x","B_ey_y","IDENTITY","b2Mat33","ez","c3","SetXYZ","a31","a32","a13","a23","a33","DotV3V3","CrossV3V3","v_z","b2Rot","angle","q","r","q_c","q_s","r_c","r_s","b2Transform","p","SetIdentity","pos","rotation","GetAngle","T","T_q_c","T_q_s","p_x","p_y","MulRR","AddVV","MulRV","MulTRR","MulTRV","b2Sweep","localCenter","c0","a0","alpha0","xf","beta","one_minus_beta","alpha","floor","b2Color","rr","gg","bb","aa","SetRGBA","mixColor","strength","MixColors","colorA","colorB","dr","dg","db","da","MakeStyleString","b2DrawFlags","RED","GREEN","BLUE","b2Draw","m_drawFlags","flags","b2Timer","m_start","Date","now","b2Counter","m_count","m_min_count","m_max_count","count","b2GrowableStack_b2GrowableStack","N","m_stack","index","element","b2BlockAllocator","b2StackAllocator","b2Distance_b2DistanceProxy","m_buffer","MakeArray","m_vertices","m_radius","shape","SetupDistanceProxy","vertices","radius","bestIndex","bestValue","DotVV","b2SimplexCache","metric","indexA","indexB","b2Distance_b2DistanceInput","proxyA","proxyB","transformA","transformB","useRadii","Reset","b2Distance_b2DistanceOutput","pointA","pointB","distance","iterations","b2Distance_b2ShapeCastInput","translationB","b2Distance_b2ShapeCastOutput","normal","lambda","b2_gjkCalls","b2_gjkIters","b2_gjkMaxIters","b2_gjk_reset","b2Distance_b2SimplexVertex","wA","wB","w","b2Distance_b2Simplex","m_v1","m_v2","m_v3","cache","wALocal","GetVertex","wBLocal","MulXV","metric1","metric2","GetMetric","NegV","e12","CrossVV","CrossOneV","CrossVOne","pA","pB","DistanceVV","w1","w2","s_e12","d12_2","d12_1","inv_d12","w3","w1e12","e13","s_e13","w1e13","d13_1","d13_2","e23","s_e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","b2Distance_s_simplex","b2Distance_s_saveA","b2Distance_s_saveB","b2Distance_s_p","b2Distance_s_d","b2Distance_s_normal","b2Distance_s_supportA","b2Distance_s_supportB","b2Distance","output","input","simplex","ReadCache","saveA","saveB","saveCount","iter","Solve2","Solve3","GetSearchDirection","LengthSquared","vertex","GetSupport","duplicate","GetWitnessPoints","WriteCache","rA","rB","Normalize","SelfMulAdd","SelfMulSub","MidVV","b2ShapeCast_s_n","b2ShapeCast_s_simplex","b2ShapeCast_s_wA","b2ShapeCast_s_wB","b2ShapeCast_s_v","b2ShapeCast_s_p","b2ShapeCast_s_pointA","b2ShapeCast_s_pointB","b2ShapeCast","xfA","xfB","sigma","tolerance","vp","vr","SelfNeg","GetClosestPoint","b2ContactFeatureType","b2ManifoldType","b2PointState","b2ContactFeature","_key","_key_invalid","_indexA","_indexB","_typeA","_typeB","typeA","typeB","b2ContactID","cf","o","b2Collision_b2ManifoldPoint","localPoint","normalImpulse","tangentImpulse","b2Collision_b2Manifold","points","localNormal","e_unknown","pointCount","b2Collision_b2WorldManifold","separations","manifold","radiusA","radiusB","e_circles","Initialize_s_pointA","Initialize_s_pointB","DistanceSquaredVV","SelfNormalize","cA","AddVMulSV","Initialize_s_cA","cB","SubVMulSV","Initialize_s_cB","e_faceA","planePoint","Initialize_s_planePoint","clipPoint","Initialize_s_clipPoint","e_faceB","b2GetPointStates","state1","state2","manifold1","manifold2","b2_removeState","jct","b2_persistState","b2_nullState","b2_addState","b2Collision_b2ClipVertex","b2Collision_b2RayCastInput","p1","p2","maxFraction","b2Collision_b2RayCastOutput","fraction","b2Collision_b2AABB","lowerBound","upperBound","m_cache_center","m_cache_extent","d_x","d_y","valid","IsValid","ExtVV","aabb","aabb1","aabb2","Combine2","tmin","tmax","absD_x","absD_y","inv_d","t1","t2","t3","d1_x","d1_y","d2_x","d2_y","b2TestOverlapAABB","b2ClipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","vIn0","vIn1","distance0","distance1","interp","e_vertex","e_face","b2TestOverlapShape_s_input","b2TestOverlapShape_s_simplexCache","b2TestOverlapShape_s_output","b2TestOverlapShape","shapeA","shapeB","SetShape","simplexCache","verify","b2DynamicTree_b2TreeNode","m_id","parent","child1","child2","height","b2DynamicTree_b2DynamicTree","m_root","m_freeList","m_path","m_insertionCount","callback","stack","Push","GetCount","node","Pop","TestOverlap","IsLeaf","TestContain","s_r","s_v","abs_v","AbsV","s_abs_v","segmentAABB","s_segmentAABB","t_x","t_y","GetCenter","h","GetExtents","subInput","s_subInput","userData","s_node_id","AllocateNode","r_x","r_y","InsertLeaf","proxy","RemoveLeaf","FreeNode","displacement","Contains","leaf","leafAABB","area","GetPerimeter","combinedAABB","s_combinedAABB","combinedArea","cost","inheritanceCost","cost1","s_aabb","oldArea","newArea","cost2","sibling","oldParent","newParent","index2","Balance","grandParent","C","balance","F","G","D","E","GetAreaNode","rootArea","height1","ComputeHeightNode","height2","ValidateStructure","ValidateMetrics","maxBalance","GetMaxBalanceNode","Validate","newOrigin","ShiftOriginNode","b2Pair","b2BroadPhase_b2BroadPhase","m_tree","m_proxyCount","m_moveCount","m_moveBuffer","m_pairCount","m_pairBuffer","CreateProxy","BufferMove","UnBufferMove","DestroyProxy","MoveProxy","queryProxy","fatAABB","Query","pair","sort","b2PairLessThan","primaryPair","QueryPoint","RayCast","GetHeight","GetMaxBalance","GetAreaRatio","ShiftOrigin","indexOf","pair1","pair2","b2_toiTime","b2_toiMaxTime","b2_toiCalls","b2_toiIters","b2_toiMaxIters","b2_toiRootIters","b2_toiMaxRootIters","b2_toi_reset","b2TimeOfImpact_s_xfA","b2TimeOfImpact_s_xfB","b2TimeOfImpact_s_pointA","b2TimeOfImpact_s_pointB","b2TimeOfImpact_s_normal","b2TimeOfImpact_s_axisA","b2TimeOfImpact_s_axisB","b2TimeOfImpact_b2TOIInput","sweepA","sweepB","tMax","b2TOIOutputState","b2SeparationFunctionType","b2TOIOutput","state","t","b2TimeOfImpact_b2SeparationFunction","m_sweepA","m_sweepB","m_type","m_localPoint","m_axis","m_proxyA","m_proxyB","GetTransform","e_points","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","axisA","axisB","b2TimeOfImpact_s_timer","b2TimeOfImpact_s_cache","b2TimeOfImpact_s_distanceInput","b2TimeOfImpact_s_distanceOutput","b2TimeOfImpact_s_fcn","b2TimeOfImpact_s_indexA","b2TimeOfImpact_s_indexB","b2TimeOfImpact_s_sweepA","b2TimeOfImpact_s_sweepB","b2TimeOfImpact","timer","maxVertices","totalRadius","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","Initialize","done","pushBackIter","s2","FindMinSeparation","e_separated","s1","Evaluate","e_failed","rootIterCount","a1","a2","time","GetMilliseconds","b2CollideCircles_s_pA","b2CollideCircles_s_pB","b2CollideCircles","circleA","circleB","m_p","distSqr","b2CollidePolygonAndCircle_s_c","b2CollidePolygonAndCircle_s_cLocal","b2CollidePolygonAndCircle_s_faceCenter","b2CollidePolygonAndCircle","polygonA","cLocal","MulTXV","normalIndex","separation","vertexCount","normals","m_normals","vertIndex1","vertIndex2","v1","v2","u1","u2","faceCenter","b2EdgeSeparation_s_normal1World","b2EdgeSeparation_s_normal1","b2EdgeSeparation_s_v1","b2EdgeSeparation_s_v2","b2EdgeSeparation","poly1","xf1","edge1","poly2","xf2","vertices1","normals1","count2","vertices2","normal1World","normal1","minDot","dot","b2FindMaxSeparation_s_d","b2FindMaxSeparation_s_dLocal1","b2FindMaxSeparation","edgeIndex","count1","m_centroid","dLocal1","edge","maxDot","prevEdge","sPrev","nextEdge","sNext","bestEdge","bestSeparation","increment","b2FindIncidentEdge_s_normal1","b2CollidePolygons_s_incidentEdge","b2CollidePolygons_s_clipPoints1","b2CollidePolygons_s_clipPoints2","b2CollidePolygons_s_edgeA","b2CollidePolygons_s_edgeB","b2CollidePolygons_s_localTangent","b2CollidePolygons_s_localNormal","b2CollidePolygons_s_planePoint","b2CollidePolygons_s_normal","b2CollidePolygons_s_tangent","b2CollidePolygons_s_ntangent","b2CollidePolygons_s_v11","b2CollidePolygons_s_v12","b2CollidePolygons","polyA","polyB","edgeA","separationA","edgeB","separationB","flip","incidentEdge","normals2","i1","i2","cf0","cf1","b2FindIncidentEdge","iv1","iv2","local_v11","local_v12","localTangent","tangent","v11","v12","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","np","cv","cp","b2CollideEdgeAndCircle_s_Q","b2CollideEdgeAndCircle_s_e","b2CollideEdgeAndCircle_s_d","b2CollideEdgeAndCircle_s_e1","b2CollideEdgeAndCircle_s_e2","b2CollideEdgeAndCircle_s_P","b2CollideEdgeAndCircle_s_n","b2CollideEdgeAndCircle_s_id","b2CollideEdgeAndCircle","Q","m_vertex1","m_vertex2","u","P","m_hasVertex0","A1","m_vertex0","B1","e1","m_hasVertex3","B2","m_vertex3","A2","e2","den","b2EPAxis","b2TempPolygon","b2CollideEdge_b2EPCollider","m_polygonB","m_xf","m_centroidB","m_v0","m_normal0","m_normal1","m_normal2","m_normal","m_type1","m_type2","m_lowerLimit","m_upperLimit","m_front","polygonB","MulTXX","hasVertex0","hasVertex3","s_edge1","offset1","offset0","offset2","convex1","convex2","edge0","s_edge0","edge2","s_edge2","edgeAxis","ComputeEdgeSeparation","s_edgeAxis","polygonAxis","ComputePolygonSeparation","s_polygonAxis","primaryAxis","ie","s_ie","rf","s_rf","ie0","ie1","sideNormal1","sideNormal2","s_clipPoints1","s_clipPoints2","axis","perp","s_perp","s_n","b2CollideEdgeAndPolygon_s_collider","b2CollideEdgeAndPolygon","Collide","b2Shape_b2MassData","mass","I","b2ShapeType","b2BodyType","b2JointType","b2LimitState","b2Shape","b2CircleShape_b2CircleShape","super","e_circleShape","transform","TestPoint_s_center","TestPoint_s_d","childIndex","ComputeDistance_s_center","RayCast_s_position","RayCast_s_s","RayCast_s_r","ComputeAABB_s_p","massData","density","radius_sq","l","r2","l2","com","log","b2PolygonShape_b2PolygonShape","e_polygonShape","start","SetAsBox","unique","i0","x0","hull","ih","Set_s_r","Set_s_v","vertexi1","vertexi2","ComputeCentroid","hx","hy","SetPosition","SetRotationAngle","pLocal","TestPoint_s_pLocal","ComputeDistance_s_pLocal","maxDistance","normalForMaxDistance","ComputeDistance_s_normalForMaxDistance","minDistance","ComputeDistance_s_minDistance","minDistance2","ComputeDistance_s_distance","distance2","RayCast_s_p1","RayCast_s_p2","RayCast_s_d","lower","upper","numerator","denominator","ComputeAABB_s_v","MinV","MaxV","SelfSubXY","SelfAddXY","ComputeMass_s_center","ComputeMass_s_s","SelfMul","ComputeMass_s_e1","ComputeMass_s_e2","triangleArea","MulSV","ex1","ey1","ex2","ey2","Validate_s_e","Validate_s_v","normalL","ComputeSubmergedArea_s_normalL","offsetL","depths","diveCount","intoIndex","outoIndex","lastSubmerged","isSubmerged","md","ComputeSubmergedArea_s_md","ComputeMass","intoIndex2","outoIndex2","intoLamdda","outoLamdda","intoVec","ComputeSubmergedArea_s_intoVec","outoVec","ComputeSubmergedArea_s_outoVec","ComputeSubmergedArea_s_center","p3","vs","pRef","ComputeCentroid_s_pRef","ComputeCentroid_s_e1","ComputeCentroid_s_e2","b2EdgeShape_b2EdgeShape","e_edgeShape","ComputeDistance_s_v1","ComputeDistance_s_v2","ComputeDistance_s_d","ComputeDistance_s_s","ds","RayCast_s_e","RayCast_s_q","ComputeAABB_s_v1","ComputeAABB_s_v2","b2ChainShape_b2ChainShape","e_chainShape","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","prevVertex","nextVertex","CreateChain","ComputeDistance_s_edgeShape","GetChildEdge","ComputeDistance","edgeShape","RayCast_s_edgeShape","b2Filter","DEFAULT","b2FixtureDef","friction","restitution","isSensor","filter","b2Fixture_b2FixtureProxy","fixture","b2Fixture_b2Fixture","body","m_density","m_next","m_friction","m_restitution","m_proxies","m_filter","m_isSensor","m_userData","m_body","m_shape","Clone","sensor","SetAwake","Refilter","GetContactList","fixtureA","GetFixtureA","fixtureB","GetFixtureB","FlagForFiltering","next","world","GetWorld","broadPhase","m_contactManager","m_broadPhase","TouchProxy","treeNode","TestPoint","bodyIndex","Dump","GetChildCount","m_world","ComputeAABB","proxyCount","transform1","transform2","Synchronize_s_aabb1","Synchronize_s_aabb2","Synchronize_s_displacement","b2Body_b2BodyDef","b2_staticBody","linearVelocity","angularVelocity","linearDamping","angularDamping","allowSleep","awake","fixedRotation","bullet","active","gravityScale","b2Body_b2Body","bd","m_islandFlag","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_toiFlag","m_islandIndex","m_xf0","m_sweep","m_linearVelocity","m_angularVelocity","m_force","m_torque","m_prev","m_fixtureList","m_fixtureCount","m_jointList","m_contactList","m_mass","m_invMass","m_I","m_invI","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","m_controllerList","m_controllerCount","b2_dynamicBody","CreateFixtureShapeDensity","CreateFixtureDef","IsLocked","Create","CreateProxies","ResetMassData","m_newFixture","CreateFixtureShapeDensity_s_def","ppF","Destroy","DestroyProxies","SetTransformXY","f","Synchronize","FindNewContacts","SetTransformVec","GetPosition","force","wake","torque","oldCenter","SetMassData_s_oldCenter","AddVCrossSV","b2_kinematicBody","ResetMassData_s_localCenter","GetMassData","ResetMassData_s_massData","ResetMassData_s_oldCenter","localVector","worldPoint","worldVector","GetLinearVelocityFromWorldPoint","GetWorldPoint","scale","SynchronizeFixtures","ce","ce0","TouchProxies","flag","IsActive","type_str","SynchronizeFixtures_s_xf1","jn","joint","m_collideConnected","Advance","b2Joint_b2Jacobian","linear","angularA","angularB","b2JointEdge","prev","b2JointDef","e_unknownJoint","collideConnected","b2Joint_b2Joint","m_index","m_edgeA","bodyB","m_edgeB","bodyA","m_bodyA","m_bodyB","b2DistanceJoint_b2DistanceJointDef","e_distanceJoint","localAnchorA","localAnchorB","frequencyHz","dampingRatio","b1","b2","anchor1","anchor2","GetLocalPoint","b2DistanceJoint_b2DistanceJoint","m_frequencyHz","m_dampingRatio","m_bias","m_localAnchorA","m_localAnchorB","m_gamma","m_impulse","m_length","m_indexA","m_indexB","m_u","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_qA","m_qB","m_lalcA","m_lalcB","inv_dt","hz","ratio","positions","aA","vA","velocities","aB","vB","qA","qB","crAu","crBu","invMass","omega","step","dt","warmStarting","dtRatio","InitVelocityConstraints_s_P","vpA","SolveVelocityConstraints_s_vpA","vpB","SolveVelocityConstraints_s_vpB","Cdot","SolveVelocityConstraints_s_P","SolvePositionConstraints_s_P","b2AreaJoint_b2AreaJointDef","e_areaJoint","bodies","b2AreaJoint_b2AreaJoint","m_targetArea","m_bodies","m_targetLengths","m_joints","m_deltas","m_delta","djd","body_c","next_c","CreateJoint","SetFrequency","SetDampingRatio","prev_c","delta","body_v","dotMassSum","crossMassSum","perimeter","dist","toExtrude","next_i","norm_sq","b2FrictionJoint_b2FrictionJointDef","e_frictionJoint","maxForce","maxTorque","bA","bB","anchor","b2FrictionJoint_b2FrictionJoint","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","m_K","mA","mB","iA","iB","K","oldImpulse","maxImpulse","Cdot_v2","SolveVelocityConstraints_s_Cdot_v2","impulseV","MulMV","SolveVelocityConstraints_s_impulseV","oldImpulseV","SolveVelocityConstraints_s_oldImpulseV","b2GearJoint_b2GearJointDef","e_gearJoint","b2GearJoint_b2GearJoint","coordinateA","coordinateB","m_typeA","m_typeB","m_localAnchorC","m_localAnchorD","m_localAxisC","m_localAxisD","m_referenceAngleA","m_referenceAngleB","m_constant","m_ratio","m_indexC","m_indexD","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","m_qC","m_qD","m_lalcC","m_lalcD","m_joint1","joint1","m_joint2","joint2","m_bodyC","GetBodyA","GetBodyB","xfC","aC","e_revoluteJoint","revolute","m_referenceAngle","prismatic","m_localXAxisA","pC","m_bodyD","xfD","aD","pD","vC","wC","vD","wD","qC","qD","InitVelocityConstraints_s_u","rC","InitVelocityConstraints_s_rC","InitVelocityConstraints_s_rA","rD","InitVelocityConstraints_s_rD","InitVelocityConstraints_s_rB","cC","cD","JvAC","JvBD","JwA","JwB","JwC","JwD","SolvePositionConstraints_s_u","SolvePositionConstraints_s_rC","SolvePositionConstraints_s_rA","SolvePositionConstraints_s_rD","SolvePositionConstraints_s_rB","index1","b2MotorJoint_b2MotorJointDef","e_motorJoint","linearOffset","angularOffset","correctionFactor","angleA","angleB","b2MotorJoint_b2MotorJoint","m_linearOffset","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","IsEqualToV","inv_h","CrossSV","impulse_v2","SolveVelocityConstraints_s_impulse_v2","oldImpulse_v2","SolveVelocityConstraints_s_oldImpulse_v2","b2MouseJoint_b2MouseJointDef","e_mouseJoint","b2MouseJoint_b2MouseJoint","m_targetA","m_beta","m_C","IsAwake","SolveVelocityConstraints_s_Cdot","SolveVelocityConstraints_s_impulse","SolveVelocityConstraints_s_oldImpulse","b2PrismaticJoint_b2PrismaticJointDef","e_prismaticJoint","localAxisA","referenceAngle","enableLimit","lowerTranslation","upperTranslation","enableMotor","maxMotorForce","motorSpeed","GetLocalVector","b2PrismaticJoint_b2PrismaticJoint","m_localYAxisA","m_motorImpulse","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_motorSpeed","m_enableLimit","m_enableMotor","m_limitState","e_inactiveLimit","m_perp","m_s1","m_s2","m_a1","m_a2","m_K3","m_K2","m_motorMass","InitVelocityConstraints_s_d","jointTranslation","e_equalLimits","e_atLowerLimit","e_atUpperLimit","LA","LB","Cdot1_x","Cdot1_y","Cdot2","f1","SolveVelocityConstraints_s_f1","df3","Solve33","SolveVelocityConstraints_s_df3","f2r","Solve22","SolveVelocityConstraints_s_f2r","df2","SolveVelocityConstraints_s_df2","SolvePositionConstraints_s_d","SolvePositionConstraints_s_impulse","C1_x","C1_y","linearError","angularError","C2","translation","k11","k12","k13","k22","k23","k33","K2","impulse1","Solve","SolvePositionConstraints_s_impulse1","GetJointTranslation_s_pA","GetJointTranslation_s_pB","GetJointTranslation_s_d","GetWorldVector","GetJointTranslation_s_axis","speed","b2PulleyJoint_b2PulleyJointDef","e_pulleyJoint","groundAnchorA","groundAnchorB","lengthA","lengthB","groundA","groundB","anchorA","anchorB","b2PulleyJoint_b2PulleyJoint","m_groundAnchorA","m_groundAnchorB","m_lengthA","m_lengthB","m_uA","m_uB","ruA","ruB","PA","InitVelocityConstraints_s_PA","PB","InitVelocityConstraints_s_PB","SolveVelocityConstraints_s_PA","SolveVelocityConstraints_s_PB","uA","uB","SolvePositionConstraints_s_PA","SolvePositionConstraints_s_PB","GetCurrentLengthA_s_p","GetCurrentLengthB_s_p","b2RevoluteJoint_b2RevoluteJointDef","lowerAngle","upperAngle","maxMotorTorque","b2RevoluteJoint_b2RevoluteJoint","m_maxMotorTorque","m_lowerAngle","m_upperAngle","jointAngle","Cdot1","SolveVelocityConstraints_s_Cdot1","impulse_v3","SolveVelocityConstraints_s_impulse_v3","rhs_x","rhs_y","reduced_v2","SolveVelocityConstraints_s_reduced_v2","positionError","limitImpulse","C_v2","SolvePositionConstraints_s_C_v2","b2RopeJoint_b2RopeJointDef","e_ropeJoint","maxLength","b2RopeJoint_b2RopeJoint","m_maxLength","m_state","crA","crB","b2WeldJoint_b2WeldJointDef","e_weldJoint","b2WeldJoint_b2WeldJoint","GetInverse22","invM","GetSymInverse33","impulse2","MulM33XY","SolveVelocityConstraints_s_impulse1","MulM33XYZ","C1","SolvePositionConstraints_s_C1","b2WheelJoint_b2WheelJointDef","e_wheelJoint","b2WheelJoint_b2WheelJoint","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","m_springMass","damp","ay","sAy","sBy","GetPrismaticJointTranslation","GetPrismaticJointSpeed","GetRevoluteJointAngle","GetRevoluteJointSpeed","b2MixFriction","friction1","friction2","b2MixRestitution","restitution1","restitution2","b2ContactEdge","b2Contact_b2Contact","m_touchingFlag","m_enabledFlag","m_filterFlag","m_bulletHitFlag","m_manifold","m_toiCount","m_toi","m_tangentSpeed","m_oldManifold","m_nodeA","m_nodeB","worldManifold","m_fixtureA","m_fixtureB","GetShape","listener","tManifold","touching","wasTouching","sensorA","IsSensor","sensorB","mp2","id2","mp1","BeginContact","EndContact","PreSolve","ComputeTOI_s_input","ComputeTOI_s_output","b2CircleContact_b2CircleContact","allocator","b2PolygonContact_b2PolygonContact","b2PolygonAndCircleContact_b2PolygonAndCircleContact","b2EdgeAndCircleContact_b2EdgeAndCircleContact","b2EdgeAndPolygonContact_b2EdgeAndPolygonContact","b2ChainAndCircleContact_b2ChainAndCircleContact","chain","Evaluate_s_edge","b2ChainAndPolygonContact_b2ChainAndPolygonContact","b2ContactRegister","createFcn","destroyFcn","primary","b2ContactFactory_b2ContactFactory","m_allocator","InitializeRegisters","type1","type2","pool","poolCreateFcn","pop","poolDestroyFcn","m_registers","e_shapeTypeCount","AddType","reg","b2DestructionListener","group","system","b2WorldCallbacks_b2ContactFilter","filter1","filter2","b2_defaultFilter","b2WorldCallbacks_b2ContactImpulse","normalImpulses","tangentImpulses","b2_defaultListener","b2QueryCallback","b2RayCastCallback","b2ContactManager_b2ContactManager","m_contactCount","m_contactFilter","m_contactListener","m_contactFactory","fA","fB","GetChildIndexA","GetChildIndexB","UpdatePairs","AddPair","IsTouching","cNuke","activeA","activeB","b2Profile","collide","solve","solveInit","solveVelocity","solvePosition","broadphase","solveTOI","b2TimeStep","velocityIterations","positionIterations","particleIterations","b2TimeStep_b2Position","b2TimeStep_b2Velocity","b2SolverData","g_blockSolve","b2ContactSolver_b2VelocityConstraintPoint","normalMass","tangentMass","velocityBias","b2ContactSolver_b2ContactVelocityConstraint","invMassA","invMassB","invIA","invIB","tangentSpeed","contactIndex","b2ContactSolver_b2ContactPositionConstraint","localPoints","localCenterA","localCenterB","b2ContactSolver_b2ContactSolverDef","b2ContactSolver_b2PositionSolverManifold","pc","b2ContactSolver_b2ContactSolver","m_step","m_positionConstraints","m_velocityConstraints","new_length","m_positions","m_velocities","m_contacts","contacts","GetManifold","vc","vcp","InitializeVelocityConstraints_s_xfA","InitializeVelocityConstraints_s_xfB","InitializeVelocityConstraints_s_worldManifold","rnA","rnB","kNormal","rtA","rtB","kTangent","vRel","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","WarmStart_s_P","dv","SolveVelocityConstraints_s_dv","dv1","SolveVelocityConstraints_s_dv1","dv2","SolveVelocityConstraints_s_dv2","SolveVelocityConstraints_s_a","SolveVelocityConstraints_s_b","SolveVelocityConstraints_s_x","SolveVelocityConstraints_s_d","P1","SolveVelocityConstraints_s_P1","P2","SolveVelocityConstraints_s_P2","P1P2","SolveVelocityConstraints_s_P1P2","vt","maxFriction","newImpulse","vn","cp1","cp2","vn1","vn2","SolvePositionConstraints_s_xfA","SolvePositionConstraints_s_xfB","psm","SolvePositionConstraints_s_psm","minSeparation","toiIndexA","toiIndexB","SolveTOIPositionConstraints_s_xfA","SolveTOIPositionConstraints_s_xfB","SolveTOIPositionConstraints_s_psm","SolveTOIPositionConstraints_s_rA","SolveTOIPositionConstraints_s_rB","SolveTOIPositionConstraints_s_P","b2Island_b2Island","m_bodyCount","m_jointCount","m_bodyCapacity","m_contactCapacity","m_jointCapacity","bodyCapacity","contactCapacity","jointCapacity","m_listener","profile","gravity","s_timer","solverData","s_solverData","contactSolverDef","s_contactSolverDef","contactSolver","s_contactSolver","InitializeVelocityConstraints","WarmStart","InitVelocityConstraints","SolveVelocityConstraints","StoreImpulses","s_translation","positionSolved","contactsOkay","SolvePositionConstraints","jointsOkay","jointOkay","SynchronizeTransform","Report","minSleepTime","linTolSqr","angTolSqr","subStep","SolveTOIPositionConstraints","constraints","s_impulse","PostSolve","b2ParticleFlag","b2ParticleGroupFlag","b2Particle_b2ParticleDef","velocity","lifetime","b2CalculateParticleIterations","timeStep","ceil","b2Particle_b2ParticleHandle","b2ParticleGroup_b2ParticleGroupDef","groupFlags","shapeCount","stride","particleCount","b2ParticleGroup_b2ParticleGroup","m_firstIndex","m_lastIndex","m_groupFlags","m_strength","m_timestamp","m_inertia","m_center","m_transform","m_system","m_flagsBuffer","b2_particleGroupInternalMask","SetGroupFlags","UpdateStatistics","GetLinearVelocityFromWorldPoint_s_t0","ApplyForce","callDestructionListener","DestroyParticle","m_positionBuffer","m_velocityBuffer","GetParticleMass","inv_mass","b2StackQueue_b2StackQueue","capacity","m_back","m_capacity","concat","b2VoronoiDiagram_b2VoronoiDiagram","generatorCapacity","m_generatorCapacity","m_generatorCount","m_countX","m_countY","m_diagram","m_generatorBuffer","Generator","tag","necessary","margin","inverseRadius","necessary_count","queue","Task","Empty","Front","m_x","m_y","m_i","m_generator","ax","bx","by","std_iter_swap","array","default_compare","std_sort","first","len","cmp","left","pivot","right","std_stable_sort","std_remove_if","predicate","std_lower_bound","last","val","std_upper_bound","std_rotate","n_first","b2VoronoiDiagram","b2ParticleSystem_b2GrowableBuffer","Grow","newCapacity","Reserve","newEnd","newCount","pred","std_unique","b2ParticleSystem_b2FixtureParticleQueryCallback","childCount","GetAABB","enumerator","GetInsideBoundsEnumerator","GetNext","ReportFixtureAndParticle","b2ParticleSystem_b2ParticleContact","weight","rhs","IsEqual","b2ParticleSystem_b2ParticleBodyContact","b2ParticlePair","b2ParticleSystem_b2ParticleTriad","indexC","pa","pb","ka","kb","kc","b2ParticleSystemDef","strictContactCheck","maxCount","pressureStrength","dampingStrength","elasticStrength","springStrength","viscousStrength","surfaceTensionPressureStrength","surfaceTensionNormalStrength","repulsiveStrength","powderStrength","ejectionStrength","staticPressureStrength","staticPressureRelaxation","staticPressureIterations","colorMixingStrength","destroyByAge","lifetimeGranularity","b2ParticleSystem_b2ParticleSystem","m_paused","m_allParticleFlags","m_needsUpdateAllParticleFlags","m_allGroupFlags","m_needsUpdateAllGroupFlags","m_hasForce","m_iterationIndex","m_inverseDensity","m_particleDiameter","m_inverseDiameter","m_squaredDiameter","m_internalAllocatedCapacity","m_handleIndexBuffer","UserOverridableBuffer","m_forceBuffer","m_weightBuffer","m_staticPressureBuffer","m_accumulationBuffer","m_accumulation2Buffer","m_depthBuffer","m_colorBuffer","m_groupBuffer","m_userDataBuffer","m_stuckThreshold","m_lastBodyContactStepBuffer","m_bodyContactCountBuffer","m_consecutiveContactStepsBuffer","m_stuckParticleBuffer","m_proxyBuffer","Proxy","m_contactBuffer","m_bodyContactBuffer","m_triadBuffer","m_expirationTimeBuffer","m_indexByExpirationTimeBuffer","m_timeElapsed","m_expirationTimeBufferRequiresSorting","m_groupCount","m_groupList","m_def","SetStrictContactCheck","SetDensity","SetGravityScale","SetRadius","SetMaxParticleCount","SetDestructionByAge","yOffset","yShift","xScale","xOffset","xShift","DestroyParticleGroup","FreeUserOverridableBuffer","FreeBuffer","ReallocateInternalAllocatedBuffers","DestroyOldestParticle","SolveZombie","IsZero","RequestBuffer","Append","finiteLifetime","SetParticleLifetime","ExpirationTimeToLifetime","GetQuantizedTimeElapsed","RotateBuffer","SetParticleFlags","handle","SetIndex","b2_zombieParticle","b2_destructionListenerParticle","GetParticleCount","oldestFiniteLifetimeParticle","oldestInfiniteLifetimeParticle","DestroyParticlesInShape_s_aabb","DestroyParticlesInShapeCallback","QueryAABB","Destroyed","groupDef","s_transform","CreateParticleGroup_s_transform","SetPositionAngle","firstIndex","CreateParticlesWithShapeForGroup","shapes","CreateParticlesWithShapesForGroup","positionData","CreateParticleForGroup","ConnectionFilter","UpdateContacts","UpdatePairsAndTriads","JoinParticleGroups","groupA","groupB","JoinParticleGroupsFilter","nodeBuffer","ParticleListNode","InitializeParticleLists","MergeParticleListsInContact","survivingList","FindLongestParticleList","MergeZombieParticleListNodes","CreateParticleGroupsFromParticleList","UpdatePairsAndTriadsWithParticleList","paused","damping","newFlags","b2_tensileParticle","b2_colorMixingParticle","buffer","SetUserOverridableBuffer","steps","Data","ComputeCollisionEnergy_s_v","vel_data","sum_v2","enabled","initializeExpirationTimes","quantizedLifetime","newExpirationTime","GetExpirationTimeBuffer","enable","expirationTime","GetParticleLifetime","totalMass","velocityDelta","IsSignificantForce","ForceCanBeApplied","PrepareForceBuffer","distributedForce","endProxy","firstProxy","computeTag","CompareProxyTag","lastProxy","CompareTagProxy","pos_data","ReportParticle","QueryShapeAABB_s_aabb","slop","QueryPointAABB_s_aabb","point1","point2","RayCast_s_aabb","s_p","RayCast_s_p","RayCast_s_v","RayCast_s_n","s_point","RayCast_s_point","pv","determinant","sqrtDeterminant","userSuppliedCapacity","oldBuffer","oldCapacity","newBuffer","deferred","ReallocateBuffer3","ReallocateBuffer5","ReallocateBuffer4","LimitCapacity","ReallocateHandleBuffers","stuck","particleDef","CreateParticle","s_edge","CreateParticlesStrokeShapeForGroup_s_edge","s_d","CreateParticlesStrokeShapeForGroup_s_d","CreateParticlesStrokeShapeForGroup_s_p","GetParticleStride","positionOnEdge","edgeLength","CreateParticlesFillShapeForGroup_s_aabb","CreateParticlesFillShapeForGroup_s_p","identity","CreateParticlesStrokeShapeForGroup","CreateParticlesFillShapeForGroup","compositeShape","CompositeShape","oldIndex","newIndex","m_destructionListener","SayGoodbyeParticleGroup","b2_wallParticle","b2_springParticle","b2_elasticParticle","GetGroupFlags","b2_rigidParticleGroup","s_dab","UpdatePairsAndTriads_s_dab","s_dbc","UpdatePairsAndTriads_s_dbc","s_dca","UpdatePairsAndTriads_s_dca","particleFlags","k_pairFlags","af","bf","IsNecessary","ParticleCanBeConnected","ShouldCreatePair","ComparePairIndices","Unique","MatchPairIndices","k_triadFlags","diagram","AddGenerator","Generate","ShouldCreateTriad","dab","dbc","dca","maxDistanceSquared","groupC","triad","midPoint_x","midPoint_y","GetNodes","CompareTriadIndices","MatchTriadIndices","ReactiveFilter","b2_reactiveParticle","diffA","diffB","bufferIndex","GetBufferIndex","ContainsParticle","listA","listB","_tmp","MergeParticleLists","nextB","MergeParticleListAndNode","newGroup","CreateParticleGroup","CloneParticle","contactGroups","contactGroupsCount","b2_particleGroupNeedsUpdateDepth","groupsToUpdate","groupsToUpdateCount","iterationCount","updated","ap0","bp0","ap1","bp1","lowerTag","upperTag","InsideBoundsEnumerator","AddContact_s_d","distBtParticlesSq","invD","rightTag","computeRelativeTag","AddContact","bottomLeftTag","bottomRightTag","FindContacts_Reference","proxies","inv_diam","UpdateProxies_Reference","CompareProxyProxy","GetParticleContactFilter","RemoveIf","b2_particleContactFilterParticle","ShouldCollideParticleParticle","particlePairs","GetParticleContactListener","contactListener","itemIndex","Invalidate","BeginContactParticleParticle","exceptZombie","UpdateProxies","SortProxies","b2ParticlePairSet","NotifyContactListenerPreContact","FindContacts","FilterContacts","NotifyContactListenerPostContact","b2ParticleContactIsZombie","fixtureSet","GetFixtureContactListener","BeginContactFixtureParticle","UpdateBodyContacts_s_aabb","FixtureParticleSet","NotifyBodyContactListenerPreContact","SetCount","UpdateBodyContactsCallback","GetFixtureContactFilter","RemoveSpuriousBodyContacts","NotifyBodyContactListenerPostContact","s_subStep","Solve_s_subStep","SolveLifetimes","UpdateAllParticleFlags","UpdateAllGroupFlags","UpdateBodyContacts","ComputeWeight","ComputeDepth","UpdatePairsAndTriadsWithReactiveParticles","SolveForce","b2_viscousParticle","SolveViscous","b2_repulsiveParticle","SolveRepulsive","b2_powderParticle","SolvePowder","SolveTensile","b2_solidParticleGroup","SolveSolid","SolveColorMixing","SolveGravity","b2_staticPressureParticle","SolveStaticPressure","SolvePressure","SolveDamping","k_extraDampingFlags","SolveExtraDamping","SolveElastic","SolveSpring","LimitVelocity","SolveRigidDamping","b2_barrierParticle","SolveBarrier","SolveCollision","SolveRigid","SolveWall","SolveCollision_s_aabb","p2_x","p2_y","SolveCollisionCallback","criticalVelocitySquared","GetCriticalVelocitySquared","s_gravity","SolveGravity_s_gravity","GetGravity","SolveBarrier_s_aabb","s_va","SolveBarrier_s_va","s_vb","SolveBarrier_s_vb","s_pba","SolveBarrier_s_pba","s_vba","SolveBarrier_s_vba","s_vc","SolveBarrier_s_vc","s_pca","SolveBarrier_s_pca","s_vca","SolveBarrier_s_vca","s_qba","SolveBarrier_s_qba","s_qca","SolveBarrier_s_qca","s_dv","SolveBarrier_s_dv","s_f","SolveBarrier_s_f","k_barrierWallFlags","aGroup","bGroup","va","vb","pba","vba","cGroup","pca","vca","e0","qba","qca","sqrtDet","IsRigidGroup","inertia","GetInertia","ParticleApplyForce","criticalPressure","GetCriticalPressure","pressurePerWeight","maxPressure","relaxation","SolvePressure_s_f","k_noPressureFlags","velocityPerPressure","GetParticleInvMass","SolveDamping_s_v","SolveDamping_s_f","quadraticDamping","GetCriticalVelocity","SolveRigidDamping_s_t0","SolveRigidDamping_s_t1","SolveRigidDamping_s_p","SolveRigidDamping_s_v","invInertiaA","tangentDistanceA","invInertiaB","tangentDistanceB","InitDampingParameterWithRigidGroupOrParticle","InitDampingParameter","GetLocalCenter","ComputeDampingImpulse","ApplyDamping","aRigid","bRigid","SolveExtraDamping_s_v","SolveExtraDamping_s_f","s_position","SolveRigid_s_position","s_rotation","SolveRigid_s_rotation","SolveRigid_s_transform","s_velocityTransform","SolveRigid_s_velocityTransform","SetPositionRotation","MulXX","velocityTransform","s_pa","SolveElastic_s_pa","s_pb","SolveElastic_s_pb","s_pc","SolveElastic_s_pc","SolveElastic_s_r","SolveElastic_s_t0","oa","ob","oc","invR","SolveSpring_s_pa","SolveSpring_s_pb","SolveSpring_s_d","SolveSpring_s_f","r0","r1","s_weightedNormal","SolveTensile_s_weightedNormal","s_s","SolveTensile_s_s","SolveTensile_s_f","weightedNormal","criticalVelocity","normalStrength","maxVelocityVariation","SolveViscous_s_v","SolveViscous_s_f","SolveRepulsive_s_f","SolvePowder_s_f","minWeight","SolveSolid_s_f","velocityPerForce","colorMixing","newIndices","allParticleFlags","destructionListener","SayGoodbyeParticle","Test","writeOffset","readOffset","modified","b2_particleGroupCanBeEmpty","b2_particleGroupWillBeDestroyed","LifetimeToExpirationTime","quantizedTimeElapsed","expirationTimes","expirationTimeIndices","particleIndexA","particleIndexB","expirationTimeA","expirationTimeB","infiniteExpirationTimeA","particleIndex","mid","end","GetIndex","indexByExpirationTime","inverseStride","b2_fixtureContactFilterParticle","b2_fixtureContactListenerParticle","b2_particleContactListenerParticle","newData","oldFlags","lhs","BodyContactCompare","RemoveSpuriousBodyContacts_s_n","s_pos","RemoveSpuriousBodyContacts_s_pos","s_normal","RemoveSpuriousBodyContacts_s_normal","currentContacts","particle","invInertia","tangentDistance","isRigidGroup","normalVelocity","xTruncBits","yTruncBits","tagBits","yMask","xMask","b2ParticleSystem","m_xLower","m_xUpper","m_yLower","m_yUpper","m_first","m_last","xTag","FixedSetAllocator","itemSize","FixtureParticle","second","bodyContactBuffer","flagsBuffer","ParticlePair","particleA","particleB","contactBuffer","m_callDestructionListener","m_destroyed","particleSystem","threshold","m_threshold","m_shapeCount","m_shapes","s_subaabb","subaabb","Combine1","GetFlagsBuffer","ShouldCollideFixtureParticle","ReportFixtureAndParticle_s_n","s_rp","ReportFixtureAndParticle_s_rp","ap","bp","bm","bI","invBm","invBI","invAm","rp","rpn","DetectStuckParticle","s_p1","ReportFixtureAndParticle_s_p1","s_output","ReportFixtureAndParticle_s_output","s_input","ReportFixtureAndParticle_s_input","ReportFixtureAndParticle_s_p","ReportFixtureAndParticle_s_v","ReportFixtureAndParticle_s_f","av","b2World_b2World","m_locked","m_clearForces","m_bodyList","m_particleSystemList","m_gravity","m_allowSleep","m_inv_dt0","m_warmStarting","m_continuousPhysics","m_subStepping","m_stepComplete","m_profile","m_island","s_stack","debugDraw","je","je0","SayGoodbyeJoint","DestroyJoint","coe","coe0","nextController","controller","RemoveBody","f0","SayGoodbyeFixture","_Joint_Create","_Joint_Destroy","smallestRadius","GetParticleSystemList","GetRadius","GetSmallestRadius","CalculateReasonableParticleIterations","stepTimer","Step_s_stepTimer","Step_s_step","Step_s_timer","SolveTOI","ClearForces","positionBuffer","GetPositionBuffer","colorBuffer","GetColorBuffer","DrawParticles","GetFlags","DrawDebugData_s_color","SetRGB","e_shapeBit","PushTransform","GetFixtureList","DrawShape","PopTransform","e_particleBit","DrawParticleSystem","e_jointBit","DrawJoint","e_aabbBit","DrawDebugData_s_vs","DrawPolygon","e_centerOfMassBit","DrawDebugData_s_xf","DrawTransform","e_controllerBit","Draw","ReportFixture","ShouldQueryParticleSystem","QueryPointAABB","QueryFixtureShape_s_aabb","fixture_proxy","QueryFixtureShape","QueryFixturePoint","RayCast_s_input","RayCast_s_output","min_fraction","GetProxyCount","GetTreeHeight","GetTreeBalance","GetTreeQuality","x1","x2","GetAnchorA","DrawJoint_s_p1","GetAnchorB","DrawJoint_s_p2","DrawJoint_s_color","DrawSegment","pulley","GetGroundAnchorA","GetGroundAnchorB","DrawJoint_s_c","DrawPoint","circle","DrawSolidCircle","ghostColor","DrawShape_s_ghostColor","DrawCircle","poly","DrawSolidPolygon","island","seed","Clear","stackCount","AddBody","IsEnabled","AddJoint","minContact","minAlpha","collideA","IsBullet","collideB","SolveTOI_s_toi_input","SolveTOI_s_toi_output","backup1","SolveTOI_s_backup1","backup2","SolveTOI_s_backup2","SetEnabled","backup","SolveTOI_s_backup","SolveTOI_s_subStep","b2ControllerEdge","prevBody","nextBody","prevController","b2Controller","b2BuoyancyController_b2BuoyancyController","arguments","linearDrag","angularDrag","useDensity","useWorldGravity","areac","massc","sc","sarea","ComputeSubmergedArea","shapeDensity","GetDensity","buoyancyForce","dragForce","ApplyTorque","GetAngularVelocity","b2ConstantAccelController_b2ConstantAccelController","dtA","Step_s_dtA","draw","b2ConstantForceController_b2ConstantForceController","b2GravityController_b2GravityController","invSqr","body1","mass1","body2","mass2","dx","dy","Step_s_f","b2TensorDampingController_b2TensorDampingController","maxTimestep","timestep","Step_s_damping","xDamping","yDamping","b2Rope_b2RopeDef","masses","k2","k3","b2Rope_b2Rope","m_ps","m_p0s","m_vs","m_ims","m_Ls","m_as","m_damping","m_k2","m_k3","count3","d1","d2","exp","SolveC2","SolveC3","L","im1","im2","m1","m2","m3","s_d1","s_d2","L1sqr","L2sqr","Jd1","SelfSkew","s_Jd1","Jd2","s_Jd2","J1","s_J1","J2","s_J2","J3","__webpack_exports__","setFlags","bit","DebugDraw","_Physics_js__WEBPACK_IMPORTED_MODULE_0__","ctx","m_ctx","axis_length","viewRotation","viewZoom","flag_drawShape","flag_drawJoint","flag_drawAabb","flag_drawCenterOfMass","flag_drawController","flag_drawParticle","canvasScale","viewRect","flag_drawAll","e_all","e_none","flag_drawPair","e_pairBit","flagNames","save","restore","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","fillStyle","fill","arc","cx","cy","centers","colors","fillRect","rect","cs","collide4f2","hsize","DrawString","format","var_args","font","Array","call","string","goog","apply","setTransform","s_color","fillText","DrawStringWorld","viewCenter","cc","s_cc","m_canvas","width","DrawAABB","strokeRect"],"mappings":"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","file":"4.js","sourcesContent":["﻿\r\n\r\nimport { } from '../../public/javascripts/resource.js';\r\n\r\nimport { IGraph } from \"./IRenderer.js\";\r\nimport { engine } from './Engine.js';\r\nimport { Vec2, Rectangle } from './math.js';\r\nimport DebugDraw from './Physics/DebugDraw.js';\r\n\r\nexport class GlobalVar {\r\n\tconstructor() {\r\n\t\tlet isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\t\tif (isMobile) {\r\n\t\t\tthis.is_mobile = true;\r\n\t\t}\r\n\r\n\t\tif (isMobile) {\r\n\t\t\tthis.m_is_run = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.m_is_run = true;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tthis.MAX_FPS = 60;\r\n\t\t\tthis.FRAME_ELAPSED = 1000 / 60;\r\n\t\t\tthis.CANVAS_SCALE = 32;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\tthis.m_editor_mode = false;\r\n\r\n\t\t\t\tthis.m_display_foothold = false;\r\n\r\n\t\t\t\tthis.m_display_physics_debug = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.m_editor_mode = true;\r\n\r\n\t\t\t\tthis.m_display_foothold = false;\r\n\r\n\t\t\t\tthis.m_display_physics_debug = false;\r\n\t\t\t}\r\n\t\t\tthis.m_display_debug_info = false;\r\n\r\n\t\t\tthis.m_debugDraw = new DebugDraw(/*renderer_ctx2d*/);\r\n\r\n\t\t\tthis.m_display_selected_object = false;\r\n\t\t\tthis.m_selected_object = null;\r\n\t\t\tthis.m_hover_object = null;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tthis.m_viewRect = new Rectangle(0, -768 / 2, 1366, 768);\r\n\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\tthis.m_is_rendering_map = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.m_is_rendering_map = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.m_display_back = true;\r\n\t\t\tthis.m_display_front = true;\r\n\t\t\tthis.m_display_mapobj = true;\r\n\t\t\tthis.m_display_maptile = true;\r\n\t\t\tthis.m_display_particle_system = true;\r\n\r\n\t\t\tthis.m_display_skeletal_anim = true;\r\n\r\n\t\t\tthis.m_display_portal = true;\r\n\r\n\t\t\tif (process.env.NODE_ENV === 'production') {\r\n\t\t\t\tthis.m_display_name_label = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.m_display_name_label = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.m_display_player = true;\r\n\t\t\tthis.m_display_other_player = true;\r\n\t\t\tthis.m_display_life = true;\r\n\t\t\tthis.m_display_npc = true;//??\r\n\t\t\tthis.m_display_mob = true;//??\r\n\r\n\t\t\t//this.m_display_skill;\r\n\t\t\t//this.m_display_mob_skill;\r\n\t\t\t//this.m_display_mob_effect = true;\r\n\t\t\t//this.m_display_mob_etc = true;\r\n\t\t}\r\n\t\t\r\n\t\t{\r\n\t\t\tthis.NameLabel_default_style = \"214\";\r\n\r\n\t\t\tthis.ChatBalloon_default_style = 212;\r\n\t\t\tthis.ChatBalloon_display_duration = 5000;\r\n\t\t}\r\n\t\t\r\n\t\t{\r\n\t\t\tthis.input_keyDown = {};\r\n\t\t\tthis.input_keyUp = {};\r\n\r\n\t\t\tthis.mouse_move = 0;\r\n\t\t\tthis.mouse_x = 0;\r\n\t\t\tthis.mouse_y = 0;\r\n\t\t\tthis.mouse_dl = 0;\r\n\t\t\tthis.mouse_ul = 0;\r\n\t\t\tthis.mouse_dm = 0;\r\n\t\t\tthis.mouse_um = 0;\r\n\t\t\tthis.mouse_dr = 0;\r\n\t\t\tthis.mouse_ur = 0;\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tlet SceneObjectMgr = {};\r\n\r\n\t\t\tSceneObjectMgr.layeredObjects = [];\r\n\t\t\tfor (let i = 0; i < 12; ++i) {\r\n\t\t\t\tlet lo = SceneObjectMgr.layeredObjects[i] = {};\r\n\t\t\t\tObject.defineProperty(lo, \"length\", {\r\n\t\t\t\t\tenumerable: false,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tSceneObjectMgr.Update = function (stamp) {\r\n\t\t\t\tfor (let layer = 0; layer < SceneObjectMgr.layeredObjects.length; ++layer) {\r\n\t\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\t\t\t\t\tfor (let uid in lo) {\r\n\t\t\t\t\t\tlet obj = lo[uid];\r\n\t\t\t\t\t\tobj.update(stamp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSceneObjectMgr.RenderLayer = function (engine, layer) {\r\n\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\t\t\t\tfor (let uid in lo) {\r\n\t\t\t\t\tlet obj = lo[uid];\r\n\t\t\t\t\tobj.render(engine);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSceneObjectMgr.addToScene = function (layer, obj) {\r\n\t\t\t\tif (Number.isSafeInteger(layer) && layer in SceneObjectMgr.layeredObjects) {\r\n\t\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\r\n\t\t\t\t\tobj.$layer = layer;\r\n\t\t\t\t\tobj.$objectid = lo.length;\r\n\r\n\t\t\t\t\tlo[obj.$objectid] = obj;\r\n\r\n\t\t\t\t\tlo.length++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new TypeError(\"layer\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSceneObjectMgr.destroy = function (obj) {\r\n\t\t\t\tconst layer = obj.$layer;\r\n\t\t\t\tconst uid = obj.$objectid;\r\n\t\t\t\tconst lo = SceneObjectMgr.layeredObjects[layer];\r\n\r\n\t\t\t\tobj.destroy();\r\n\r\n\t\t\t\tdelete lo[uid];\r\n\t\t\t}\r\n\r\n\t\t\tthis.SceneObjectMgr = SceneObjectMgr;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const $gv = new GlobalVar();\r\n\r\nwindow.$gv = $gv;\r\n","﻿\r\nconst $failed_urls = [];\r\n\r\nconst $archive = {};\r\n\r\n\r\nwindow.character_emotion_list = [\"blink\", \"hit\", \"smile\", \"troubled\", \"cry\", \"angry\", \"bewildered\", \"stunned\",\r\n\t\"vomit\", \"oops\", \"cheers\", \"chu\", \"wink\", \"pain\", \"glitter\", \"despair\", \"love\", \"shine\", \"blaze\", \"hum\",\r\n\t\"bowing\", \"hot\", \"dam\", \"qBlue\"];\r\n\r\nwindow.character_action_list = [\"walk1\", \"walk2\", \"stand1\", \"stand2\", \"alert\", \"swingO1\", \"swingO2\", \"swingO3\", \"swingOF\", \"swingT1\",\r\n\t\"swingT2\", \"swingT3\", \"swingTF\", \"swingP1\", \"swingP2\", \"swingPF\", \"stabO1\", \"stabO2\", \"stabOF\", \"stabT1\",\r\n\t\"stabT2\", \"stabTF\", \"shoot1\", \"shoot2\", \"shootF\", \"proneStab\", \"prone\", \"heal\", \"fly\", \"jump\", \"sit\", \"ladder\",\r\n\t\"rope\"/*, \"dead\", \"ghostwalk\", \"ghoststand\", \"ghostjump\", \"ghostproneStab\", \"ghostladder\", \"ghostrope\", \"ghostfly\",\r\n\t\t\"ghostsit\"*/];\r\n\r\nexport class ItemCategoryInfo {\r\n\t/**\r\n\t * @param {string} id_prefix\r\n\t * @param {string} path\r\n\t * @param {boolean} isOnFace\r\n\t * @param {string} slot - property name\r\n\t * @param {string} categoryName\r\n\t * @param {string} type\r\n\t * @param {string} [stringPath]\r\n\t */\r\n\tconstructor(id_prefix, imgDir, listPath, slot, categoryName, type, stringPath) {\r\n\t\tthis.id_prefix = id_prefix;\r\n\r\n\t\t/** data path */\r\n\t\tthis.path = imgDir;\r\n\r\n\t\t/** equip window */\r\n\t\tthis.slot = slot;\r\n\r\n\t\t/** item list file name */\r\n\t\tthis.listPath = listPath;\r\n\r\n\t\t/** display category name */\r\n\t\tthis.categoryName = categoryName;\r\n\r\n\t\t/** renderer */\r\n\t\tthis.FragmentType = null;\r\n\r\n\t\t/** @type {string} */\r\n\t\tthis.dataDir = null;\r\n\t\t/** @type {string} */\r\n\t\tthis.stringDir = null;\r\n\t\t/** @type {string} */\r\n\t\tthis.iconPath = null;\r\n\t\t/** @type {string} */\r\n\t\tthis.iconRawPath = null;\r\n\t\t{\r\n\t\t\tlet dataDir, stringDir, iconPath, iconRawPath;\r\n\r\n\t\t\tswitch (slot) {\r\n\t\t\t\tcase \"head\":\r\n\t\t\t\t\ticonPath = \"stand1/0/head\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/head\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"body\":\r\n\t\t\t\t\ticonPath = \"stand1/0/body\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/body\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"hair\":\r\n\t\t\t\t\ticonPath = \"stand1/0/hair\";\r\n\t\t\t\t\ticonRawPath = \"stand1/0/hair\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"face\":\r\n\t\t\t\t\ticonPath = \"blink/0/face\";\r\n\t\t\t\t\ticonRawPath = \"blink/0/face\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: // typeId: 0|1|2|3|4\r\n\t\t\t\t\ticonPath = \"info/icon\";\r\n\t\t\t\t\ticonRawPath = \"info/iconRaw\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (id_prefix == \"5\") {\r\n\t\t\t\tdataDir = `/Item/${imgDir}/${id_prefix}/`;\r\n\t\t\t\tstringDir = \"/String/Pet/\";\r\n\t\t\t\talert(\"Pet\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tswitch (id_prefix[1]) {\r\n\t\t\t\t\tcase \"0\":\r\n\t\t\t\t\t\tif (Math.trunc(id_prefix) <= 1) {\r\n\t\t\t\t\t\t\tdataDir = \"/Character/\";\r\n\t\t\t\t\t\t\tstringDir = null;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"1\":\r\n\t\t\t\t\t\tlet s = imgDir + (imgDir ? \"/\" : \"\");\r\n\t\t\t\t\t\tdataDir = \"/Character/\" + s;\r\n\t\t\t\t\t\tstringDir = \"/String/Eqp/Eqp/\" + (stringPath || s);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"2\":\r\n\t\t\t\t\t\tdataDir = `/Item/${imgDir}/${id_prefix}/`;\r\n\t\t\t\t\t\tstringDir = \"/String/Consume/\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"3\":\r\n\t\t\t\t\t\tdataDir = `/Item/${imgDir}/${id_prefix}/`;\r\n\t\t\t\t\t\tstringDir = \"/String/Ins/\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"4\":\r\n\t\t\t\t\t\tdataDir = `/Item/${imgDir}/${id_prefix}/`;\r\n\t\t\t\t\t\tstringDir = \"/String/Etc/\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"5\":\r\n\t\t\t\t\t\tdataDir = `/Item/${imgDir}/${id_prefix}/`;\r\n\t\t\t\t\t\tstringDir = \"/String/Cash/\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error(\"unknow item type, param: %o\", [id_prefix, imgDir, listPath, slot, categoryName, type]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tObject.defineProperties(this, {\r\n\t\t\t\t\"type\": {\r\n\t\t\t\t\tvalue: type,\r\n\t\t\t\t},\r\n\t\t\t\t\"dataDir\": {\r\n\t\t\t\t\tvalue: dataDir,\r\n\t\t\t\t},\r\n\t\t\t\t\"stringDir\": {\r\n\t\t\t\t\tvalue: stringDir,\r\n\t\t\t\t},\r\n\t\t\t\t\"iconPath\": {\r\n\t\t\t\t\tvalue: iconPath,\r\n\t\t\t\t},\r\n\t\t\t\t\"iconRawPath\": {\r\n\t\t\t\t\tvalue: iconRawPath,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * load equip or item, name and desc\r\n\t * @param {string} itemId\r\n\t * @returns {{info:{icon:{[\"\"]:string},iconRaw:{[\"\"]:string}},name:string,desc:string,[prop:string]:any}}\r\n\t */\r\n\tstatic async getItem(itemId) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(itemId);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet id = itemId.padStart(8, \"0\");\r\n\t\tif (id[0] != \"0\") {\r\n\t\t\tthrow new Error(\"itemId: \" + itemId);\r\n\t\t}\r\n\r\n\t\tlet results;\r\n\t\ttry {\r\n\t\t\tresults = await Promise.all([\r\n\t\t\t\t$get.data(info.dataDir + itemId),\r\n\t\t\t\tinfo.stringDir ? $get.data(info.stringDir + Number(itemId)).then(\r\n\t\t\t\t\ta => a, // have name or desc\r\n\t\t\t\t\t() => { return { name: \"<\" + itemId + \">\" }; } // no name and desc\r\n\t\t\t\t) : { name: \"<\" + itemId + \">\" } // no name and desc\r\n\t\t\t]);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tthrow new ex;\r\n\t\t}\r\n\r\n\t\tlet data = Object.assign(results[0], results[1]);\r\n\t\t\r\n\t\tdata.id = itemId;\r\n\r\n\t\tif (data.info) {\r\n\t\t\t{//editor mode data\r\n\t\t\t\tdata.info.id = itemId;\r\n\t\t\t\tdata.info.name = data.name;\r\n\t\t\t\tif (data.desc) {\r\n\t\t\t\t\tdata.info.desc = data.desc;\r\n\t\t\t\t}\r\n\t\t\t\tdata.info.__v = window.DATA_TAG + window.DATA_VERSION;\r\n\t\t\t}\r\n\r\n\t\t\tif (!data.info.icon) {\r\n\t\t\t\tdata.info.icon = {};\r\n\t\t\t}\r\n\t\t\tif (!data.info.iconRaw) {\r\n\t\t\t\tdata.info.iconRaw = {};\r\n\t\t\t}\r\n\t\t\tif (!data.info.icon[\"\"]) {\r\n\t\t\t\tdata.info.icon[\"\"] = ItemCategoryInfo.getIconUrl(itemId);\r\n\t\t\t}\r\n\t\t\tif (data.info.iconRaw[\"\"]) {\r\n\t\t\t\tdata.info.iconRaw[\"\"] = ItemCategoryInfo.getIconRawUrl(itemId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string|null}\r\n\t */\r\n\tstatic getIconRawUrl(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (id[0] == \"0\") {\r\n\t\t\t//TODO: return path, not url\r\n\t\t\treturn info.dataDir + id + \"/\" + info.iconRawPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string|null}\r\n\t */\r\n\tstatic getIconUrl(id) {\r\n\t\t/** @type {ItemCategoryInfo} */\r\n\t\tlet info = ItemCategoryInfo.get(id);\r\n\t\tif (!info) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (id[0] == \"0\") {\r\n\t\t\t//TODO: return path, not url\r\n\t\t\treturn info.dataDir + id + \"/\" + info.iconPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - 4+ digit string\r\n\t * @returns {ItemCategoryInfo}\r\n\t */\r\n\tstatic get(id) {\r\n\t\tlet info;\r\n\r\n\t\tif (id == null || id == \"\") {\r\n\t\t\tdebugger;\r\n\t\t\tthrow new TypeError();\r\n\t\t}\r\n\r\n\t\tif (id[0] == \"0\") {\r\n\t\t\tif (id.length == 4) {\r\n\t\t\t\tinfo = ItemCategoryInfo._info[id];\r\n\t\t\t\tif (info) {\r\n\t\t\t\t\treturn info;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (id.length == 6) {\r\n\t\t\t\treturn ItemCategoryInfo._info[id];\r\n\t\t\t}\r\n\t\t\telse if (id.length == 3) {\r\n\t\t\t\treturn ItemCategoryInfo._info[id];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tinfo = ItemCategoryInfo._info[id.slice(0, 4)];\r\n\t\t\t\tif (info) {\r\n\t\t\t\t\treturn info;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tinfo = ItemCategoryInfo._info[id.slice(0, 6)];\r\n\t\t\t\t\tif (info) {\r\n\t\t\t\t\t\treturn info;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tinfo = ItemCategoryInfo._info[id.slice(0, 3)];//019\r\n\t\t\t\t\t\tif (info) {\r\n\t\t\t\t\t\t\treturn info;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.warn(\"unknow item type, itemId: \" + id);\r\n\t\treturn null;\r\n\t}\r\n\r\n\tstatic getTypeId() {\r\n\t\treturn Math.trunc(_id / 1000000);\r\n\t}\r\n\r\n\tstatic getCategory() {\r\n\t\treturn Math.trunc(_id / 10000);// % 100;// 0105 // 01 + 05 // type + category\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - char[4]: type; char[4+]: itemId\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isItem(id) {\r\n\t\tlet type = Math.trunc(id / 1000000);//id.startsWith(\"00\");\r\n\t\treturn type != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id - char[4]: type; char[4+]: itemId\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isEquip(id) {\r\n\t\tif (!id) {\r\n\t\t\tthrow TypeError();\r\n\t\t}\r\n\t\tlet _id = Number(id);\r\n\r\n\t\tif (!Number.isSafeInteger(_id)) {\r\n\t\t\tthrow TypeError();\r\n\t\t}\r\n\r\n\t\t//let cate = Number(id.length == 4 ? id : id.slice(0, 4));\r\n\t\t//return (cate >= \"0100\" && cate < \"0180\");\r\n\r\n\t\t//let cate = Math.trunc(_id / 10000);\r\n\t\t//if (cate >= 180 && cate < 2000) {\r\n\t\t//\tconsole.warn(\"?? equip: \" + id);\r\n\t\t//\tdebugger;\r\n\t\t//}\r\n\r\n\t\tlet type = Math.trunc(_id / 1000000);\r\n\r\n\t\treturn type == 1;\r\n\t}\r\n\r\n\tstatic isChair(id) {\r\n\t\tif (!id) {\r\n\t\t\tthrow TypeError();\r\n\t\t}\r\n\t\tlet _id = Number(id);\r\n\r\n\t\tif (!Number.isSafeInteger(_id)) {\r\n\t\t\tthrow TypeError();\r\n\t\t}\r\n\r\n\t\tlet cate = Math.trunc(_id / 10000);\r\n\r\n\t\treturn cate == 301;//0301xxxx\r\n\t}\r\n\r\n\t/**\r\n\t * 1~4 digit number\r\n\t * @param {string} itemId\r\n\t */\r\n\tstatic getSubCategory(itemId) {\r\n\t\treturn Math.trunc(itemId / 10000);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} itemId\r\n\t */\r\n\tstatic isCashWeapon(itemId) {\r\n\t\treturn Math.trunc(itemId / 10000) == 170;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} job\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getJobWeaponCategory(job) {\r\n\t\t//TODO: getJobWeaponCategory\r\n\t\tconsole.warn(\"getJobWeaponCategory: 未完成\");\r\n\t}\r\n}\r\nwindow.$ItemCategoryInfo = ItemCategoryInfo;\r\nItemCategoryInfo.type = {\r\n\tEquip: \"Equip\",\r\n\tConsume: \"Consume\",\r\n\tEtc: \"Etc\",\r\n\tInstall: \"Install\",\r\n\tCash: \"Cash\"\r\n};\r\nItemCategoryInfo.typeName = {\r\n\t0: \"Equip\",\r\n\t1: \"Consume\",\r\n\t2: \"Etc\",\r\n\t3: \"Install\",\r\n\t4: \"Cash\"\r\n};\r\nItemCategoryInfo.typeId = {\r\n\tEquip: 0,\r\n\tConsume: 1,\r\n\tEtc: 2,\r\n\tInstall: 3,\r\n\tCash: 4,\r\n};\r\nItemCategoryInfo._info = {\r\n\t\"0000\": new ItemCategoryInfo(\"0000\", \"\",\t\t\t\"body\",\t\t\t\t\"body\",\t\t\t\"<body>\", \"Equip\"),\r\n\t\"0001\": new ItemCategoryInfo(\"0001\", \"\",\t\t\t\"head\",\t\t\t\t\"head\",\t\t\t\"<head>\", \"Equip\"),\r\n\r\n\t\"0002\": new ItemCategoryInfo(\"0002\", \"Face\",\t\t\"Face\",\t\t\t\t\"face\",\t\t\t\"臉型\", \"Equip\"),\r\n\t\"0003\": new ItemCategoryInfo(\"0003\", \"Hair\",\t\t\"Hair\",\t\t\t\t\"hair\",\t\t\t\"髮型\", \"Equip\"),\r\n\t\"0004\": new ItemCategoryInfo(\"0004\", \"Hair\",\t\t\"Hair\",\t\t\t\t\"hair\",\t\t\t\"髮型\", \"Equip\"),\r\n\r\n\t\"0100\": new ItemCategoryInfo(\"0100\", \"Cap\",\t\t\t\"Cap\",\t\t\t\t\"cap\",\t\t\t\"帽子\", \"Equip\"),\r\n\t\"0101\": new ItemCategoryInfo(\"0101\", \"Accessory\",\t\"accessoryFace\",\t\"accessoryFace\", \"臉飾\", \"Equip\"),\r\n\t\"0102\": new ItemCategoryInfo(\"0102\", \"Accessory\",\t\"accessoryEyes\",\t\"accessoryEyes\", \"眼飾\", \"Equip\"),\r\n\t\"0103\": new ItemCategoryInfo(\"0103\", \"Accessory\",\t\"accessoryEars\",\t\"accessoryEars\", \"耳環\", \"Equip\"),\r\n\t\"0104\": new ItemCategoryInfo(\"0104\", \"Coat\",\t\t\"Coat\",\t\t\t\t\"coat\",\t\t\t\"上衣\", \"Equip\"),\r\n\t\"0105\": new ItemCategoryInfo(\"0105\", \"Longcoat\",\t\"Longcoat\",\t\t\t\"longcoat\",\t\t\"套服\", \"Equip\"),\r\n\t\"0106\": new ItemCategoryInfo(\"0106\", \"Pants\",\t\t\"Pants\",\t\t\t\"pants\",\t\t\"褲子\", \"Equip\"),\r\n\t\"0107\": new ItemCategoryInfo(\"0107\", \"Shoes\",\t\t\"Shoes\",\t\t\t\"shoes\",\t\t\"鞋子\", \"Equip\"),\r\n\t\"0108\": new ItemCategoryInfo(\"0108\", \"Glove\",\t\t\"Glove\",\t\t\t\"glove\",\t\t\"手套\", \"Equip\"),\r\n\t\"0109\": new ItemCategoryInfo(\"0109\", \"Shield\",\t\t\"Shield\",\t\t\t\"shield\",\t\t\"盾牌\", \"Equip\"),\r\n\t\"0110\": new ItemCategoryInfo(\"0110\", \"Cape\",\t\t\"Cape\",\t\t\t\t\"cape\",\t\t\t\"披風\", \"Equip\"),\r\n\r\n\t\"0121\": new ItemCategoryInfo(\"0121\", \"Weapon\", \"閃亮克魯\", \"weapon\", \"閃亮克魯\", \"Equip\"),\r\n\t\"0122\": new ItemCategoryInfo(\"0122\", \"Weapon\", \"靈魂射手\", \"weapon\", \"靈魂射手\", \"Equip\"),\r\n\t\"0123\": new ItemCategoryInfo(\"0123\", \"Weapon\", \"魔劍\", \"weapon\", \"魔劍\", \"Equip\"),\r\n\t\"0124\": new ItemCategoryInfo(\"0124\", \"Weapon\", \"能量劍\", \"weapon\", \"能量劍\", \"Equip\"),\r\n\t\"0125\": new ItemCategoryInfo(\"0125\", \"Weapon\", \"幻獸棒\", \"weapon\", \"幻獸棒\", \"Equip\"),\r\n\t\"0126\": new ItemCategoryInfo(\"0126\", \"Weapon\", \"ESP限制器\", \"weapon\", \"ESP限制器\", \"Equip\"),\r\n\t\"0127\": new ItemCategoryInfo(\"0127\", \"Weapon\", \"鎖鏈\", \"weapon\", \"鎖鏈\", \"Equip\"),\r\n\t\"0128\": new ItemCategoryInfo(\"0128\", \"Weapon\", \"魔力護腕\", \"weapon\", \"魔力護腕\", \"Equip\"),\r\n\r\n\t\"0130\": new ItemCategoryInfo(\"0130\", \"Weapon\", \"單手劍\", \"weapon\", \"單手劍\", \"Equip\"),\r\n\t\"0131\": new ItemCategoryInfo(\"0131\", \"Weapon\", \"單手斧\", \"weapon\", \"單手斧\", \"Equip\"),\r\n\t\"0132\": new ItemCategoryInfo(\"0132\", \"Weapon\", \"單手錘\", \"weapon\", \"單手錘\", \"Equip\"),\r\n\t\"0133\": new ItemCategoryInfo(\"0133\", \"Weapon\", \"短劍\", \"weapon\", \"短劍\", \"Equip\"),\r\n\t\"0134\": new ItemCategoryInfo(\"0134\", \"Weapon\", \"雙刀\", \"weapon\", \"雙刀\", \"Equip\"),\r\n\t\"013526\": new ItemCategoryInfo(\"013526\", \"Weapon\", \"靈魂之環\", \"weapon\", \"靈魂之環\", \"Equip\"),\r\n\t\"013530\": new ItemCategoryInfo(\"013530\", \"Weapon\", \"控制器\", \"weapon\", \"控制器\", \"Equip\"),\r\n\t\"0136\": new ItemCategoryInfo(\"0136\", \"Weapon\", \"手杖\", \"weapon\", \"手杖\", \"Equip\"),\r\n\t\"0137\": new ItemCategoryInfo(\"0137\", \"Weapon\", \"短杖\", \"weapon\", \"短杖\", \"Equip\"),\r\n\t\"0138\": new ItemCategoryInfo(\"0138\", \"Weapon\", \"長杖\", \"weapon\", \"長杖\", \"Equip\"),\r\n\t\r\n\t\"0140\": new ItemCategoryInfo(\"0140\", \"Weapon\", \"雙手劍\", \"weapon\", \"雙手劍\", \"Equip\"),\r\n\t\"0141\": new ItemCategoryInfo(\"0141\", \"Weapon\", \"雙手斧\", \"weapon\", \"雙手斧\", \"Equip\"),\r\n\t\"0142\": new ItemCategoryInfo(\"0142\", \"Weapon\", \"雙手棍\", \"weapon\", \"雙手棍\", \"Equip\"),\r\n\t\"0143\": new ItemCategoryInfo(\"0143\", \"Weapon\", \"槍\", \"weapon\", \"槍\", \"Equip\"),\r\n\t\"0144\": new ItemCategoryInfo(\"0144\", \"Weapon\", \"矛\", \"weapon\", \"矛\", \"Equip\"),\r\n\t\"0145\": new ItemCategoryInfo(\"0145\", \"Weapon\", \"弓\", \"weapon\", \"弓\", \"Equip\"),\r\n\t\"0146\": new ItemCategoryInfo(\"0146\", \"Weapon\", \"弩\", \"weapon\", \"弩\", \"Equip\"),\r\n\t\"0147\": new ItemCategoryInfo(\"0147\", \"Weapon\", \"拳套\", \"weapon\", \"拳套\", \"Equip\"),\r\n\t\"0148\": new ItemCategoryInfo(\"0148\", \"Weapon\", \"指虎\", \"weapon\", \"指虎\", \"Equip\"),\r\n\t\"0149\": new ItemCategoryInfo(\"0149\", \"Weapon\", \"火槍\", \"weapon\", \"火槍\", \"Equip\"),\r\n\t\"0150\": new ItemCategoryInfo(\"0150\", \"Weapon\", \"鏟\", \"weapon\", \"鏟\", \"Equip\"),\r\n\t\"0151\": new ItemCategoryInfo(\"0151\", \"Weapon\", \"鎬\", \"weapon\", \"鎬\", \"Equip\"),\r\n\t\"0152\": new ItemCategoryInfo(\"0152\", \"Weapon\", \"雙弩槍\", \"weapon\", \"雙弩槍\", \"Equip\"),\r\n\t\"0153\": new ItemCategoryInfo(\"0153\", \"Weapon\", \"加農砲\", \"weapon\", \"加農砲\", \"Equip\"),\r\n\t\"0154\": new ItemCategoryInfo(\"0154\", \"Weapon\", \"太刀\", \"weapon\", \"太刀\", \"Equip\"),\r\n\t\"0155\": new ItemCategoryInfo(\"0155\", \"Weapon\", \"扇子\", \"weapon\", \"扇子\", \"Equip\"),\r\n\t\"0156\": new ItemCategoryInfo(\"0156\", \"Weapon\", \"琉\", \"weapon\", \"琉\", \"Equip\"),\r\n\t\"0157\": new ItemCategoryInfo(\"0157\", \"Weapon\", \"璃\", \"weapon\", \"璃\", \"Equip\"),\r\n\t\"0158\": new ItemCategoryInfo(\"0158\", \"Weapon\", \"重拳槍\", \"weapon\", \"重拳槍\", \"Equip\"),\r\n\t\"0170\": new ItemCategoryInfo(\"0170\", \"Weapon\", \"0170\", \"weapon\", \"點裝武器\", \"Equip\"),\r\n\t\"019\": new ItemCategoryInfo(\"019\", \"TamingMob\", \"TamingMob\", \"tamingMob\", \"騎寵\", \"Equip\", \"Taming/\"),\r\n\r\n\t\"0301\": new ItemCategoryInfo(\"0301\", \"Install\", \"Chair\", \"install\", \"椅子\", \"Item\"),\r\n};\r\n\r\nItemCategoryInfo._categoryList = (function (info_map) {\r\n\tlet list = [];\r\n\tlet set = new Set();\r\n\tfor (let i in info_map) {\r\n\t\tlet cat = info_map[i];\r\n\t\tlet key = cat.categoryName || cat.listPath;\r\n\r\n\t\tif (!set.has(key)) {\r\n\t\t\tset.add(key);\r\n\r\n\t\t\tlist.push({\r\n\t\t\t\tkey: key,\r\n\t\t\t\tvalue: i,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn list;\r\n})(ItemCategoryInfo._info);\r\n\r\nexport class ResourceManager {\r\n\tstatic isEquipExist(id, cateInfo) {\r\n\t\tconst dp = cateInfo.listPath;\r\n\t\tconst es = ResourceManager.equip_map[dp];\r\n\t\treturn !es || es.has(id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} url\r\n\t */\r\n\tstatic async loadArchive(url) {\r\n\t\t$setValue($archive, \"/\", JSON.parse(await ResourceManager.get(url)));\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param {string} url\r\n\t */\r\n\tstatic get(url) {\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tlet xhr = new XMLHttpRequest();\r\n\t\t\txhr.open(\"GET\", url, true);\r\n\r\n\t\t\txhr.timeout = 10 * 60 * 1000;//20000;\r\n\r\n\t\t\txhr.onload = function () {\r\n\t\t\t\tif (this.status == 404 || this.status == 500) {\r\n\t\t\t\t\t$failed_urls.push(url);\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t\t//resolve(null);\r\n\t\t\t\t\treject(this.status + \": \" + url);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.status == 200) {\r\n\t\t\t\t\tresolve(this.responseText);\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.status == 304) {\r\n\t\t\t\t\tdebugger\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\txhr.ontimeout = function (e) {\r\n\t\t\t\tdebugger;\r\n\t\t\t\t// XMLHttpRequest 超时。在此做某事。\r\n\t\t\t\t//resolve(null);\r\n\t\t\t\treject(\"timeout: \" + url);\r\n\t\t\t};\r\n\r\n\t\t\txhr.onabort = function (e) {\r\n\t\t\t\treject(\"abort: \" + url);\r\n\t\t\t};\r\n\r\n\t\t\txhr.send();\r\n\t\t});\r\n\t}\r\n\r\n\tstatic get root_path() {\r\n\t\treturn window.$ROOT_PATH;\r\n\t}\r\n\r\n\tstatic get archive() {\r\n\t\treturn $archive;\r\n\t}\r\n\r\n\tstatic get failed_urls() {\r\n\t\treturn $failed_urls;\r\n\t}\r\n}\r\nwindow.$ResourceManager = ResourceManager;\r\n\r\n/**\r\n * @param {{}} obj\r\n * @param {string} path\r\n * @param {any} value\r\n */\r\nfunction $setValue(obj, path, value) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\tlet ps = path.split(\"/\");\r\n\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\tlet key = ps[i];\r\n\t\tif (target[key] == null) {\r\n\t\t\ttarget[key] = {};\r\n\t\t}\r\n\t\ttarget = target[key];\r\n\t}\r\n\tlet origin_value = target[ps[lastIndex]];\r\n\tif (origin_value instanceof Promise) {\r\n\t\tdelete target[ps[lastIndex]];\r\n\t\ttarget[ps[lastIndex]] = value;\r\n\t}\r\n\telse if (origin_value && typeof origin_value == \"object\") {\r\n\t\t//if (value instanceof Promise) {\r\n\t\t//\tdebugger;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t\tfor (let key in value) {\r\n\t\t\t\torigin_value[key] = value[key] || origin_value[key];\r\n\t\t\t}\r\n\t\t//}\r\n\t}\r\n\telse if (typeof value != \"undefined\") {\r\n\t\ttarget[ps[lastIndex]] = value;\r\n\t}\r\n}\r\nfunction $getValue(obj, path) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\tlet ps = path.split(\"/\");\r\n\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\tlet key = ps[i];\r\n\t\tif (target[key]) {\r\n\t\t\t\ttarget = target[key];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t}\r\n\treturn target[ps[lastIndex]];\r\n}\r\n\r\nconst symbol_isPack = Symbol(\"$pack\");\r\n\r\nconst url_startsWith_protocol = RegExp.prototype.test.bind(/^(([a-zA-Z^\\:]+)(\\:.*)$|\\/\\/)/);\r\nfunction _setValueByPath(path, value, is_pack) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn;\r\n\t}\r\n\telse if (window.$ROOT_PATH != \"\" && path.startsWith(window.$ROOT_PATH)) {\r\n\t\tif (is_pack) {\r\n\t\t\tvalue[symbol_isPack] = true;\r\n\t\t}\r\n\t\tpath = path.slice(window.$ROOT_PATH.length);\r\n\t\treturn $setValue($archive, path, value);\r\n\t}\r\n\telse {\r\n\t\treturn $setValue($archive, path, value);\r\n\t}\r\n}\r\nfunction _getValueFromArchiveByPath(path, value) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tif (_path) {\r\n\t\treturn $getValue($archive, _path);\r\n\t}\r\n\treturn undefined;\r\n}\r\nfunction _getDataPathByUrl(path) {\r\n\tif (!url_startsWith_protocol(path)) {\r\n\t\tif (window.$ROOT_PATH != \"\" && path.startsWith(window.$ROOT_PATH)) {\r\n\t\t\treturn path.slice(window.$ROOT_PATH.length);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @returns {Promise<any>|any}\r\n */\r\nfunction $getValueAsync(obj, path) {\r\n\tif (path.endsWith(\"/\")) {\r\n\t\tpath = path.slice(0, path.length - 1);\r\n\t}\r\n\t\r\n\t// try get value sync\r\n\tlet value = $getValue(obj, path);\r\n\t\r\n\t// if value exist\r\n\tif (value) {\r\n\t\tif (value instanceof Promise) {\r\n\t\t\t// ??\r\n\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\tawait value;\r\n\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t}\r\n\telse {// if value not exist, try await parent node\r\n\t\tlet ps = path.split(\"/\");\r\n\t\tlet i, target = obj, lastIndex = ps.length - 1;\r\n\t\tfor (i = 0; i < lastIndex; ++i) {\r\n\t\t\tlet key = ps[i];\r\n\t\t\tif (target[key] instanceof Promise) {\r\n\t\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\t\tawait target[key];\r\n\t\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (target[key]) {\r\n\t\t\t\t\ttarget = target[key];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet result = target[ps[lastIndex]];\r\n\t\tif (result instanceof Promise) {\r\n\t\t\treturn new Promise(async function (resolve, reject) {\r\n\t\t\t\tawait result;\r\n\t\t\t\tresolve(await $getValueAsync(obj, path));\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {string} url\r\n * @returns {Promise<any>}\r\n */\r\nexport let $get = function $get(url) {\r\n\treturn ResourceManager.get(url);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.pack = async function $get_pack(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj && obj[symbol_isPack]) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tif (process.env.NODE_ENV !== \"production\") {\r\n\t\t\tif (obj && !obj[symbol_isPack]) {\r\n\t\t\t\tthrow new TypeError(\"data: \" + path);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst url = $get.packUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, true);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, true);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.packSync = function get_packSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\treturn undefined;\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.data = async function $get_data(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tconst url = $get.dataUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, false);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, false);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {any}\r\n */\r\n$get.dataSync = function get_dataSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\treturn undefined;\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.list = async function $get_list(path) {\r\n\tlet _path = _getDataPathByUrl(path);\r\n\tlet obj;\r\n\r\n\tif (_path) {\r\n\t\tobj = $getValueAsync($archive, _path);\r\n\t}\r\n\r\n\tif (obj instanceof Promise) {\r\n\t\treturn await obj;\r\n\t}\r\n\telse if (obj) {\r\n\t\treturn obj;\r\n\t}\r\n\telse {\r\n\t\tconst url = $get.listUrl(path);\r\n\r\n\t\tlet task = (async function () {\r\n\t\t\tlet jsonText = await ResourceManager.get(url);\r\n\r\n\t\t\tobj = JSON.parse(jsonText);\r\n\r\n\t\t\t_setValueByPath(path, obj, false);\r\n\r\n\t\t\treturn obj;\r\n\t\t})();\r\n\t\t_setValueByPath(path, task, false);\r\n\r\n\t\treturn await task;\r\n\t}\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {Promise<any>}\r\n */\r\n$get.listSync = function $get_listSync(path) {\r\n\tlet obj = _getValueFromArchiveByPath(path);\r\n\tif (obj) {\r\n\t\treturn Object.keys(obj);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.dataUrl = function $get_dataUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"data\")) {\r\n\t\treturn `${window.$ROOT_PATH}data${path}.json`;\r\n\t}\r\n\tthrow new Error(\"Not game data: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.packUrl = function $get_packUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"pack\")) {\r\n\t\treturn `${window.$ROOT_PATH}pack${path}.json`;\r\n\t}\r\n\tthrow new Error(\"Not game pack: \" + path);\r\n}\r\n$get.listUrl = function $get_listUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"ls\")) {\r\n\t\treturn `${window.$ROOT_PATH}ls${path}.json`;\r\n\t}\r\n\tthrow new Error(path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.imageUrl = function $get_imagesUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"images\")) {\r\n\t\treturn `${window.$ROOT_PATH}images${path}.png`;\r\n\t}\r\n\tthrow new Error(\"Not game images: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.soundMp3Url = function $get_soundMp3Url(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"sound\")) {\r\n\t\treturn `${window.$ROOT_PATH}sound${path}.mp3`;\r\n\t}\r\n\tthrow new Error(\"Not game sound: \" + path);\r\n}\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.soundWavUrl = function $get_soundWavUrl(path) {\r\n\tif (url_startsWith_protocol(path)) {\r\n\t\treturn path;\r\n\t}\r\n\telse if (!path.startsWith(\"sound\")) {\r\n\t\treturn `${window.$ROOT_PATH}sound${path}.wav`;\r\n\t}\r\n\tthrow new Error(\"Not game sound: \" + path);\r\n}\r\n\r\n/**\r\n * @param {string} path\r\n * @returns {string}\r\n */\r\n$get.assetUrl = function $get_assetUrl(path) {\r\n\treturn `${window.$ROOT_PATH}${path}`;\r\n}\r\n$get.asset = function $get_asset(path) {\r\n\treturn $get($get.assetUrl(path));\r\n}\r\n\r\nwindow.$get = $get;\r\n\r\n\r\nexport class ItemAttrNormalize {\r\n\tstatic head(item) {\r\n\t\titem.gender = 2;\r\n\t}\r\n\tstatic body(item) {\r\n\t\titem.gender = 2;\r\n\t}\r\n\tstatic Face(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 1 || g == 4 ? 1 : 0;\r\n\t}\r\n\tstatic Hair(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 1 || g == 2 || g == 4 || g == 7 ? 1 : 0;\r\n\t}\r\n\tstatic Cap(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryFace(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryEyes(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic accessoryEars(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Coat(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Longcoat(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Pants(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Shoes(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Glove(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Shield(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic Cape(item) {\r\n\t\tItemAttrNormalize._equip(item);\r\n\t}\r\n\tstatic _equip(item) {\r\n\t\tconst g = Math.trunc((item.id % 10000) / 1000);\r\n\t\titem.gender = g == 0 ? 0 : (g == 1 ? 1 : 2);\r\n\t}\r\n}\r\n\r\nconst regexp_getHairStyleID = /(\\d{4,7})\\d$/;\r\nconst regexp_getFaceStyleID = /(\\d{2,5})\\d(\\d{2})$/;\r\n\r\nconst regexp_getHairColor = /\\d{4,7}(\\d)$/;\r\nconst regexp_getFaceColor = /\\d{2,5}(\\d)\\d{2}$/;\r\n\r\nexport class CharacterRenderConfig {\r\n\t/**\r\n\t * @param {string} style id\r\n\t * @returns {string[]}\r\n\t */\r\n\tstatic * enumHairColor(style) {\r\n\t\tlet m = style.match(regexp_getHairStyleID);\r\n\t\tfor (let i = 0; i < 10; ++i) {\r\n\t\t\tlet id = m[1] + i;\r\n\t\t\tyield id;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} style id\r\n\t * @returns {string[]}\r\n\t */\r\n\tstatic * enumFaceColor(style) {\r\n\t\tlet m = style.match(regexp_getFaceStyleID);\r\n\t\tfor (let i = 0; i < 10; ++i) {\r\n\t\t\tlet id = m[1] + i + m[2];\r\n\t\t\tyield id;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} style\r\n\t * @param {number} color\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getColorHairID(style, color) {\r\n\t\tlet m = style.match(regexp_getHairStyleID);\r\n\t\tlet id = m[1] + (color % 10);\r\n\t\treturn id;\r\n\t}\r\n\t/**\r\n\t * @param {string} style\r\n\t * @param {number} color\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getColorFaceID(style, color) {\r\n\t\tlet m = style.match(regexp_getFaceStyleID);\r\n\t\tlet id = m[1] + (color % 10) + m[2];\r\n\t\treturn id;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id_1\r\n\t * @param {string} id_2\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isHairStyleEqual(id_1, id_2) {\r\n\t\treturn CharacterRenderConfig.getColorHairID(id_1, 0) == CharacterRenderConfig.getColorHairID(id_2, 0);\r\n\t}\r\n\t/**\r\n\t * @param {string} id_1\r\n\t * @param {string} id_2\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isFaceStyleEqual(id_1, id_2) {\r\n\t\treturn CharacterRenderConfig.getColorFaceID(id_1, 0) == CharacterRenderConfig.getColorFaceID(id_2, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getHairColor(id) {\r\n\t\tif (id) {\r\n\t\t\tid = String(id);\r\n\t\t\tlet m = id.match(regexp_getHairColor);\r\n\t\t\tif (m) {\r\n\t\t\t\treturn m[1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} id\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getFaceColor(id) {\r\n\t\tif (id) {\r\n\t\t\tid = String(id);\r\n\t\t\tlet m = id.match(regexp_getFaceColor);\r\n\t\t\tif (m) {\r\n\t\t\t\treturn m[1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar _external_data = {\r\n\t\"requiredJobs\": [\r\n\t\t\"Beginner\"\r\n\t],\r\n\t\"requiredLevel\": 0,\r\n\t\"isCash\": true,\r\n\t\"name\": \"Blue Beanie\",\r\n\t\"desc\": null,\r\n\t\"id\": 1000000,\r\n\t\"requiredGender\": 0,\r\n\t\"typeInfo\": {\r\n\t\t\"overallCategory\": \"Equip\",\r\n\t\t\"category\": \"Armor\",\r\n\t\t\"subCategory\": \"Hat\"\r\n\t}\r\n};\r\n\r\nvar ItemTypeInfo = {\r\n\t\"Equip\": {\r\n\t\t\"Hat\": \"Cap\",\r\n\t\t\"Cape\": \"Cape\",\r\n\t\t\"Top\": \"Coat\",\r\n\t\t\"Overall\": \"Longcoat\",\r\n\t\t\"Glove\": \"Glove\",\r\n\t\t\"Bottom\": \"Pants\",\r\n\r\n\t\t\"Shield\": \"Shield\",\r\n\t\t\"Shoes\": \"Shoes\",\r\n\t\t\"Eye Decoration\": \"accessoryEyes\",\r\n\t\t\"Earrings\": \"accessoryEars\",\r\n\t\t//\"Ring\": \"\",\r\n\r\n\t\t//\"Pendant\": \"\",\r\n\t\t\"Face Accessory\": \"accessoryFace\",\r\n\t\t//\"Belt\": \"\",\r\n\t\t//\"Medal\": \"\",\r\n\t\t//\"Shoulder Accessory\": \"\",\r\n\t\t//\"Badge\": \"\",\r\n\r\n\t\t//\"Dragon Equipment\": \"\",\r\n\t\t//\"Mechanic Equipment\": \"\",\r\n\t\t//\"Pet Equipment\": \"\",\r\n\t\t//\"Android\": \"\",\r\n\t\t//\"Mechanical Heart\": \"\",\r\n\t\t//\"Bits\": \"\",\r\n\r\n\t\t\"Face\": \"Face\",\r\n\t\t\"Hair\": \"Hair\",\r\n\t},\r\n};\r\n\r\nResourceManager.external = {\r\n\tequip: {\r\n\t},\r\n};\r\n\r\nResourceManager.equip_map = {\r\n};\r\n\r\nfor (let i in ItemTypeInfo.Equip) {\r\n\tlet cate = ItemTypeInfo.Equip[i];\r\n\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\nfor (let i = 0; i < 9; ++i) {\r\n\tlet cate = \"Face\" + i;\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\nfor (let i = 0; i < 8; ++i) {\r\n\tlet cate = \"Hair\" + i;\r\n\tResourceManager.external.equip[cate] = [];\r\n\tResourceManager.equip_map[cate] = null;\r\n}\r\n\r\nasync function load_external_resource(url) {\r\n\turl = url || \"/items.json\";\r\n\tlet raw;\r\n\r\n\ttry {\r\n\t\traw = ResourceManager._external_raw = JSON.parse(await $get.asset(\"equip.json\"));\r\n\t\tif (!raw) {\r\n\t\t\tdebugger;\r\n\t\t\tthrow Error(\"'/equip' is empty\");\r\n\t\t}\r\n\t}\r\n\tcatch (ex) {\r\n\t\traw = ResourceManager._external_raw = JSON.parse(await $get(\"//labs.maplestory.io/api/gms/latest/item/category/equip\"));\r\n\t\tif (!raw) {\r\n\t\t\tdebugger;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (let i = 0; i < raw.length; ++i) {\r\n\t\tconst item = raw[i];\r\n\t\tconst id = String(item.id).padStart(8, \"0\");\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif (!(item.typeInfo && ItemTypeInfo[item.typeInfo.overallCategory])) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet clz = item.typeInfo.overallCategory.toLowerCase();\r\n\t\t\tlet cate = ItemTypeInfo[item.typeInfo.overallCategory][item.typeInfo.subCategory];\r\n\t\t\tif (!cate) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse if (cate == \"Face\") {\r\n\t\t\t\tcate += CharacterRenderConfig.getFaceColor(id);\r\n\t\t\t}\r\n\t\t\telse if (cate == \"Hair\") {\r\n\t\t\t\tcate += CharacterRenderConfig.getHairColor(id);\r\n\t\t\t}\r\n\r\n\t\t\tlet it = {\r\n\t\t\t\tid: id,\r\n\t\t\t\tname: item.name,\r\n\t\t\t\tdesc: item.desc,\r\n\t\t\t\tcash: item.isCash ? 1 : 0,\r\n\t\t\t\ticon: {\r\n\t\t\t\t\t\"\": `//labs.maplestory.io/api/gms/latest/item/${item.id}/icon`,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\t\tResourceManager.external[clz][cate].push(it);\r\n\t\t}\r\n\t\tcatch (ex) {\r\n\t\t\tconsole.error(\"external resource: id(\" + id + \")\");\r\n\t\t\tconsole.error(ex);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction update_external_equip_list() {\r\n\tconst url = \"https://labs.maplestory.io/api/gms/latest/item/category/equip\";\r\n\tload_external_resource(url).then(() => {\r\n\t\t_concat_external_resource(category, origin_data);\r\n\t\tconcat_external_resource = _concat_external_resource;\r\n\t\tconsole.log(\"done: update_external_equip_list\");\r\n\t});\r\n}\r\n\r\nlet external_resource_promise = load_external_resource();\r\n\r\nwindow.concat_external_resource = _concat_external_resource_p;\r\n\r\nwindow.trigger_update_external_equip_list = function () {\r\n\texternal_resource_promise = load_external_resource();\r\n\twindow.concat_external_resource = _concat_external_resource_p;\r\n}\r\n\r\nasync function _concat_external_resource_p(category, origin_data) {\r\n\tawait external_resource_promise;\r\n\t_concat_external_resource(category, origin_data);\r\n\tconcat_external_resource = _concat_external_resource;\r\n}\r\n\r\nfunction _concat_external_resource(category, origin_data) {\r\n\ttry {\r\n\t\tconst list = ResourceManager.external.equip[category];\r\n\t\tif (!list) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet id_map = ResourceManager.equip_map[category];\r\n\r\n\t\tif (!id_map) {\r\n\t\t\tid_map = new Map();\r\n\t\t\t\r\n\t\t\torigin_data.forEach(item => {\r\n\t\t\t\tid_map.set(item.id, item);\r\n\t\t\t});\r\n\r\n\t\t\tResourceManager.equip_map[category] = id_map;\r\n\t\t}\r\n\r\n\t\tlist.forEach((item) => {\r\n\t\t\tlet id = item.id;\r\n\t\t\tif (!id_map.has(id)) {\r\n\t\t\t\titem.$foreign = true;\r\n\t\t\t\torigin_data.push(item);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet ori_item = id_map.get(id);\r\n\t\t\t\tori_item._name = item.name || \"\";\r\n\t\t\t\tori_item._desc = item.desc || \"\";\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tcatch (ex) {\r\n\t\tconsole.error(ex);\r\n\t\tdebugger;\r\n\t}\r\n}\r\n\r\nwindow.load_extern_item_data = async function (id) {\r\n\tlet _raw = JSON.parse(await $get(`//labs.maplestory.io/api/gms/latest/item/${id}`));\r\n\tlet raw = {};\r\n\r\n\tlet default_ = _raw.frameBooks.default ? _raw.frameBooks.default.frames[0]:null;\r\n\r\n\tfor (let i in _raw.frameBooks) {\r\n\t\tlet _act = _raw.frameBooks[i];\r\n\t\tlet act = [];\r\n\r\n\t\tfor (let j = 0; j < _act.frames.length; ++j) {\r\n\t\t\tlet frame = _act.frames[j] || default_;\r\n\t\t\tif (!frame || !frame.effects) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet _frags = frame.effects;\r\n\t\t\tlet frags = {};\r\n\t\t\tfor (let k in _frags) {\r\n\t\t\t\tlet _frag = _frags[k];\r\n\t\t\t\tif (_frag.image) {\r\n\t\t\t\t\tfrags[k] = {\r\n\t\t\t\t\t\t\"\": \"data:image/png;base64,\" + _frag.image,\r\n\t\t\t\t\t\t\"origin\": _frag.originOrZero || _frag.origin || _frag.center,\r\n\t\t\t\t\t\t\"map\": _frag.mapOffset,\r\n\t\t\t\t\t\t\"z\": _frag.position\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tact[j] = frags;\r\n\t\t}\r\n\r\n\t\traw[i] = act;\r\n\t}\r\n\r\n\traw.info = {\r\n\t\tislot: _raw.metaInfo.equip.islot,\r\n\t\tvslot: _raw.metaInfo.equip.vslot,\r\n\t\ticon: _raw.metaInfo.icon ? (\"data:image/png;base64,\" + _raw.metaInfo.icon.iconRaw) : \"\",\r\n\t\tcash: (_raw.metaInfo.cash && _raw.metaInfo.cash.cash) ? 1 : 0,\r\n\t};\r\n\r\n\treturn raw;\r\n}\r\n","﻿\r\nconst box2d = require(\"../../box2d.ts/build/Box2D.js\");\r\n\r\nconst { FilterHelper } = require(\"./Filter.js\");\r\n\r\nconst {\r\n\tb2Vec2,\r\n\tb2Body, b2Fixture,\r\n\tb2Contact, b2Manifold, b2ContactImpulse,\r\n\tb2ContactListener\r\n} = box2d;\r\n\r\n\r\nwindow.$box2d = box2d;\r\n\r\nlet b2Vec2_temp = new b2Vec2();\r\n\r\n/** @type {string} */\r\nb2Body.prototype.$type = null;\r\n\r\nb2Body.prototype.Step = function (stamp) {\r\n\tif (this._on_step) {\r\n\t\tfor (let fn of this._on_step) {\r\n\t\t\tfn(stamp);\r\n\t\t}\r\n\t}\r\n}\r\nb2Body.prototype.AfterStep = function (stamp) {\r\n\tif (this._on_after_step) {\r\n\t\tfor (let fn of this._on_after_step) {\r\n\t\t\tfn(stamp);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {function():void} func\r\n */\r\nb2Body.prototype.addStep = function (func) {\r\n\tthis._on_step = this._on_step || [];\r\n\tthis._on_step.push(func);\r\n}\r\n\r\n/**\r\n * @param {function():void} func\r\n */\r\nb2Body.prototype.addAfterStep = function (func) {\r\n\tthis._on_after_step = this._on_after_step || [];\r\n\tthis._on_after_step.push(func);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.SetLinearVelocity2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.SetLinearVelocity(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.ApplyForceToCenter2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.ApplyForceToCenter(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nb2Body.prototype.ApplyLinearImpulseToCenter2 = function (x, y) {\r\n\tb2Vec2_temp.x = x;\r\n\tb2Vec2_temp.y = y;\r\n\tthis.ApplyLinearImpulseToCenter(b2Vec2_temp, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVel)快速加速到'指定速度'(desiredVel)\r\n * @param {b2Vec2} desiredVel\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.Acceleration = function (desiredVel, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, b2Vec2_temp);\r\n\tlet m = this.GetMass();\r\n\tlet ix = m * velChange.x;\r\n\tlet iy = m * velChange.y;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(ix, iy);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVelX)快速加速到'指定速度'(desiredVel)\r\n * @param {number} desiredVelX\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.AccelerationX = function (desiredVelX, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChangeX = desiredVelX - sourceVel.x;\r\n\tlet m = this.GetMass();\r\n\tlet ix = m * velChangeX;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(ix, 0);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * '原速度'(sourceVelY)快速加速到'指定速度'(desiredVel)\r\n * @param {number} desiredVelY\r\n * @param {b2Vec2} sourceVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.AccelerationY = function (desiredVelY, sourceVel, point) {\r\n\tif (!point) {\r\n\t\tpoint = this.GetWorldCenter();\r\n\t}\r\n\r\n\tlet velChangeY = desiredVelY - sourceVel.y;\r\n\tlet m = this.GetMass();\r\n\tlet iy = m * velChangeY;\r\n\r\n\tlet impulse = b2Vec2_temp.Set(0, iy);\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * 等速度運動\r\n * @param {b2Vec2} desiredVel\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocity = function (desiredVel, point) {\r\n\tthis.Acceleration(desiredVel, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * @param {number} desiredVelX\r\n * @param {number} desiredVelY\r\n * @param {number} pointX\r\n * @param {number} pointY\r\n */\r\nb2Body.prototype.ConstantVelocity2 = function (desiredVelX, desiredVelY, pointX, pointY) {\r\n\tconst desiredVel = new b2Vec2(desiredVelX, desiredVelY);\r\n\tconst point = new b2Vec2(pointX, pointY);\r\n\r\n\tconst sourceVel = this.GetLinearVelocity();\r\n\tconst m = this.GetMass();\r\n\r\n\tlet impulse = new b2Vec2();\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, impulse);\r\n\timpulse.x = m * velChange.x;\r\n\timpulse.y = m * velChange.y;\r\n\r\n\tthis.ApplyLinearImpulse(impulse, point, true);\r\n}\r\n\r\n/**\r\n * @param {number} desiredVelX\r\n * @param {number} desiredVelY\r\n */\r\nb2Body.prototype.ConstantVelocityWorldCenter2 = function (desiredVelX, desiredVelY) {\r\n\tconst desiredVel = new b2Vec2(desiredVelX, desiredVelY);\r\n\r\n\tconst sourceVel = this.GetLinearVelocity();\r\n\tconst m = this.GetMass();\r\n\r\n\tlet impulse = new b2Vec2();\r\n\r\n\tlet velChange = b2Vec2.SubVV(desiredVel, sourceVel, impulse);\r\n\timpulse.x = m * velChange.x;\r\n\timpulse.y = m * velChange.y;\r\n\r\n\tthis.ApplyLinearImpulseToCenter(impulse, true);\r\n}\r\n\r\n/**\r\n * 等速度運動 X\r\n * @param{number} desiredVelX\r\n * @param{b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocityX = function (desiredVelX, point) {\r\n\tthis.AccelerationX(desiredVelX, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * 等速度運動 Y\r\n * @param {number} desiredVelY\r\n * @param {b2Vec2} point\r\n */\r\nb2Body.prototype.ConstantVelocityY = function (desiredVelY, point) {\r\n\tthis.AccelerationY(desiredVelY, this.GetLinearVelocity(), point || this.GetWorldCenter());\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.beginContact = function (contact, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.endContact = function (contact, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2Manifold} oldManifold\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.preSolve = function (contact, oldManifold, fa, fb) {\r\n}\r\n\r\n/**\r\n * @param {b2Contact} contact\r\n * @param {b2ContactImpulse} impulse\r\n * @param {b2Fixture} fa\r\n * @param {b2Fixture} fb\r\n */\r\nb2Fixture.prototype.postSolve = function (contact, impulse, fa, fb) {\r\n}\r\n\r\n/** @returns {string} */\r\nb2Fixture.prototype.getOwnerID = function () {\r\n\tlet host = this.GetUserData();\r\n\tif (host && host.owner) {\r\n\t\treturn host.owner.id;\r\n\t}\r\n}\r\n\r\nclass FixtureContactListener {\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tbeginContact (contact, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tendContact (contact, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2Manifold} oldManifold\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tpreSolve (contact, oldManifold, fa, fb) {\r\n\t}\r\n\r\n\t/**\r\n\t * @param {b2Contact} contact\r\n\t * @param {b2ContactImpulse} impulse\r\n\t * @param {b2Fixture} fa\r\n\t * @param {b2Fixture} fb\r\n\t */\r\n\tpostSolve (contact, impulse, fa, fb) {\r\n\t}\r\n}\r\n\r\n\r\n\r\nmodule.exports = Object.assign(box2d, {\r\n\tFixtureContactListener, FilterHelper\r\n});\r\n","﻿\r\nimport { b2Filter, b2ContactFilter } from \"../../box2d.ts/build/Box2D.js\";\r\n\r\n\r\n/** @type {{[string]:FilterHelper}} */\r\nlet filter_preset = {\r\n};\r\n\r\nlet next_category = 1;\r\n\r\nexport class FilterHelper extends b2Filter {\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\tignore(categoryName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.maskBits = (this.maskBits & ~preset.categoryBits) >>> 0;\r\n\r\n\t\tpreset.maskBits = (preset.maskBits & ~this.categoryBits) >>> 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\taddCategory(categoryName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.categoryBits = this.categoryBits | preset.categoryBits;\r\n\t}\r\n\r\n\t/**\r\n\t * @template T\r\n\t * @param {T extends keyof filter_preset} categoryName\r\n\t * @param {string} debugName\r\n\t */\r\n\tstatic get(categoryName, debugName) {\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName];\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (!preset) {\r\n\t\t\t\tlet msg = \"not found filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\treturn filter_preset.s_default;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (debugName) {\r\n\t\t\tlet debugCategory = filter_preset[\"s_\" + debugName];\r\n\t\t\tconsole.warn(\"filter: \" + debugName + \"%o\", debugCategory);\r\n\t\t\tdebugger;\r\n\t\t}\r\n\t\treturn preset;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} categoryName\r\n\t */\r\n\tstatic registerCategory(categoryName) {\r\n\t\tif (process.env.NODE_ENV !== 'production') {\r\n\t\t\tif (filter_preset[\"s_\" + categoryName]) {\r\n\t\t\t\tlet msg = \"exist filter preset: \" + categoryName;\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (next_category > 0x80000000) {\r\n\t\t\t\tlet msg = \"no empty filter preset\";\r\n\t\t\t\tconsole.error(msg);\r\n\t\t\t\talert(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet preset = filter_preset[\"s_\" + categoryName] = new FilterHelper();\r\n\r\n\t\tpreset.groupIndex = 0;\r\n\t\tpreset.categoryBits = next_category;\r\n\t\tpreset.maskBits = 0xFFFFFFFF;//all\r\n\r\n\t\tpreset.name = categoryName;\r\n\r\n\t\tnext_category = next_category << 1;\r\n\r\n\t\treturn preset;\r\n\t}\r\n\r\n\tstatic get next_category() {\r\n\t\treturn filter_preset;\r\n\t}\r\n\tstatic get filter_preset() {\r\n\t\treturn filter_preset;\r\n\t}\r\n}\r\n\r\nconst filter_table = [\r\n/*                 default  body  foothold  foot  bullet  pvp_bullet  mob  mob_bullet  portal  ladder  map_obj  map_border */\r\n/* default */    [ 1,       1,    1,        1,    1,      1,          1,   1,          1,      1,      1,       1,     ],\r\n/* body */       [ 1,       0,    0,        0,    0,      1,          1,   1,          0,      1,      1,       1,     ],\r\n/* foothold */   [ 1,       0,    0,        1,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* foot */       [ 1,       0,    1,        0,    0,      0,          0,   0,          1,      0,      0,       1,     ],\r\n/* bullet */     [ 1,       0,    0,        0,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/* pvp_bullet */ [ 1,       1,    0,        0,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/* mob */        [ 1,       1,    0,        0,    1,      1,          0,   0,          0,      0,      0,       0,     ],\r\n/* mob_bullet */ [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* portal */     [ 1,       0,    0,        1,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* ladder */     [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* map_obj */    [ 1,       1,    0,        0,    0,      0,          0,   0,          0,      0,      0,       0,     ],\r\n/* map_border */ [ 1,       1,    0,        1,    0,      0,          1,   0,          0,      0,      0,       0,     ],\r\n/*  */\r\n];\r\n\r\n(function init() {\r\n\tlet filter_list = [\r\n\t\tFilterHelper.registerCategory(\"default\"),\r\n\t\tFilterHelper.registerCategory(\"body\"),\r\n\t\tFilterHelper.registerCategory(\"foothold\"),\r\n\t\tFilterHelper.registerCategory(\"foot\"),\r\n\t\tFilterHelper.registerCategory(\"bullet\"),\r\n\t\tFilterHelper.registerCategory(\"pvp_bullet\"),\r\n\t\tFilterHelper.registerCategory(\"mob\"),\r\n\t\tFilterHelper.registerCategory(\"mob_bullet\"),\r\n\t\tFilterHelper.registerCategory(\"portal\"),\r\n\t\tFilterHelper.registerCategory(\"ladder\"),\r\n\t\tFilterHelper.registerCategory(\"map_obj\"),\r\n\t\tFilterHelper.registerCategory(\"map_border\"),\r\n\t];\r\n\r\n\tfor (let i = 0; i < filter_table.length; ++i) {\r\n\t\tfor (let j = 0; j < filter_table[i].length; ++j) {\r\n\t\t\tif (!filter_table[i][j]) {\r\n\t\t\t\tfilter_list[i].maskBits = (filter_list[i].maskBits & ~(1 << j)) >>> 0;//uint32\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})();\r\n\r\n(function test() {\r\n\tlet contactFilter = new b2ContactFilter();\r\n\t\r\n\tfunction Fixture(filterName) {\r\n\t\treturn {\r\n\t\t\tGetFilterData: () => FilterHelper.get(filterName),\r\n\t\t\tGetBody: () => { return {\r\n\t\t\t\tGetType: () => 2,\r\n\t\t\t\tShouldCollideConnected: () => true,\r\n\t\t\t} },\r\n\t\t};\r\n\t}\r\n\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"body\"), Fixture(\"ladder\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"ladder\"), Fixture(\"body\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"foot\"), Fixture(\"portal\"))) {\r\n\t\tdebugger;\r\n\t}\r\n\tif (!contactFilter.ShouldCollide(Fixture(\"portal\"), Fixture(\"foot\"))) {\r\n\t\tdebugger;\r\n\t}\r\n})();\r\n\r\n","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport function b2Assert(condition, ...args) {\r\n    if (!condition) {\r\n        // debugger;\r\n        throw new Error(...args);\r\n    }\r\n}\r\nexport function b2Maybe(value, def) {\r\n    return value !== undefined ? value : def;\r\n}\r\nexport const b2_maxFloat = 1E+37; // FLT_MAX instead of Number.MAX_VALUE;\r\nexport const b2_epsilon = 1E-5; // FLT_EPSILON instead of Number.MIN_VALUE;\r\nexport const b2_epsilon_sq = (b2_epsilon * b2_epsilon);\r\nexport const b2_pi = 3.14159265359; // Math.PI;\r\n/// @file\r\n/// Global tuning constants based on meters-kilograms-seconds (MKS) units.\r\n///\r\n// Collision\r\n/// The maximum number of contact points between two convex shapes. Do\r\n/// not change this value.\r\nexport const b2_maxManifoldPoints = 2;\r\n/// The maximum number of vertices on a convex polygon. You cannot increase\r\n/// this too much because b2BlockAllocator has a maximum object size.\r\nexport const b2_maxPolygonVertices = 8;\r\n/// This is used to fatten AABBs in the dynamic tree. This allows proxies\r\n/// to move by a small amount without triggering a tree adjustment.\r\n/// This is in meters.\r\nexport const b2_aabbExtension = 0.1;\r\n/// This is used to fatten AABBs in the dynamic tree. This is used to predict\r\n/// the future position based on the current displacement.\r\n/// This is a dimensionless multiplier.\r\nexport const b2_aabbMultiplier = 2;\r\n/// A small length used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_linearSlop = 0.008; // 0.005;\r\n/// A small angle used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_angularSlop = 2 / 180 * b2_pi;\r\n/// The radius of the polygon/edge shape skin. This should not be modified. Making\r\n/// this smaller means polygons will have an insufficient buffer for continuous collision.\r\n/// Making it larger may create artifacts for vertex collision.\r\nexport const b2_polygonRadius = 2 * b2_linearSlop;\r\n/// Maximum number of sub-steps per contact in continuous physics simulation.\r\nexport const b2_maxSubSteps = 8;\r\n// Dynamics\r\n/// Maximum number of contacts to be handled to solve a TOI impact.\r\nexport const b2_maxTOIContacts = 32;\r\n/// A velocity threshold for elastic collisions. Any collision with a relative linear\r\n/// velocity below this threshold will be treated as inelastic.\r\nexport const b2_velocityThreshold = 1;\r\n/// The maximum linear position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxLinearCorrection = 0.2;\r\n/// The maximum angular position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxAngularCorrection = 8 / 180 * b2_pi;\r\n/// The maximum linear velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxTranslation = 2;\r\nexport const b2_maxTranslationSquared = b2_maxTranslation * b2_maxTranslation;\r\n/// The maximum angular velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxRotation = 0.5 * b2_pi;\r\nexport const b2_maxRotationSquared = b2_maxRotation * b2_maxRotation;\r\n/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so\r\n/// that overlap is removed in one time step. However using values close to 1 often lead\r\n/// to overshoot.\r\nexport const b2_baumgarte = 0.2;\r\nexport const b2_toiBaumgarte = 0.75;\r\n// #if B2_ENABLE_PARTICLE\r\n// Particle\r\n/// A symbolic constant that stands for particle allocation error.\r\nexport const b2_invalidParticleIndex = -1;\r\nexport const b2_maxParticleIndex = 0x7FFFFFFF;\r\n/// The default distance between particles, multiplied by the particle diameter.\r\nexport const b2_particleStride = 0.75;\r\n/// The minimum particle weight that produces pressure.\r\nexport const b2_minParticleWeight = 1.0;\r\n/// The upper limit for particle pressure.\r\nexport const b2_maxParticlePressure = 0.25;\r\n/// The upper limit for force between particles.\r\nexport const b2_maxParticleForce = 0.5;\r\n/// The maximum distance between particles in a triad, multiplied by the particle diameter.\r\nexport const b2_maxTriadDistance = 2.0;\r\nexport const b2_maxTriadDistanceSquared = (b2_maxTriadDistance * b2_maxTriadDistance);\r\n/// The initial size of particle data buffers.\r\nexport const b2_minParticleSystemBufferCapacity = 256;\r\n/// The time into the future that collisions against barrier particles will be detected.\r\nexport const b2_barrierCollisionTime = 2.5;\r\n// #endif\r\n// Sleep\r\n/// The time that a body must be still before it will go to sleep.\r\nexport const b2_timeToSleep = 0.5;\r\n/// A body cannot sleep if its linear velocity is above this tolerance.\r\nexport const b2_linearSleepTolerance = 0.01;\r\n/// A body cannot sleep if its angular velocity is above this tolerance.\r\nexport const b2_angularSleepTolerance = 2 / 180 * b2_pi;\r\n// Memory Allocation\r\n/// Implement this function to use your own memory allocator.\r\nexport function b2Alloc(size) {\r\n    return null;\r\n}\r\n/// If you implement b2Alloc, you should also implement this function.\r\nexport function b2Free(mem) {\r\n}\r\n/// Logging function.\r\nexport function b2Log(message, ...args) {\r\n    // console.log(message, ...args);\r\n}\r\n/// Version numbering scheme.\r\n/// See http://en.wikipedia.org/wiki/Software_versioning\r\nexport class b2Version {\r\n    constructor(major = 0, minor = 0, revision = 0) {\r\n        this.major = 0; ///< significant changes\r\n        this.minor = 0; ///< incremental changes\r\n        this.revision = 0; ///< bug fixes\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.revision = revision;\r\n    }\r\n    toString() {\r\n        return this.major + \".\" + this.minor + \".\" + this.revision;\r\n    }\r\n}\r\n/// Current version.\r\nexport const b2_version = new b2Version(2, 3, 2);\r\nexport const b2_branch = \"master\";\r\nexport const b2_commit = \"fbf51801d80fc389d43dc46524520e89043b6faf\";\r\nexport function b2ParseInt(v) {\r\n    return parseInt(v, 10);\r\n}\r\nexport function b2ParseUInt(v) {\r\n    return Math.abs(parseInt(v, 10));\r\n}\r\nexport function b2MakeArray(length, init) {\r\n    const a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(init(i));\r\n    }\r\n    return a;\r\n}\r\nexport function b2MakeNullArray(length) {\r\n    const a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(null);\r\n    }\r\n    return a;\r\n}\r\nexport function b2MakeNumberArray(length, init = 0) {\r\n    const a = [];\r\n    for (let i = 0; i < length; ++i) {\r\n        a.push(init);\r\n    }\r\n    return a;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbW1vbi9iMlNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTSxVQUFVLFFBQVEsQ0FBQyxTQUFrQixFQUFFLEdBQUcsSUFBVztJQUN6RCxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ2QsWUFBWTtRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUMxQjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFJLEtBQW9CLEVBQUUsR0FBTTtJQUNyRCxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQVcsS0FBSyxDQUFDLENBQUMsdUNBQXVDO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBVyxJQUFJLENBQUMsQ0FBQywyQ0FBMkM7QUFDbkYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFXLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQy9ELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBVyxhQUFhLENBQUMsQ0FBQyxXQUFXO0FBRXZELFNBQVM7QUFDVCwwRUFBMEU7QUFDMUUsR0FBRztBQUVILFlBQVk7QUFFWixzRUFBc0U7QUFDdEUsMEJBQTBCO0FBQzFCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFXLENBQUMsQ0FBQztBQUU5QywyRUFBMkU7QUFDM0UscUVBQXFFO0FBQ3JFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFXLENBQUMsQ0FBQztBQUUvQyx5RUFBeUU7QUFDekUsbUVBQW1FO0FBQ25FLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBVyxHQUFHLENBQUM7QUFFNUMs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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"./b2Settings\";\r\nimport { b2_pi, b2_epsilon, b2MakeArray } from \"./b2Settings\";\r\nexport const b2_pi_over_180 = b2_pi / 180;\r\nexport const b2_180_over_pi = 180 / b2_pi;\r\nexport const b2_two_pi = 2 * b2_pi;\r\nexport const b2Abs = Math.abs;\r\nexport const b2Min = Math.min;\r\nexport const b2Max = Math.max;\r\nexport function b2Clamp(a, lo, hi) {\r\n    return (a < lo) ? (lo) : ((a > hi) ? (hi) : (a));\r\n}\r\nexport function b2Swap(a, b) {\r\n    // DEBUG: b2Assert(false);\r\n    const tmp = a[0];\r\n    a[0] = b[0];\r\n    b[0] = tmp;\r\n}\r\n/// This function is used to ensure that a floating point number is\r\n/// not a NaN or infinity.\r\nexport const b2IsValid = isFinite;\r\nexport function b2Sq(n) {\r\n    return n * n;\r\n}\r\n/// This is a approximate yet fast inverse square-root.\r\nexport function b2InvSqrt(n) {\r\n    return 1 / Math.sqrt(n);\r\n}\r\nexport const b2Sqrt = Math.sqrt;\r\nexport const b2Pow = Math.pow;\r\nexport function b2DegToRad(degrees) {\r\n    return degrees * b2_pi_over_180;\r\n}\r\nexport function b2RadToDeg(radians) {\r\n    return radians * b2_180_over_pi;\r\n}\r\nexport const b2Cos = Math.cos;\r\nexport const b2Sin = Math.sin;\r\nexport const b2Acos = Math.acos;\r\nexport const b2Asin = Math.asin;\r\nexport const b2Atan2 = Math.atan2;\r\nexport function b2NextPowerOfTwo(x) {\r\n    x |= (x >> 1) & 0x7FFFFFFF;\r\n    x |= (x >> 2) & 0x3FFFFFFF;\r\n    x |= (x >> 4) & 0x0FFFFFFF;\r\n    x |= (x >> 8) & 0x00FFFFFF;\r\n    x |= (x >> 16) & 0x0000FFFF;\r\n    return x + 1;\r\n}\r\nexport function b2IsPowerOfTwo(x) {\r\n    return x > 0 && (x & (x - 1)) === 0;\r\n}\r\nexport function b2Random() {\r\n    return Math.random() * 2 - 1;\r\n}\r\nexport function b2RandomRange(lo, hi) {\r\n    return (hi - lo) * Math.random() + lo;\r\n}\r\n/// A 2D column vector.\r\nexport class b2Vec2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Clone() {\r\n        return new b2Vec2(this.x, this.y);\r\n    }\r\n    SetZero() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        return this;\r\n    }\r\n    Set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n    SelfAdd(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    SelfAddXY(x, y) {\r\n        this.x += x;\r\n        this.y += y;\r\n        return this;\r\n    }\r\n    SelfSub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    SelfSubXY(x, y) {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        return this;\r\n    }\r\n    SelfMul(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this;\r\n    }\r\n    SelfMulAdd(s, v) {\r\n        this.x += s * v.x;\r\n        this.y += s * v.y;\r\n        return this;\r\n    }\r\n    SelfMulSub(s, v) {\r\n        this.x -= s * v.x;\r\n        this.y -= s * v.y;\r\n        return this;\r\n    }\r\n    Dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    Cross(v) {\r\n        return this.x * v.y - this.y * v.x;\r\n    }\r\n    Length() {\r\n        const x = this.x, y = this.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n    LengthSquared() {\r\n        const x = this.x, y = this.y;\r\n        return (x * x + y * y);\r\n    }\r\n    Normalize() {\r\n        const length = this.Length();\r\n        if (length >= b2_epsilon) {\r\n            const inv_length = 1 / length;\r\n            this.x *= inv_length;\r\n            this.y *= inv_length;\r\n        }\r\n        return length;\r\n    }\r\n    SelfNormalize() {\r\n        const length = this.Length();\r\n        if (length >= b2_epsilon) {\r\n            const inv_length = 1 / length;\r\n            this.x *= inv_length;\r\n            this.y *= inv_length;\r\n        }\r\n        return this;\r\n    }\r\n    SelfRotate(radians) {\r\n        const c = Math.cos(radians);\r\n        const s = Math.sin(radians);\r\n        const x = this.x;\r\n        this.x = c * x - s * this.y;\r\n        this.y = s * x + c * this.y;\r\n        return this;\r\n    }\r\n    IsValid() {\r\n        return isFinite(this.x) && isFinite(this.y);\r\n    }\r\n    SelfCrossVS(s) {\r\n        const x = this.x;\r\n        this.x = s * this.y;\r\n        this.y = -s * x;\r\n        return this;\r\n    }\r\n    SelfCrossSV(s) {\r\n        const x = this.x;\r\n        this.x = -s * this.y;\r\n        this.y = s * x;\r\n        return this;\r\n    }\r\n    SelfMinV(v) {\r\n        this.x = b2Min(this.x, v.x);\r\n        this.y = b2Min(this.y, v.y);\r\n        return this;\r\n    }\r\n    SelfMaxV(v) {\r\n        this.x = b2Max(this.x, v.x);\r\n        this.y = b2Max(this.y, v.y);\r\n        return this;\r\n    }\r\n    SelfAbs() {\r\n        this.x = b2Abs(this.x);\r\n        this.y = b2Abs(this.y);\r\n        return this;\r\n    }\r\n    SelfNeg() {\r\n        this.x = (-this.x);\r\n        this.y = (-this.y);\r\n        return this;\r\n    }\r\n    SelfSkew() {\r\n        const x = this.x;\r\n        this.x = -this.y;\r\n        this.y = x;\r\n        return this;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Vec2());\r\n    }\r\n    static AbsV(v, out) {\r\n        out.x = b2Abs(v.x);\r\n        out.y = b2Abs(v.y);\r\n        return out;\r\n    }\r\n    static MinV(a, b, out) {\r\n        out.x = b2Min(a.x, b.x);\r\n        out.y = b2Min(a.y, b.y);\r\n        return out;\r\n    }\r\n    static MaxV(a, b, out) {\r\n        out.x = b2Max(a.x, b.x);\r\n        out.y = b2Max(a.y, b.y);\r\n        return out;\r\n    }\r\n    static ClampV(v, lo, hi, out) {\r\n        out.x = b2Clamp(v.x, lo.x, hi.x);\r\n        out.y = b2Clamp(v.y, lo.y, hi.y);\r\n        return out;\r\n    }\r\n    static RotateV(v, radians, out) {\r\n        const v_x = v.x, v_y = v.y;\r\n        const c = Math.cos(radians);\r\n        const s = Math.sin(radians);\r\n        out.x = c * v_x - s * v_y;\r\n        out.y = s * v_x + c * v_y;\r\n        return out;\r\n    }\r\n    static DotVV(a, b) {\r\n        return a.x * b.x + a.y * b.y;\r\n    }\r\n    static CrossVV(a, b) {\r\n        return a.x * b.y - a.y * b.x;\r\n    }\r\n    static CrossVS(v, s, out) {\r\n        const v_x = v.x;\r\n        out.x = s * v.y;\r\n        out.y = -s * v_x;\r\n        return out;\r\n    }\r\n    static CrossVOne(v, out) {\r\n        const v_x = v.x;\r\n        out.x = v.y;\r\n        out.y = -v_x;\r\n        return out;\r\n    }\r\n    static CrossSV(s, v, out) {\r\n        const v_x = v.x;\r\n        out.x = -s * v.y;\r\n        out.y = s * v_x;\r\n        return out;\r\n    }\r\n    static CrossOneV(v, out) {\r\n        const v_x = v.x;\r\n        out.x = -v.y;\r\n        out.y = v_x;\r\n        return out;\r\n    }\r\n    static AddVV(a, b, out) { out.x = a.x + b.x; out.y = a.y + b.y; return out; }\r\n    static SubVV(a, b, out) { out.x = a.x - b.x; out.y = a.y - b.y; return out; }\r\n    static MulSV(s, v, out) { out.x = v.x * s; out.y = v.y * s; return out; }\r\n    static MulVS(v, s, out) { out.x = v.x * s; out.y = v.y * s; return out; }\r\n    static AddVMulSV(a, s, b, out) { out.x = a.x + (s * b.x); out.y = a.y + (s * b.y); return out; }\r\n    static SubVMulSV(a, s, b, out) { out.x = a.x - (s * b.x); out.y = a.y - (s * b.y); return out; }\r\n    static AddVCrossSV(a, s, v, out) {\r\n        const v_x = v.x;\r\n        out.x = a.x - (s * v.y);\r\n        out.y = a.y + (s * v_x);\r\n        return out;\r\n    }\r\n    static MidVV(a, b, out) { out.x = (a.x + b.x) * 0.5; out.y = (a.y + b.y) * 0.5; return out; }\r\n    static ExtVV(a, b, out) { out.x = (b.x - a.x) * 0.5; out.y = (b.y - a.y) * 0.5; return out; }\r\n    static IsEqualToV(a, b) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n    static DistanceVV(a, b) {\r\n        const c_x = a.x - b.x;\r\n        const c_y = a.y - b.y;\r\n        return Math.sqrt(c_x * c_x + c_y * c_y);\r\n    }\r\n    static DistanceSquaredVV(a, b) {\r\n        const c_x = a.x - b.x;\r\n        const c_y = a.y - b.y;\r\n        return (c_x * c_x + c_y * c_y);\r\n    }\r\n    static NegV(v, out) { out.x = -v.x; out.y = -v.y; return out; }\r\n}\r\nb2Vec2.ZERO = new b2Vec2(0, 0);\r\nb2Vec2.UNITX = new b2Vec2(1, 0);\r\nb2Vec2.UNITY = new b2Vec2(0, 1);\r\nb2Vec2.s_t0 = new b2Vec2();\r\nb2Vec2.s_t1 = new b2Vec2();\r\nb2Vec2.s_t2 = new b2Vec2();\r\nb2Vec2.s_t3 = new b2Vec2();\r\nexport const b2Vec2_zero = new b2Vec2(0, 0);\r\n/// A 2D column vector with 3 elements.\r\nexport class b2Vec3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    Clone() {\r\n        return new b2Vec3(this.x, this.y, this.z);\r\n    }\r\n    SetZero() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        return this;\r\n    }\r\n    SetXYZ(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        this.z = other.z;\r\n        return this;\r\n    }\r\n    SelfNeg() {\r\n        this.x = (-this.x);\r\n        this.y = (-this.y);\r\n        this.z = (-this.z);\r\n        return this;\r\n    }\r\n    SelfAdd(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return this;\r\n    }\r\n    SelfAddXYZ(x, y, z) {\r\n        this.x += x;\r\n        this.y += y;\r\n        this.z += z;\r\n        return this;\r\n    }\r\n    SelfSub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        return this;\r\n    }\r\n    SelfSubXYZ(x, y, z) {\r\n        this.x -= x;\r\n        this.y -= y;\r\n        this.z -= z;\r\n        return this;\r\n    }\r\n    SelfMul(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        this.z *= s;\r\n        return this;\r\n    }\r\n    static DotV3V3(a, b) {\r\n        return a.x * b.x + a.y * b.y + a.z * b.z;\r\n    }\r\n    static CrossV3V3(a, b, out) {\r\n        const a_x = a.x, a_y = a.y, a_z = a.z;\r\n        const b_x = b.x, b_y = b.y, b_z = b.z;\r\n        out.x = a_y * b_z - a_z * b_y;\r\n        out.y = a_z * b_x - a_x * b_z;\r\n        out.z = a_x * b_y - a_y * b_x;\r\n        return out;\r\n    }\r\n}\r\nb2Vec3.ZERO = new b2Vec3(0, 0, 0);\r\nb2Vec3.s_t0 = new b2Vec3();\r\n/// A 2-by-2 matrix. Stored in column-major order.\r\nexport class b2Mat22 {\r\n    constructor() {\r\n        this.ex = new b2Vec2(1, 0);\r\n        this.ey = new b2Vec2(0, 1);\r\n    }\r\n    Clone() {\r\n        return new b2Mat22().Copy(this);\r\n    }\r\n    static FromVV(c1, c2) {\r\n        return new b2Mat22().SetVV(c1, c2);\r\n    }\r\n    static FromSSSS(r1c1, r1c2, r2c1, r2c2) {\r\n        return new b2Mat22().SetSSSS(r1c1, r1c2, r2c1, r2c2);\r\n    }\r\n    static FromAngle(radians) {\r\n        return new b2Mat22().SetAngle(radians);\r\n    }\r\n    SetSSSS(r1c1, r1c2, r2c1, r2c2) {\r\n        this.ex.Set(r1c1, r2c1);\r\n        this.ey.Set(r1c2, r2c2);\r\n        return this;\r\n    }\r\n    SetVV(c1, c2) {\r\n        this.ex.Copy(c1);\r\n        this.ey.Copy(c2);\r\n        return this;\r\n    }\r\n    SetAngle(radians) {\r\n        const c = Math.cos(radians);\r\n        const s = Math.sin(radians);\r\n        this.ex.Set(c, s);\r\n        this.ey.Set(-s, c);\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        this.ex.Copy(other.ex);\r\n        this.ey.Copy(other.ey);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.ex.Set(1, 0);\r\n        this.ey.Set(0, 1);\r\n        return this;\r\n    }\r\n    SetZero() {\r\n        this.ex.SetZero();\r\n        this.ey.SetZero();\r\n        return this;\r\n    }\r\n    GetAngle() {\r\n        return Math.atan2(this.ex.y, this.ex.x);\r\n    }\r\n    GetInverse(out) {\r\n        const a = this.ex.x;\r\n        const b = this.ey.x;\r\n        const c = this.ex.y;\r\n        const d = this.ey.y;\r\n        let det = a * d - b * c;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.ex.x = det * d;\r\n        out.ey.x = (-det * b);\r\n        out.ex.y = (-det * c);\r\n        out.ey.y = det * a;\r\n        return out;\r\n    }\r\n    Solve(b_x, b_y, out) {\r\n        const a11 = this.ex.x, a12 = this.ey.x;\r\n        const a21 = this.ex.y, a22 = this.ey.y;\r\n        let det = a11 * a22 - a12 * a21;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (a22 * b_x - a12 * b_y);\r\n        out.y = det * (a11 * b_y - a21 * b_x);\r\n        return out;\r\n    }\r\n    SelfAbs() {\r\n        this.ex.SelfAbs();\r\n        this.ey.SelfAbs();\r\n        return this;\r\n    }\r\n    SelfInv() {\r\n        this.GetInverse(this);\r\n        return this;\r\n    }\r\n    SelfAddM(M) {\r\n        this.ex.SelfAdd(M.ex);\r\n        this.ey.SelfAdd(M.ey);\r\n        return this;\r\n    }\r\n    SelfSubM(M) {\r\n        this.ex.SelfSub(M.ex);\r\n        this.ey.SelfSub(M.ey);\r\n        return this;\r\n    }\r\n    static AbsM(M, out) {\r\n        const M_ex = M.ex, M_ey = M.ey;\r\n        out.ex.x = b2Abs(M_ex.x);\r\n        out.ex.y = b2Abs(M_ex.y);\r\n        out.ey.x = b2Abs(M_ey.x);\r\n        out.ey.y = b2Abs(M_ey.y);\r\n        return out;\r\n    }\r\n    static MulMV(M, v, out) {\r\n        const M_ex = M.ex, M_ey = M.ey;\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = M_ex.x * v_x + M_ey.x * v_y;\r\n        out.y = M_ex.y * v_x + M_ey.y * v_y;\r\n        return out;\r\n    }\r\n    static MulTMV(M, v, out) {\r\n        const M_ex = M.ex, M_ey = M.ey;\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = M_ex.x * v_x + M_ex.y * v_y;\r\n        out.y = M_ey.x * v_x + M_ey.y * v_y;\r\n        return out;\r\n    }\r\n    static AddMM(A, B, out) {\r\n        const A_ex = A.ex, A_ey = A.ey;\r\n        const B_ex = B.ex, B_ey = B.ey;\r\n        out.ex.x = A_ex.x + B_ex.x;\r\n        out.ex.y = A_ex.y + B_ex.y;\r\n        out.ey.x = A_ey.x + B_ey.x;\r\n        out.ey.y = A_ey.y + B_ey.y;\r\n        return out;\r\n    }\r\n    static MulMM(A, B, out) {\r\n        const A_ex_x = A.ex.x, A_ex_y = A.ex.y;\r\n        const A_ey_x = A.ey.x, A_ey_y = A.ey.y;\r\n        const B_ex_x = B.ex.x, B_ex_y = B.ex.y;\r\n        const B_ey_x = B.ey.x, B_ey_y = B.ey.y;\r\n        out.ex.x = A_ex_x * B_ex_x + A_ey_x * B_ex_y;\r\n        out.ex.y = A_ex_y * B_ex_x + A_ey_y * B_ex_y;\r\n        out.ey.x = A_ex_x * B_ey_x + A_ey_x * B_ey_y;\r\n        out.ey.y = A_ex_y * B_ey_x + A_ey_y * B_ey_y;\r\n        return out;\r\n    }\r\n    static MulTMM(A, B, out) {\r\n        const A_ex_x = A.ex.x, A_ex_y = A.ex.y;\r\n        const A_ey_x = A.ey.x, A_ey_y = A.ey.y;\r\n        const B_ex_x = B.ex.x, B_ex_y = B.ex.y;\r\n        const B_ey_x = B.ey.x, B_ey_y = B.ey.y;\r\n        out.ex.x = A_ex_x * B_ex_x + A_ex_y * B_ex_y;\r\n        out.ex.y = A_ey_x * B_ex_x + A_ey_y * B_ex_y;\r\n        out.ey.x = A_ex_x * B_ey_x + A_ex_y * B_ey_y;\r\n        out.ey.y = A_ey_x * B_ey_x + A_ey_y * B_ey_y;\r\n        return out;\r\n    }\r\n}\r\nb2Mat22.IDENTITY = new b2Mat22();\r\n/// A 3-by-3 matrix. Stored in column-major order.\r\nexport class b2Mat33 {\r\n    constructor() {\r\n        this.ex = new b2Vec3(1, 0, 0);\r\n        this.ey = new b2Vec3(0, 1, 0);\r\n        this.ez = new b2Vec3(0, 0, 1);\r\n    }\r\n    Clone() {\r\n        return new b2Mat33().Copy(this);\r\n    }\r\n    SetVVV(c1, c2, c3) {\r\n        this.ex.Copy(c1);\r\n        this.ey.Copy(c2);\r\n        this.ez.Copy(c3);\r\n        return this;\r\n    }\r\n    Copy(other) {\r\n        this.ex.Copy(other.ex);\r\n        this.ey.Copy(other.ey);\r\n        this.ez.Copy(other.ez);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.ex.SetXYZ(1, 0, 0);\r\n        this.ey.SetXYZ(0, 1, 0);\r\n        this.ez.SetXYZ(0, 0, 1);\r\n        return this;\r\n    }\r\n    SetZero() {\r\n        this.ex.SetZero();\r\n        this.ey.SetZero();\r\n        this.ez.SetZero();\r\n        return this;\r\n    }\r\n    SelfAddM(M) {\r\n        this.ex.SelfAdd(M.ex);\r\n        this.ey.SelfAdd(M.ey);\r\n        this.ez.SelfAdd(M.ez);\r\n        return this;\r\n    }\r\n    Solve33(b_x, b_y, b_z, out) {\r\n        const a11 = this.ex.x, a21 = this.ex.y, a31 = this.ex.z;\r\n        const a12 = this.ey.x, a22 = this.ey.y, a32 = this.ey.z;\r\n        const a13 = this.ez.x, a23 = this.ez.y, a33 = this.ez.z;\r\n        let det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (b_x * (a22 * a33 - a32 * a23) + b_y * (a32 * a13 - a12 * a33) + b_z * (a12 * a23 - a22 * a13));\r\n        out.y = det * (a11 * (b_y * a33 - b_z * a23) + a21 * (b_z * a13 - b_x * a33) + a31 * (b_x * a23 - b_y * a13));\r\n        out.z = det * (a11 * (a22 * b_z - a32 * b_y) + a21 * (a32 * b_x - a12 * b_z) + a31 * (a12 * b_y - a22 * b_x));\r\n        return out;\r\n    }\r\n    Solve22(b_x, b_y, out) {\r\n        const a11 = this.ex.x, a12 = this.ey.x;\r\n        const a21 = this.ex.y, a22 = this.ey.y;\r\n        let det = a11 * a22 - a12 * a21;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        out.x = det * (a22 * b_x - a12 * b_y);\r\n        out.y = det * (a11 * b_y - a21 * b_x);\r\n        return out;\r\n    }\r\n    GetInverse22(M) {\r\n        const a = this.ex.x, b = this.ey.x, c = this.ex.y, d = this.ey.y;\r\n        let det = a * d - b * c;\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        M.ex.x = det * d;\r\n        M.ey.x = -det * b;\r\n        M.ex.z = 0;\r\n        M.ex.y = -det * c;\r\n        M.ey.y = det * a;\r\n        M.ey.z = 0;\r\n        M.ez.x = 0;\r\n        M.ez.y = 0;\r\n        M.ez.z = 0;\r\n    }\r\n    GetSymInverse33(M) {\r\n        let det = b2Vec3.DotV3V3(this.ex, b2Vec3.CrossV3V3(this.ey, this.ez, b2Vec3.s_t0));\r\n        if (det !== 0) {\r\n            det = 1 / det;\r\n        }\r\n        const a11 = this.ex.x, a12 = this.ey.x, a13 = this.ez.x;\r\n        const a22 = this.ey.y, a23 = this.ez.y;\r\n        const a33 = this.ez.z;\r\n        M.ex.x = det * (a22 * a33 - a23 * a23);\r\n        M.ex.y = det * (a13 * a23 - a12 * a33);\r\n        M.ex.z = det * (a12 * a23 - a13 * a22);\r\n        M.ey.x = M.ex.y;\r\n        M.ey.y = det * (a11 * a33 - a13 * a13);\r\n        M.ey.z = det * (a13 * a12 - a11 * a23);\r\n        M.ez.x = M.ex.z;\r\n        M.ez.y = M.ey.z;\r\n        M.ez.z = det * (a11 * a22 - a12 * a12);\r\n    }\r\n    static MulM33V3(A, v, out) {\r\n        const v_x = v.x, v_y = v.y, v_z = v.z;\r\n        out.x = A.ex.x * v_x + A.ey.x * v_y + A.ez.x * v_z;\r\n        out.y = A.ex.y * v_x + A.ey.y * v_y + A.ez.y * v_z;\r\n        out.z = A.ex.z * v_x + A.ey.z * v_y + A.ez.z * v_z;\r\n        return out;\r\n    }\r\n    static MulM33XYZ(A, x, y, z, out) {\r\n        out.x = A.ex.x * x + A.ey.x * y + A.ez.x * z;\r\n        out.y = A.ex.y * x + A.ey.y * y + A.ez.y * z;\r\n        out.z = A.ex.z * x + A.ey.z * y + A.ez.z * z;\r\n        return out;\r\n    }\r\n    static MulM33V2(A, v, out) {\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = A.ex.x * v_x + A.ey.x * v_y;\r\n        out.y = A.ex.y * v_x + A.ey.y * v_y;\r\n        return out;\r\n    }\r\n    static MulM33XY(A, x, y, out) {\r\n        out.x = A.ex.x * x + A.ey.x * y;\r\n        out.y = A.ex.y * x + A.ey.y * y;\r\n        return out;\r\n    }\r\n}\r\nb2Mat33.IDENTITY = new b2Mat33();\r\n/// Rotation\r\nexport class b2Rot {\r\n    constructor(angle = 0) {\r\n        this.s = 0;\r\n        this.c = 1;\r\n        if (angle) {\r\n            this.s = Math.sin(angle);\r\n            this.c = Math.cos(angle);\r\n        }\r\n    }\r\n    Clone() {\r\n        return new b2Rot().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.s = other.s;\r\n        this.c = other.c;\r\n        return this;\r\n    }\r\n    SetAngle(angle) {\r\n        this.s = Math.sin(angle);\r\n        this.c = Math.cos(angle);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.s = 0;\r\n        this.c = 1;\r\n        return this;\r\n    }\r\n    GetAngle() {\r\n        return Math.atan2(this.s, this.c);\r\n    }\r\n    GetXAxis(out) {\r\n        out.x = this.c;\r\n        out.y = this.s;\r\n        return out;\r\n    }\r\n    GetYAxis(out) {\r\n        out.x = -this.s;\r\n        out.y = this.c;\r\n        return out;\r\n    }\r\n    static MulRR(q, r, out) {\r\n        // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\r\n        // [qs  qc]   [rs  rc]   [qs*rc+qc*rs -qs*rs+qc*rc]\r\n        // s = qs * rc + qc * rs\r\n        // c = qc * rc - qs * rs\r\n        const q_c = q.c, q_s = q.s;\r\n        const r_c = r.c, r_s = r.s;\r\n        out.s = q_s * r_c + q_c * r_s;\r\n        out.c = q_c * r_c - q_s * r_s;\r\n        return out;\r\n    }\r\n    static MulTRR(q, r, out) {\r\n        // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\r\n        // [-qs qc]   [rs  rc]   [-qs*rc+qc*rs qs*rs+qc*rc]\r\n        // s = qc * rs - qs * rc\r\n        // c = qc * rc + qs * rs\r\n        const q_c = q.c, q_s = q.s;\r\n        const r_c = r.c, r_s = r.s;\r\n        out.s = q_c * r_s - q_s * r_c;\r\n        out.c = q_c * r_c + q_s * r_s;\r\n        return out;\r\n    }\r\n    static MulRV(q, v, out) {\r\n        const q_c = q.c, q_s = q.s;\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = q_c * v_x - q_s * v_y;\r\n        out.y = q_s * v_x + q_c * v_y;\r\n        return out;\r\n    }\r\n    static MulTRV(q, v, out) {\r\n        const q_c = q.c, q_s = q.s;\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = q_c * v_x + q_s * v_y;\r\n        out.y = -q_s * v_x + q_c * v_y;\r\n        return out;\r\n    }\r\n}\r\nb2Rot.IDENTITY = new b2Rot();\r\n/// A transform contains translation and rotation. It is used to represent\r\n/// the position and orientation of rigid frames.\r\nexport class b2Transform {\r\n    constructor() {\r\n        this.p = new b2Vec2();\r\n        this.q = new b2Rot();\r\n    }\r\n    Clone() {\r\n        return new b2Transform().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.p.Copy(other.p);\r\n        this.q.Copy(other.q);\r\n        return this;\r\n    }\r\n    SetIdentity() {\r\n        this.p.SetZero();\r\n        this.q.SetIdentity();\r\n        return this;\r\n    }\r\n    SetPositionRotation(position, q) {\r\n        this.p.Copy(position);\r\n        this.q.Copy(q);\r\n        return this;\r\n    }\r\n    SetPositionAngle(pos, a) {\r\n        this.p.Copy(pos);\r\n        this.q.SetAngle(a);\r\n        return this;\r\n    }\r\n    SetPosition(position) {\r\n        this.p.Copy(position);\r\n        return this;\r\n    }\r\n    SetPositionXY(x, y) {\r\n        this.p.Set(x, y);\r\n        return this;\r\n    }\r\n    SetRotation(rotation) {\r\n        this.q.Copy(rotation);\r\n        return this;\r\n    }\r\n    SetRotationAngle(radians) {\r\n        this.q.SetAngle(radians);\r\n        return this;\r\n    }\r\n    GetPosition() {\r\n        return this.p;\r\n    }\r\n    GetRotation() {\r\n        return this.q;\r\n    }\r\n    GetRotationAngle() {\r\n        return this.q.GetAngle();\r\n    }\r\n    GetAngle() {\r\n        return this.q.GetAngle();\r\n    }\r\n    static MulXV(T, v, out) {\r\n        // float32 x = (T.q.c * v.x - T.q.s * v.y) + T.p.x;\r\n        // float32 y = (T.q.s * v.x + T.q.c * v.y) + T.p.y;\r\n        // return b2Vec2(x, y);\r\n        const T_q_c = T.q.c, T_q_s = T.q.s;\r\n        const v_x = v.x, v_y = v.y;\r\n        out.x = (T_q_c * v_x - T_q_s * v_y) + T.p.x;\r\n        out.y = (T_q_s * v_x + T_q_c * v_y) + T.p.y;\r\n        return out;\r\n    }\r\n    static MulTXV(T, v, out) {\r\n        // float32 px = v.x - T.p.x;\r\n        // float32 py = v.y - T.p.y;\r\n        // float32 x = (T.q.c * px + T.q.s * py);\r\n        // float32 y = (-T.q.s * px + T.q.c * py);\r\n        // return b2Vec2(x, y);\r\n        const T_q_c = T.q.c, T_q_s = T.q.s;\r\n        const p_x = v.x - T.p.x;\r\n        const p_y = v.y - T.p.y;\r\n        out.x = (T_q_c * p_x + T_q_s * p_y);\r\n        out.y = (-T_q_s * p_x + T_q_c * p_y);\r\n        return out;\r\n    }\r\n    static MulXX(A, B, out) {\r\n        b2Rot.MulRR(A.q, B.q, out.q);\r\n        b2Vec2.AddVV(b2Rot.MulRV(A.q, B.p, out.p), A.p, out.p);\r\n        return out;\r\n    }\r\n    static MulTXX(A, B, out) {\r\n        b2Rot.MulTRR(A.q, B.q, out.q);\r\n        b2Rot.MulTRV(A.q, b2Vec2.SubVV(B.p, A.p, out.p), out.p);\r\n        return out;\r\n    }\r\n}\r\nb2Transform.IDENTITY = new b2Transform();\r\n/// This describes the motion of a body/shape for TOI computation.\r\n/// Shapes are defined with respect to the body origin, which may\r\n/// no coincide with the center of mass. However, to support dynamics\r\n/// we must interpolate the center of mass position.\r\nexport class b2Sweep {\r\n    constructor() {\r\n        this.localCenter = new b2Vec2();\r\n        this.c0 = new b2Vec2();\r\n        this.c = new b2Vec2();\r\n        this.a0 = 0;\r\n        this.a = 0;\r\n        this.alpha0 = 0;\r\n    }\r\n    Clone() {\r\n        return new b2Sweep().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.localCenter.Copy(other.localCenter);\r\n        this.c0.Copy(other.c0);\r\n        this.c.Copy(other.c);\r\n        this.a0 = other.a0;\r\n        this.a = other.a;\r\n        this.alpha0 = other.alpha0;\r\n        return this;\r\n    }\r\n    GetTransform(xf, beta) {\r\n        const one_minus_beta = (1 - beta);\r\n        xf.p.x = one_minus_beta * this.c0.x + beta * this.c.x;\r\n        xf.p.y = one_minus_beta * this.c0.y + beta * this.c.y;\r\n        const angle = one_minus_beta * this.a0 + beta * this.a;\r\n        xf.q.SetAngle(angle);\r\n        xf.p.SelfSub(b2Rot.MulRV(xf.q, this.localCenter, b2Vec2.s_t0));\r\n        return xf;\r\n    }\r\n    Advance(alpha) {\r\n        // DEBUG: b2Assert(this.alpha0 < 1);\r\n        const beta = (alpha - this.alpha0) / (1 - this.alpha0);\r\n        const one_minus_beta = (1 - beta);\r\n        this.c0.x = one_minus_beta * this.c0.x + beta * this.c.x;\r\n        this.c0.y = one_minus_beta * this.c0.y + beta * this.c.y;\r\n        this.a0 = one_minus_beta * this.a0 + beta * this.a;\r\n        this.alpha0 = alpha;\r\n    }\r\n    Normalize() {\r\n        const d = b2_two_pi * Math.floor(this.a0 / b2_two_pi);\r\n        this.a0 -= d;\r\n        this.a -= d;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2011 Erin Catto http://box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/// Color for debug drawing. Each value has the range [0,1].\r\nexport class b2Color {\r\n    constructor(rr = 0.5, gg = 0.5, bb = 0.5, aa = 1.0) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        this.a = aa;\r\n    }\r\n    Clone() {\r\n        return new b2Color().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        this.r = other.r;\r\n        this.g = other.g;\r\n        this.b = other.b;\r\n        this.a = other.a;\r\n        return this;\r\n    }\r\n    IsEqual(color) {\r\n        return (this.r === color.r) && (this.g === color.g) && (this.b === color.b) && (this.a === color.a);\r\n    }\r\n    IsZero() {\r\n        return (this.r === 0) && (this.g === 0) && (this.b === 0) && (this.a === 0);\r\n    }\r\n    Set(r, g, b, a = this.a) {\r\n        this.SetRGBA(r, g, b, a);\r\n    }\r\n    SetByteRGB(r, g, b) {\r\n        this.r = r / 0xff;\r\n        this.g = g / 0xff;\r\n        this.b = b / 0xff;\r\n        return this;\r\n    }\r\n    SetByteRGBA(r, g, b, a) {\r\n        this.r = r / 0xff;\r\n        this.g = g / 0xff;\r\n        this.b = b / 0xff;\r\n        this.a = a / 0xff;\r\n        return this;\r\n    }\r\n    SetRGB(rr, gg, bb) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        return this;\r\n    }\r\n    SetRGBA(rr, gg, bb, aa) {\r\n        this.r = rr;\r\n        this.g = gg;\r\n        this.b = bb;\r\n        this.a = aa;\r\n        return this;\r\n    }\r\n    SelfAdd(color) {\r\n        this.r += color.r;\r\n        this.g += color.g;\r\n        this.b += color.b;\r\n        this.a += color.a;\r\n        return this;\r\n    }\r\n    Add(color, out) {\r\n        out.r = this.r + color.r;\r\n        out.g = this.g + color.g;\r\n        out.b = this.b + color.b;\r\n        out.a = this.a + color.a;\r\n        return out;\r\n    }\r\n    SelfSub(color) {\r\n        this.r -= color.r;\r\n        this.g -= color.g;\r\n        this.b -= color.b;\r\n        this.a -= color.a;\r\n        return this;\r\n    }\r\n    Sub(color, out) {\r\n        out.r = this.r - color.r;\r\n        out.g = this.g - color.g;\r\n        out.b = this.b - color.b;\r\n        out.a = this.a - color.a;\r\n        return out;\r\n    }\r\n    SelfMul(s) {\r\n        this.r *= s;\r\n        this.g *= s;\r\n        this.b *= s;\r\n        this.a *= s;\r\n        return this;\r\n    }\r\n    Mul(s, out) {\r\n        out.r = this.r * s;\r\n        out.g = this.g * s;\r\n        out.b = this.b * s;\r\n        out.a = this.a * s;\r\n        return out;\r\n    }\r\n    Mix(mixColor, strength) {\r\n        b2Color.MixColors(this, mixColor, strength);\r\n    }\r\n    static MixColors(colorA, colorB, strength) {\r\n        const dr = (strength * (colorB.r - colorA.r));\r\n        const dg = (strength * (colorB.g - colorA.g));\r\n        const db = (strength * (colorB.b - colorA.b));\r\n        const da = (strength * (colorB.a - colorA.a));\r\n        colorA.r += dr;\r\n        colorA.g += dg;\r\n        colorA.b += db;\r\n        colorA.a += da;\r\n        colorB.r -= dr;\r\n        colorB.g -= dg;\r\n        colorB.b -= db;\r\n        colorB.a -= da;\r\n    }\r\n    MakeStyleString(alpha = this.a) {\r\n        return b2Color.MakeStyleString(this.r, this.g, this.b, alpha);\r\n    }\r\n    static MakeStyleString(r, g, b, a = 1.0) {\r\n        // function clamp(x: number, lo: number, hi: number) { return x < lo ? lo : hi < x ? hi : x; }\r\n        r *= 255; // r = clamp(r, 0, 255);\r\n        g *= 255; // g = clamp(g, 0, 255);\r\n        b *= 255; // b = clamp(b, 0, 255);\r\n        // a = clamp(a, 0, 1);\r\n        if (a < 1) {\r\n            return `rgba(${r},${g},${b},${a})`;\r\n        }\r\n        else {\r\n            return `rgb(${r},${g},${b})`;\r\n        }\r\n    }\r\n}\r\nb2Color.ZERO = new b2Color(0, 0, 0, 0);\r\nb2Color.RED = new b2Color(1, 0, 0);\r\nb2Color.GREEN = new b2Color(0, 1, 0);\r\nb2Color.BLUE = new b2Color(0, 0, 1);\r\nexport var b2DrawFlags;\r\n(function (b2DrawFlags) {\r\n    b2DrawFlags[b2DrawFlags[\"e_none\"] = 0] = \"e_none\";\r\n    b2DrawFlags[b2DrawFlags[\"e_shapeBit\"] = 1] = \"e_shapeBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_jointBit\"] = 2] = \"e_jointBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_aabbBit\"] = 4] = \"e_aabbBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_pairBit\"] = 8] = \"e_pairBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_centerOfMassBit\"] = 16] = \"e_centerOfMassBit\";\r\n    // #if B2_ENABLE_PARTICLE\r\n    b2DrawFlags[b2DrawFlags[\"e_particleBit\"] = 32] = \"e_particleBit\";\r\n    // #endif\r\n    b2DrawFlags[b2DrawFlags[\"e_controllerBit\"] = 64] = \"e_controllerBit\";\r\n    b2DrawFlags[b2DrawFlags[\"e_all\"] = 63] = \"e_all\";\r\n})(b2DrawFlags || (b2DrawFlags = {}));\r\n/// Implement and register this class with a b2World to provide debug drawing of physics\r\n/// entities in your game.\r\nexport class b2Draw {\r\n    constructor() {\r\n        this.m_drawFlags = 0;\r\n    }\r\n    SetFlags(flags) {\r\n        this.m_drawFlags = flags;\r\n    }\r\n    GetFlags() {\r\n        return this.m_drawFlags;\r\n    }\r\n    AppendFlags(flags) {\r\n        this.m_drawFlags |= flags;\r\n    }\r\n    ClearFlags(flags) {\r\n        this.m_drawFlags &= ~flags;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJEcmF3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvQ29tbW9uL2IyRHJhdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQWNGLDREQUE0RDtBQUM1RCxNQUFNLE9BQU8sT0FBTztJQVlsQixZQUFZLEtBQWEsR0FBRyxFQUFFLEtBQWEsR0FBRyxFQUFFLEtBQWEsR0FBRyxFQUFFLEtBQWEsR0FBRztRQUNoRixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQVc7UUFDckIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFXO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRU0sTUFBTTtRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsSUFBWSxJQUFJLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSxVQUFVLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQy9DLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFdBQVcsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQzNELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVO1FBQzlD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","/*\r\n* Copyright (c) 2011 Erin Catto http://box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/// Timer for profiling. This has platform specific code and may\r\n/// not work on every platform.\r\nexport class b2Timer {\r\n    constructor() {\r\n        this.m_start = Date.now();\r\n    }\r\n    /// Reset the timer.\r\n    Reset() {\r\n        this.m_start = Date.now();\r\n        return this;\r\n    }\r\n    /// Get the time since construction or the last reset.\r\n    GetMilliseconds() {\r\n        return Date.now() - this.m_start;\r\n    }\r\n}\r\nexport class b2Counter {\r\n    constructor() {\r\n        this.m_count = 0;\r\n        this.m_min_count = 0;\r\n        this.m_max_count = 0;\r\n    }\r\n    GetCount() {\r\n        return this.m_count;\r\n    }\r\n    GetMinCount() {\r\n        return this.m_min_count;\r\n    }\r\n    GetMaxCount() {\r\n        return this.m_max_count;\r\n    }\r\n    ResetCount() {\r\n        const count = this.m_count;\r\n        this.m_count = 0;\r\n        return count;\r\n    }\r\n    ResetMinCount() {\r\n        this.m_min_count = 0;\r\n    }\r\n    ResetMaxCount() {\r\n        this.m_max_count = 0;\r\n    }\r\n    Increment() {\r\n        this.m_count++;\r\n        if (this.m_max_count < this.m_count) {\r\n            this.m_max_count = this.m_count;\r\n        }\r\n    }\r\n    Decrement() {\r\n        this.m_count--;\r\n        if (this.m_min_count > this.m_count) {\r\n            this.m_min_count = this.m_count;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJUaW1lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbW1vbi9iMlRpbWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsZ0VBQWdFO0FBQ2hFLCtCQUErQjtBQUMvQixNQUFNLE9BQU8sT0FBTztJQUFwQjtRQUNTLFlBQU8sR0FBVyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFZdEMsQ0FBQztJQVZDLG9CQUFvQjtJQUNiLEtBQUs7UUFDVixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzREFBc0Q7SUFDL0MsZUFBZTtRQUNwQixPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ25DLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxTQUFTO0lBQXRCO1FBQ1MsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUNwQixnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUN4QixnQkFBVyxHQUFXLENBQUMsQ0FBQztJQTJDakMsQ0FBQztJQXpDUSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVNLFVBQVU7UUFDZixNQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLGFBQWE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLGFBQWE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFNBQVM7UUFDZCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFZixJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRU0sU0FBUztRQUNkLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVmLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNqQztJQUNILENBQUM7Q0FDRiJ9","/*\r\n* Copyright (c) 2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"./b2Settings\";\r\nimport { b2MakeArray } from \"./b2Settings\";\r\n/// This is a growable LIFO stack with an initial capacity of N.\r\n/// If the stack size exceeds the initial capacity, the heap is used\r\n/// to increase the size of the stack.\r\nexport class b2GrowableStack {\r\n    constructor(N) {\r\n        this.m_stack = [];\r\n        this.m_count = 0;\r\n        this.m_stack = b2MakeArray(N, (index) => null);\r\n        this.m_count = 0;\r\n    }\r\n    Reset() {\r\n        this.m_count = 0;\r\n        return this;\r\n    }\r\n    Push(element) {\r\n        this.m_stack[this.m_count] = element;\r\n        this.m_count++;\r\n    }\r\n    Pop() {\r\n        // DEBUG: b2Assert(this.m_count > 0);\r\n        this.m_count--;\r\n        const element = this.m_stack[this.m_count];\r\n        this.m_stack[this.m_count] = null;\r\n        if (element === null) {\r\n            throw new Error();\r\n        }\r\n        return element;\r\n    }\r\n    GetCount() {\r\n        return this.m_count;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJHcm93YWJsZVN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvQ29tbW9uL2IyR3Jvd2FibGVTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLGtEQUFrRDtBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTNDLGdFQUFnRTtBQUNoRSxvRUFBb0U7QUFDcEUsc0NBQXNDO0FBRXRDLE1BQU0sT0FBTyxlQUFlO0lBSTFCLFlBQVksQ0FBUztRQUhkLFlBQU8sR0FBb0IsRUFBRSxDQUFDO1FBQzlCLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFHekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRU0sS0FBSztRQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLElBQUksQ0FBQyxPQUFVO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVNLEdBQUc7UUFDUixxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsTUFBTSxPQUFPLEdBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtZQUFFLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQztTQUFFO1FBQzVDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FDRiJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport class b2BlockAllocator {\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCbG9ja0FsbG9jYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbW1vbi9iMkJsb2NrQWxsb2NhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTSxPQUFPLGdCQUFnQjtDQUFHIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexport class b2StackAllocator {\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTdGFja0FsbG9jYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbW1vbi9iMlN0YWNrQWxsb2NhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsTUFBTSxPQUFPLGdCQUFnQjtDQUFHIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_epsilon, b2_epsilon_sq, b2_polygonRadius, b2_linearSlop } from \"../Common/b2Settings\";\r\nimport { b2Max, b2Vec2, b2Rot, b2Transform, b2Abs } from \"../Common/b2Math\";\r\n/// A distance proxy is used by the GJK algorithm.\r\n/// It encapsulates any shape.\r\nexport class b2DistanceProxy {\r\n    constructor() {\r\n        this.m_buffer = b2Vec2.MakeArray(2);\r\n        this.m_vertices = this.m_buffer;\r\n        this.m_count = 0;\r\n        this.m_radius = 0;\r\n    }\r\n    Copy(other) {\r\n        if (other.m_vertices === other.m_buffer) {\r\n            this.m_vertices = this.m_buffer;\r\n            this.m_buffer[0].Copy(other.m_buffer[0]);\r\n            this.m_buffer[1].Copy(other.m_buffer[1]);\r\n        }\r\n        else {\r\n            this.m_vertices = other.m_vertices;\r\n        }\r\n        this.m_count = other.m_count;\r\n        this.m_radius = other.m_radius;\r\n        return this;\r\n    }\r\n    Reset() {\r\n        this.m_vertices = this.m_buffer;\r\n        this.m_count = 0;\r\n        this.m_radius = 0;\r\n        return this;\r\n    }\r\n    SetShape(shape, index) {\r\n        shape.SetupDistanceProxy(this, index);\r\n    }\r\n    SetVerticesRadius(vertices, count, radius) {\r\n        this.m_vertices = vertices;\r\n        this.m_count = count;\r\n        this.m_radius = radius;\r\n    }\r\n    GetSupport(d) {\r\n        let bestIndex = 0;\r\n        let bestValue = b2Vec2.DotVV(this.m_vertices[0], d);\r\n        for (let i = 1; i < this.m_count; ++i) {\r\n            const value = b2Vec2.DotVV(this.m_vertices[i], d);\r\n            if (value > bestValue) {\r\n                bestIndex = i;\r\n                bestValue = value;\r\n            }\r\n        }\r\n        return bestIndex;\r\n    }\r\n    GetSupportVertex(d) {\r\n        let bestIndex = 0;\r\n        let bestValue = b2Vec2.DotVV(this.m_vertices[0], d);\r\n        for (let i = 1; i < this.m_count; ++i) {\r\n            const value = b2Vec2.DotVV(this.m_vertices[i], d);\r\n            if (value > bestValue) {\r\n                bestIndex = i;\r\n                bestValue = value;\r\n            }\r\n        }\r\n        return this.m_vertices[bestIndex];\r\n    }\r\n    GetVertexCount() {\r\n        return this.m_count;\r\n    }\r\n    GetVertex(index) {\r\n        // DEBUG: b2Assert(0 <= index && index < this.m_count);\r\n        return this.m_vertices[index];\r\n    }\r\n}\r\nexport class b2SimplexCache {\r\n    constructor() {\r\n        this.metric = 0;\r\n        this.count = 0;\r\n        this.indexA = [0, 0, 0];\r\n        this.indexB = [0, 0, 0];\r\n    }\r\n    Reset() {\r\n        this.metric = 0;\r\n        this.count = 0;\r\n        return this;\r\n    }\r\n}\r\nexport class b2DistanceInput {\r\n    constructor() {\r\n        this.proxyA = new b2DistanceProxy();\r\n        this.proxyB = new b2DistanceProxy();\r\n        this.transformA = new b2Transform();\r\n        this.transformB = new b2Transform();\r\n        this.useRadii = false;\r\n    }\r\n    Reset() {\r\n        this.proxyA.Reset();\r\n        this.proxyB.Reset();\r\n        this.transformA.SetIdentity();\r\n        this.transformB.SetIdentity();\r\n        this.useRadii = false;\r\n        return this;\r\n    }\r\n}\r\nexport class b2DistanceOutput {\r\n    constructor() {\r\n        this.pointA = new b2Vec2();\r\n        this.pointB = new b2Vec2();\r\n        this.distance = 0;\r\n        this.iterations = 0; ///< number of GJK iterations used\r\n    }\r\n    Reset() {\r\n        this.pointA.SetZero();\r\n        this.pointB.SetZero();\r\n        this.distance = 0;\r\n        this.iterations = 0;\r\n        return this;\r\n    }\r\n}\r\n/// Input parameters for b2ShapeCast\r\nexport class b2ShapeCastInput {\r\n    constructor() {\r\n        this.proxyA = new b2DistanceProxy();\r\n        this.proxyB = new b2DistanceProxy();\r\n        this.transformA = new b2Transform();\r\n        this.transformB = new b2Transform();\r\n        this.translationB = new b2Vec2();\r\n    }\r\n}\r\n/// Output results for b2ShapeCast\r\nexport class b2ShapeCastOutput {\r\n    constructor() {\r\n        this.point = new b2Vec2();\r\n        this.normal = new b2Vec2();\r\n        this.lambda = 0.0;\r\n        this.iterations = 0;\r\n    }\r\n}\r\nexport let b2_gjkCalls = 0;\r\nexport let b2_gjkIters = 0;\r\nexport let b2_gjkMaxIters = 0;\r\nexport function b2_gjk_reset() {\r\n    b2_gjkCalls = 0;\r\n    b2_gjkIters = 0;\r\n    b2_gjkMaxIters = 0;\r\n}\r\nexport class b2SimplexVertex {\r\n    constructor() {\r\n        this.wA = new b2Vec2(); // support point in proxyA\r\n        this.wB = new b2Vec2(); // support point in proxyB\r\n        this.w = new b2Vec2(); // wB - wA\r\n        this.a = 0; // barycentric coordinate for closest point\r\n        this.indexA = 0; // wA index\r\n        this.indexB = 0; // wB index\r\n    }\r\n    Copy(other) {\r\n        this.wA.Copy(other.wA); // support point in proxyA\r\n        this.wB.Copy(other.wB); // support point in proxyB\r\n        this.w.Copy(other.w); // wB - wA\r\n        this.a = other.a; // barycentric coordinate for closest point\r\n        this.indexA = other.indexA; // wA index\r\n        this.indexB = other.indexB; // wB index\r\n        return this;\r\n    }\r\n}\r\nexport class b2Simplex {\r\n    constructor() {\r\n        this.m_v1 = new b2SimplexVertex();\r\n        this.m_v2 = new b2SimplexVertex();\r\n        this.m_v3 = new b2SimplexVertex();\r\n        this.m_vertices = [ /*3*/];\r\n        this.m_count = 0;\r\n        this.m_vertices[0] = this.m_v1;\r\n        this.m_vertices[1] = this.m_v2;\r\n        this.m_vertices[2] = this.m_v3;\r\n    }\r\n    ReadCache(cache, proxyA, transformA, proxyB, transformB) {\r\n        // DEBUG: b2Assert(0 <= cache.count && cache.count <= 3);\r\n        // Copy data from cache.\r\n        this.m_count = cache.count;\r\n        const vertices = this.m_vertices;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const v = vertices[i];\r\n            v.indexA = cache.indexA[i];\r\n            v.indexB = cache.indexB[i];\r\n            const wALocal = proxyA.GetVertex(v.indexA);\r\n            const wBLocal = proxyB.GetVertex(v.indexB);\r\n            b2Transform.MulXV(transformA, wALocal, v.wA);\r\n            b2Transform.MulXV(transformB, wBLocal, v.wB);\r\n            b2Vec2.SubVV(v.wB, v.wA, v.w);\r\n            v.a = 0;\r\n        }\r\n        // Compute the new simplex metric, if it is substantially different than\r\n        // old metric then flush the simplex.\r\n        if (this.m_count > 1) {\r\n            const metric1 = cache.metric;\r\n            const metric2 = this.GetMetric();\r\n            if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < b2_epsilon) {\r\n                // Reset the simplex.\r\n                this.m_count = 0;\r\n            }\r\n        }\r\n        // If the cache is empty or invalid ...\r\n        if (this.m_count === 0) {\r\n            const v = vertices[0];\r\n            v.indexA = 0;\r\n            v.indexB = 0;\r\n            const wALocal = proxyA.GetVertex(0);\r\n            const wBLocal = proxyB.GetVertex(0);\r\n            b2Transform.MulXV(transformA, wALocal, v.wA);\r\n            b2Transform.MulXV(transformB, wBLocal, v.wB);\r\n            b2Vec2.SubVV(v.wB, v.wA, v.w);\r\n            v.a = 1;\r\n            this.m_count = 1;\r\n        }\r\n    }\r\n    WriteCache(cache) {\r\n        cache.metric = this.GetMetric();\r\n        cache.count = this.m_count;\r\n        const vertices = this.m_vertices;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            cache.indexA[i] = vertices[i].indexA;\r\n            cache.indexB[i] = vertices[i].indexB;\r\n        }\r\n    }\r\n    GetSearchDirection(out) {\r\n        switch (this.m_count) {\r\n            case 1:\r\n                return b2Vec2.NegV(this.m_v1.w, out);\r\n            case 2: {\r\n                const e12 = b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, out);\r\n                const sgn = b2Vec2.CrossVV(e12, b2Vec2.NegV(this.m_v1.w, b2Vec2.s_t0));\r\n                if (sgn > 0) {\r\n                    // Origin is left of e12.\r\n                    return b2Vec2.CrossOneV(e12, out);\r\n                }\r\n                else {\r\n                    // Origin is right of e12.\r\n                    return b2Vec2.CrossVOne(e12, out);\r\n                }\r\n            }\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                return out.SetZero();\r\n        }\r\n    }\r\n    GetClosestPoint(out) {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                // DEBUG: b2Assert(false);\r\n                return out.SetZero();\r\n            case 1:\r\n                return out.Copy(this.m_v1.w);\r\n            case 2:\r\n                return out.Set(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);\r\n            case 3:\r\n                return out.SetZero();\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                return out.SetZero();\r\n        }\r\n    }\r\n    GetWitnessPoints(pA, pB) {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                // DEBUG: b2Assert(false);\r\n                break;\r\n            case 1:\r\n                pA.Copy(this.m_v1.wA);\r\n                pB.Copy(this.m_v1.wB);\r\n                break;\r\n            case 2:\r\n                pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;\r\n                pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;\r\n                pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;\r\n                pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;\r\n                break;\r\n            case 3:\r\n                pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;\r\n                pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;\r\n                break;\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                break;\r\n        }\r\n    }\r\n    GetMetric() {\r\n        switch (this.m_count) {\r\n            case 0:\r\n                // DEBUG: b2Assert(false);\r\n                return 0;\r\n            case 1:\r\n                return 0;\r\n            case 2:\r\n                return b2Vec2.DistanceVV(this.m_v1.w, this.m_v2.w);\r\n            case 3:\r\n                return b2Vec2.CrossVV(b2Vec2.SubVV(this.m_v2.w, this.m_v1.w, b2Vec2.s_t0), b2Vec2.SubVV(this.m_v3.w, this.m_v1.w, b2Vec2.s_t1));\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                return 0;\r\n        }\r\n    }\r\n    Solve2() {\r\n        const w1 = this.m_v1.w;\r\n        const w2 = this.m_v2.w;\r\n        const e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\r\n        // w1 region\r\n        const d12_2 = (-b2Vec2.DotVV(w1, e12));\r\n        if (d12_2 <= 0) {\r\n            // a2 <= 0, so we clamp it to 0\r\n            this.m_v1.a = 1;\r\n            this.m_count = 1;\r\n            return;\r\n        }\r\n        // w2 region\r\n        const d12_1 = b2Vec2.DotVV(w2, e12);\r\n        if (d12_1 <= 0) {\r\n            // a1 <= 0, so we clamp it to 0\r\n            this.m_v2.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v2);\r\n            return;\r\n        }\r\n        // Must be in e12 region.\r\n        const inv_d12 = 1 / (d12_1 + d12_2);\r\n        this.m_v1.a = d12_1 * inv_d12;\r\n        this.m_v2.a = d12_2 * inv_d12;\r\n        this.m_count = 2;\r\n    }\r\n    Solve3() {\r\n        const w1 = this.m_v1.w;\r\n        const w2 = this.m_v2.w;\r\n        const w3 = this.m_v3.w;\r\n        // Edge12\r\n        // [1      1     ][a1] = [1]\r\n        // [w1.e12 w2.e12][a2] = [0]\r\n        // a3 = 0\r\n        const e12 = b2Vec2.SubVV(w2, w1, b2Simplex.s_e12);\r\n        const w1e12 = b2Vec2.DotVV(w1, e12);\r\n        const w2e12 = b2Vec2.DotVV(w2, e12);\r\n        const d12_1 = w2e12;\r\n        const d12_2 = (-w1e12);\r\n        // Edge13\r\n        // [1      1     ][a1] = [1]\r\n        // [w1.e13 w3.e13][a3] = [0]\r\n        // a2 = 0\r\n        const e13 = b2Vec2.SubVV(w3, w1, b2Simplex.s_e13);\r\n        const w1e13 = b2Vec2.DotVV(w1, e13);\r\n        const w3e13 = b2Vec2.DotVV(w3, e13);\r\n        const d13_1 = w3e13;\r\n        const d13_2 = (-w1e13);\r\n        // Edge23\r\n        // [1      1     ][a2] = [1]\r\n        // [w2.e23 w3.e23][a3] = [0]\r\n        // a1 = 0\r\n        const e23 = b2Vec2.SubVV(w3, w2, b2Simplex.s_e23);\r\n        const w2e23 = b2Vec2.DotVV(w2, e23);\r\n        const w3e23 = b2Vec2.DotVV(w3, e23);\r\n        const d23_1 = w3e23;\r\n        const d23_2 = (-w2e23);\r\n        // Triangle123\r\n        const n123 = b2Vec2.CrossVV(e12, e13);\r\n        const d123_1 = n123 * b2Vec2.CrossVV(w2, w3);\r\n        const d123_2 = n123 * b2Vec2.CrossVV(w3, w1);\r\n        const d123_3 = n123 * b2Vec2.CrossVV(w1, w2);\r\n        // w1 region\r\n        if (d12_2 <= 0 && d13_2 <= 0) {\r\n            this.m_v1.a = 1;\r\n            this.m_count = 1;\r\n            return;\r\n        }\r\n        // e12\r\n        if (d12_1 > 0 && d12_2 > 0 && d123_3 <= 0) {\r\n            const inv_d12 = 1 / (d12_1 + d12_2);\r\n            this.m_v1.a = d12_1 * inv_d12;\r\n            this.m_v2.a = d12_2 * inv_d12;\r\n            this.m_count = 2;\r\n            return;\r\n        }\r\n        // e13\r\n        if (d13_1 > 0 && d13_2 > 0 && d123_2 <= 0) {\r\n            const inv_d13 = 1 / (d13_1 + d13_2);\r\n            this.m_v1.a = d13_1 * inv_d13;\r\n            this.m_v3.a = d13_2 * inv_d13;\r\n            this.m_count = 2;\r\n            this.m_v2.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // w2 region\r\n        if (d12_1 <= 0 && d23_2 <= 0) {\r\n            this.m_v2.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v2);\r\n            return;\r\n        }\r\n        // w3 region\r\n        if (d13_1 <= 0 && d23_1 <= 0) {\r\n            this.m_v3.a = 1;\r\n            this.m_count = 1;\r\n            this.m_v1.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // e23\r\n        if (d23_1 > 0 && d23_2 > 0 && d123_1 <= 0) {\r\n            const inv_d23 = 1 / (d23_1 + d23_2);\r\n            this.m_v2.a = d23_1 * inv_d23;\r\n            this.m_v3.a = d23_2 * inv_d23;\r\n            this.m_count = 2;\r\n            this.m_v1.Copy(this.m_v3);\r\n            return;\r\n        }\r\n        // Must be in triangle123\r\n        const inv_d123 = 1 / (d123_1 + d123_2 + d123_3);\r\n        this.m_v1.a = d123_1 * inv_d123;\r\n        this.m_v2.a = d123_2 * inv_d123;\r\n        this.m_v3.a = d123_3 * inv_d123;\r\n        this.m_count = 3;\r\n    }\r\n}\r\nb2Simplex.s_e12 = new b2Vec2();\r\nb2Simplex.s_e13 = new b2Vec2();\r\nb2Simplex.s_e23 = new b2Vec2();\r\nconst b2Distance_s_simplex = new b2Simplex();\r\nconst b2Distance_s_saveA = [0, 0, 0];\r\nconst b2Distance_s_saveB = [0, 0, 0];\r\nconst b2Distance_s_p = new b2Vec2();\r\nconst b2Distance_s_d = new b2Vec2();\r\nconst b2Distance_s_normal = new b2Vec2();\r\nconst b2Distance_s_supportA = new b2Vec2();\r\nconst b2Distance_s_supportB = new b2Vec2();\r\nexport function b2Distance(output, cache, input) {\r\n    ++b2_gjkCalls;\r\n    const proxyA = input.proxyA;\r\n    const proxyB = input.proxyB;\r\n    const transformA = input.transformA;\r\n    const transformB = input.transformB;\r\n    // Initialize the simplex.\r\n    const simplex = b2Distance_s_simplex;\r\n    simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);\r\n    // Get simplex vertices as an array.\r\n    const vertices = simplex.m_vertices;\r\n    const k_maxIters = 20;\r\n    // These store the vertices of the last simplex so that we\r\n    // can check for duplicates and prevent cycling.\r\n    const saveA = b2Distance_s_saveA;\r\n    const saveB = b2Distance_s_saveB;\r\n    let saveCount = 0;\r\n    // Main iteration loop.\r\n    let iter = 0;\r\n    while (iter < k_maxIters) {\r\n        // Copy simplex so we can identify duplicates.\r\n        saveCount = simplex.m_count;\r\n        for (let i = 0; i < saveCount; ++i) {\r\n            saveA[i] = vertices[i].indexA;\r\n            saveB[i] = vertices[i].indexB;\r\n        }\r\n        switch (simplex.m_count) {\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                simplex.Solve2();\r\n                break;\r\n            case 3:\r\n                simplex.Solve3();\r\n                break;\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                break;\r\n        }\r\n        // If we have 3 points, then the origin is in the corresponding triangle.\r\n        if (simplex.m_count === 3) {\r\n            break;\r\n        }\r\n        // Get search direction.\r\n        const d = simplex.GetSearchDirection(b2Distance_s_d);\r\n        // Ensure the search direction is numerically fit.\r\n        if (d.LengthSquared() < b2_epsilon_sq) {\r\n            // The origin is probably contained by a line segment\r\n            // or triangle. Thus the shapes are overlapped.\r\n            // We can't return zero here even though there may be overlap.\r\n            // In case the simplex is a point, segment, or triangle it is difficult\r\n            // to determine if the origin is contained in the CSO or very close to it.\r\n            break;\r\n        }\r\n        // Compute a tentative new simplex vertex using support points.\r\n        const vertex = vertices[simplex.m_count];\r\n        vertex.indexA = proxyA.GetSupport(b2Rot.MulTRV(transformA.q, b2Vec2.NegV(d, b2Vec2.s_t0), b2Distance_s_supportA));\r\n        b2Transform.MulXV(transformA, proxyA.GetVertex(vertex.indexA), vertex.wA);\r\n        vertex.indexB = proxyB.GetSupport(b2Rot.MulTRV(transformB.q, d, b2Distance_s_supportB));\r\n        b2Transform.MulXV(transformB, proxyB.GetVertex(vertex.indexB), vertex.wB);\r\n        b2Vec2.SubVV(vertex.wB, vertex.wA, vertex.w);\r\n        // Iteration count is equated to the number of support point calls.\r\n        ++iter;\r\n        ++b2_gjkIters;\r\n        // Check for duplicate support points. This is the main termination criteria.\r\n        let duplicate = false;\r\n        for (let i = 0; i < saveCount; ++i) {\r\n            if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\r\n                duplicate = true;\r\n                break;\r\n            }\r\n        }\r\n        // If we found a duplicate support point we must exit to avoid cycling.\r\n        if (duplicate) {\r\n            break;\r\n        }\r\n        // New vertex is ok and needed.\r\n        ++simplex.m_count;\r\n    }\r\n    b2_gjkMaxIters = b2Max(b2_gjkMaxIters, iter);\r\n    // Prepare output.\r\n    simplex.GetWitnessPoints(output.pointA, output.pointB);\r\n    output.distance = b2Vec2.DistanceVV(output.pointA, output.pointB);\r\n    output.iterations = iter;\r\n    // Cache the simplex.\r\n    simplex.WriteCache(cache);\r\n    // Apply radii if requested.\r\n    if (input.useRadii) {\r\n        const rA = proxyA.m_radius;\r\n        const rB = proxyB.m_radius;\r\n        if (output.distance > (rA + rB) && output.distance > b2_epsilon) {\r\n            // Shapes are still no overlapped.\r\n            // Move the witness points to the outer surface.\r\n            output.distance -= rA + rB;\r\n            const normal = b2Vec2.SubVV(output.pointB, output.pointA, b2Distance_s_normal);\r\n            normal.Normalize();\r\n            output.pointA.SelfMulAdd(rA, normal);\r\n            output.pointB.SelfMulSub(rB, normal);\r\n        }\r\n        else {\r\n            // Shapes are overlapped when radii are considered.\r\n            // Move the witness points to the middle.\r\n            const p = b2Vec2.MidVV(output.pointA, output.pointB, b2Distance_s_p);\r\n            output.pointA.Copy(p);\r\n            output.pointB.Copy(p);\r\n            output.distance = 0;\r\n        }\r\n    }\r\n}\r\n/// Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and translation fraction.\r\n// GJK-raycast\r\n// Algorithm by Gino van den Bergen.\r\n// \"Smooth Mesh Contacts with GJK\" in Game Physics Pearls. 2010\r\n// bool b2ShapeCast(b2ShapeCastOutput* output, const b2ShapeCastInput* input);\r\nconst b2ShapeCast_s_n = new b2Vec2();\r\nconst b2ShapeCast_s_simplex = new b2Simplex();\r\nconst b2ShapeCast_s_wA = new b2Vec2();\r\nconst b2ShapeCast_s_wB = new b2Vec2();\r\nconst b2ShapeCast_s_v = new b2Vec2();\r\nconst b2ShapeCast_s_p = new b2Vec2();\r\nconst b2ShapeCast_s_pointA = new b2Vec2();\r\nconst b2ShapeCast_s_pointB = new b2Vec2();\r\nexport function b2ShapeCast(output, input) {\r\n    output.iterations = 0;\r\n    output.lambda = 1.0;\r\n    output.normal.SetZero();\r\n    output.point.SetZero();\r\n    // const b2DistanceProxy* proxyA = &input.proxyA;\r\n    const proxyA = input.proxyA;\r\n    // const b2DistanceProxy* proxyB = &input.proxyB;\r\n    const proxyB = input.proxyB;\r\n    // float32 radiusA = b2Max(proxyA.m_radius, b2_polygonRadius);\r\n    const radiusA = b2Max(proxyA.m_radius, b2_polygonRadius);\r\n    // float32 radiusB = b2Max(proxyB.m_radius, b2_polygonRadius);\r\n    const radiusB = b2Max(proxyB.m_radius, b2_polygonRadius);\r\n    // float32 radius = radiusA + radiusB;\r\n    const radius = radiusA + radiusB;\r\n    // b2Transform xfA = input.transformA;\r\n    const xfA = input.transformA;\r\n    // b2Transform xfB = input.transformB;\r\n    const xfB = input.transformB;\r\n    // b2Vec2 r = input.translationB;\r\n    const r = input.translationB;\r\n    // b2Vec2 n(0.0f, 0.0f);\r\n    const n = b2ShapeCast_s_n.Set(0.0, 0.0);\r\n    // float32 lambda = 0.0f;\r\n    let lambda = 0.0;\r\n    // Initial simplex\r\n    const simplex = b2ShapeCast_s_simplex;\r\n    simplex.m_count = 0;\r\n    // Get simplex vertices as an array.\r\n    // b2SimplexVertex* vertices = &simplex.m_v1;\r\n    const vertices = simplex.m_vertices;\r\n    // Get support point in -r direction\r\n    // int32 indexA = proxyA.GetSupport(b2MulT(xfA.q, -r));\r\n    let indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(r, b2Vec2.s_t1), b2Vec2.s_t0));\r\n    // b2Vec2 wA = b2Mul(xfA, proxyA.GetVertex(indexA));\r\n    let wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\r\n    // int32 indexB = proxyB.GetSupport(b2MulT(xfB.q, r));\r\n    let indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, r, b2Vec2.s_t0));\r\n    // b2Vec2 wB = b2Mul(xfB, proxyB.GetVertex(indexB));\r\n    let wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\r\n    // b2Vec2 v = wA - wB;\r\n    const v = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_v);\r\n    // Sigma is the target distance between polygons\r\n    // float32 sigma = b2Max(b2_polygonRadius, radius - b2_polygonRadius);\r\n    const sigma = b2Max(b2_polygonRadius, radius - b2_polygonRadius);\r\n    // const float32 tolerance = 0.5f * b2_linearSlop;\r\n    const tolerance = 0.5 * b2_linearSlop;\r\n    // Main iteration loop.\r\n    // const int32 k_maxIters = 20;\r\n    const k_maxIters = 20;\r\n    // int32 iter = 0;\r\n    let iter = 0;\r\n    // while (iter < k_maxIters && b2Abs(v.Length() - sigma) > tolerance)\r\n    while (iter < k_maxIters && b2Abs(v.Length() - sigma) > tolerance) {\r\n        // DEBUG: b2Assert(simplex.m_count < 3);\r\n        output.iterations += 1;\r\n        // Support in direction -v (A - B)\r\n        // indexA = proxyA.GetSupport(b2MulT(xfA.q, -v));\r\n        indexA = proxyA.GetSupport(b2Rot.MulTRV(xfA.q, b2Vec2.NegV(v, b2Vec2.s_t1), b2Vec2.s_t0));\r\n        // wA = b2Mul(xfA, proxyA.GetVertex(indexA));\r\n        wA = b2Transform.MulXV(xfA, proxyA.GetVertex(indexA), b2ShapeCast_s_wA);\r\n        // indexB = proxyB.GetSupport(b2MulT(xfB.q, v));\r\n        indexB = proxyB.GetSupport(b2Rot.MulTRV(xfB.q, v, b2Vec2.s_t0));\r\n        // wB = b2Mul(xfB, proxyB.GetVertex(indexB));\r\n        wB = b2Transform.MulXV(xfB, proxyB.GetVertex(indexB), b2ShapeCast_s_wB);\r\n        // b2Vec2 p = wA - wB;\r\n        const p = b2Vec2.SubVV(wA, wB, b2ShapeCast_s_p);\r\n        // -v is a normal at p\r\n        v.Normalize();\r\n        // Intersect ray with plane\r\n        const vp = b2Vec2.DotVV(v, p);\r\n        const vr = b2Vec2.DotVV(v, r);\r\n        if (vp - sigma > lambda * vr) {\r\n            if (vr <= 0.0) {\r\n                return false;\r\n            }\r\n            lambda = (vp - sigma) / vr;\r\n            if (lambda > 1.0) {\r\n                return false;\r\n            }\r\n            // n = -v;\r\n            n.Copy(v).SelfNeg();\r\n            simplex.m_count = 0;\r\n        }\r\n        // Reverse simplex since it works with B - A.\r\n        // Shift by lambda * r because we want the closest point to the current clip point.\r\n        // Note that the support point p is not shifted because we want the plane equation\r\n        // to be formed in unshifted space.\r\n        // b2SimplexVertex* vertex = vertices + simplex.m_count;\r\n        const vertex = vertices[simplex.m_count];\r\n        vertex.indexA = indexB;\r\n        // vertex.wA = wB + lambda * r;\r\n        vertex.wA.Copy(wB).SelfMulAdd(lambda, r);\r\n        vertex.indexB = indexA;\r\n        // vertex.wB = wA;\r\n        vertex.wB.Copy(wA);\r\n        // vertex.w = vertex.wB - vertex.wA;\r\n        vertex.w.Copy(vertex.wB).SelfSub(vertex.wA);\r\n        vertex.a = 1.0;\r\n        simplex.m_count += 1;\r\n        switch (simplex.m_count) {\r\n            case 1:\r\n                break;\r\n            case 2:\r\n                simplex.Solve2();\r\n                break;\r\n            case 3:\r\n                simplex.Solve3();\r\n                break;\r\n            default:\r\n            // DEBUG: b2Assert(false);\r\n        }\r\n        // If we have 3 points, then the origin is in the corresponding triangle.\r\n        if (simplex.m_count === 3) {\r\n            // Overlap\r\n            return false;\r\n        }\r\n        // Get search direction.\r\n        // v = simplex.GetClosestPoint();\r\n        simplex.GetClosestPoint(v);\r\n        // Iteration count is equated to the number of support point calls.\r\n        ++iter;\r\n    }\r\n    // Prepare output.\r\n    const pointA = b2ShapeCast_s_pointA;\r\n    const pointB = b2ShapeCast_s_pointB;\r\n    simplex.GetWitnessPoints(pointA, pointB);\r\n    if (v.LengthSquared() > 0.0) {\r\n        // n = -v;\r\n        n.Copy(v).SelfNeg();\r\n        n.Normalize();\r\n    }\r\n    // output.point = pointA + radiusA * n;\r\n    output.normal.Copy(n);\r\n    output.lambda = lambda;\r\n    output.iterations = iter;\r\n    return true;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_maxFloat, b2_epsilon, b2_epsilon_sq, b2_maxManifoldPoints, b2MakeArray, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Distance, b2DistanceInput, b2DistanceOutput, b2SimplexCache } from \"./b2Distance\";\r\n/// @file\r\n/// Structures and functions used for computing contact points, distance\r\n/// queries, and TOI queries.\r\nexport var b2ContactFeatureType;\r\n(function (b2ContactFeatureType) {\r\n    b2ContactFeatureType[b2ContactFeatureType[\"e_vertex\"] = 0] = \"e_vertex\";\r\n    b2ContactFeatureType[b2ContactFeatureType[\"e_face\"] = 1] = \"e_face\";\r\n})(b2ContactFeatureType || (b2ContactFeatureType = {}));\r\n/// The features that intersect to form the contact point\r\n/// This must be 4 bytes or less.\r\nexport class b2ContactFeature {\r\n    constructor() {\r\n        this._key = 0;\r\n        this._key_invalid = false;\r\n        this._indexA = 0;\r\n        this._indexB = 0;\r\n        this._typeA = 0;\r\n        this._typeB = 0;\r\n    }\r\n    get key() {\r\n        if (this._key_invalid) {\r\n            this._key_invalid = false;\r\n            this._key = this._indexA | (this._indexB << 8) | (this._typeA << 16) | (this._typeB << 24);\r\n        }\r\n        return this._key;\r\n    }\r\n    set key(value) {\r\n        this._key = value;\r\n        this._key_invalid = false;\r\n        this._indexA = this._key & 0xff;\r\n        this._indexB = (this._key >> 8) & 0xff;\r\n        this._typeA = (this._key >> 16) & 0xff;\r\n        this._typeB = (this._key >> 24) & 0xff;\r\n    }\r\n    get indexA() {\r\n        return this._indexA;\r\n    }\r\n    set indexA(value) {\r\n        this._indexA = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get indexB() {\r\n        return this._indexB;\r\n    }\r\n    set indexB(value) {\r\n        this._indexB = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get typeA() {\r\n        return this._typeA;\r\n    }\r\n    set typeA(value) {\r\n        this._typeA = value;\r\n        this._key_invalid = true;\r\n    }\r\n    get typeB() {\r\n        return this._typeB;\r\n    }\r\n    set typeB(value) {\r\n        this._typeB = value;\r\n        this._key_invalid = true;\r\n    }\r\n}\r\n/// Contact ids to facilitate warm starting.\r\nexport class b2ContactID {\r\n    constructor() {\r\n        this.cf = new b2ContactFeature();\r\n    }\r\n    Copy(o) {\r\n        this.key = o.key;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2ContactID().Copy(this);\r\n    }\r\n    get key() {\r\n        return this.cf.key;\r\n    }\r\n    set key(value) {\r\n        this.cf.key = value;\r\n    }\r\n}\r\n/// A manifold point is a contact point belonging to a contact\r\n/// manifold. It holds details related to the geometry and dynamics\r\n/// of the contact points.\r\n/// The local point usage depends on the manifold type:\r\n/// -e_circles: the local center of circleB\r\n/// -e_faceA: the local center of cirlceB or the clip point of polygonB\r\n/// -e_faceB: the clip point of polygonA\r\n/// This structure is stored across time steps, so we keep it small.\r\n/// Note: the impulses are used for internal caching and may not\r\n/// provide reliable contact forces, especially for high speed collisions.\r\nexport class b2ManifoldPoint {\r\n    constructor() {\r\n        this.localPoint = new b2Vec2(); ///< usage depends on manifold type\r\n        this.normalImpulse = 0; ///< the non-penetration impulse\r\n        this.tangentImpulse = 0; ///< the friction impulse\r\n        this.id = new b2ContactID(); // TODO: readonly  ///< uniquely identifies a contact point between two shapes\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ManifoldPoint());\r\n    }\r\n    Reset() {\r\n        this.localPoint.SetZero();\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.id.key = 0;\r\n    }\r\n    Copy(o) {\r\n        this.localPoint.Copy(o.localPoint);\r\n        this.normalImpulse = o.normalImpulse;\r\n        this.tangentImpulse = o.tangentImpulse;\r\n        this.id.Copy(o.id);\r\n        return this;\r\n    }\r\n}\r\nexport var b2ManifoldType;\r\n(function (b2ManifoldType) {\r\n    b2ManifoldType[b2ManifoldType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2ManifoldType[b2ManifoldType[\"e_circles\"] = 0] = \"e_circles\";\r\n    b2ManifoldType[b2ManifoldType[\"e_faceA\"] = 1] = \"e_faceA\";\r\n    b2ManifoldType[b2ManifoldType[\"e_faceB\"] = 2] = \"e_faceB\";\r\n})(b2ManifoldType || (b2ManifoldType = {}));\r\n/// A manifold for two touching convex shapes.\r\n/// Box2D supports multiple types of contact:\r\n/// - clip point versus plane with radius\r\n/// - point versus point with radius (circles)\r\n/// The local point usage depends on the manifold type:\r\n/// -e_circles: the local center of circleA\r\n/// -e_faceA: the center of faceA\r\n/// -e_faceB: the center of faceB\r\n/// Similarly the local normal usage:\r\n/// -e_circles: not used\r\n/// -e_faceA: the normal on polygonA\r\n/// -e_faceB: the normal on polygonB\r\n/// We store contacts in this way so that position correction can\r\n/// account for movement, which is critical for continuous physics.\r\n/// All contact scenarios must be expressed in one of these types.\r\n/// This structure is stored across time steps, so we keep it small.\r\nexport class b2Manifold {\r\n    constructor() {\r\n        this.points = b2ManifoldPoint.MakeArray(b2_maxManifoldPoints);\r\n        this.localNormal = new b2Vec2();\r\n        this.localPoint = new b2Vec2();\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.pointCount = 0;\r\n    }\r\n    Reset() {\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            // DEBUG: b2Assert(this.points[i] instanceof b2ManifoldPoint);\r\n            this.points[i].Reset();\r\n        }\r\n        this.localNormal.SetZero();\r\n        this.localPoint.SetZero();\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.pointCount = 0;\r\n    }\r\n    Copy(o) {\r\n        this.pointCount = o.pointCount;\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            // DEBUG: b2Assert(this.points[i] instanceof b2ManifoldPoint);\r\n            this.points[i].Copy(o.points[i]);\r\n        }\r\n        this.localNormal.Copy(o.localNormal);\r\n        this.localPoint.Copy(o.localPoint);\r\n        this.type = o.type;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2Manifold().Copy(this);\r\n    }\r\n}\r\nexport class b2WorldManifold {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.points = b2Vec2.MakeArray(b2_maxManifoldPoints);\r\n        this.separations = b2MakeNumberArray(b2_maxManifoldPoints);\r\n    }\r\n    Initialize(manifold, xfA, radiusA, xfB, radiusB) {\r\n        if (manifold.pointCount === 0) {\r\n            return;\r\n        }\r\n        switch (manifold.type) {\r\n            case b2ManifoldType.e_circles: {\r\n                this.normal.Set(1, 0);\r\n                const pointA = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_pointA);\r\n                const pointB = b2Transform.MulXV(xfB, manifold.points[0].localPoint, b2WorldManifold.Initialize_s_pointB);\r\n                if (b2Vec2.DistanceSquaredVV(pointA, pointB) > b2_epsilon_sq) {\r\n                    b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\r\n                }\r\n                const cA = b2Vec2.AddVMulSV(pointA, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                const cB = b2Vec2.SubVMulSV(pointB, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                b2Vec2.MidVV(cA, cB, this.points[0]);\r\n                this.separations[0] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\r\n                break;\r\n            }\r\n            case b2ManifoldType.e_faceA: {\r\n                b2Rot.MulRV(xfA.q, manifold.localNormal, this.normal);\r\n                const planePoint = b2Transform.MulXV(xfA, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\r\n                for (let i = 0; i < manifold.pointCount; ++i) {\r\n                    const clipPoint = b2Transform.MulXV(xfB, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\r\n                    const s = radiusA - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\r\n                    const cA = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                    const cB = b2Vec2.SubVMulSV(clipPoint, radiusB, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                    b2Vec2.MidVV(cA, cB, this.points[i]);\r\n                    this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), this.normal); // b2Dot(cB - cA, normal);\r\n                }\r\n                break;\r\n            }\r\n            case b2ManifoldType.e_faceB: {\r\n                b2Rot.MulRV(xfB.q, manifold.localNormal, this.normal);\r\n                const planePoint = b2Transform.MulXV(xfB, manifold.localPoint, b2WorldManifold.Initialize_s_planePoint);\r\n                for (let i = 0; i < manifold.pointCount; ++i) {\r\n                    const clipPoint = b2Transform.MulXV(xfA, manifold.points[i].localPoint, b2WorldManifold.Initialize_s_clipPoint);\r\n                    const s = radiusB - b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal);\r\n                    const cB = b2Vec2.AddVMulSV(clipPoint, s, this.normal, b2WorldManifold.Initialize_s_cB);\r\n                    const cA = b2Vec2.SubVMulSV(clipPoint, radiusA, this.normal, b2WorldManifold.Initialize_s_cA);\r\n                    b2Vec2.MidVV(cA, cB, this.points[i]);\r\n                    this.separations[i] = b2Vec2.DotVV(b2Vec2.SubVV(cA, cB, b2Vec2.s_t0), this.normal); // b2Dot(cA - cB, normal);\r\n                }\r\n                // Ensure normal points from A to B.\r\n                this.normal.SelfNeg();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nb2WorldManifold.Initialize_s_pointA = new b2Vec2();\r\nb2WorldManifold.Initialize_s_pointB = new b2Vec2();\r\nb2WorldManifold.Initialize_s_cA = new b2Vec2();\r\nb2WorldManifold.Initialize_s_cB = new b2Vec2();\r\nb2WorldManifold.Initialize_s_planePoint = new b2Vec2();\r\nb2WorldManifold.Initialize_s_clipPoint = new b2Vec2();\r\n/// This is used for determining the state of contact points.\r\nexport var b2PointState;\r\n(function (b2PointState) {\r\n    b2PointState[b2PointState[\"b2_nullState\"] = 0] = \"b2_nullState\";\r\n    b2PointState[b2PointState[\"b2_addState\"] = 1] = \"b2_addState\";\r\n    b2PointState[b2PointState[\"b2_persistState\"] = 2] = \"b2_persistState\";\r\n    b2PointState[b2PointState[\"b2_removeState\"] = 3] = \"b2_removeState\";\r\n})(b2PointState || (b2PointState = {}));\r\n/// Compute the point states given two manifolds. The states pertain to the transition from manifold1\r\n/// to manifold2. So state1 is either persist or remove while state2 is either add or persist.\r\nexport function b2GetPointStates(state1, state2, manifold1, manifold2) {\r\n    // Detect persists and removes.\r\n    let i;\r\n    for (i = 0; i < manifold1.pointCount; ++i) {\r\n        const id = manifold1.points[i].id;\r\n        const key = id.key;\r\n        state1[i] = b2PointState.b2_removeState;\r\n        for (let j = 0, jct = manifold2.pointCount; j < jct; ++j) {\r\n            if (manifold2.points[j].id.key === key) {\r\n                state1[i] = b2PointState.b2_persistState;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i < b2_maxManifoldPoints; ++i) {\r\n        state1[i] = b2PointState.b2_nullState;\r\n    }\r\n    // Detect persists and adds.\r\n    for (i = 0; i < manifold2.pointCount; ++i) {\r\n        const id = manifold2.points[i].id;\r\n        const key = id.key;\r\n        state2[i] = b2PointState.b2_addState;\r\n        for (let j = 0, jct = manifold1.pointCount; j < jct; ++j) {\r\n            if (manifold1.points[j].id.key === key) {\r\n                state2[i] = b2PointState.b2_persistState;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for (; i < b2_maxManifoldPoints; ++i) {\r\n        state2[i] = b2PointState.b2_nullState;\r\n    }\r\n}\r\n/// Used for computing contact manifolds.\r\nexport class b2ClipVertex {\r\n    constructor() {\r\n        this.v = new b2Vec2();\r\n        this.id = new b2ContactID();\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ClipVertex());\r\n    }\r\n    Copy(other) {\r\n        this.v.Copy(other.v);\r\n        this.id.Copy(other.id);\r\n        return this;\r\n    }\r\n}\r\n/// Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\r\nexport class b2RayCastInput {\r\n    constructor() {\r\n        this.p1 = new b2Vec2();\r\n        this.p2 = new b2Vec2();\r\n        this.maxFraction = 1;\r\n    }\r\n    Copy(o) {\r\n        this.p1.Copy(o.p1);\r\n        this.p2.Copy(o.p2);\r\n        this.maxFraction = o.maxFraction;\r\n        return this;\r\n    }\r\n}\r\n/// Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2\r\n/// come from b2RayCastInput.\r\nexport class b2RayCastOutput {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.fraction = 0;\r\n    }\r\n    Copy(o) {\r\n        this.normal.Copy(o.normal);\r\n        this.fraction = o.fraction;\r\n        return this;\r\n    }\r\n}\r\n/// An axis aligned bounding box.\r\nexport class b2AABB {\r\n    constructor() {\r\n        this.lowerBound = new b2Vec2(); ///< the lower vertex\r\n        this.upperBound = new b2Vec2(); ///< the upper vertex\r\n        this.m_cache_center = new b2Vec2(); // access using GetCenter()\r\n        this.m_cache_extent = new b2Vec2(); // access using GetExtents()\r\n    }\r\n    Copy(o) {\r\n        this.lowerBound.Copy(o.lowerBound);\r\n        this.upperBound.Copy(o.upperBound);\r\n        return this;\r\n    }\r\n    /// Verify that the bounds are sorted.\r\n    IsValid() {\r\n        const d_x = this.upperBound.x - this.lowerBound.x;\r\n        const d_y = this.upperBound.y - this.lowerBound.y;\r\n        let valid = d_x >= 0 && d_y >= 0;\r\n        valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();\r\n        return valid;\r\n    }\r\n    /// Get the center of the AABB.\r\n    GetCenter() {\r\n        return b2Vec2.MidVV(this.lowerBound, this.upperBound, this.m_cache_center);\r\n    }\r\n    /// Get the extents of the AABB (half-widths).\r\n    GetExtents() {\r\n        return b2Vec2.ExtVV(this.lowerBound, this.upperBound, this.m_cache_extent);\r\n    }\r\n    /// Get the perimeter length\r\n    GetPerimeter() {\r\n        const wx = this.upperBound.x - this.lowerBound.x;\r\n        const wy = this.upperBound.y - this.lowerBound.y;\r\n        return 2 * (wx + wy);\r\n    }\r\n    /// Combine an AABB into this one.\r\n    Combine1(aabb) {\r\n        this.lowerBound.x = b2Min(this.lowerBound.x, aabb.lowerBound.x);\r\n        this.lowerBound.y = b2Min(this.lowerBound.y, aabb.lowerBound.y);\r\n        this.upperBound.x = b2Max(this.upperBound.x, aabb.upperBound.x);\r\n        this.upperBound.y = b2Max(this.upperBound.y, aabb.upperBound.y);\r\n        return this;\r\n    }\r\n    /// Combine two AABBs into this one.\r\n    Combine2(aabb1, aabb2) {\r\n        this.lowerBound.x = b2Min(aabb1.lowerBound.x, aabb2.lowerBound.x);\r\n        this.lowerBound.y = b2Min(aabb1.lowerBound.y, aabb2.lowerBound.y);\r\n        this.upperBound.x = b2Max(aabb1.upperBound.x, aabb2.upperBound.x);\r\n        this.upperBound.y = b2Max(aabb1.upperBound.y, aabb2.upperBound.y);\r\n        return this;\r\n    }\r\n    static Combine(aabb1, aabb2, out) {\r\n        out.Combine2(aabb1, aabb2);\r\n        return out;\r\n    }\r\n    /// Does this aabb contain the provided AABB.\r\n    Contains(aabb) {\r\n        let result = true;\r\n        result = result && this.lowerBound.x <= aabb.lowerBound.x;\r\n        result = result && this.lowerBound.y <= aabb.lowerBound.y;\r\n        result = result && aabb.upperBound.x <= this.upperBound.x;\r\n        result = result && aabb.upperBound.y <= this.upperBound.y;\r\n        return result;\r\n    }\r\n    // From Real-time Collision Detection, p179.\r\n    RayCast(output, input) {\r\n        let tmin = (-b2_maxFloat);\r\n        let tmax = b2_maxFloat;\r\n        const p_x = input.p1.x;\r\n        const p_y = input.p1.y;\r\n        const d_x = input.p2.x - input.p1.x;\r\n        const d_y = input.p2.y - input.p1.y;\r\n        const absD_x = b2Abs(d_x);\r\n        const absD_y = b2Abs(d_y);\r\n        const normal = output.normal;\r\n        if (absD_x < b2_epsilon) {\r\n            // Parallel.\r\n            if (p_x < this.lowerBound.x || this.upperBound.x < p_x) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            const inv_d = 1 / d_x;\r\n            let t1 = (this.lowerBound.x - p_x) * inv_d;\r\n            let t2 = (this.upperBound.x - p_x) * inv_d;\r\n            // Sign of the normal vector.\r\n            let s = (-1);\r\n            if (t1 > t2) {\r\n                const t3 = t1;\r\n                t1 = t2;\r\n                t2 = t3;\r\n                s = 1;\r\n            }\r\n            // Push the min up\r\n            if (t1 > tmin) {\r\n                normal.x = s;\r\n                normal.y = 0;\r\n                tmin = t1;\r\n            }\r\n            // Pull the max down\r\n            tmax = b2Min(tmax, t2);\r\n            if (tmin > tmax) {\r\n                return false;\r\n            }\r\n        }\r\n        if (absD_y < b2_epsilon) {\r\n            // Parallel.\r\n            if (p_y < this.lowerBound.y || this.upperBound.y < p_y) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            const inv_d = 1 / d_y;\r\n            let t1 = (this.lowerBound.y - p_y) * inv_d;\r\n            let t2 = (this.upperBound.y - p_y) * inv_d;\r\n            // Sign of the normal vector.\r\n            let s = (-1);\r\n            if (t1 > t2) {\r\n                const t3 = t1;\r\n                t1 = t2;\r\n                t2 = t3;\r\n                s = 1;\r\n            }\r\n            // Push the min up\r\n            if (t1 > tmin) {\r\n                normal.x = 0;\r\n                normal.y = s;\r\n                tmin = t1;\r\n            }\r\n            // Pull the max down\r\n            tmax = b2Min(tmax, t2);\r\n            if (tmin > tmax) {\r\n                return false;\r\n            }\r\n        }\r\n        // Does the ray start inside the box?\r\n        // Does the ray intersect beyond the max fraction?\r\n        if (tmin < 0 || input.maxFraction < tmin) {\r\n            return false;\r\n        }\r\n        // Intersection.\r\n        output.fraction = tmin;\r\n        return true;\r\n    }\r\n    TestContain(point) {\r\n        if (point.x < this.lowerBound.x || this.upperBound.x < point.x) {\r\n            return false;\r\n        }\r\n        if (point.y < this.lowerBound.y || this.upperBound.y < point.y) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    TestOverlap(other) {\r\n        const d1_x = other.lowerBound.x - this.upperBound.x;\r\n        const d1_y = other.lowerBound.y - this.upperBound.y;\r\n        const d2_x = this.lowerBound.x - other.upperBound.x;\r\n        const d2_y = this.lowerBound.y - other.upperBound.y;\r\n        if (d1_x > 0 || d1_y > 0) {\r\n            return false;\r\n        }\r\n        if (d2_x > 0 || d2_y > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function b2TestOverlapAABB(a, b) {\r\n    const d1_x = b.lowerBound.x - a.upperBound.x;\r\n    const d1_y = b.lowerBound.y - a.upperBound.y;\r\n    const d2_x = a.lowerBound.x - b.upperBound.x;\r\n    const d2_y = a.lowerBound.y - b.upperBound.y;\r\n    if (d1_x > 0 || d1_y > 0) {\r\n        return false;\r\n    }\r\n    if (d2_x > 0 || d2_y > 0) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/// Clipping for contact manifolds.\r\nexport function b2ClipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\r\n    // Start with no output points\r\n    let numOut = 0;\r\n    const vIn0 = vIn[0];\r\n    const vIn1 = vIn[1];\r\n    // Calculate the distance of end points to the line\r\n    const distance0 = b2Vec2.DotVV(normal, vIn0.v) - offset;\r\n    const distance1 = b2Vec2.DotVV(normal, vIn1.v) - offset;\r\n    // If the points are behind the plane\r\n    if (distance0 <= 0) {\r\n        vOut[numOut++].Copy(vIn0);\r\n    }\r\n    if (distance1 <= 0) {\r\n        vOut[numOut++].Copy(vIn1);\r\n    }\r\n    // If the points are on different sides of the plane\r\n    if (distance0 * distance1 < 0) {\r\n        // Find intersection point of edge and plane\r\n        const interp = distance0 / (distance0 - distance1);\r\n        const v = vOut[numOut].v;\r\n        v.x = vIn0.v.x + interp * (vIn1.v.x - vIn0.v.x);\r\n        v.y = vIn0.v.y + interp * (vIn1.v.y - vIn0.v.y);\r\n        // VertexA is hitting edgeB.\r\n        const id = vOut[numOut].id;\r\n        id.cf.indexA = vertexIndexA;\r\n        id.cf.indexB = vIn0.id.cf.indexB;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        id.cf.typeB = b2ContactFeatureType.e_face;\r\n        ++numOut;\r\n    }\r\n    return numOut;\r\n}\r\n/// Determine if two generic shapes overlap.\r\nconst b2TestOverlapShape_s_input = new b2DistanceInput();\r\nconst b2TestOverlapShape_s_simplexCache = new b2SimplexCache();\r\nconst b2TestOverlapShape_s_output = new b2DistanceOutput();\r\nexport function b2TestOverlapShape(shapeA, indexA, shapeB, indexB, xfA, xfB) {\r\n    const input = b2TestOverlapShape_s_input.Reset();\r\n    input.proxyA.SetShape(shapeA, indexA);\r\n    input.proxyB.SetShape(shapeB, indexB);\r\n    input.transformA.Copy(xfA);\r\n    input.transformB.Copy(xfB);\r\n    input.useRadii = true;\r\n    const simplexCache = b2TestOverlapShape_s_simplexCache.Reset();\r\n    simplexCache.count = 0;\r\n    const output = b2TestOverlapShape_s_output.Reset();\r\n    b2Distance(output, simplexCache, input);\r\n    return output.distance < 10 * b2_epsilon;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_aabbExtension, b2_aabbMultiplier } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2GrowableStack } from \"../Common/b2GrowableStack\";\r\nimport { b2AABB, b2RayCastInput, b2TestOverlapAABB } from \"./b2Collision\";\r\nfunction verify(value) {\r\n    if (value === null) {\r\n        throw new Error();\r\n    }\r\n    return value;\r\n}\r\n/// A node in the dynamic tree. The client does not interact with this directly.\r\nexport class b2TreeNode {\r\n    constructor(id = 0) {\r\n        this.m_id = 0;\r\n        this.aabb = new b2AABB();\r\n        this.parent = null; // or next\r\n        this.child1 = null;\r\n        this.child2 = null;\r\n        this.height = 0; // leaf = 0, free node = -1\r\n        this.m_id = id;\r\n    }\r\n    IsLeaf() {\r\n        return this.child1 === null;\r\n    }\r\n}\r\nexport class b2DynamicTree {\r\n    constructor() {\r\n        this.m_root = null;\r\n        // b2TreeNode* public m_nodes;\r\n        // int32 public m_nodeCount;\r\n        // int32 public m_nodeCapacity;\r\n        this.m_freeList = null;\r\n        this.m_path = 0;\r\n        this.m_insertionCount = 0;\r\n        this.m_stack = new b2GrowableStack(256);\r\n    }\r\n    // public GetUserData(proxy: b2TreeNode<T>): any {\r\n    //   // DEBUG: b2Assert(proxy !== null);\r\n    //   return proxy.userData;\r\n    // }\r\n    // public GetFatAABB(proxy: b2TreeNode<T>): b2AABB {\r\n    //   // DEBUG: b2Assert(proxy !== null);\r\n    //   return proxy.aabb;\r\n    // }\r\n    Query(aabb, callback) {\r\n        if (this.m_root === null) {\r\n            return;\r\n        }\r\n        const stack = this.m_stack.Reset();\r\n        stack.Push(this.m_root);\r\n        while (stack.GetCount() > 0) {\r\n            const node = stack.Pop();\r\n            // if (node === null) {\r\n            //   continue;\r\n            // }\r\n            if (node.aabb.TestOverlap(aabb)) {\r\n                if (node.IsLeaf()) {\r\n                    const proceed = callback(node);\r\n                    if (!proceed) {\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    stack.Push(verify(node.child1));\r\n                    stack.Push(verify(node.child2));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    QueryPoint(point, callback) {\r\n        if (this.m_root === null) {\r\n            return;\r\n        }\r\n        const stack = this.m_stack.Reset();\r\n        stack.Push(this.m_root);\r\n        while (stack.GetCount() > 0) {\r\n            const node = stack.Pop();\r\n            // if (node === null) {\r\n            //   continue;\r\n            // }\r\n            if (node.aabb.TestContain(point)) {\r\n                if (node.IsLeaf()) {\r\n                    const proceed = callback(node);\r\n                    if (!proceed) {\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    stack.Push(verify(node.child1));\r\n                    stack.Push(verify(node.child2));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    RayCast(input, callback) {\r\n        if (this.m_root === null) {\r\n            return;\r\n        }\r\n        const p1 = input.p1;\r\n        const p2 = input.p2;\r\n        const r = b2Vec2.SubVV(p2, p1, b2DynamicTree.s_r);\r\n        // DEBUG: b2Assert(r.LengthSquared() > 0);\r\n        r.Normalize();\r\n        // v is perpendicular to the segment.\r\n        const v = b2Vec2.CrossOneV(r, b2DynamicTree.s_v);\r\n        const abs_v = b2Vec2.AbsV(v, b2DynamicTree.s_abs_v);\r\n        // Separating axis for segment (Gino, p80).\r\n        // |dot(v, p1 - c)| > dot(|v|, h)\r\n        let maxFraction = input.maxFraction;\r\n        // Build a bounding box for the segment.\r\n        const segmentAABB = b2DynamicTree.s_segmentAABB;\r\n        let t_x = p1.x + maxFraction * (p2.x - p1.x);\r\n        let t_y = p1.y + maxFraction * (p2.y - p1.y);\r\n        segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\r\n        segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\r\n        segmentAABB.upperBound.x = b2Max(p1.x, t_x);\r\n        segmentAABB.upperBound.y = b2Max(p1.y, t_y);\r\n        const stack = this.m_stack.Reset();\r\n        stack.Push(this.m_root);\r\n        while (stack.GetCount() > 0) {\r\n            const node = stack.Pop();\r\n            // if (node === null) {\r\n            //   continue;\r\n            // }\r\n            if (!b2TestOverlapAABB(node.aabb, segmentAABB)) {\r\n                continue;\r\n            }\r\n            // Separating axis for segment (Gino, p80).\r\n            // |dot(v, p1 - c)| > dot(|v|, h)\r\n            const c = node.aabb.GetCenter();\r\n            const h = node.aabb.GetExtents();\r\n            const separation = b2Abs(b2Vec2.DotVV(v, b2Vec2.SubVV(p1, c, b2Vec2.s_t0))) - b2Vec2.DotVV(abs_v, h);\r\n            if (separation > 0) {\r\n                continue;\r\n            }\r\n            if (node.IsLeaf()) {\r\n                const subInput = b2DynamicTree.s_subInput;\r\n                subInput.p1.Copy(input.p1);\r\n                subInput.p2.Copy(input.p2);\r\n                subInput.maxFraction = maxFraction;\r\n                const value = callback(subInput, node);\r\n                if (value === 0) {\r\n                    // The client has terminated the ray cast.\r\n                    return;\r\n                }\r\n                if (value > 0) {\r\n                    // Update segment bounding box.\r\n                    maxFraction = value;\r\n                    t_x = p1.x + maxFraction * (p2.x - p1.x);\r\n                    t_y = p1.y + maxFraction * (p2.y - p1.y);\r\n                    segmentAABB.lowerBound.x = b2Min(p1.x, t_x);\r\n                    segmentAABB.lowerBound.y = b2Min(p1.y, t_y);\r\n                    segmentAABB.upperBound.x = b2Max(p1.x, t_x);\r\n                    segmentAABB.upperBound.y = b2Max(p1.y, t_y);\r\n                }\r\n            }\r\n            else {\r\n                stack.Push(verify(node.child1));\r\n                stack.Push(verify(node.child2));\r\n            }\r\n        }\r\n    }\r\n    AllocateNode() {\r\n        // Expand the node pool as needed.\r\n        if (this.m_freeList) {\r\n            const node = this.m_freeList;\r\n            this.m_freeList = node.parent; // this.m_freeList = node.next;\r\n            node.parent = null;\r\n            node.child1 = null;\r\n            node.child2 = null;\r\n            node.height = 0;\r\n            delete node.userData; // = null;\r\n            return node;\r\n        }\r\n        return new b2TreeNode(b2DynamicTree.s_node_id++);\r\n    }\r\n    FreeNode(node) {\r\n        node.parent = this.m_freeList; // node.next = this.m_freeList;\r\n        node.child1 = null;\r\n        node.child2 = null;\r\n        node.height = -1;\r\n        delete node.userData; // = null;\r\n        this.m_freeList = node;\r\n    }\r\n    CreateProxy(aabb, userData) {\r\n        const node = this.AllocateNode();\r\n        // Fatten the aabb.\r\n        const r_x = b2_aabbExtension;\r\n        const r_y = b2_aabbExtension;\r\n        node.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\r\n        node.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\r\n        node.aabb.upperBound.x = aabb.upperBound.x + r_x;\r\n        node.aabb.upperBound.y = aabb.upperBound.y + r_y;\r\n        node.userData = userData;\r\n        node.height = 0;\r\n        this.InsertLeaf(node);\r\n        return node;\r\n    }\r\n    DestroyProxy(proxy) {\r\n        // DEBUG: b2Assert(proxy.IsLeaf());\r\n        this.RemoveLeaf(proxy);\r\n        this.FreeNode(proxy);\r\n    }\r\n    MoveProxy(proxy, aabb, displacement) {\r\n        // DEBUG: b2Assert(proxy.IsLeaf());\r\n        if (proxy.aabb.Contains(aabb)) {\r\n            return false;\r\n        }\r\n        this.RemoveLeaf(proxy);\r\n        // Extend AABB.\r\n        // Predict AABB displacement.\r\n        const r_x = b2_aabbExtension + b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));\r\n        const r_y = b2_aabbExtension + b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));\r\n        proxy.aabb.lowerBound.x = aabb.lowerBound.x - r_x;\r\n        proxy.aabb.lowerBound.y = aabb.lowerBound.y - r_y;\r\n        proxy.aabb.upperBound.x = aabb.upperBound.x + r_x;\r\n        proxy.aabb.upperBound.y = aabb.upperBound.y + r_y;\r\n        this.InsertLeaf(proxy);\r\n        return true;\r\n    }\r\n    InsertLeaf(leaf) {\r\n        ++this.m_insertionCount;\r\n        if (this.m_root === null) {\r\n            this.m_root = leaf;\r\n            this.m_root.parent = null;\r\n            return;\r\n        }\r\n        // Find the best sibling for this node\r\n        const leafAABB = leaf.aabb;\r\n        ///const center: b2Vec2 = leafAABB.GetCenter();\r\n        let index = this.m_root;\r\n        while (!index.IsLeaf()) {\r\n            const child1 = verify(index.child1);\r\n            const child2 = verify(index.child2);\r\n            const area = index.aabb.GetPerimeter();\r\n            const combinedAABB = b2DynamicTree.s_combinedAABB;\r\n            combinedAABB.Combine2(index.aabb, leafAABB);\r\n            const combinedArea = combinedAABB.GetPerimeter();\r\n            // Cost of creating a new parent for this node and the new leaf\r\n            const cost = 2 * combinedArea;\r\n            // Minimum cost of pushing the leaf further down the tree\r\n            const inheritanceCost = 2 * (combinedArea - area);\r\n            // Cost of descending into child1\r\n            let cost1;\r\n            const aabb = b2DynamicTree.s_aabb;\r\n            let oldArea;\r\n            let newArea;\r\n            if (child1.IsLeaf()) {\r\n                aabb.Combine2(leafAABB, child1.aabb);\r\n                cost1 = aabb.GetPerimeter() + inheritanceCost;\r\n            }\r\n            else {\r\n                aabb.Combine2(leafAABB, child1.aabb);\r\n                oldArea = child1.aabb.GetPerimeter();\r\n                newArea = aabb.GetPerimeter();\r\n                cost1 = (newArea - oldArea) + inheritanceCost;\r\n            }\r\n            // Cost of descending into child2\r\n            let cost2;\r\n            if (child2.IsLeaf()) {\r\n                aabb.Combine2(leafAABB, child2.aabb);\r\n                cost2 = aabb.GetPerimeter() + inheritanceCost;\r\n            }\r\n            else {\r\n                aabb.Combine2(leafAABB, child2.aabb);\r\n                oldArea = child2.aabb.GetPerimeter();\r\n                newArea = aabb.GetPerimeter();\r\n                cost2 = newArea - oldArea + inheritanceCost;\r\n            }\r\n            // Descend according to the minimum cost.\r\n            if (cost < cost1 && cost < cost2) {\r\n                break;\r\n            }\r\n            // Descend\r\n            if (cost1 < cost2) {\r\n                index = child1;\r\n            }\r\n            else {\r\n                index = child2;\r\n            }\r\n        }\r\n        const sibling = index;\r\n        // Create a parent for the siblings.\r\n        const oldParent = sibling.parent;\r\n        const newParent = this.AllocateNode();\r\n        newParent.parent = oldParent;\r\n        delete newParent.userData; // = null;\r\n        newParent.aabb.Combine2(leafAABB, sibling.aabb);\r\n        newParent.height = sibling.height + 1;\r\n        if (oldParent) {\r\n            // The sibling was not the root.\r\n            if (oldParent.child1 === sibling) {\r\n                oldParent.child1 = newParent;\r\n            }\r\n            else {\r\n                oldParent.child2 = newParent;\r\n            }\r\n            newParent.child1 = sibling;\r\n            newParent.child2 = leaf;\r\n            sibling.parent = newParent;\r\n            leaf.parent = newParent;\r\n        }\r\n        else {\r\n            // The sibling was the root.\r\n            newParent.child1 = sibling;\r\n            newParent.child2 = leaf;\r\n            sibling.parent = newParent;\r\n            leaf.parent = newParent;\r\n            this.m_root = newParent;\r\n        }\r\n        // Walk back up the tree fixing heights and AABBs\r\n        let index2 = leaf.parent;\r\n        while (index2 !== null) {\r\n            index2 = this.Balance(index2);\r\n            const child1 = verify(index2.child1);\r\n            const child2 = verify(index2.child2);\r\n            index2.height = 1 + b2Max(child1.height, child2.height);\r\n            index2.aabb.Combine2(child1.aabb, child2.aabb);\r\n            index2 = index2.parent;\r\n        }\r\n        // this.Validate();\r\n    }\r\n    RemoveLeaf(leaf) {\r\n        if (leaf === this.m_root) {\r\n            this.m_root = null;\r\n            return;\r\n        }\r\n        const parent = verify(leaf.parent);\r\n        const grandParent = parent && parent.parent;\r\n        let sibling;\r\n        if (parent.child1 === leaf) {\r\n            sibling = verify(parent.child2);\r\n        }\r\n        else {\r\n            sibling = verify(parent.child1);\r\n        }\r\n        if (grandParent) {\r\n            // Destroy parent and connect sibling to grandParent.\r\n            if (grandParent.child1 === parent) {\r\n                grandParent.child1 = sibling;\r\n            }\r\n            else {\r\n                grandParent.child2 = sibling;\r\n            }\r\n            sibling.parent = grandParent;\r\n            this.FreeNode(parent);\r\n            // Adjust ancestor bounds.\r\n            let index = grandParent;\r\n            while (index) {\r\n                index = this.Balance(index);\r\n                const child1 = verify(index.child1);\r\n                const child2 = verify(index.child2);\r\n                index.aabb.Combine2(child1.aabb, child2.aabb);\r\n                index.height = 1 + b2Max(child1.height, child2.height);\r\n                index = index.parent;\r\n            }\r\n        }\r\n        else {\r\n            this.m_root = sibling;\r\n            sibling.parent = null;\r\n            this.FreeNode(parent);\r\n        }\r\n        // this.Validate();\r\n    }\r\n    Balance(A) {\r\n        // DEBUG: b2Assert(A !== null);\r\n        if (A.IsLeaf() || A.height < 2) {\r\n            return A;\r\n        }\r\n        const B = verify(A.child1);\r\n        const C = verify(A.child2);\r\n        const balance = C.height - B.height;\r\n        // Rotate C up\r\n        if (balance > 1) {\r\n            const F = verify(C.child1);\r\n            const G = verify(C.child2);\r\n            // Swap A and C\r\n            C.child1 = A;\r\n            C.parent = A.parent;\r\n            A.parent = C;\r\n            // A's old parent should point to C\r\n            if (C.parent !== null) {\r\n                if (C.parent.child1 === A) {\r\n                    C.parent.child1 = C;\r\n                }\r\n                else {\r\n                    // DEBUG: b2Assert(C.parent.child2 === A);\r\n                    C.parent.child2 = C;\r\n                }\r\n            }\r\n            else {\r\n                this.m_root = C;\r\n            }\r\n            // Rotate\r\n            if (F.height > G.height) {\r\n                C.child2 = F;\r\n                A.child2 = G;\r\n                G.parent = A;\r\n                A.aabb.Combine2(B.aabb, G.aabb);\r\n                C.aabb.Combine2(A.aabb, F.aabb);\r\n                A.height = 1 + b2Max(B.height, G.height);\r\n                C.height = 1 + b2Max(A.height, F.height);\r\n            }\r\n            else {\r\n                C.child2 = G;\r\n                A.child2 = F;\r\n                F.parent = A;\r\n                A.aabb.Combine2(B.aabb, F.aabb);\r\n                C.aabb.Combine2(A.aabb, G.aabb);\r\n                A.height = 1 + b2Max(B.height, F.height);\r\n                C.height = 1 + b2Max(A.height, G.height);\r\n            }\r\n            return C;\r\n        }\r\n        // Rotate B up\r\n        if (balance < -1) {\r\n            const D = verify(B.child1);\r\n            const E = verify(B.child2);\r\n            // Swap A and B\r\n            B.child1 = A;\r\n            B.parent = A.parent;\r\n            A.parent = B;\r\n            // A's old parent should point to B\r\n            if (B.parent !== null) {\r\n                if (B.parent.child1 === A) {\r\n                    B.parent.child1 = B;\r\n                }\r\n                else {\r\n                    // DEBUG: b2Assert(B.parent.child2 === A);\r\n                    B.parent.child2 = B;\r\n                }\r\n            }\r\n            else {\r\n                this.m_root = B;\r\n            }\r\n            // Rotate\r\n            if (D.height > E.height) {\r\n                B.child2 = D;\r\n                A.child1 = E;\r\n                E.parent = A;\r\n                A.aabb.Combine2(C.aabb, E.aabb);\r\n                B.aabb.Combine2(A.aabb, D.aabb);\r\n                A.height = 1 + b2Max(C.height, E.height);\r\n                B.height = 1 + b2Max(A.height, D.height);\r\n            }\r\n            else {\r\n                B.child2 = E;\r\n                A.child1 = D;\r\n                D.parent = A;\r\n                A.aabb.Combine2(C.aabb, D.aabb);\r\n                B.aabb.Combine2(A.aabb, E.aabb);\r\n                A.height = 1 + b2Max(C.height, D.height);\r\n                B.height = 1 + b2Max(A.height, E.height);\r\n            }\r\n            return B;\r\n        }\r\n        return A;\r\n    }\r\n    GetHeight() {\r\n        if (this.m_root === null) {\r\n            return 0;\r\n        }\r\n        return this.m_root.height;\r\n    }\r\n    static GetAreaNode(node) {\r\n        if (node === null) {\r\n            return 0;\r\n        }\r\n        if (node.IsLeaf()) {\r\n            return 0;\r\n        }\r\n        let area = node.aabb.GetPerimeter();\r\n        area += b2DynamicTree.GetAreaNode(node.child1);\r\n        area += b2DynamicTree.GetAreaNode(node.child2);\r\n        return area;\r\n    }\r\n    GetAreaRatio() {\r\n        if (this.m_root === null) {\r\n            return 0;\r\n        }\r\n        const root = this.m_root;\r\n        const rootArea = root.aabb.GetPerimeter();\r\n        const totalArea = b2DynamicTree.GetAreaNode(this.m_root);\r\n        /*\r\n        float32 totalArea = 0.0;\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          const b2TreeNode<T>* node = m_nodes + i;\r\n          if (node.height < 0) {\r\n            // Free node in pool\r\n            continue;\r\n          }\r\n    \r\n          totalArea += node.aabb.GetPerimeter();\r\n        }\r\n        */\r\n        return totalArea / rootArea;\r\n    }\r\n    ComputeHeightNode(node) {\r\n        if (!node || node.IsLeaf()) {\r\n            return 0;\r\n        }\r\n        const height1 = this.ComputeHeightNode(node.child1);\r\n        const height2 = this.ComputeHeightNode(node.child2);\r\n        return 1 + b2Max(height1, height2);\r\n    }\r\n    ComputeHeight() {\r\n        const height = this.ComputeHeightNode(this.m_root);\r\n        return height;\r\n    }\r\n    ValidateStructure(index) {\r\n        if (index === null) {\r\n            return;\r\n        }\r\n        if (index === this.m_root) {\r\n            // DEBUG: b2Assert(index.parent === null);\r\n        }\r\n        const node = index;\r\n        if (node.IsLeaf()) {\r\n            // DEBUG: b2Assert(node.child1 === null);\r\n            // DEBUG: b2Assert(node.child2 === null);\r\n            // DEBUG: b2Assert(node.height === 0);\r\n            return;\r\n        }\r\n        const child1 = verify(node.child1);\r\n        const child2 = verify(node.child2);\r\n        // DEBUG: b2Assert(child1.parent === index);\r\n        // DEBUG: b2Assert(child2.parent === index);\r\n        this.ValidateStructure(child1);\r\n        this.ValidateStructure(child2);\r\n    }\r\n    ValidateMetrics(index) {\r\n        if (index === null) {\r\n            return;\r\n        }\r\n        const node = index;\r\n        if (node.IsLeaf()) {\r\n            // DEBUG: b2Assert(node.child1 === null);\r\n            // DEBUG: b2Assert(node.child2 === null);\r\n            // DEBUG: b2Assert(node.height === 0);\r\n            return;\r\n        }\r\n        const child1 = verify(node.child1);\r\n        const child2 = verify(node.child2);\r\n        // DEBUG: const height1: number = child1.height;\r\n        // DEBUG: const height2: number = child2.height;\r\n        // DEBUG: const height: number = 1 + b2Max(height1, height2);\r\n        // DEBUG: b2Assert(node.height === height);\r\n        const aabb = b2DynamicTree.s_aabb;\r\n        aabb.Combine2(child1.aabb, child2.aabb);\r\n        // DEBUG: b2Assert(aabb.lowerBound === node.aabb.lowerBound);\r\n        // DEBUG: b2Assert(aabb.upperBound === node.aabb.upperBound);\r\n        this.ValidateMetrics(child1);\r\n        this.ValidateMetrics(child2);\r\n    }\r\n    Validate() {\r\n        // DEBUG: this.ValidateStructure(this.m_root);\r\n        // DEBUG: this.ValidateMetrics(this.m_root);\r\n        // let freeCount: number = 0;\r\n        // let freeIndex: b2TreeNode<T> | null = this.m_freeList;\r\n        // while (freeIndex !== null) {\r\n        //   freeIndex = freeIndex.parent; // freeIndex = freeIndex.next;\r\n        //   ++freeCount;\r\n        // }\r\n        // DEBUG: b2Assert(this.GetHeight() === this.ComputeHeight());\r\n        // b2Assert(this.m_nodeCount + freeCount === this.m_nodeCapacity);\r\n    }\r\n    static GetMaxBalanceNode(node, maxBalance) {\r\n        if (node === null) {\r\n            return maxBalance;\r\n        }\r\n        if (node.height <= 1) {\r\n            return maxBalance;\r\n        }\r\n        // DEBUG: b2Assert(!node.IsLeaf());\r\n        const child1 = verify(node.child1);\r\n        const child2 = verify(node.child2);\r\n        const balance = b2Abs(child2.height - child1.height);\r\n        return b2Max(maxBalance, balance);\r\n    }\r\n    GetMaxBalance() {\r\n        const maxBalance = b2DynamicTree.GetMaxBalanceNode(this.m_root, 0);\r\n        /*\r\n        int32 maxBalance = 0;\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          const b2TreeNode<T>* node = m_nodes + i;\r\n          if (node.height <= 1) {\r\n            continue;\r\n          }\r\n    \r\n          b2Assert(!node.IsLeaf());\r\n    \r\n          int32 child1 = node.child1;\r\n          int32 child2 = node.child2;\r\n          int32 balance = b2Abs(m_nodes[child2].height - m_nodes[child1].height);\r\n          maxBalance = b2Max(maxBalance, balance);\r\n        }\r\n        */\r\n        return maxBalance;\r\n    }\r\n    RebuildBottomUp() {\r\n        /*\r\n        int32* nodes = (int32*)b2Alloc(m_nodeCount * sizeof(int32));\r\n        int32 count = 0;\r\n    \r\n        // Build array of leaves. Free the rest.\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          if (m_nodes[i].height < 0) {\r\n            // free node in pool\r\n            continue;\r\n          }\r\n    \r\n          if (m_nodes[i].IsLeaf()) {\r\n            m_nodes[i].parent = b2_nullNode;\r\n            nodes[count] = i;\r\n            ++count;\r\n          } else {\r\n            FreeNode(i);\r\n          }\r\n        }\r\n    \r\n        while (count > 1) {\r\n          float32 minCost = b2_maxFloat;\r\n          int32 iMin = -1, jMin = -1;\r\n          for (int32 i = 0; i < count; ++i) {\r\n            b2AABB aabbi = m_nodes[nodes[i]].aabb;\r\n    \r\n            for (int32 j = i + 1; j < count; ++j) {\r\n              b2AABB aabbj = m_nodes[nodes[j]].aabb;\r\n              b2AABB b;\r\n              b.Combine(aabbi, aabbj);\r\n              float32 cost = b.GetPerimeter();\r\n              if (cost < minCost) {\r\n                iMin = i;\r\n                jMin = j;\r\n                minCost = cost;\r\n              }\r\n            }\r\n          }\r\n    \r\n          int32 index1 = nodes[iMin];\r\n          int32 index2 = nodes[jMin];\r\n          b2TreeNode<T>* child1 = m_nodes + index1;\r\n          b2TreeNode<T>* child2 = m_nodes + index2;\r\n    \r\n          int32 parentIndex = AllocateNode();\r\n          b2TreeNode<T>* parent = m_nodes + parentIndex;\r\n          parent.child1 = index1;\r\n          parent.child2 = index2;\r\n          parent.height = 1 + b2Max(child1.height, child2.height);\r\n          parent.aabb.Combine(child1.aabb, child2.aabb);\r\n          parent.parent = b2_nullNode;\r\n    \r\n          child1.parent = parentIndex;\r\n          child2.parent = parentIndex;\r\n    \r\n          nodes[jMin] = nodes[count-1];\r\n          nodes[iMin] = parentIndex;\r\n          --count;\r\n        }\r\n    \r\n        m_root = nodes[0];\r\n        b2Free(nodes);\r\n        */\r\n        this.Validate();\r\n    }\r\n    static ShiftOriginNode(node, newOrigin) {\r\n        if (node === null) {\r\n            return;\r\n        }\r\n        if (node.height <= 1) {\r\n            return;\r\n        }\r\n        // DEBUG: b2Assert(!node.IsLeaf());\r\n        const child1 = node.child1;\r\n        const child2 = node.child2;\r\n        b2DynamicTree.ShiftOriginNode(child1, newOrigin);\r\n        b2DynamicTree.ShiftOriginNode(child2, newOrigin);\r\n        node.aabb.lowerBound.SelfSub(newOrigin);\r\n        node.aabb.upperBound.SelfSub(newOrigin);\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        b2DynamicTree.ShiftOriginNode(this.m_root, newOrigin);\r\n        /*\r\n        // Build array of leaves. Free the rest.\r\n        for (int32 i = 0; i < m_nodeCapacity; ++i) {\r\n          m_nodes[i].aabb.lowerBound -= newOrigin;\r\n          m_nodes[i].aabb.upperBound -= newOrigin;\r\n        }\r\n        */\r\n    }\r\n}\r\nb2DynamicTree.s_r = new b2Vec2();\r\nb2DynamicTree.s_v = new b2Vec2();\r\nb2DynamicTree.s_abs_v = new b2Vec2();\r\nb2DynamicTree.s_segmentAABB = new b2AABB();\r\nb2DynamicTree.s_subInput = new b2RayCastInput();\r\nb2DynamicTree.s_combinedAABB = new b2AABB();\r\nb2DynamicTree.s_aabb = new b2AABB();\r\nb2DynamicTree.s_node_id = 0;\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2DynamicTree } from \"./b2DynamicTree\";\r\nexport class b2Pair {\r\n    constructor(proxyA, proxyB) {\r\n        this.proxyA = proxyA;\r\n        this.proxyB = proxyB;\r\n    }\r\n}\r\n/// The broad-phase is used for computing pairs and performing volume queries and ray casts.\r\n/// This broad-phase does not persist pairs. Instead, this reports potentially new pairs.\r\n/// It is up to the client to consume the new pairs and to track subsequent overlap.\r\nexport class b2BroadPhase {\r\n    constructor() {\r\n        this.m_tree = new b2DynamicTree();\r\n        this.m_proxyCount = 0;\r\n        // public m_moveCapacity: number = 16;\r\n        this.m_moveCount = 0;\r\n        this.m_moveBuffer = [];\r\n        // public m_pairCapacity: number = 16;\r\n        this.m_pairCount = 0;\r\n        this.m_pairBuffer = [];\r\n    }\r\n    // public m_queryProxyId: number = 0;\r\n    /// Create a proxy with an initial AABB. Pairs are not reported until\r\n    /// UpdatePairs is called.\r\n    CreateProxy(aabb, userData) {\r\n        const proxy = this.m_tree.CreateProxy(aabb, userData);\r\n        ++this.m_proxyCount;\r\n        this.BufferMove(proxy);\r\n        return proxy;\r\n    }\r\n    /// Destroy a proxy. It is up to the client to remove any pairs.\r\n    DestroyProxy(proxy) {\r\n        this.UnBufferMove(proxy);\r\n        --this.m_proxyCount;\r\n        this.m_tree.DestroyProxy(proxy);\r\n    }\r\n    /// Call MoveProxy as many times as you like, then when you are done\r\n    /// call UpdatePairs to finalized the proxy pairs (for your time step).\r\n    MoveProxy(proxy, aabb, displacement) {\r\n        const buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);\r\n        if (buffer) {\r\n            this.BufferMove(proxy);\r\n        }\r\n    }\r\n    /// Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.\r\n    TouchProxy(proxy) {\r\n        this.BufferMove(proxy);\r\n    }\r\n    /// Get the fat AABB for a proxy.\r\n    // public GetFatAABB(proxy: b2TreeNode<T>): b2AABB {\r\n    //   return this.m_tree.GetFatAABB(proxy);\r\n    // }\r\n    /// Get user data from a proxy. Returns NULL if the id is invalid.\r\n    // public GetUserData(proxy: b2TreeNode<T>): T {\r\n    //   return this.m_tree.GetUserData(proxy);\r\n    // }\r\n    /// Test overlap of fat AABBs.\r\n    // public TestOverlap(proxyA: b2TreeNode<T>, proxyB: b2TreeNode<T>): boolean {\r\n    //   const aabbA: b2AABB = this.m_tree.GetFatAABB(proxyA);\r\n    //   const aabbB: b2AABB = this.m_tree.GetFatAABB(proxyB);\r\n    //   return b2TestOverlapAABB(aabbA, aabbB);\r\n    // }\r\n    /// Get the number of proxies.\r\n    GetProxyCount() {\r\n        return this.m_proxyCount;\r\n    }\r\n    /// Update the pairs. This results in pair callbacks. This can only add pairs.\r\n    UpdatePairs(callback) {\r\n        // Reset pair buffer\r\n        this.m_pairCount = 0;\r\n        // Perform tree queries for all moving proxies.\r\n        for (let i = 0; i < this.m_moveCount; ++i) {\r\n            const queryProxy = this.m_moveBuffer[i];\r\n            if (queryProxy === null) {\r\n                continue;\r\n            }\r\n            // This is called from box2d.b2DynamicTree::Query when we are gathering pairs.\r\n            // boolean b2BroadPhase::QueryCallback(int32 proxyId);\r\n            // We have to query the tree with the fat AABB so that\r\n            // we don't fail to create a pair that may touch later.\r\n            const fatAABB = queryProxy.aabb; // this.m_tree.GetFatAABB(queryProxy);\r\n            // Query tree, create pairs and add them pair buffer.\r\n            this.m_tree.Query(fatAABB, (proxy) => {\r\n                // A proxy cannot form a pair with itself.\r\n                if (proxy.m_id === queryProxy.m_id) {\r\n                    return true;\r\n                }\r\n                // const proxyA = proxy < queryProxy ? proxy : queryProxy;\r\n                // const proxyB = proxy >= queryProxy ? proxy : queryProxy;\r\n                let proxyA;\r\n                let proxyB;\r\n                if (proxy.m_id < queryProxy.m_id) {\r\n                    proxyA = proxy;\r\n                    proxyB = queryProxy;\r\n                }\r\n                else {\r\n                    proxyA = queryProxy;\r\n                    proxyB = proxy;\r\n                }\r\n                // Grow the pair buffer as needed.\r\n                if (this.m_pairCount === this.m_pairBuffer.length) {\r\n                    this.m_pairBuffer[this.m_pairCount] = new b2Pair(proxyA, proxyB);\r\n                }\r\n                else {\r\n                    const pair = this.m_pairBuffer[this.m_pairCount];\r\n                    pair.proxyA = proxyA;\r\n                    pair.proxyB = proxyB;\r\n                }\r\n                ++this.m_pairCount;\r\n                return true;\r\n            });\r\n        }\r\n        // Reset move buffer\r\n        this.m_moveCount = 0;\r\n        // Sort the pair buffer to expose duplicates.\r\n        this.m_pairBuffer.length = this.m_pairCount;\r\n        this.m_pairBuffer.sort(b2PairLessThan);\r\n        // Send the pairs back to the client.\r\n        let i = 0;\r\n        while (i < this.m_pairCount) {\r\n            const primaryPair = this.m_pairBuffer[i];\r\n            const userDataA = primaryPair.proxyA.userData; // this.m_tree.GetUserData(primaryPair.proxyA);\r\n            const userDataB = primaryPair.proxyB.userData; // this.m_tree.GetUserData(primaryPair.proxyB);\r\n            callback(userDataA, userDataB);\r\n            ++i;\r\n            // Skip any duplicate pairs.\r\n            while (i < this.m_pairCount) {\r\n                const pair = this.m_pairBuffer[i];\r\n                if (pair.proxyA.m_id !== primaryPair.proxyA.m_id || pair.proxyB.m_id !== primaryPair.proxyB.m_id) {\r\n                    break;\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n        // Try to keep the tree balanced.\r\n        // this.m_tree.Rebalance(4);\r\n    }\r\n    /// Query an AABB for overlapping proxies. The callback class\r\n    /// is called for each proxy that overlaps the supplied AABB.\r\n    Query(aabb, callback) {\r\n        this.m_tree.Query(aabb, callback);\r\n    }\r\n    QueryPoint(point, callback) {\r\n        this.m_tree.QueryPoint(point, callback);\r\n    }\r\n    /// Ray-cast against the proxies in the tree. This relies on the callback\r\n    /// to perform a exact ray-cast in the case were the proxy contains a shape.\r\n    /// The callback also performs the any collision filtering. This has performance\r\n    /// roughly equal to k * log(n), where k is the number of collisions and n is the\r\n    /// number of proxies in the tree.\r\n    /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\r\n    /// @param callback a callback class that is called for each proxy that is hit by the ray.\r\n    RayCast(input, callback) {\r\n        this.m_tree.RayCast(input, callback);\r\n    }\r\n    /// Get the height of the embedded tree.\r\n    GetTreeHeight() {\r\n        return this.m_tree.GetHeight();\r\n    }\r\n    /// Get the balance of the embedded tree.\r\n    GetTreeBalance() {\r\n        return this.m_tree.GetMaxBalance();\r\n    }\r\n    /// Get the quality metric of the embedded tree.\r\n    GetTreeQuality() {\r\n        return this.m_tree.GetAreaRatio();\r\n    }\r\n    /// Shift the world origin. Useful for large worlds.\r\n    /// The shift formula is: position -= newOrigin\r\n    /// @param newOrigin the new origin with respect to the old origin\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_tree.ShiftOrigin(newOrigin);\r\n    }\r\n    BufferMove(proxy) {\r\n        this.m_moveBuffer[this.m_moveCount] = proxy;\r\n        ++this.m_moveCount;\r\n    }\r\n    UnBufferMove(proxy) {\r\n        const i = this.m_moveBuffer.indexOf(proxy);\r\n        this.m_moveBuffer[i] = null;\r\n    }\r\n}\r\n/// This is used to sort pairs.\r\nexport function b2PairLessThan(pair1, pair2) {\r\n    if (pair1.proxyA.m_id === pair2.proxyA.m_id) {\r\n        return pair1.proxyB.m_id - pair2.proxyB.m_id;\r\n    }\r\n    return pair1.proxyA.m_id - pair2.proxyA.m_id;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCcm9hZFBoYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvQ29sbGlzaW9uL2IyQnJvYWRQaGFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUlGLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1RCxNQUFNLE9BQU8sTUFBTTtJQUNqQixZQUFtQixNQUFxQixFQUFTLE1BQXFCO1FBQW5ELFdBQU0sR0FBTixNQUFNLENBQWU7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztDQUMzRTtBQUVELDRGQUE0RjtBQUM1Rix5RkFBeUY7QUFDekYsb0ZBQW9GO0FBQ3BGLE1BQU0sT0FBTyxZQUFZO0lBQXpCO1FBQ2tCLFdBQU0sR0FBcUIsSUFBSSxhQUFhLEVBQUssQ0FBQztRQUMzRCxpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUNoQyxzQ0FBc0M7UUFDL0IsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDZixpQkFBWSxHQUFnQyxFQUFFLENBQUM7UUFDL0Qsc0NBQXNDO1FBQy9CLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ2YsaUJBQVksR0FBcUIsRUFBRSxDQUFDO0lBK0x0RCxDQUFDO0lBOUxDLHFDQUFxQztJQUVyQyxxRUFBcUU7SUFDckUsMEJBQTBCO0lBQ25CLFdBQVcsQ0FBQyxJQUFZLEVBQUUsUUFBVztRQUMxQyxNQUFNLEtBQUssR0FBa0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELGdFQUFnRTtJQUN6RCxZQUFZLENBQUMsS0FBb0I7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxL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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_linearSlop, b2_maxPolygonVertices } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Max, b2Vec2, b2Rot, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2Distance, b2DistanceInput, b2DistanceOutput, b2DistanceProxy, b2SimplexCache } from \"./b2Distance\";\r\nexport let b2_toiTime = 0;\r\nexport let b2_toiMaxTime = 0;\r\nexport let b2_toiCalls = 0;\r\nexport let b2_toiIters = 0;\r\nexport let b2_toiMaxIters = 0;\r\nexport let b2_toiRootIters = 0;\r\nexport let b2_toiMaxRootIters = 0;\r\nexport function b2_toi_reset() {\r\n    b2_toiTime = 0;\r\n    b2_toiMaxTime = 0;\r\n    b2_toiCalls = 0;\r\n    b2_toiIters = 0;\r\n    b2_toiMaxIters = 0;\r\n    b2_toiRootIters = 0;\r\n    b2_toiMaxRootIters = 0;\r\n}\r\nconst b2TimeOfImpact_s_xfA = new b2Transform();\r\nconst b2TimeOfImpact_s_xfB = new b2Transform();\r\nconst b2TimeOfImpact_s_pointA = new b2Vec2();\r\nconst b2TimeOfImpact_s_pointB = new b2Vec2();\r\nconst b2TimeOfImpact_s_normal = new b2Vec2();\r\nconst b2TimeOfImpact_s_axisA = new b2Vec2();\r\nconst b2TimeOfImpact_s_axisB = new b2Vec2();\r\n/// Input parameters for b2TimeOfImpact\r\nexport class b2TOIInput {\r\n    constructor() {\r\n        this.proxyA = new b2DistanceProxy();\r\n        this.proxyB = new b2DistanceProxy();\r\n        this.sweepA = new b2Sweep();\r\n        this.sweepB = new b2Sweep();\r\n        this.tMax = 0; // defines sweep interval [0, tMax]\r\n    }\r\n}\r\n/// Output parameters for b2TimeOfImpact.\r\nexport var b2TOIOutputState;\r\n(function (b2TOIOutputState) {\r\n    b2TOIOutputState[b2TOIOutputState[\"e_unknown\"] = 0] = \"e_unknown\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_failed\"] = 1] = \"e_failed\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_overlapped\"] = 2] = \"e_overlapped\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_touching\"] = 3] = \"e_touching\";\r\n    b2TOIOutputState[b2TOIOutputState[\"e_separated\"] = 4] = \"e_separated\";\r\n})(b2TOIOutputState || (b2TOIOutputState = {}));\r\nexport class b2TOIOutput {\r\n    constructor() {\r\n        this.state = b2TOIOutputState.e_unknown;\r\n        this.t = 0;\r\n    }\r\n}\r\nexport var b2SeparationFunctionType;\r\n(function (b2SeparationFunctionType) {\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_points\"] = 0] = \"e_points\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceA\"] = 1] = \"e_faceA\";\r\n    b2SeparationFunctionType[b2SeparationFunctionType[\"e_faceB\"] = 2] = \"e_faceB\";\r\n})(b2SeparationFunctionType || (b2SeparationFunctionType = {}));\r\nexport class b2SeparationFunction {\r\n    constructor() {\r\n        this.m_sweepA = new b2Sweep();\r\n        this.m_sweepB = new b2Sweep();\r\n        this.m_type = b2SeparationFunctionType.e_unknown;\r\n        this.m_localPoint = new b2Vec2();\r\n        this.m_axis = new b2Vec2();\r\n    }\r\n    Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1) {\r\n        this.m_proxyA = proxyA;\r\n        this.m_proxyB = proxyB;\r\n        const count = cache.count;\r\n        // DEBUG: b2Assert(0 < count && count < 3);\r\n        this.m_sweepA.Copy(sweepA);\r\n        this.m_sweepB.Copy(sweepB);\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t1);\r\n        this.m_sweepB.GetTransform(xfB, t1);\r\n        if (count === 1) {\r\n            this.m_type = b2SeparationFunctionType.e_points;\r\n            const localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n            const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n            b2Vec2.SubVV(pointB, pointA, this.m_axis);\r\n            const s = this.m_axis.Normalize();\r\n            // #if B2_ENABLE_PARTICLE\r\n            this.m_localPoint.SetZero();\r\n            // #endif\r\n            return s;\r\n        }\r\n        else if (cache.indexA[0] === cache.indexA[1]) {\r\n            // Two points on B and one on A.\r\n            this.m_type = b2SeparationFunctionType.e_faceB;\r\n            const localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);\r\n            b2Vec2.CrossVOne(b2Vec2.SubVV(localPointB2, localPointB1, b2Vec2.s_t0), this.m_axis).SelfNormalize();\r\n            const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n            b2Vec2.MidVV(localPointB1, localPointB2, this.m_localPoint);\r\n            const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n            const localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n            let s = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n            if (s < 0) {\r\n                this.m_axis.SelfNeg();\r\n                s = -s;\r\n            }\r\n            return s;\r\n        }\r\n        else {\r\n            // Two points on A and one or two points on B.\r\n            this.m_type = b2SeparationFunctionType.e_faceA;\r\n            const localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);\r\n            const localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);\r\n            b2Vec2.CrossVOne(b2Vec2.SubVV(localPointA2, localPointA1, b2Vec2.s_t0), this.m_axis).SelfNormalize();\r\n            const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n            b2Vec2.MidVV(localPointA1, localPointA2, this.m_localPoint);\r\n            const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n            const localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);\r\n            const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n            let s = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n            if (s < 0) {\r\n                this.m_axis.SelfNeg();\r\n                s = -s;\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n    FindMinSeparation(indexA, indexB, t) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t);\r\n        this.m_sweepB.GetTransform(xfB, t);\r\n        switch (this.m_type) {\r\n            case b2SeparationFunctionType.e_points: {\r\n                const axisA = b2Rot.MulTRV(xfA.q, this.m_axis, b2TimeOfImpact_s_axisA);\r\n                const axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(this.m_axis, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\r\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\r\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA[0]);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB[0]);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceA: {\r\n                const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n                const axisB = b2Rot.MulTRV(xfB.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisB);\r\n                indexA[0] = -1;\r\n                indexB[0] = this.m_proxyB.GetSupport(axisB);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB[0]);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceB: {\r\n                const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n                const axisA = b2Rot.MulTRV(xfA.q, b2Vec2.NegV(normal, b2Vec2.s_t0), b2TimeOfImpact_s_axisA);\r\n                indexB[0] = -1;\r\n                indexA[0] = this.m_proxyA.GetSupport(axisA);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA[0]);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                indexA[0] = -1;\r\n                indexB[0] = -1;\r\n                return 0;\r\n        }\r\n    }\r\n    Evaluate(indexA, indexB, t) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        this.m_sweepA.GetTransform(xfA, t);\r\n        this.m_sweepB.GetTransform(xfB, t);\r\n        switch (this.m_type) {\r\n            case b2SeparationFunctionType.e_points: {\r\n                const localPointA = this.m_proxyA.GetVertex(indexA);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.m_axis);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceA: {\r\n                const normal = b2Rot.MulRV(xfA.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointA = b2Transform.MulXV(xfA, this.m_localPoint, b2TimeOfImpact_s_pointA);\r\n                const localPointB = this.m_proxyB.GetVertex(indexB);\r\n                const pointB = b2Transform.MulXV(xfB, localPointB, b2TimeOfImpact_s_pointB);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            case b2SeparationFunctionType.e_faceB: {\r\n                const normal = b2Rot.MulRV(xfB.q, this.m_axis, b2TimeOfImpact_s_normal);\r\n                const pointB = b2Transform.MulXV(xfB, this.m_localPoint, b2TimeOfImpact_s_pointB);\r\n                const localPointA = this.m_proxyA.GetVertex(indexA);\r\n                const pointA = b2Transform.MulXV(xfA, localPointA, b2TimeOfImpact_s_pointA);\r\n                const separation = b2Vec2.DotVV(b2Vec2.SubVV(pointA, pointB, b2Vec2.s_t0), normal);\r\n                return separation;\r\n            }\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                return 0;\r\n        }\r\n    }\r\n}\r\nconst b2TimeOfImpact_s_timer = new b2Timer();\r\nconst b2TimeOfImpact_s_cache = new b2SimplexCache();\r\nconst b2TimeOfImpact_s_distanceInput = new b2DistanceInput();\r\nconst b2TimeOfImpact_s_distanceOutput = new b2DistanceOutput();\r\nconst b2TimeOfImpact_s_fcn = new b2SeparationFunction();\r\nconst b2TimeOfImpact_s_indexA = [0];\r\nconst b2TimeOfImpact_s_indexB = [0];\r\nconst b2TimeOfImpact_s_sweepA = new b2Sweep();\r\nconst b2TimeOfImpact_s_sweepB = new b2Sweep();\r\nexport function b2TimeOfImpact(output, input) {\r\n    const timer = b2TimeOfImpact_s_timer.Reset();\r\n    ++b2_toiCalls;\r\n    output.state = b2TOIOutputState.e_unknown;\r\n    output.t = input.tMax;\r\n    const proxyA = input.proxyA;\r\n    const proxyB = input.proxyB;\r\n    const maxVertices = b2Max(b2_maxPolygonVertices, proxyA.m_count, proxyB.m_count);\r\n    const sweepA = b2TimeOfImpact_s_sweepA.Copy(input.sweepA);\r\n    const sweepB = b2TimeOfImpact_s_sweepB.Copy(input.sweepB);\r\n    // Large rotations can make the root finder fail, so we normalize the\r\n    // sweep angles.\r\n    sweepA.Normalize();\r\n    sweepB.Normalize();\r\n    const tMax = input.tMax;\r\n    const totalRadius = proxyA.m_radius + proxyB.m_radius;\r\n    const target = b2Max(b2_linearSlop, totalRadius - 3 * b2_linearSlop);\r\n    const tolerance = 0.25 * b2_linearSlop;\r\n    // DEBUG: b2Assert(target > tolerance);\r\n    let t1 = 0;\r\n    const k_maxIterations = 20; // TODO_ERIN b2Settings\r\n    let iter = 0;\r\n    // Prepare input for distance query.\r\n    const cache = b2TimeOfImpact_s_cache;\r\n    cache.count = 0;\r\n    const distanceInput = b2TimeOfImpact_s_distanceInput;\r\n    distanceInput.proxyA.Copy(input.proxyA);\r\n    distanceInput.proxyB.Copy(input.proxyB);\r\n    distanceInput.useRadii = false;\r\n    // The outer loop progressively attempts to compute new separating axes.\r\n    // This loop terminates when an axis is repeated (no progress is made).\r\n    for (;;) {\r\n        const xfA = b2TimeOfImpact_s_xfA;\r\n        const xfB = b2TimeOfImpact_s_xfB;\r\n        sweepA.GetTransform(xfA, t1);\r\n        sweepB.GetTransform(xfB, t1);\r\n        // Get the distance between shapes. We can also use the results\r\n        // to get a separating axis.\r\n        distanceInput.transformA.Copy(xfA);\r\n        distanceInput.transformB.Copy(xfB);\r\n        const distanceOutput = b2TimeOfImpact_s_distanceOutput;\r\n        b2Distance(distanceOutput, cache, distanceInput);\r\n        // If the shapes are overlapped, we give up on continuous collision.\r\n        if (distanceOutput.distance <= 0) {\r\n            // Failure!\r\n            output.state = b2TOIOutputState.e_overlapped;\r\n            output.t = 0;\r\n            break;\r\n        }\r\n        if (distanceOutput.distance < target + tolerance) {\r\n            // Victory!\r\n            output.state = b2TOIOutputState.e_touching;\r\n            output.t = t1;\r\n            break;\r\n        }\r\n        // Initialize the separating axis.\r\n        const fcn = b2TimeOfImpact_s_fcn;\r\n        fcn.Initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\r\n        /*\r\n        #if 0\r\n            // Dump the curve seen by the root finder {\r\n              const int32 N = 100;\r\n              float32 dx = 1.0f / N;\r\n              float32 xs[N+1];\r\n              float32 fs[N+1];\r\n        \r\n              float32 x = 0.0f;\r\n        \r\n              for (int32 i = 0; i <= N; ++i) {\r\n                sweepA.GetTransform(&xfA, x);\r\n                sweepB.GetTransform(&xfB, x);\r\n                float32 f = fcn.Evaluate(xfA, xfB) - target;\r\n        \r\n                printf(\"%g %g\\n\", x, f);\r\n        \r\n                xs[i] = x;\r\n                fs[i] = f;\r\n        \r\n                x += dx;\r\n              }\r\n            }\r\n        #endif\r\n        */\r\n        // Compute the TOI on the separating axis. We do this by successively\r\n        // resolving the deepest point. This loop is bounded by the number of vertices.\r\n        let done = false;\r\n        let t2 = tMax;\r\n        let pushBackIter = 0;\r\n        for (;;) {\r\n            // Find the deepest point at t2. Store the witness point indices.\r\n            const indexA = b2TimeOfImpact_s_indexA;\r\n            const indexB = b2TimeOfImpact_s_indexB;\r\n            let s2 = fcn.FindMinSeparation(indexA, indexB, t2);\r\n            // Is the final configuration separated?\r\n            if (s2 > (target + tolerance)) {\r\n                // Victory!\r\n                output.state = b2TOIOutputState.e_separated;\r\n                output.t = tMax;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Has the separation reached tolerance?\r\n            if (s2 > (target - tolerance)) {\r\n                // Advance the sweeps\r\n                t1 = t2;\r\n                break;\r\n            }\r\n            // Compute the initial separation of the witness points.\r\n            let s1 = fcn.Evaluate(indexA[0], indexB[0], t1);\r\n            // Check for initial overlap. This might happen if the root finder\r\n            // runs out of iterations.\r\n            if (s1 < (target - tolerance)) {\r\n                output.state = b2TOIOutputState.e_failed;\r\n                output.t = t1;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Check for touching\r\n            if (s1 <= (target + tolerance)) {\r\n                // Victory! t1 should hold the TOI (could be 0.0).\r\n                output.state = b2TOIOutputState.e_touching;\r\n                output.t = t1;\r\n                done = true;\r\n                break;\r\n            }\r\n            // Compute 1D root of: f(x) - target = 0\r\n            let rootIterCount = 0;\r\n            let a1 = t1;\r\n            let a2 = t2;\r\n            for (;;) {\r\n                // Use a mix of the secant rule and bisection.\r\n                let t = 0;\r\n                if (rootIterCount & 1) {\r\n                    // Secant rule to improve convergence.\r\n                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\r\n                }\r\n                else {\r\n                    // Bisection to guarantee progress.\r\n                    t = 0.5 * (a1 + a2);\r\n                }\r\n                ++rootIterCount;\r\n                ++b2_toiRootIters;\r\n                const s = fcn.Evaluate(indexA[0], indexB[0], t);\r\n                if (b2Abs(s - target) < tolerance) {\r\n                    // t2 holds a tentative value for t1\r\n                    t2 = t;\r\n                    break;\r\n                }\r\n                // Ensure we continue to bracket the root.\r\n                if (s > target) {\r\n                    a1 = t;\r\n                    s1 = s;\r\n                }\r\n                else {\r\n                    a2 = t;\r\n                    s2 = s;\r\n                }\r\n                if (rootIterCount === 50) {\r\n                    break;\r\n                }\r\n            }\r\n            b2_toiMaxRootIters = b2Max(b2_toiMaxRootIters, rootIterCount);\r\n            ++pushBackIter;\r\n            if (pushBackIter === maxVertices) {\r\n                break;\r\n            }\r\n        }\r\n        ++iter;\r\n        ++b2_toiIters;\r\n        if (done) {\r\n            break;\r\n        }\r\n        if (iter === k_maxIterations) {\r\n            // Root finder got stuck. Semi-victory.\r\n            output.state = b2TOIOutputState.e_failed;\r\n            output.t = t1;\r\n            break;\r\n        }\r\n    }\r\n    b2_toiMaxIters = b2Max(b2_toiMaxIters, iter);\r\n    const time = timer.GetMilliseconds();\r\n    b2_toiMaxTime = b2Max(b2_toiMaxTime, time);\r\n    b2_toiTime += time;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","import { b2_maxFloat, b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ManifoldType } from \"./b2Collision\";\r\nconst b2CollideCircles_s_pA = new b2Vec2();\r\nconst b2CollideCircles_s_pB = new b2Vec2();\r\nexport function b2CollideCircles(manifold, circleA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    const pA = b2Transform.MulXV(xfA, circleA.m_p, b2CollideCircles_s_pA);\r\n    const pB = b2Transform.MulXV(xfB, circleB.m_p, b2CollideCircles_s_pB);\r\n    const distSqr = b2Vec2.DistanceSquaredVV(pA, pB);\r\n    const radius = circleA.m_radius + circleB.m_radius;\r\n    if (distSqr > radius * radius) {\r\n        return;\r\n    }\r\n    manifold.type = b2ManifoldType.e_circles;\r\n    manifold.localPoint.Copy(circleA.m_p);\r\n    manifold.localNormal.SetZero();\r\n    manifold.pointCount = 1;\r\n    manifold.points[0].localPoint.Copy(circleB.m_p);\r\n    manifold.points[0].id.key = 0;\r\n}\r\nconst b2CollidePolygonAndCircle_s_c = new b2Vec2();\r\nconst b2CollidePolygonAndCircle_s_cLocal = new b2Vec2();\r\nconst b2CollidePolygonAndCircle_s_faceCenter = new b2Vec2();\r\nexport function b2CollidePolygonAndCircle(manifold, polygonA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    // Compute circle position in the frame of the polygon.\r\n    const c = b2Transform.MulXV(xfB, circleB.m_p, b2CollidePolygonAndCircle_s_c);\r\n    const cLocal = b2Transform.MulTXV(xfA, c, b2CollidePolygonAndCircle_s_cLocal);\r\n    // Find the min separating edge.\r\n    let normalIndex = 0;\r\n    let separation = (-b2_maxFloat);\r\n    const radius = polygonA.m_radius + circleB.m_radius;\r\n    const vertexCount = polygonA.m_count;\r\n    const vertices = polygonA.m_vertices;\r\n    const normals = polygonA.m_normals;\r\n    for (let i = 0; i < vertexCount; ++i) {\r\n        const s = b2Vec2.DotVV(normals[i], b2Vec2.SubVV(cLocal, vertices[i], b2Vec2.s_t0));\r\n        if (s > radius) {\r\n            // Early out.\r\n            return;\r\n        }\r\n        if (s > separation) {\r\n            separation = s;\r\n            normalIndex = i;\r\n        }\r\n    }\r\n    // Vertices that subtend the incident face.\r\n    const vertIndex1 = normalIndex;\r\n    const vertIndex2 = (vertIndex1 + 1) % vertexCount;\r\n    const v1 = vertices[vertIndex1];\r\n    const v2 = vertices[vertIndex2];\r\n    // If the center is inside the polygon ...\r\n    if (separation < b2_epsilon) {\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        manifold.localNormal.Copy(normals[normalIndex]);\r\n        b2Vec2.MidVV(v1, v2, manifold.localPoint);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n        return;\r\n    }\r\n    // Compute barycentric coordinates\r\n    const u1 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v1, b2Vec2.s_t0), b2Vec2.SubVV(v2, v1, b2Vec2.s_t1));\r\n    const u2 = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, v2, b2Vec2.s_t0), b2Vec2.SubVV(v1, v2, b2Vec2.s_t1));\r\n    if (u1 <= 0) {\r\n        if (b2Vec2.DistanceSquaredVV(cLocal, v1) > radius * radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        b2Vec2.SubVV(cLocal, v1, manifold.localNormal).SelfNormalize();\r\n        manifold.localPoint.Copy(v1);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n    else if (u2 <= 0) {\r\n        if (b2Vec2.DistanceSquaredVV(cLocal, v2) > radius * radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        b2Vec2.SubVV(cLocal, v2, manifold.localNormal).SelfNormalize();\r\n        manifold.localPoint.Copy(v2);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n    else {\r\n        const faceCenter = b2Vec2.MidVV(v1, v2, b2CollidePolygonAndCircle_s_faceCenter);\r\n        const separation = b2Vec2.DotVV(b2Vec2.SubVV(cLocal, faceCenter, b2Vec2.s_t1), normals[vertIndex1]);\r\n        if (separation > radius) {\r\n            return;\r\n        }\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        manifold.localNormal.Copy(normals[vertIndex1]).SelfNormalize();\r\n        manifold.localPoint.Copy(faceCenter);\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        manifold.points[0].id.key = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb2xsaWRlQ2lyY2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvQ29sbGlzaW9uL2IyQ29sbGlkZUNpcmNsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzRCxNQUFNLHFCQUFxQixHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7QUFDbkQsTUFBTSxxQkFBcUIsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ25ELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxRQUFvQixFQUFFLE9BQXNCLEVBQUUsR0FBZ0IsRUFBRSxPQUFzQixFQUFFLEdBQWdCO0lBQ3ZJLFFBQVEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRXhCLE1BQU0sRUFBRSxHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUM5RSxNQUFNLEVBQUUsR0FBVyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFFOUUsTUFBTSxPQUFPLEdBQVcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBVyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDM0QsSUFBSSxPQUFPLEdBQUcsTUFBTSxHQUFHLE1BQU0sRUFBRTtRQUM3QixPQUFPO0tBQ1I7SUFFRCxRQUFRLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUM7SUFDekMsUUFBUSxD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","// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_maxFloat, b2_maxManifoldPoints } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ContactFeatureType } from \"./b2Collision\";\r\nimport { b2ManifoldType, b2ClipVertex, b2ClipSegmentToLine } from \"./b2Collision\";\r\nconst b2EdgeSeparation_s_normal1World = new b2Vec2();\r\nconst b2EdgeSeparation_s_normal1 = new b2Vec2();\r\nconst b2EdgeSeparation_s_v1 = new b2Vec2();\r\nconst b2EdgeSeparation_s_v2 = new b2Vec2();\r\nfunction b2EdgeSeparation(poly1, xf1, edge1, poly2, xf2) {\r\n    // DEBUG: const count1: number = poly1.m_count;\r\n    const vertices1 = poly1.m_vertices;\r\n    const normals1 = poly1.m_normals;\r\n    const count2 = poly2.m_count;\r\n    const vertices2 = poly2.m_vertices;\r\n    // DEBUG: b2Assert(0 <= edge1 && edge1 < count1);\r\n    // Convert normal from poly1's frame into poly2's frame.\r\n    const normal1World = b2Rot.MulRV(xf1.q, normals1[edge1], b2EdgeSeparation_s_normal1World);\r\n    const normal1 = b2Rot.MulTRV(xf2.q, normal1World, b2EdgeSeparation_s_normal1);\r\n    // Find support vertex on poly2 for -normal.\r\n    let index = 0;\r\n    let minDot = b2_maxFloat;\r\n    for (let i = 0; i < count2; ++i) {\r\n        const dot = b2Vec2.DotVV(vertices2[i], normal1);\r\n        if (dot < minDot) {\r\n            minDot = dot;\r\n            index = i;\r\n        }\r\n    }\r\n    const v1 = b2Transform.MulXV(xf1, vertices1[edge1], b2EdgeSeparation_s_v1);\r\n    const v2 = b2Transform.MulXV(xf2, vertices2[index], b2EdgeSeparation_s_v2);\r\n    const separation = b2Vec2.DotVV(b2Vec2.SubVV(v2, v1, b2Vec2.s_t0), normal1World);\r\n    return separation;\r\n}\r\nconst b2FindMaxSeparation_s_d = new b2Vec2();\r\nconst b2FindMaxSeparation_s_dLocal1 = new b2Vec2();\r\nfunction b2FindMaxSeparation(edgeIndex, poly1, xf1, poly2, xf2) {\r\n    const count1 = poly1.m_count;\r\n    const normals1 = poly1.m_normals;\r\n    // Vector pointing from the centroid of poly1 to the centroid of poly2.\r\n    const d = b2Vec2.SubVV(b2Transform.MulXV(xf2, poly2.m_centroid, b2Vec2.s_t0), b2Transform.MulXV(xf1, poly1.m_centroid, b2Vec2.s_t1), b2FindMaxSeparation_s_d);\r\n    const dLocal1 = b2Rot.MulTRV(xf1.q, d, b2FindMaxSeparation_s_dLocal1);\r\n    // Find edge normal on poly1 that has the largest projection onto d.\r\n    let edge = 0;\r\n    let maxDot = (-b2_maxFloat);\r\n    for (let i = 0; i < count1; ++i) {\r\n        const dot = b2Vec2.DotVV(normals1[i], dLocal1);\r\n        if (dot > maxDot) {\r\n            maxDot = dot;\r\n            edge = i;\r\n        }\r\n    }\r\n    // Get the separation for the edge normal.\r\n    let s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\r\n    // Check the separation for the previous edge normal.\r\n    const prevEdge = (edge + count1 - 1) % count1;\r\n    const sPrev = b2EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);\r\n    // Check the separation for the next edge normal.\r\n    const nextEdge = (edge + 1) % count1;\r\n    const sNext = b2EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);\r\n    // Find the best edge and the search direction.\r\n    let bestEdge = 0;\r\n    let bestSeparation = 0;\r\n    let increment = 0;\r\n    if (sPrev > s && sPrev > sNext) {\r\n        increment = -1;\r\n        bestEdge = prevEdge;\r\n        bestSeparation = sPrev;\r\n    }\r\n    else if (sNext > s) {\r\n        increment = 1;\r\n        bestEdge = nextEdge;\r\n        bestSeparation = sNext;\r\n    }\r\n    else {\r\n        edgeIndex[0] = edge;\r\n        return s;\r\n    }\r\n    // Perform a local search for the best edge normal.\r\n    while (true) {\r\n        if (increment === -1) {\r\n            edge = (bestEdge + count1 - 1) % count1;\r\n        }\r\n        else {\r\n            edge = (bestEdge + 1) % count1;\r\n        }\r\n        s = b2EdgeSeparation(poly1, xf1, edge, poly2, xf2);\r\n        if (s > bestSeparation) {\r\n            bestEdge = edge;\r\n            bestSeparation = s;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    edgeIndex[0] = bestEdge;\r\n    return bestSeparation;\r\n}\r\nconst b2FindIncidentEdge_s_normal1 = new b2Vec2();\r\nfunction b2FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\r\n    // DEBUG: const count1: number = poly1.m_count;\r\n    const normals1 = poly1.m_normals;\r\n    const count2 = poly2.m_count;\r\n    const vertices2 = poly2.m_vertices;\r\n    const normals2 = poly2.m_normals;\r\n    // DEBUG: b2Assert(0 <= edge1 && edge1 < count1);\r\n    // Get the normal of the reference edge in poly2's frame.\r\n    const normal1 = b2Rot.MulTRV(xf2.q, b2Rot.MulRV(xf1.q, normals1[edge1], b2Vec2.s_t0), b2FindIncidentEdge_s_normal1);\r\n    // Find the incident edge on poly2.\r\n    let index = 0;\r\n    let minDot = b2_maxFloat;\r\n    for (let i = 0; i < count2; ++i) {\r\n        const dot = b2Vec2.DotVV(normal1, normals2[i]);\r\n        if (dot < minDot) {\r\n            minDot = dot;\r\n            index = i;\r\n        }\r\n    }\r\n    // Build the clip vertices for the incident edge.\r\n    const i1 = index;\r\n    const i2 = (i1 + 1) % count2;\r\n    const c0 = c[0];\r\n    b2Transform.MulXV(xf2, vertices2[i1], c0.v);\r\n    const cf0 = c0.id.cf;\r\n    cf0.indexA = edge1;\r\n    cf0.indexB = i1;\r\n    cf0.typeA = b2ContactFeatureType.e_face;\r\n    cf0.typeB = b2ContactFeatureType.e_vertex;\r\n    const c1 = c[1];\r\n    b2Transform.MulXV(xf2, vertices2[i2], c1.v);\r\n    const cf1 = c1.id.cf;\r\n    cf1.indexA = edge1;\r\n    cf1.indexB = i2;\r\n    cf1.typeA = b2ContactFeatureType.e_face;\r\n    cf1.typeB = b2ContactFeatureType.e_vertex;\r\n}\r\nconst b2CollidePolygons_s_incidentEdge = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_clipPoints1 = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_clipPoints2 = b2ClipVertex.MakeArray(2);\r\nconst b2CollidePolygons_s_edgeA = [0];\r\nconst b2CollidePolygons_s_edgeB = [0];\r\nconst b2CollidePolygons_s_localTangent = new b2Vec2();\r\nconst b2CollidePolygons_s_localNormal = new b2Vec2();\r\nconst b2CollidePolygons_s_planePoint = new b2Vec2();\r\nconst b2CollidePolygons_s_normal = new b2Vec2();\r\nconst b2CollidePolygons_s_tangent = new b2Vec2();\r\nconst b2CollidePolygons_s_ntangent = new b2Vec2();\r\nconst b2CollidePolygons_s_v11 = new b2Vec2();\r\nconst b2CollidePolygons_s_v12 = new b2Vec2();\r\nexport function b2CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\r\n    manifold.pointCount = 0;\r\n    const totalRadius = polyA.m_radius + polyB.m_radius;\r\n    const edgeA = b2CollidePolygons_s_edgeA;\r\n    edgeA[0] = 0;\r\n    const separationA = b2FindMaxSeparation(edgeA, polyA, xfA, polyB, xfB);\r\n    if (separationA > totalRadius) {\r\n        return;\r\n    }\r\n    const edgeB = b2CollidePolygons_s_edgeB;\r\n    edgeB[0] = 0;\r\n    const separationB = b2FindMaxSeparation(edgeB, polyB, xfB, polyA, xfA);\r\n    if (separationB > totalRadius) {\r\n        return;\r\n    }\r\n    let poly1; // reference polygon\r\n    let poly2; // incident polygon\r\n    let xf1, xf2;\r\n    let edge1 = 0; // reference edge\r\n    let flip = 0;\r\n    const k_relativeTol = 0.98;\r\n    const k_absoluteTol = 0.001;\r\n    if (separationB > k_relativeTol * separationA + k_absoluteTol) {\r\n        poly1 = polyB;\r\n        poly2 = polyA;\r\n        xf1 = xfB;\r\n        xf2 = xfA;\r\n        edge1 = edgeB[0];\r\n        manifold.type = b2ManifoldType.e_faceB;\r\n        flip = 1;\r\n    }\r\n    else {\r\n        poly1 = polyA;\r\n        poly2 = polyB;\r\n        xf1 = xfA;\r\n        xf2 = xfB;\r\n        edge1 = edgeA[0];\r\n        manifold.type = b2ManifoldType.e_faceA;\r\n        flip = 0;\r\n    }\r\n    const incidentEdge = b2CollidePolygons_s_incidentEdge;\r\n    b2FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\r\n    const count1 = poly1.m_count;\r\n    const vertices1 = poly1.m_vertices;\r\n    const iv1 = edge1;\r\n    const iv2 = (edge1 + 1) % count1;\r\n    const local_v11 = vertices1[iv1];\r\n    const local_v12 = vertices1[iv2];\r\n    const localTangent = b2Vec2.SubVV(local_v12, local_v11, b2CollidePolygons_s_localTangent);\r\n    localTangent.Normalize();\r\n    const localNormal = b2Vec2.CrossVOne(localTangent, b2CollidePolygons_s_localNormal);\r\n    const planePoint = b2Vec2.MidVV(local_v11, local_v12, b2CollidePolygons_s_planePoint);\r\n    const tangent = b2Rot.MulRV(xf1.q, localTangent, b2CollidePolygons_s_tangent);\r\n    const normal = b2Vec2.CrossVOne(tangent, b2CollidePolygons_s_normal);\r\n    const v11 = b2Transform.MulXV(xf1, local_v11, b2CollidePolygons_s_v11);\r\n    const v12 = b2Transform.MulXV(xf1, local_v12, b2CollidePolygons_s_v12);\r\n    // Face offset.\r\n    const frontOffset = b2Vec2.DotVV(normal, v11);\r\n    // Side offsets, extended by polytope skin thickness.\r\n    const sideOffset1 = -b2Vec2.DotVV(tangent, v11) + totalRadius;\r\n    const sideOffset2 = b2Vec2.DotVV(tangent, v12) + totalRadius;\r\n    // Clip incident edge against extruded edge1 side edges.\r\n    const clipPoints1 = b2CollidePolygons_s_clipPoints1;\r\n    const clipPoints2 = b2CollidePolygons_s_clipPoints2;\r\n    let np;\r\n    // Clip to box side 1\r\n    const ntangent = b2Vec2.NegV(tangent, b2CollidePolygons_s_ntangent);\r\n    np = b2ClipSegmentToLine(clipPoints1, incidentEdge, ntangent, sideOffset1, iv1);\r\n    if (np < 2) {\r\n        return;\r\n    }\r\n    // Clip to negative box side 1\r\n    np = b2ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\r\n    if (np < 2) {\r\n        return;\r\n    }\r\n    // Now clipPoints2 contains the clipped points.\r\n    manifold.localNormal.Copy(localNormal);\r\n    manifold.localPoint.Copy(planePoint);\r\n    let pointCount = 0;\r\n    for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n        const cv = clipPoints2[i];\r\n        const separation = b2Vec2.DotVV(normal, cv.v) - frontOffset;\r\n        if (separation <= totalRadius) {\r\n            const cp = manifold.points[pointCount];\r\n            b2Transform.MulTXV(xf2, cv.v, cp.localPoint);\r\n            cp.id.Copy(cv.id);\r\n            if (flip) {\r\n                // Swap features\r\n                const cf = cp.id.cf;\r\n                cp.id.cf.indexA = cf.indexB;\r\n                cp.id.cf.indexB = cf.indexA;\r\n                cp.id.cf.typeA = cf.typeB;\r\n                cp.id.cf.typeB = cf.typeA;\r\n            }\r\n            ++pointCount;\r\n        }\r\n    }\r\n    manifold.pointCount = pointCount;\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_maxFloat, b2_angularSlop, b2_maxManifoldPoints } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2ContactFeatureType, b2ContactID } from \"./b2Collision\";\r\nimport { b2ManifoldType, b2ClipVertex, b2ClipSegmentToLine } from \"./b2Collision\";\r\nconst b2CollideEdgeAndCircle_s_Q = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_d = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e1 = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_e2 = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_P = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_n = new b2Vec2();\r\nconst b2CollideEdgeAndCircle_s_id = new b2ContactID();\r\nexport function b2CollideEdgeAndCircle(manifold, edgeA, xfA, circleB, xfB) {\r\n    manifold.pointCount = 0;\r\n    // Compute circle in frame of edge\r\n    const Q = b2Transform.MulTXV(xfA, b2Transform.MulXV(xfB, circleB.m_p, b2Vec2.s_t0), b2CollideEdgeAndCircle_s_Q);\r\n    const A = edgeA.m_vertex1;\r\n    const B = edgeA.m_vertex2;\r\n    const e = b2Vec2.SubVV(B, A, b2CollideEdgeAndCircle_s_e);\r\n    // Barycentric coordinates\r\n    const u = b2Vec2.DotVV(e, b2Vec2.SubVV(B, Q, b2Vec2.s_t0));\r\n    const v = b2Vec2.DotVV(e, b2Vec2.SubVV(Q, A, b2Vec2.s_t0));\r\n    const radius = edgeA.m_radius + circleB.m_radius;\r\n    // const cf: b2ContactFeature = new b2ContactFeature();\r\n    const id = b2CollideEdgeAndCircle_s_id;\r\n    id.cf.indexB = 0;\r\n    id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n    // Region A\r\n    if (v <= 0) {\r\n        const P = A;\r\n        const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n        const dd = b2Vec2.DotVV(d, d);\r\n        if (dd > radius * radius) {\r\n            return;\r\n        }\r\n        // Is there an edge connected to A?\r\n        if (edgeA.m_hasVertex0) {\r\n            const A1 = edgeA.m_vertex0;\r\n            const B1 = A;\r\n            const e1 = b2Vec2.SubVV(B1, A1, b2CollideEdgeAndCircle_s_e1);\r\n            const u1 = b2Vec2.DotVV(e1, b2Vec2.SubVV(B1, Q, b2Vec2.s_t0));\r\n            // Is the circle in Region AB of the previous edge?\r\n            if (u1 > 0) {\r\n                return;\r\n            }\r\n        }\r\n        id.cf.indexA = 0;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_circles;\r\n        manifold.localNormal.SetZero();\r\n        manifold.localPoint.Copy(P);\r\n        manifold.points[0].id.Copy(id);\r\n        // manifold.points[0].id.key = 0;\r\n        // manifold.points[0].id.cf = cf;\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        return;\r\n    }\r\n    // Region B\r\n    if (u <= 0) {\r\n        const P = B;\r\n        const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n        const dd = b2Vec2.DotVV(d, d);\r\n        if (dd > radius * radius) {\r\n            return;\r\n        }\r\n        // Is there an edge connected to B?\r\n        if (edgeA.m_hasVertex3) {\r\n            const B2 = edgeA.m_vertex3;\r\n            const A2 = B;\r\n            const e2 = b2Vec2.SubVV(B2, A2, b2CollideEdgeAndCircle_s_e2);\r\n            const v2 = b2Vec2.DotVV(e2, b2Vec2.SubVV(Q, A2, b2Vec2.s_t0));\r\n            // Is the circle in Region AB of the next edge?\r\n            if (v2 > 0) {\r\n                return;\r\n            }\r\n        }\r\n        id.cf.indexA = 1;\r\n        id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n        manifold.pointCount = 1;\r\n        manifold.type = b2ManifoldType.e_circles;\r\n        manifold.localNormal.SetZero();\r\n        manifold.localPoint.Copy(P);\r\n        manifold.points[0].id.Copy(id);\r\n        // manifold.points[0].id.key = 0;\r\n        // manifold.points[0].id.cf = cf;\r\n        manifold.points[0].localPoint.Copy(circleB.m_p);\r\n        return;\r\n    }\r\n    // Region AB\r\n    const den = b2Vec2.DotVV(e, e);\r\n    // DEBUG: b2Assert(den > 0);\r\n    const P = b2CollideEdgeAndCircle_s_P;\r\n    P.x = (1 / den) * (u * A.x + v * B.x);\r\n    P.y = (1 / den) * (u * A.y + v * B.y);\r\n    const d = b2Vec2.SubVV(Q, P, b2CollideEdgeAndCircle_s_d);\r\n    const dd = b2Vec2.DotVV(d, d);\r\n    if (dd > radius * radius) {\r\n        return;\r\n    }\r\n    const n = b2CollideEdgeAndCircle_s_n.Set(-e.y, e.x);\r\n    if (b2Vec2.DotVV(n, b2Vec2.SubVV(Q, A, b2Vec2.s_t0)) < 0) {\r\n        n.Set(-n.x, -n.y);\r\n    }\r\n    n.Normalize();\r\n    id.cf.indexA = 0;\r\n    id.cf.typeA = b2ContactFeatureType.e_face;\r\n    manifold.pointCount = 1;\r\n    manifold.type = b2ManifoldType.e_faceA;\r\n    manifold.localNormal.Copy(n);\r\n    manifold.localPoint.Copy(A);\r\n    manifold.points[0].id.Copy(id);\r\n    // manifold.points[0].id.key = 0;\r\n    // manifold.points[0].id.cf = cf;\r\n    manifold.points[0].localPoint.Copy(circleB.m_p);\r\n}\r\nclass b2EPAxis {\r\n    constructor() {\r\n        this.type = 0 /* e_unknown */;\r\n        this.index = 0;\r\n        this.separation = 0;\r\n    }\r\n}\r\nclass b2TempPolygon {\r\n    constructor() {\r\n        this.vertices = [];\r\n        this.normals = [];\r\n        this.count = 0;\r\n    }\r\n}\r\nclass b2ReferenceFace {\r\n    constructor() {\r\n        this.i1 = 0;\r\n        this.i2 = 0;\r\n        this.v1 = new b2Vec2();\r\n        this.v2 = new b2Vec2();\r\n        this.normal = new b2Vec2();\r\n        this.sideNormal1 = new b2Vec2();\r\n        this.sideOffset1 = 0;\r\n        this.sideNormal2 = new b2Vec2();\r\n        this.sideOffset2 = 0;\r\n    }\r\n}\r\nclass b2EPCollider {\r\n    constructor() {\r\n        this.m_polygonB = new b2TempPolygon();\r\n        this.m_xf = new b2Transform();\r\n        this.m_centroidB = new b2Vec2();\r\n        this.m_v0 = new b2Vec2();\r\n        this.m_v1 = new b2Vec2();\r\n        this.m_v2 = new b2Vec2();\r\n        this.m_v3 = new b2Vec2();\r\n        this.m_normal0 = new b2Vec2();\r\n        this.m_normal1 = new b2Vec2();\r\n        this.m_normal2 = new b2Vec2();\r\n        this.m_normal = new b2Vec2();\r\n        this.m_type1 = 0 /* e_isolated */;\r\n        this.m_type2 = 0 /* e_isolated */;\r\n        this.m_lowerLimit = new b2Vec2();\r\n        this.m_upperLimit = new b2Vec2();\r\n        this.m_radius = 0;\r\n        this.m_front = false;\r\n    }\r\n    Collide(manifold, edgeA, xfA, polygonB, xfB) {\r\n        b2Transform.MulTXX(xfA, xfB, this.m_xf);\r\n        b2Transform.MulXV(this.m_xf, polygonB.m_centroid, this.m_centroidB);\r\n        this.m_v0.Copy(edgeA.m_vertex0);\r\n        this.m_v1.Copy(edgeA.m_vertex1);\r\n        this.m_v2.Copy(edgeA.m_vertex2);\r\n        this.m_v3.Copy(edgeA.m_vertex3);\r\n        const hasVertex0 = edgeA.m_hasVertex0;\r\n        const hasVertex3 = edgeA.m_hasVertex3;\r\n        const edge1 = b2Vec2.SubVV(this.m_v2, this.m_v1, b2EPCollider.s_edge1);\r\n        edge1.Normalize();\r\n        this.m_normal1.Set(edge1.y, -edge1.x);\r\n        const offset1 = b2Vec2.DotVV(this.m_normal1, b2Vec2.SubVV(this.m_centroidB, this.m_v1, b2Vec2.s_t0));\r\n        let offset0 = 0;\r\n        let offset2 = 0;\r\n        let convex1 = false;\r\n        let convex2 = false;\r\n        // Is there a preceding edge?\r\n        if (hasVertex0) {\r\n            const edge0 = b2Vec2.SubVV(this.m_v1, this.m_v0, b2EPCollider.s_edge0);\r\n            edge0.Normalize();\r\n            this.m_normal0.Set(edge0.y, -edge0.x);\r\n            convex1 = b2Vec2.CrossVV(edge0, edge1) >= 0;\r\n            offset0 = b2Vec2.DotVV(this.m_normal0, b2Vec2.SubVV(this.m_centroidB, this.m_v0, b2Vec2.s_t0));\r\n        }\r\n        // Is there a following edge?\r\n        if (hasVertex3) {\r\n            const edge2 = b2Vec2.SubVV(this.m_v3, this.m_v2, b2EPCollider.s_edge2);\r\n            edge2.Normalize();\r\n            this.m_normal2.Set(edge2.y, -edge2.x);\r\n            convex2 = b2Vec2.CrossVV(edge1, edge2) > 0;\r\n            offset2 = b2Vec2.DotVV(this.m_normal2, b2Vec2.SubVV(this.m_centroidB, this.m_v2, b2Vec2.s_t0));\r\n        }\r\n        // Determine front or back collision. Determine collision normal limits.\r\n        if (hasVertex0 && hasVertex3) {\r\n            if (convex1 && convex2) {\r\n                this.m_front = offset0 >= 0 || offset1 >= 0 || offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else if (convex1) {\r\n                this.m_front = offset0 >= 0 || (offset1 >= 0 && offset2 >= 0);\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else if (convex2) {\r\n                this.m_front = offset2 >= 0 || (offset0 >= 0 && offset1 >= 0);\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset0 >= 0 && offset1 >= 0 && offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n        }\r\n        else if (hasVertex0) {\r\n            if (convex1) {\r\n                this.m_front = offset0 >= 0 || offset1 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal0);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset0 >= 0 && offset1 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1);\r\n                    this.m_upperLimit.Copy(this.m_normal0).SelfNeg();\r\n                }\r\n            }\r\n        }\r\n        else if (hasVertex3) {\r\n            if (convex2) {\r\n                this.m_front = offset1 >= 0 || offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal2);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n            }\r\n            else {\r\n                this.m_front = offset1 >= 0 && offset2 >= 0;\r\n                if (this.m_front) {\r\n                    this.m_normal.Copy(this.m_normal1);\r\n                    this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n                else {\r\n                    this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                    this.m_lowerLimit.Copy(this.m_normal2).SelfNeg();\r\n                    this.m_upperLimit.Copy(this.m_normal1);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.m_front = offset1 >= 0;\r\n            if (this.m_front) {\r\n                this.m_normal.Copy(this.m_normal1);\r\n                this.m_lowerLimit.Copy(this.m_normal1).SelfNeg();\r\n                this.m_upperLimit.Copy(this.m_normal1).SelfNeg();\r\n            }\r\n            else {\r\n                this.m_normal.Copy(this.m_normal1).SelfNeg();\r\n                this.m_lowerLimit.Copy(this.m_normal1);\r\n                this.m_upperLimit.Copy(this.m_normal1);\r\n            }\r\n        }\r\n        // Get polygonB in frameA\r\n        this.m_polygonB.count = polygonB.m_count;\r\n        for (let i = 0; i < polygonB.m_count; ++i) {\r\n            if (this.m_polygonB.vertices.length <= i) {\r\n                this.m_polygonB.vertices.push(new b2Vec2());\r\n            }\r\n            if (this.m_polygonB.normals.length <= i) {\r\n                this.m_polygonB.normals.push(new b2Vec2());\r\n            }\r\n            b2Transform.MulXV(this.m_xf, polygonB.m_vertices[i], this.m_polygonB.vertices[i]);\r\n            b2Rot.MulRV(this.m_xf.q, polygonB.m_normals[i], this.m_polygonB.normals[i]);\r\n        }\r\n        this.m_radius = polygonB.m_radius + edgeA.m_radius;\r\n        manifold.pointCount = 0;\r\n        const edgeAxis = this.ComputeEdgeSeparation(b2EPCollider.s_edgeAxis);\r\n        // If no valid normal can be found than this edge should not collide.\r\n        if (edgeAxis.type === 0 /* e_unknown */) {\r\n            return;\r\n        }\r\n        if (edgeAxis.separation > this.m_radius) {\r\n            return;\r\n        }\r\n        const polygonAxis = this.ComputePolygonSeparation(b2EPCollider.s_polygonAxis);\r\n        if (polygonAxis.type !== 0 /* e_unknown */ && polygonAxis.separation > this.m_radius) {\r\n            return;\r\n        }\r\n        // Use hysteresis for jitter reduction.\r\n        const k_relativeTol = 0.98;\r\n        const k_absoluteTol = 0.001;\r\n        let primaryAxis;\r\n        if (polygonAxis.type === 0 /* e_unknown */) {\r\n            primaryAxis = edgeAxis;\r\n        }\r\n        else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\r\n            primaryAxis = polygonAxis;\r\n        }\r\n        else {\r\n            primaryAxis = edgeAxis;\r\n        }\r\n        const ie = b2EPCollider.s_ie;\r\n        const rf = b2EPCollider.s_rf;\r\n        if (primaryAxis.type === 1 /* e_edgeA */) {\r\n            manifold.type = b2ManifoldType.e_faceA;\r\n            // Search for the polygon normal that is most anti-parallel to the edge normal.\r\n            let bestIndex = 0;\r\n            let bestValue = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[0]);\r\n            for (let i = 1; i < this.m_polygonB.count; ++i) {\r\n                const value = b2Vec2.DotVV(this.m_normal, this.m_polygonB.normals[i]);\r\n                if (value < bestValue) {\r\n                    bestValue = value;\r\n                    bestIndex = i;\r\n                }\r\n            }\r\n            const i1 = bestIndex;\r\n            const i2 = (i1 + 1) % this.m_polygonB.count;\r\n            const ie0 = ie[0];\r\n            ie0.v.Copy(this.m_polygonB.vertices[i1]);\r\n            ie0.id.cf.indexA = 0;\r\n            ie0.id.cf.indexB = i1;\r\n            ie0.id.cf.typeA = b2ContactFeatureType.e_face;\r\n            ie0.id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n            const ie1 = ie[1];\r\n            ie1.v.Copy(this.m_polygonB.vertices[i2]);\r\n            ie1.id.cf.indexA = 0;\r\n            ie1.id.cf.indexB = i2;\r\n            ie1.id.cf.typeA = b2ContactFeatureType.e_face;\r\n            ie1.id.cf.typeB = b2ContactFeatureType.e_vertex;\r\n            if (this.m_front) {\r\n                rf.i1 = 0;\r\n                rf.i2 = 1;\r\n                rf.v1.Copy(this.m_v1);\r\n                rf.v2.Copy(this.m_v2);\r\n                rf.normal.Copy(this.m_normal1);\r\n            }\r\n            else {\r\n                rf.i1 = 1;\r\n                rf.i2 = 0;\r\n                rf.v1.Copy(this.m_v2);\r\n                rf.v2.Copy(this.m_v1);\r\n                rf.normal.Copy(this.m_normal1).SelfNeg();\r\n            }\r\n        }\r\n        else {\r\n            manifold.type = b2ManifoldType.e_faceB;\r\n            const ie0 = ie[0];\r\n            ie0.v.Copy(this.m_v1);\r\n            ie0.id.cf.indexA = 0;\r\n            ie0.id.cf.indexB = primaryAxis.index;\r\n            ie0.id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n            ie0.id.cf.typeB = b2ContactFeatureType.e_face;\r\n            const ie1 = ie[1];\r\n            ie1.v.Copy(this.m_v2);\r\n            ie1.id.cf.indexA = 0;\r\n            ie1.id.cf.indexB = primaryAxis.index;\r\n            ie1.id.cf.typeA = b2ContactFeatureType.e_vertex;\r\n            ie1.id.cf.typeB = b2ContactFeatureType.e_face;\r\n            rf.i1 = primaryAxis.index;\r\n            rf.i2 = (rf.i1 + 1) % this.m_polygonB.count;\r\n            rf.v1.Copy(this.m_polygonB.vertices[rf.i1]);\r\n            rf.v2.Copy(this.m_polygonB.vertices[rf.i2]);\r\n            rf.normal.Copy(this.m_polygonB.normals[rf.i1]);\r\n        }\r\n        rf.sideNormal1.Set(rf.normal.y, -rf.normal.x);\r\n        rf.sideNormal2.Copy(rf.sideNormal1).SelfNeg();\r\n        rf.sideOffset1 = b2Vec2.DotVV(rf.sideNormal1, rf.v1);\r\n        rf.sideOffset2 = b2Vec2.DotVV(rf.sideNormal2, rf.v2);\r\n        // Clip incident edge against extruded edge1 side edges.\r\n        const clipPoints1 = b2EPCollider.s_clipPoints1;\r\n        const clipPoints2 = b2EPCollider.s_clipPoints2;\r\n        let np = 0;\r\n        // Clip to box side 1\r\n        np = b2ClipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\r\n        if (np < b2_maxManifoldPoints) {\r\n            return;\r\n        }\r\n        // Clip to negative box side 1\r\n        np = b2ClipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\r\n        if (np < b2_maxManifoldPoints) {\r\n            return;\r\n        }\r\n        // Now clipPoints2 contains the clipped points.\r\n        if (primaryAxis.type === 1 /* e_edgeA */) {\r\n            manifold.localNormal.Copy(rf.normal);\r\n            manifold.localPoint.Copy(rf.v1);\r\n        }\r\n        else {\r\n            manifold.localNormal.Copy(polygonB.m_normals[rf.i1]);\r\n            manifold.localPoint.Copy(polygonB.m_vertices[rf.i1]);\r\n        }\r\n        let pointCount = 0;\r\n        for (let i = 0; i < b2_maxManifoldPoints; ++i) {\r\n            let separation;\r\n            separation = b2Vec2.DotVV(rf.normal, b2Vec2.SubVV(clipPoints2[i].v, rf.v1, b2Vec2.s_t0));\r\n            if (separation <= this.m_radius) {\r\n                const cp = manifold.points[pointCount];\r\n                if (primaryAxis.type === 1 /* e_edgeA */) {\r\n                    b2Transform.MulTXV(this.m_xf, clipPoints2[i].v, cp.localPoint);\r\n                    cp.id = clipPoints2[i].id;\r\n                }\r\n                else {\r\n                    cp.localPoint.Copy(clipPoints2[i].v);\r\n                    cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\r\n                    cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\r\n                    cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\r\n                    cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\r\n                }\r\n                ++pointCount;\r\n            }\r\n        }\r\n        manifold.pointCount = pointCount;\r\n    }\r\n    ComputeEdgeSeparation(out) {\r\n        const axis = out;\r\n        axis.type = 1 /* e_edgeA */;\r\n        axis.index = this.m_front ? 0 : 1;\r\n        axis.separation = b2_maxFloat;\r\n        for (let i = 0; i < this.m_polygonB.count; ++i) {\r\n            const s = b2Vec2.DotVV(this.m_normal, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));\r\n            if (s < axis.separation) {\r\n                axis.separation = s;\r\n            }\r\n        }\r\n        return axis;\r\n    }\r\n    ComputePolygonSeparation(out) {\r\n        const axis = out;\r\n        axis.type = 0 /* e_unknown */;\r\n        axis.index = -1;\r\n        axis.separation = -b2_maxFloat;\r\n        const perp = b2EPCollider.s_perp.Set(-this.m_normal.y, this.m_normal.x);\r\n        for (let i = 0; i < this.m_polygonB.count; ++i) {\r\n            const n = b2Vec2.NegV(this.m_polygonB.normals[i], b2EPCollider.s_n);\r\n            const s1 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v1, b2Vec2.s_t0));\r\n            const s2 = b2Vec2.DotVV(n, b2Vec2.SubVV(this.m_polygonB.vertices[i], this.m_v2, b2Vec2.s_t0));\r\n            const s = b2Min(s1, s2);\r\n            if (s > this.m_radius) {\r\n                // No collision\r\n                axis.type = 2 /* e_edgeB */;\r\n                axis.index = i;\r\n                axis.separation = s;\r\n                return axis;\r\n            }\r\n            // Adjacency\r\n            if (b2Vec2.DotVV(n, perp) >= 0) {\r\n                if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_upperLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) {\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                if (b2Vec2.DotVV(b2Vec2.SubVV(n, this.m_lowerLimit, b2Vec2.s_t0), this.m_normal) < -b2_angularSlop) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (s > axis.separation) {\r\n                axis.type = 2 /* e_edgeB */;\r\n                axis.index = i;\r\n                axis.separation = s;\r\n            }\r\n        }\r\n        return axis;\r\n    }\r\n}\r\nb2EPCollider.s_edge1 = new b2Vec2();\r\nb2EPCollider.s_edge0 = new b2Vec2();\r\nb2EPCollider.s_edge2 = new b2Vec2();\r\nb2EPCollider.s_ie = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_rf = new b2ReferenceFace();\r\nb2EPCollider.s_clipPoints1 = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_clipPoints2 = b2ClipVertex.MakeArray(2);\r\nb2EPCollider.s_edgeAxis = new b2EPAxis();\r\nb2EPCollider.s_polygonAxis = new b2EPAxis();\r\nb2EPCollider.s_n = new b2Vec2();\r\nb2EPCollider.s_perp = new b2Vec2();\r\nconst b2CollideEdgeAndPolygon_s_collider = new b2EPCollider();\r\nexport function b2CollideEdgeAndPolygon(manifold, edgeA, xfA, polygonB, xfB) {\r\n    const collider = b2CollideEdgeAndPolygon_s_collider;\r\n    collider.Collide(manifold, edgeA, xfA, polygonB, xfB);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../../Common/b2Math\";\r\n/// This holds the mass data computed for a shape.\r\nexport class b2MassData {\r\n    constructor() {\r\n        /// The mass of the shape, usually in kilograms.\r\n        this.mass = 0;\r\n        /// The position of the shape's centroid relative to the shape's origin.\r\n        this.center = new b2Vec2(0, 0);\r\n        /// The rotational inertia of the shape about the local origin.\r\n        this.I = 0;\r\n    }\r\n}\r\nexport var b2ShapeType;\r\n(function (b2ShapeType) {\r\n    b2ShapeType[b2ShapeType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2ShapeType[b2ShapeType[\"e_circleShape\"] = 0] = \"e_circleShape\";\r\n    b2ShapeType[b2ShapeType[\"e_edgeShape\"] = 1] = \"e_edgeShape\";\r\n    b2ShapeType[b2ShapeType[\"e_polygonShape\"] = 2] = \"e_polygonShape\";\r\n    b2ShapeType[b2ShapeType[\"e_chainShape\"] = 3] = \"e_chainShape\";\r\n    b2ShapeType[b2ShapeType[\"e_shapeTypeCount\"] = 4] = \"e_shapeTypeCount\";\r\n})(b2ShapeType || (b2ShapeType = {}));\r\n/// A shape is used for collision detection. You can create a shape however you like.\r\n/// Shapes used for simulation in b2World are created automatically when a b2Fixture\r\n/// is created. Shapes may encapsulate a one or more child shapes.\r\nexport class b2Shape {\r\n    constructor(type, radius) {\r\n        this.m_type = b2ShapeType.e_unknown;\r\n        /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for\r\n        /// making rounded polygons.\r\n        this.m_radius = 0;\r\n        this.m_type = type;\r\n        this.m_radius = radius;\r\n    }\r\n    Copy(other) {\r\n        // DEBUG: b2Assert(this.m_type === other.m_type);\r\n        this.m_radius = other.m_radius;\r\n        return this;\r\n    }\r\n    /// Get the type of this shape. You can use this to down cast to the concrete shape.\r\n    /// @return the shape type.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0NvbGxpc2lvbi9TaGFwZXMvYjJTaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFlLE1BQU0scUJBQXFCLENBQUM7QUFJMUQsa0RBQWtEO0FBQ2xELE1BQU0sT0FBTyxVQUFVO0lBQXZCO1FBQ0UsZ0RBQWdEO1FBQ3pDLFNBQUksR0FBVyxDQUFDLENBQUM7UUFFeEIsd0VBQXdFO1FBQ3hELFdBQU0sR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEQsK0RBQStEO1FBQ3hELE1BQUMsR0FBVyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUFBO0FBRUQsTUFBTSxDQUFOLElBQVksV0FPWDtBQVBELFdBQVksV0FBVztJQUNyQix3REFBYyxDQUFBO0lBQ2QsK0RBQWlCLENBQUE7SUFDakIsMkRBQWUsQ0FBQTtJQUNmLGlFQUFrQixDQUFBO0lBQ2xCLDZEQUFnQixDQUFBO0lBQ2hCLHFFQUFvQixDQUFBO0FBQ3RCLENBQUMsRUFQVyxXQUFXLEtBQVgsV0FBVyxRQU90QjtBQUVELHFGQUFxRjtBQUNyRixvRkFBb0Y7QUFDcEYsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBZ0IsT0FBTztJQU8zQixZQUFZLElBQWlCLEVBQUUsTUFBYztRQU50QyxXQUFNLEdBQWdCLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFFcEQsa0dBQWtHO1FBQ2xHLDRCQUE0QjtRQUNwQixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBRzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFLTSxJQUFJLENBQUMsS0FBYztRQUN4QixpREFBaUQ7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELG9GQUFvRjtJQUNwRiwyQkFBMkI7SUFDcEIsT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0NBMkNGIn0=","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../Common/b2Math\";\r\nimport { b2Maybe } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Shape, b2MassData } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2Fixture, b2FixtureDef } from \"./b2Fixture\";\r\n// #endif\r\n/// The body type.\r\n/// static: zero mass, zero velocity, may be manually moved\r\n/// kinematic: zero mass, non-zero velocity set by user, moved by solver\r\n/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver\r\nexport var b2BodyType;\r\n(function (b2BodyType) {\r\n    b2BodyType[b2BodyType[\"b2_unknown\"] = -1] = \"b2_unknown\";\r\n    b2BodyType[b2BodyType[\"b2_staticBody\"] = 0] = \"b2_staticBody\";\r\n    b2BodyType[b2BodyType[\"b2_kinematicBody\"] = 1] = \"b2_kinematicBody\";\r\n    b2BodyType[b2BodyType[\"b2_dynamicBody\"] = 2] = \"b2_dynamicBody\";\r\n    // TODO_ERIN\r\n    // b2_bulletBody = 3\r\n})(b2BodyType || (b2BodyType = {}));\r\n/// A body definition holds all the data needed to construct a rigid body.\r\n/// You can safely re-use body definitions. Shapes are added to a body after construction.\r\nexport class b2BodyDef {\r\n    constructor() {\r\n        /// The body type: static, kinematic, or dynamic.\r\n        /// Note: if a dynamic body would have zero mass, the mass is set to one.\r\n        this.type = b2BodyType.b2_staticBody;\r\n        /// The world position of the body. Avoid creating bodies at the origin\r\n        /// since this can lead to many overlapping shapes.\r\n        this.position = new b2Vec2(0, 0);\r\n        /// The world angle of the body in radians.\r\n        this.angle = 0;\r\n        /// The linear velocity of the body's origin in world co-ordinates.\r\n        this.linearVelocity = new b2Vec2(0, 0);\r\n        /// The angular velocity of the body.\r\n        this.angularVelocity = 0;\r\n        /// Linear damping is use to reduce the linear velocity. The damping parameter\r\n        /// can be larger than 1.0f but the damping effect becomes sensitive to the\r\n        /// time step when the damping parameter is large.\r\n        this.linearDamping = 0;\r\n        /// Angular damping is use to reduce the angular velocity. The damping parameter\r\n        /// can be larger than 1.0f but the damping effect becomes sensitive to the\r\n        /// time step when the damping parameter is large.\r\n        this.angularDamping = 0;\r\n        /// Set this flag to false if this body should never fall asleep. Note that\r\n        /// this increases CPU usage.\r\n        this.allowSleep = true;\r\n        /// Is this body initially awake or sleeping?\r\n        this.awake = true;\r\n        /// Should this body be prevented from rotating? Useful for characters.\r\n        this.fixedRotation = false;\r\n        /// Is this a fast moving body that should be prevented from tunneling through\r\n        /// other moving bodies? Note that all bodies are prevented from tunneling through\r\n        /// kinematic and static bodies. This setting is only considered on dynamic bodies.\r\n        /// @warning You should use this flag sparingly since it increases processing time.\r\n        this.bullet = false;\r\n        /// Does this body start out active?\r\n        this.active = true;\r\n        /// Use this to store application specific body data.\r\n        this.userData = null;\r\n        /// Scale the gravity applied to this body.\r\n        this.gravityScale = 1;\r\n    }\r\n}\r\n/// A rigid body. These are created via b2World::CreateBody.\r\nexport class b2Body {\r\n    // #endif\r\n    constructor(bd, world) {\r\n        this.m_type = b2BodyType.b2_staticBody;\r\n        this.m_islandFlag = false;\r\n        this.m_awakeFlag = false;\r\n        this.m_autoSleepFlag = false;\r\n        this.m_bulletFlag = false;\r\n        this.m_fixedRotationFlag = false;\r\n        this.m_activeFlag = false;\r\n        this.m_toiFlag = false;\r\n        this.m_islandIndex = 0;\r\n        this.m_xf = new b2Transform(); // the body origin transform\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0 = new b2Transform();\r\n        // #endif\r\n        this.m_sweep = new b2Sweep(); // the swept motion for CCD\r\n        this.m_linearVelocity = new b2Vec2();\r\n        this.m_angularVelocity = 0;\r\n        this.m_force = new b2Vec2();\r\n        this.m_torque = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_fixtureList = null;\r\n        this.m_fixtureCount = 0;\r\n        this.m_jointList = null;\r\n        this.m_contactList = null;\r\n        this.m_mass = 1;\r\n        this.m_invMass = 1;\r\n        // Rotational inertia about the center of mass.\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_linearDamping = 0;\r\n        this.m_angularDamping = 0;\r\n        this.m_gravityScale = 1;\r\n        this.m_sleepTime = 0;\r\n        this.m_userData = null;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        this.m_bulletFlag = b2Maybe(bd.bullet, false);\r\n        this.m_fixedRotationFlag = b2Maybe(bd.fixedRotation, false);\r\n        this.m_autoSleepFlag = b2Maybe(bd.allowSleep, true);\r\n        this.m_awakeFlag = b2Maybe(bd.awake, true);\r\n        this.m_activeFlag = b2Maybe(bd.active, true);\r\n        this.m_world = world;\r\n        this.m_xf.p.Copy(b2Maybe(bd.position, b2Vec2.ZERO));\r\n        // DEBUG: b2Assert(this.m_xf.p.IsValid());\r\n        this.m_xf.q.SetAngle(b2Maybe(bd.angle, 0));\r\n        // DEBUG: b2Assert(b2IsValid(this.m_xf.q.GetAngle()));\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0.Copy(this.m_xf);\r\n        // #endif\r\n        this.m_sweep.localCenter.SetZero();\r\n        this.m_sweep.c0.Copy(this.m_xf.p);\r\n        this.m_sweep.c.Copy(this.m_xf.p);\r\n        this.m_sweep.a0 = this.m_sweep.a = this.m_xf.q.GetAngle();\r\n        this.m_sweep.alpha0 = 0;\r\n        this.m_linearVelocity.Copy(b2Maybe(bd.linearVelocity, b2Vec2.ZERO));\r\n        // DEBUG: b2Assert(this.m_linearVelocity.IsValid());\r\n        this.m_angularVelocity = b2Maybe(bd.angularVelocity, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_angularVelocity));\r\n        this.m_linearDamping = b2Maybe(bd.linearDamping, 0);\r\n        this.m_angularDamping = b2Maybe(bd.angularDamping, 0);\r\n        this.m_gravityScale = b2Maybe(bd.gravityScale, 1);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_gravityScale) && this.m_gravityScale >= 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_angularDamping) && this.m_angularDamping >= 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_linearDamping) && this.m_linearDamping >= 0);\r\n        this.m_force.SetZero();\r\n        this.m_torque = 0;\r\n        this.m_sleepTime = 0;\r\n        this.m_type = b2Maybe(bd.type, b2BodyType.b2_staticBody);\r\n        if (bd.type === b2BodyType.b2_dynamicBody) {\r\n            this.m_mass = 1;\r\n            this.m_invMass = 1;\r\n        }\r\n        else {\r\n            this.m_mass = 0;\r\n            this.m_invMass = 0;\r\n        }\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_userData = bd.userData;\r\n        this.m_fixtureList = null;\r\n        this.m_fixtureCount = 0;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        // #endif\r\n    }\r\n    CreateFixture(a, b = 0) {\r\n        if (a instanceof b2Shape) {\r\n            return this.CreateFixtureShapeDensity(a, b);\r\n        }\r\n        else {\r\n            return this.CreateFixtureDef(a);\r\n        }\r\n    }\r\n    /// Creates a fixture and attach it to this body. Use this function if you need\r\n    /// to set some fixture parameters, like friction. Otherwise you can create the\r\n    /// fixture directly from a shape.\r\n    /// If the density is non-zero, this function automatically updates the mass of the body.\r\n    /// Contacts are not created until the next time step.\r\n    /// @param def the fixture definition.\r\n    /// @warning This function is locked during callbacks.\r\n    CreateFixtureDef(def) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const fixture = new b2Fixture(def, this);\r\n        fixture.Create(def);\r\n        if (this.m_activeFlag) {\r\n            fixture.CreateProxies(this.m_xf);\r\n        }\r\n        fixture.m_next = this.m_fixtureList;\r\n        this.m_fixtureList = fixture;\r\n        ++this.m_fixtureCount;\r\n        // fixture.m_body = this;\r\n        // Adjust mass properties if needed.\r\n        if (fixture.m_density > 0) {\r\n            this.ResetMassData();\r\n        }\r\n        // Let the world know we have a new fixture. This will cause new contacts\r\n        // to be created at the beginning of the next time step.\r\n        this.m_world.m_newFixture = true;\r\n        return fixture;\r\n    }\r\n    CreateFixtureShapeDensity(shape, density = 0) {\r\n        const def = b2Body.CreateFixtureShapeDensity_s_def;\r\n        def.shape = shape;\r\n        def.density = density;\r\n        return this.CreateFixtureDef(def);\r\n    }\r\n    /// Destroy a fixture. This removes the fixture from the broad-phase and\r\n    /// destroys all contacts associated with this fixture. This will\r\n    /// automatically adjust the mass of the body if the body is dynamic and the\r\n    /// fixture has positive density.\r\n    /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.\r\n    /// @param fixture the fixture to be removed.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyFixture(fixture) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        // DEBUG: b2Assert(fixture.m_body === this);\r\n        // Remove the fixture from this body's singly linked list.\r\n        // DEBUG: b2Assert(this.m_fixtureCount > 0);\r\n        let node = this.m_fixtureList;\r\n        let ppF = null;\r\n        // DEBUG: let found: boolean = false;\r\n        while (node !== null) {\r\n            if (node === fixture) {\r\n                if (ppF) {\r\n                    ppF.m_next = fixture.m_next;\r\n                }\r\n                else {\r\n                    this.m_fixtureList = fixture.m_next;\r\n                }\r\n                // DEBUG: found = true;\r\n                break;\r\n            }\r\n            ppF = node;\r\n            node = node.m_next;\r\n        }\r\n        // You tried to remove a shape that is not attached to this body.\r\n        // DEBUG: b2Assert(found);\r\n        // Destroy any contacts associated with the fixture.\r\n        let edge = this.m_contactList;\r\n        while (edge) {\r\n            const c = edge.contact;\r\n            edge = edge.next;\r\n            const fixtureA = c.GetFixtureA();\r\n            const fixtureB = c.GetFixtureB();\r\n            if (fixture === fixtureA || fixture === fixtureB) {\r\n                // This destroys the contact and removes it from\r\n                // this body's contact list.\r\n                this.m_world.m_contactManager.Destroy(c);\r\n            }\r\n        }\r\n        if (this.m_activeFlag) {\r\n            fixture.DestroyProxies();\r\n        }\r\n        // fixture.m_body = null;\r\n        fixture.m_next = null;\r\n        fixture.Destroy();\r\n        --this.m_fixtureCount;\r\n        // Reset the mass data.\r\n        this.ResetMassData();\r\n    }\r\n    /// Set the position of the body's origin and rotation.\r\n    /// This breaks any contacts and wakes the other bodies.\r\n    /// Manipulating a body's transform may cause non-physical behavior.\r\n    /// @param position the world position of the body's local origin.\r\n    /// @param angle the world rotation in radians.\r\n    SetTransformVec(position, angle) {\r\n        this.SetTransformXY(position.x, position.y, angle);\r\n    }\r\n    SetTransformXY(x, y, angle) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        this.m_xf.q.SetAngle(angle);\r\n        this.m_xf.p.Set(x, y);\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_xf0.Copy(this.m_xf);\r\n        // #endif\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.a = angle;\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        this.m_sweep.a0 = angle;\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            f.Synchronize(this.m_xf, this.m_xf);\r\n        }\r\n        this.m_world.m_contactManager.FindNewContacts();\r\n    }\r\n    SetTransform(xf) {\r\n        this.SetTransformVec(xf.p, xf.GetAngle());\r\n    }\r\n    /// Get the body transform for the body's origin.\r\n    /// @return the world transform of the body's origin.\r\n    GetTransform() {\r\n        return this.m_xf;\r\n    }\r\n    /// Get the world body origin position.\r\n    /// @return the world position of the body's origin.\r\n    GetPosition() {\r\n        return this.m_xf.p;\r\n    }\r\n    SetPosition(position) {\r\n        this.SetTransformVec(position, this.GetAngle());\r\n    }\r\n    SetPositionXY(x, y) {\r\n        this.SetTransformXY(x, y, this.GetAngle());\r\n    }\r\n    /// Get the angle in radians.\r\n    /// @return the current world rotation angle in radians.\r\n    GetAngle() {\r\n        return this.m_sweep.a;\r\n    }\r\n    SetAngle(angle) {\r\n        this.SetTransformVec(this.GetPosition(), angle);\r\n    }\r\n    /// Get the world position of the center of mass.\r\n    GetWorldCenter() {\r\n        return this.m_sweep.c;\r\n    }\r\n    /// Get the local position of the center of mass.\r\n    GetLocalCenter() {\r\n        return this.m_sweep.localCenter;\r\n    }\r\n    /// Set the linear velocity of the center of mass.\r\n    /// @param v the new linear velocity of the center of mass.\r\n    SetLinearVelocity(v) {\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            return;\r\n        }\r\n        if (b2Vec2.DotVV(v, v) > 0) {\r\n            this.SetAwake(true);\r\n        }\r\n        this.m_linearVelocity.Copy(v);\r\n    }\r\n    /// Get the linear velocity of the center of mass.\r\n    /// @return the linear velocity of the center of mass.\r\n    GetLinearVelocity() {\r\n        return this.m_linearVelocity;\r\n    }\r\n    /// Set the angular velocity.\r\n    /// @param omega the new angular velocity in radians/second.\r\n    SetAngularVelocity(w) {\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            return;\r\n        }\r\n        if (w * w > 0) {\r\n            this.SetAwake(true);\r\n        }\r\n        this.m_angularVelocity = w;\r\n    }\r\n    /// Get the angular velocity.\r\n    /// @return the angular velocity in radians/second.\r\n    GetAngularVelocity() {\r\n        return this.m_angularVelocity;\r\n    }\r\n    GetDefinition(bd) {\r\n        bd.type = this.GetType();\r\n        bd.allowSleep = this.m_autoSleepFlag;\r\n        bd.angle = this.GetAngle();\r\n        bd.angularDamping = this.m_angularDamping;\r\n        bd.gravityScale = this.m_gravityScale;\r\n        bd.angularVelocity = this.m_angularVelocity;\r\n        bd.fixedRotation = this.m_fixedRotationFlag;\r\n        bd.bullet = this.m_bulletFlag;\r\n        bd.awake = this.m_awakeFlag;\r\n        bd.linearDamping = this.m_linearDamping;\r\n        bd.linearVelocity.Copy(this.GetLinearVelocity());\r\n        bd.position.Copy(this.GetPosition());\r\n        bd.userData = this.GetUserData();\r\n        return bd;\r\n    }\r\n    /// Apply a force at a world point. If the force is not\r\n    /// applied at the center of mass, it will generate a torque and\r\n    /// affect the angular velocity. This wakes up the body.\r\n    /// @param force the world force vector, usually in Newtons (N).\r\n    /// @param point the world position of the point of application.\r\n    /// @param wake also wake up the body\r\n    ApplyForce(force, point, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_force.x += force.x;\r\n            this.m_force.y += force.y;\r\n            this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);\r\n        }\r\n    }\r\n    /// Apply a force to the center of mass. This wakes up the body.\r\n    /// @param force the world force vector, usually in Newtons (N).\r\n    /// @param wake also wake up the body\r\n    ApplyForceToCenter(force, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_force.x += force.x;\r\n            this.m_force.y += force.y;\r\n        }\r\n    }\r\n    /// Apply a torque. This affects the angular velocity\r\n    /// without affecting the linear velocity of the center of mass.\r\n    /// @param torque about the z-axis (out of the screen), usually in N-m.\r\n    /// @param wake also wake up the body\r\n    ApplyTorque(torque, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_torque += torque;\r\n        }\r\n    }\r\n    /// Apply an impulse at a point. This immediately modifies the velocity.\r\n    /// It also modifies the angular velocity if the point of application\r\n    /// is not at the center of mass. This wakes up the body.\r\n    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n    /// @param point the world position of the point of application.\r\n    /// @param wake also wake up the body\r\n    ApplyLinearImpulse(impulse, point, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\r\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\r\n            this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);\r\n        }\r\n    }\r\n    /// Apply an impulse at the center of gravity. This immediately modifies the velocity.\r\n    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n    /// @param wake also wake up the body\r\n    ApplyLinearImpulseToCenter(impulse, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_linearVelocity.x += this.m_invMass * impulse.x;\r\n            this.m_linearVelocity.y += this.m_invMass * impulse.y;\r\n        }\r\n    }\r\n    /// Apply an angular impulse.\r\n    /// @param impulse the angular impulse in units of kg*m*m/s\r\n    /// @param wake also wake up the body\r\n    ApplyAngularImpulse(impulse, wake = true) {\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        if (wake && !this.m_awakeFlag) {\r\n            this.SetAwake(true);\r\n        }\r\n        // Don't accumulate a force if the body is sleeping.\r\n        if (this.m_awakeFlag) {\r\n            this.m_angularVelocity += this.m_invI * impulse;\r\n        }\r\n    }\r\n    /// Get the total mass of the body.\r\n    /// @return the mass, usually in kilograms (kg).\r\n    GetMass() {\r\n        return this.m_mass;\r\n    }\r\n    /// Get the rotational inertia of the body about the local origin.\r\n    /// @return the rotational inertia, usually in kg-m^2.\r\n    GetInertia() {\r\n        return this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\r\n    }\r\n    /// Get the mass data of the body.\r\n    /// @return a struct containing the mass, inertia and center of the body.\r\n    GetMassData(data) {\r\n        data.mass = this.m_mass;\r\n        data.I = this.m_I + this.m_mass * b2Vec2.DotVV(this.m_sweep.localCenter, this.m_sweep.localCenter);\r\n        data.center.Copy(this.m_sweep.localCenter);\r\n        return data;\r\n    }\r\n    SetMassData(massData) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        if (this.m_type !== b2BodyType.b2_dynamicBody) {\r\n            return;\r\n        }\r\n        this.m_invMass = 0;\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_mass = massData.mass;\r\n        if (this.m_mass <= 0) {\r\n            this.m_mass = 1;\r\n        }\r\n        this.m_invMass = 1 / this.m_mass;\r\n        if (massData.I > 0 && !this.m_fixedRotationFlag) {\r\n            this.m_I = massData.I - this.m_mass * b2Vec2.DotVV(massData.center, massData.center);\r\n            // DEBUG: b2Assert(this.m_I > 0);\r\n            this.m_invI = 1 / this.m_I;\r\n        }\r\n        // Move center of mass.\r\n        const oldCenter = b2Body.SetMassData_s_oldCenter.Copy(this.m_sweep.c);\r\n        this.m_sweep.localCenter.Copy(massData.center);\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        // Update center of mass velocity.\r\n        b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);\r\n    }\r\n    ResetMassData() {\r\n        // Compute mass data from shapes. Each shape has its own density.\r\n        this.m_mass = 0;\r\n        this.m_invMass = 0;\r\n        this.m_I = 0;\r\n        this.m_invI = 0;\r\n        this.m_sweep.localCenter.SetZero();\r\n        // Static and kinematic bodies have zero mass.\r\n        if (this.m_type === b2BodyType.b2_staticBody || this.m_type === b2BodyType.b2_kinematicBody) {\r\n            this.m_sweep.c0.Copy(this.m_xf.p);\r\n            this.m_sweep.c.Copy(this.m_xf.p);\r\n            this.m_sweep.a0 = this.m_sweep.a;\r\n            return;\r\n        }\r\n        // DEBUG: b2Assert(this.m_type === b2BodyType.b2_dynamicBody);\r\n        // Accumulate mass over all fixtures.\r\n        const localCenter = b2Body.ResetMassData_s_localCenter.SetZero();\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            if (f.m_density === 0) {\r\n                continue;\r\n            }\r\n            const massData = f.GetMassData(b2Body.ResetMassData_s_massData);\r\n            this.m_mass += massData.mass;\r\n            localCenter.x += massData.center.x * massData.mass;\r\n            localCenter.y += massData.center.y * massData.mass;\r\n            this.m_I += massData.I;\r\n        }\r\n        // Compute center of mass.\r\n        if (this.m_mass > 0) {\r\n            this.m_invMass = 1 / this.m_mass;\r\n            localCenter.x *= this.m_invMass;\r\n            localCenter.y *= this.m_invMass;\r\n        }\r\n        else {\r\n            // Force all dynamic bodies to have a positive mass.\r\n            this.m_mass = 1;\r\n            this.m_invMass = 1;\r\n        }\r\n        if (this.m_I > 0 && !this.m_fixedRotationFlag) {\r\n            // Center the inertia about the center of mass.\r\n            this.m_I -= this.m_mass * b2Vec2.DotVV(localCenter, localCenter);\r\n            // DEBUG: b2Assert(this.m_I > 0);\r\n            this.m_invI = 1 / this.m_I;\r\n        }\r\n        else {\r\n            this.m_I = 0;\r\n            this.m_invI = 0;\r\n        }\r\n        // Move center of mass.\r\n        const oldCenter = b2Body.ResetMassData_s_oldCenter.Copy(this.m_sweep.c);\r\n        this.m_sweep.localCenter.Copy(localCenter);\r\n        b2Transform.MulXV(this.m_xf, this.m_sweep.localCenter, this.m_sweep.c);\r\n        this.m_sweep.c0.Copy(this.m_sweep.c);\r\n        // Update center of mass velocity.\r\n        b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(this.m_sweep.c, oldCenter, b2Vec2.s_t0), this.m_linearVelocity);\r\n    }\r\n    /// Get the world coordinates of a point given the local coordinates.\r\n    /// @param localPoint a point on the body measured relative the the body's origin.\r\n    /// @return the same point expressed in world coordinates.\r\n    GetWorldPoint(localPoint, out) {\r\n        return b2Transform.MulXV(this.m_xf, localPoint, out);\r\n    }\r\n    /// Get the world coordinates of a vector given the local coordinates.\r\n    /// @param localVector a vector fixed in the body.\r\n    /// @return the same vector expressed in world coordinates.\r\n    GetWorldVector(localVector, out) {\r\n        return b2Rot.MulRV(this.m_xf.q, localVector, out);\r\n    }\r\n    /// Gets a local point relative to the body's origin given a world point.\r\n    /// @param a point in world coordinates.\r\n    /// @return the corresponding local point relative to the body's origin.\r\n    GetLocalPoint(worldPoint, out) {\r\n        return b2Transform.MulTXV(this.m_xf, worldPoint, out);\r\n    }\r\n    /// Gets a local vector given a world vector.\r\n    /// @param a vector in world coordinates.\r\n    /// @return the corresponding local vector.\r\n    GetLocalVector(worldVector, out) {\r\n        return b2Rot.MulTRV(this.m_xf.q, worldVector, out);\r\n    }\r\n    /// Get the world linear velocity of a world point attached to this body.\r\n    /// @param a point in world coordinates.\r\n    /// @return the world velocity of a point.\r\n    GetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n        return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_sweep.c, b2Vec2.s_t0), out);\r\n    }\r\n    /// Get the world velocity of a local point.\r\n    /// @param a point in local coordinates.\r\n    /// @return the world velocity of a point.\r\n    GetLinearVelocityFromLocalPoint(localPoint, out) {\r\n        return this.GetLinearVelocityFromWorldPoint(this.GetWorldPoint(localPoint, out), out);\r\n    }\r\n    /// Get the linear damping of the body.\r\n    GetLinearDamping() {\r\n        return this.m_linearDamping;\r\n    }\r\n    /// Set the linear damping of the body.\r\n    SetLinearDamping(linearDamping) {\r\n        this.m_linearDamping = linearDamping;\r\n    }\r\n    /// Get the angular damping of the body.\r\n    GetAngularDamping() {\r\n        return this.m_angularDamping;\r\n    }\r\n    /// Set the angular damping of the body.\r\n    SetAngularDamping(angularDamping) {\r\n        this.m_angularDamping = angularDamping;\r\n    }\r\n    /// Get the gravity scale of the body.\r\n    GetGravityScale() {\r\n        return this.m_gravityScale;\r\n    }\r\n    /// Set the gravity scale of the body.\r\n    SetGravityScale(scale) {\r\n        this.m_gravityScale = scale;\r\n    }\r\n    /// Set the type of this body. This may alter the mass and velocity.\r\n    SetType(type) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        if (this.m_type === type) {\r\n            return;\r\n        }\r\n        this.m_type = type;\r\n        this.ResetMassData();\r\n        if (this.m_type === b2BodyType.b2_staticBody) {\r\n            this.m_linearVelocity.SetZero();\r\n            this.m_angularVelocity = 0;\r\n            this.m_sweep.a0 = this.m_sweep.a;\r\n            this.m_sweep.c0.Copy(this.m_sweep.c);\r\n            this.SynchronizeFixtures();\r\n        }\r\n        this.SetAwake(true);\r\n        this.m_force.SetZero();\r\n        this.m_torque = 0;\r\n        // Delete the attached contacts.\r\n        let ce = this.m_contactList;\r\n        while (ce) {\r\n            const ce0 = ce;\r\n            ce = ce.next;\r\n            this.m_world.m_contactManager.Destroy(ce0.contact);\r\n        }\r\n        this.m_contactList = null;\r\n        // Touch the proxies so that new contacts will be created (when appropriate)\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            f.TouchProxies();\r\n        }\r\n    }\r\n    /// Get the type of this body.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n    /// Should this body be treated like a bullet for continuous collision detection?\r\n    SetBullet(flag) {\r\n        this.m_bulletFlag = flag;\r\n    }\r\n    /// Is this body treated like a bullet for continuous collision detection?\r\n    IsBullet() {\r\n        return this.m_bulletFlag;\r\n    }\r\n    /// You can disable sleeping on this body. If you disable sleeping, the\r\n    /// body will be woken.\r\n    SetSleepingAllowed(flag) {\r\n        this.m_autoSleepFlag = flag;\r\n        if (!flag) {\r\n            this.SetAwake(true);\r\n        }\r\n    }\r\n    /// Is this body allowed to sleep\r\n    IsSleepingAllowed() {\r\n        return this.m_autoSleepFlag;\r\n    }\r\n    /// Set the sleep state of the body. A sleeping body has very\r\n    /// low CPU cost.\r\n    /// @param flag set to true to wake the body, false to put it to sleep.\r\n    SetAwake(flag) {\r\n        if (flag) {\r\n            this.m_awakeFlag = true;\r\n            this.m_sleepTime = 0;\r\n        }\r\n        else {\r\n            this.m_awakeFlag = false;\r\n            this.m_sleepTime = 0;\r\n            this.m_linearVelocity.SetZero();\r\n            this.m_angularVelocity = 0;\r\n            this.m_force.SetZero();\r\n            this.m_torque = 0;\r\n        }\r\n    }\r\n    /// Get the sleeping state of this body.\r\n    /// @return true if the body is sleeping.\r\n    IsAwake() {\r\n        return this.m_awakeFlag;\r\n    }\r\n    /// Set the active state of the body. An inactive body is not\r\n    /// simulated and cannot be collided with or woken up.\r\n    /// If you pass a flag of true, all fixtures will be added to the\r\n    /// broad-phase.\r\n    /// If you pass a flag of false, all fixtures will be removed from\r\n    /// the broad-phase and all contacts will be destroyed.\r\n    /// Fixtures and joints are otherwise unaffected. You may continue\r\n    /// to create/destroy fixtures and joints on inactive bodies.\r\n    /// Fixtures on an inactive body are implicitly inactive and will\r\n    /// not participate in collisions, ray-casts, or queries.\r\n    /// Joints connected to an inactive body are implicitly inactive.\r\n    /// An inactive body is still owned by a b2World object and remains\r\n    /// in the body list.\r\n    SetActive(flag) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        if (flag === this.IsActive()) {\r\n            return;\r\n        }\r\n        this.m_activeFlag = flag;\r\n        if (flag) {\r\n            // Create all proxies.\r\n            for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n                f.CreateProxies(this.m_xf);\r\n            }\r\n            // Contacts are created the next time step.\r\n        }\r\n        else {\r\n            // Destroy all proxies.\r\n            for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n                f.DestroyProxies();\r\n            }\r\n            // Destroy the attached contacts.\r\n            let ce = this.m_contactList;\r\n            while (ce) {\r\n                const ce0 = ce;\r\n                ce = ce.next;\r\n                this.m_world.m_contactManager.Destroy(ce0.contact);\r\n            }\r\n            this.m_contactList = null;\r\n        }\r\n    }\r\n    /// Get the active state of the body.\r\n    IsActive() {\r\n        return this.m_activeFlag;\r\n    }\r\n    /// Set this body to have fixed rotation. This causes the mass\r\n    /// to be reset.\r\n    SetFixedRotation(flag) {\r\n        if (this.m_fixedRotationFlag === flag) {\r\n            return;\r\n        }\r\n        this.m_fixedRotationFlag = flag;\r\n        this.m_angularVelocity = 0;\r\n        this.ResetMassData();\r\n    }\r\n    /// Does this body have fixed rotation?\r\n    IsFixedRotation() {\r\n        return this.m_fixedRotationFlag;\r\n    }\r\n    /// Get the list of all fixtures attached to this body.\r\n    GetFixtureList() {\r\n        return this.m_fixtureList;\r\n    }\r\n    /// Get the list of all joints attached to this body.\r\n    GetJointList() {\r\n        return this.m_jointList;\r\n    }\r\n    /// Get the list of all contacts attached to this body.\r\n    /// @warning this list changes during the time step and you may\r\n    /// miss some collisions if you don't use b2ContactListener.\r\n    GetContactList() {\r\n        return this.m_contactList;\r\n    }\r\n    /// Get the next body in the world's body list.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data pointer that was provided in the body definition.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data. Use this to store your application specific data.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Get the parent world of this body.\r\n    GetWorld() {\r\n        return this.m_world;\r\n    }\r\n    /// Dump this body to a log file\r\n    Dump(log) {\r\n        const bodyIndex = this.m_islandIndex;\r\n        log(\"{\\n\");\r\n        log(\"  const bd: b2BodyDef = new b2BodyDef();\\n\");\r\n        let type_str = \"\";\r\n        switch (this.m_type) {\r\n            case b2BodyType.b2_staticBody:\r\n                type_str = \"b2BodyType.b2_staticBody\";\r\n                break;\r\n            case b2BodyType.b2_kinematicBody:\r\n                type_str = \"b2BodyType.b2_kinematicBody\";\r\n                break;\r\n            case b2BodyType.b2_dynamicBody:\r\n                type_str = \"b2BodyType.b2_dynamicBody\";\r\n                break;\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                break;\r\n        }\r\n        log(\"  bd.type = %s;\\n\", type_str);\r\n        log(\"  bd.position.Set(%.15f, %.15f);\\n\", this.m_xf.p.x, this.m_xf.p.y);\r\n        log(\"  bd.angle = %.15f;\\n\", this.m_sweep.a);\r\n        log(\"  bd.linearVelocity.Set(%.15f, %.15f);\\n\", this.m_linearVelocity.x, this.m_linearVelocity.y);\r\n        log(\"  bd.angularVelocity = %.15f;\\n\", this.m_angularVelocity);\r\n        log(\"  bd.linearDamping = %.15f;\\n\", this.m_linearDamping);\r\n        log(\"  bd.angularDamping = %.15f;\\n\", this.m_angularDamping);\r\n        log(\"  bd.allowSleep = %s;\\n\", (this.m_autoSleepFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.awake = %s;\\n\", (this.m_awakeFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.fixedRotation = %s;\\n\", (this.m_fixedRotationFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.bullet = %s;\\n\", (this.m_bulletFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.active = %s;\\n\", (this.m_activeFlag) ? (\"true\") : (\"false\"));\r\n        log(\"  bd.gravityScale = %.15f;\\n\", this.m_gravityScale);\r\n        log(\"\\n\");\r\n        log(\"  bodies[%d] = this.m_world.CreateBody(bd);\\n\", this.m_islandIndex);\r\n        log(\"\\n\");\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            log(\"  {\\n\");\r\n            f.Dump(log, bodyIndex);\r\n            log(\"  }\\n\");\r\n        }\r\n        log(\"}\\n\");\r\n    }\r\n    SynchronizeFixtures() {\r\n        const xf1 = b2Body.SynchronizeFixtures_s_xf1;\r\n        xf1.q.SetAngle(this.m_sweep.a0);\r\n        b2Rot.MulRV(xf1.q, this.m_sweep.localCenter, xf1.p);\r\n        b2Vec2.SubVV(this.m_sweep.c0, xf1.p, xf1.p);\r\n        for (let f = this.m_fixtureList; f; f = f.m_next) {\r\n            f.Synchronize(xf1, this.m_xf);\r\n        }\r\n    }\r\n    SynchronizeTransform() {\r\n        this.m_xf.q.SetAngle(this.m_sweep.a);\r\n        b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\r\n        b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\r\n    }\r\n    // This is used to prevent connected bodies from colliding.\r\n    // It may lie, depending on the collideConnected flag.\r\n    ShouldCollide(other) {\r\n        // At least one body should be dynamic or kinematic.\r\n        if (this.m_type === b2BodyType.b2_staticBody && other.m_type === b2BodyType.b2_staticBody) {\r\n            return false;\r\n        }\r\n        return this.ShouldCollideConnected(other);\r\n    }\r\n    ShouldCollideConnected(other) {\r\n        // Does a joint prevent collision?\r\n        for (let jn = this.m_jointList; jn; jn = jn.next) {\r\n            if (jn.other === other) {\r\n                if (!jn.joint.m_collideConnected) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    Advance(alpha) {\r\n        // Advance to the new safe time. This doesn't sync the broad-phase.\r\n        this.m_sweep.Advance(alpha);\r\n        this.m_sweep.c.Copy(this.m_sweep.c0);\r\n        this.m_sweep.a = this.m_sweep.a0;\r\n        this.m_xf.q.SetAngle(this.m_sweep.a);\r\n        b2Rot.MulRV(this.m_xf.q, this.m_sweep.localCenter, this.m_xf.p);\r\n        b2Vec2.SubVV(this.m_sweep.c, this.m_xf.p, this.m_xf.p);\r\n    }\r\n    // #if B2_ENABLE_CONTROLLER\r\n    GetControllerList() {\r\n        return this.m_controllerList;\r\n    }\r\n    GetControllerCount() {\r\n        return this.m_controllerCount;\r\n    }\r\n}\r\n/// Creates a fixture from a shape and attach it to this body.\r\n/// This is a convenience function. Use b2FixtureDef if you need to set parameters\r\n/// like friction, restitution, user data, or filtering.\r\n/// If the density is non-zero, this function automatically updates the mass of the body.\r\n/// @param shape the shape to be cloned.\r\n/// @param density the shape density (set to zero for static bodies).\r\n/// @warning This function is locked during callbacks.\r\nb2Body.CreateFixtureShapeDensity_s_def = new b2FixtureDef();\r\n/// Set the mass properties to override the mass properties of the fixtures.\r\n/// Note that this changes the center of mass position.\r\n/// Note that creating or destroying fixtures can also alter the mass.\r\n/// This function has no effect if the body isn't dynamic.\r\n/// @param massData the mass properties.\r\nb2Body.SetMassData_s_oldCenter = new b2Vec2();\r\n/// This resets the mass properties to the sum of the mass properties of the fixtures.\r\n/// This normally does not need to be called unless you called SetMassData to override\r\n/// the mass and you later want to reset the mass.\r\nb2Body.ResetMassData_s_localCenter = new b2Vec2();\r\nb2Body.ResetMassData_s_oldCenter = new b2Vec2();\r\nb2Body.ResetMassData_s_massData = new b2MassData();\r\nb2Body.SynchronizeFixtures_s_xf1 = new b2Transform();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCb2R5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvRHluYW1pY3MvYjJCb2R5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsMERBQTBEO0FBQzFELHVEQUF1RDtBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBTSxNQUFNLGtCQUFrQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQWlCLE1BQU0sYUFBYSxDQUFDO0FBSXJFLFNBQVM7QUFFVCxrQkFBa0I7QUFDbEIsMkRBQTJEO0FBQzNELHdFQUF3RTtBQUN4RSxtRkFBbUY7QUFDbkYsTUFBTSxDQUFOLElBQVksVUFRWDtBQVJELFdBQVksVUFBVTtJQUNwQix3REFBZSxDQUFBO0lBQ2YsNkRBQWlCLENBQUE7SUFDakIsbUVBQW9CLENBQUE7SUFDcEIsK0RBQWtCLENBQUE7SUFFbEIsWUFBWTtJQUNaLG9CQUFvQjtBQUN0QixDQUFDLEVBUlcsVUFBVSxLQUFWLFVBQVUsUUFRckI7QUEwREQsMEVBQTBFO0FBQzFFLDBGQUEwRjtBQUMxRixNQUFNLE9BQU8sU0FBUztJQUF0QjtRQUNFLGlEQUFpRDtRQUNqRCx5RUFBeUU7UUFDbEUsU0FBSSxHQUFlLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFFbkQsdUVBQXVFO1FBQ3ZFLG1EQUFtRDtRQUNuQyxhQUFRLEdBQVcsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXBELDJDQUEyQztRQUNwQyxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBRXpCLG1FQUFtRTtRQUNuRCxtQkFBYyxHQUFXLElBQUksTUFBTSxDQUFD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","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../../Common/b2Math\";\r\nexport var b2JointType;\r\n(function (b2JointType) {\r\n    b2JointType[b2JointType[\"e_unknownJoint\"] = 0] = \"e_unknownJoint\";\r\n    b2JointType[b2JointType[\"e_revoluteJoint\"] = 1] = \"e_revoluteJoint\";\r\n    b2JointType[b2JointType[\"e_prismaticJoint\"] = 2] = \"e_prismaticJoint\";\r\n    b2JointType[b2JointType[\"e_distanceJoint\"] = 3] = \"e_distanceJoint\";\r\n    b2JointType[b2JointType[\"e_pulleyJoint\"] = 4] = \"e_pulleyJoint\";\r\n    b2JointType[b2JointType[\"e_mouseJoint\"] = 5] = \"e_mouseJoint\";\r\n    b2JointType[b2JointType[\"e_gearJoint\"] = 6] = \"e_gearJoint\";\r\n    b2JointType[b2JointType[\"e_wheelJoint\"] = 7] = \"e_wheelJoint\";\r\n    b2JointType[b2JointType[\"e_weldJoint\"] = 8] = \"e_weldJoint\";\r\n    b2JointType[b2JointType[\"e_frictionJoint\"] = 9] = \"e_frictionJoint\";\r\n    b2JointType[b2JointType[\"e_ropeJoint\"] = 10] = \"e_ropeJoint\";\r\n    b2JointType[b2JointType[\"e_motorJoint\"] = 11] = \"e_motorJoint\";\r\n    b2JointType[b2JointType[\"e_areaJoint\"] = 12] = \"e_areaJoint\";\r\n})(b2JointType || (b2JointType = {}));\r\nexport var b2LimitState;\r\n(function (b2LimitState) {\r\n    b2LimitState[b2LimitState[\"e_inactiveLimit\"] = 0] = \"e_inactiveLimit\";\r\n    b2LimitState[b2LimitState[\"e_atLowerLimit\"] = 1] = \"e_atLowerLimit\";\r\n    b2LimitState[b2LimitState[\"e_atUpperLimit\"] = 2] = \"e_atUpperLimit\";\r\n    b2LimitState[b2LimitState[\"e_equalLimits\"] = 3] = \"e_equalLimits\";\r\n})(b2LimitState || (b2LimitState = {}));\r\nexport class b2Jacobian {\r\n    constructor() {\r\n        this.linear = new b2Vec2();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n    }\r\n    SetZero() {\r\n        this.linear.SetZero();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n        return this;\r\n    }\r\n    Set(x, a1, a2) {\r\n        this.linear.Copy(x);\r\n        this.angularA = a1;\r\n        this.angularB = a2;\r\n        return this;\r\n    }\r\n}\r\n/// A joint edge is used to connect bodies and joints together\r\n/// in a joint graph where each body is a node and each joint\r\n/// is an edge. A joint edge belongs to a doubly linked list\r\n/// maintained in each attached body. Each joint has two joint\r\n/// nodes, one for each attached body.\r\nexport class b2JointEdge {\r\n    constructor(joint, other) {\r\n        this.prev = null; ///< the previous joint edge in the body's joint list\r\n        this.next = null; ///< the next joint edge in the body's joint list\r\n        this.joint = joint;\r\n        this.other = other;\r\n    }\r\n}\r\n/// Joint definitions are used to construct joints.\r\nexport class b2JointDef {\r\n    constructor(type) {\r\n        /// The joint type is set automatically for concrete joint types.\r\n        this.type = b2JointType.e_unknownJoint;\r\n        /// Use this to attach application specific data to your joints.\r\n        this.userData = null;\r\n        /// Set this flag to true if the attached bodies should collide.\r\n        this.collideConnected = false;\r\n        this.type = type;\r\n    }\r\n}\r\n/// The base joint class. Joints are used to constraint two bodies together in\r\n/// various fashions. Some joints also feature limits and motors.\r\nexport class b2Joint {\r\n    constructor(def) {\r\n        // DEBUG: b2Assert(def.bodyA !== def.bodyB);\r\n        this.m_type = b2JointType.e_unknownJoint;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_index = 0;\r\n        this.m_islandFlag = false;\r\n        this.m_collideConnected = false;\r\n        this.m_userData = null;\r\n        this.m_type = def.type;\r\n        this.m_edgeA = new b2JointEdge(this, def.bodyB);\r\n        this.m_edgeB = new b2JointEdge(this, def.bodyA);\r\n        this.m_bodyA = def.bodyA;\r\n        this.m_bodyB = def.bodyB;\r\n        this.m_collideConnected = b2Maybe(def.collideConnected, false);\r\n        this.m_userData = def.userData;\r\n    }\r\n    /// Get the type of the concrete joint.\r\n    GetType() {\r\n        return this.m_type;\r\n    }\r\n    /// Get the first body attached to this joint.\r\n    GetBodyA() {\r\n        return this.m_bodyA;\r\n    }\r\n    /// Get the second body attached to this joint.\r\n    GetBodyB() {\r\n        return this.m_bodyB;\r\n    }\r\n    /// Get the next joint the world joint list.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data pointer.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data pointer.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Short-cut function to determine if either body is inactive.\r\n    IsActive() {\r\n        return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\r\n    }\r\n    /// Get collide connected.\r\n    /// Note: modifying the collide connect flag won't work correctly because\r\n    /// the flag is only checked when fixture AABBs begin to overlap.\r\n    GetCollideConnected() {\r\n        return this.m_collideConnected;\r\n    }\r\n    /// Dump this joint to the log file.\r\n    Dump(log) {\r\n        log(\"// Dump is not supported for this joint type.\\n\");\r\n    }\r\n    /// Shift the origin for any points stored in world coordinates.\r\n    ShiftOrigin(newOrigin) {\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJKb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0R5bmFtaWNzL0pvaW50cy9iMkpvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsNkRBQTZEO0FBQzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFNLE1BQU0scUJBQXFCLENBQUM7QUFJakQsTUFBTSxDQUFOLElBQVksV0FjWDtBQWRELFdBQVksV0FBVztJQUNyQixpRUFBa0IsQ0FBQTtJQUNsQixtRUFBbUIsQ0FBQTtJQUNuQixxRUFBb0IsQ0FBQTtJQUNwQixtRUFBbUIsQ0FBQTtJQUNuQiwrREFBaUIsQ0FBQTtJQUNqQiw2REFBZ0IsQ0FBQTtJQUNoQiwyREFBZSxDQUFBO0lBQ2YsNkRBQWdCLENBQUE7SUFDaEIsMkRBQWUsQ0FBQTtJQUNmLG1FQUFtQixDQUFBO0lBQ25CLDREQUFnQixDQUFBO0lBQ2hCLDhEQUFpQixDQUFBO0lBQ2pCLDREQUFnQixDQUFBO0FBQ2xCLENBQUMsRUFkVyxXQUFXLEtBQVgsV0FBVyxRQWN0QjtBQUVELE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdEIscUVBQW1CLENBQUE7SUFDbkIsbUVBQWtCLENBQUE7SUFDbEIsbUVBQWtCLENBQUE7SUFDbEIsaUVBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxXLFlBQVksS0FBWixZQUFZLFFBS3ZCO0FBRUQsTUFBTSxPQUFPLFVBQVU7SUFBdkI7UUFDa0IsV0FBTSxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDdkMsYUFBUSxHQUFXLENBQUMsQ0FBQztRQUNyQixhQUFRLEdBQVcsQ0FBQyxDQUFDO0lBZTlCLENBQUM7SUFiUSxPQUFPO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMs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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_pi, b2_epsilon } from \"../../Common/b2Settings\";\r\nimport { b2Sq, b2Sqrt, b2Asin, b2Pow, b2Vec2, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A circle shape.\r\nexport class b2CircleShape extends b2Shape {\r\n    constructor(radius = 0) {\r\n        super(b2ShapeType.e_circleShape, radius);\r\n        this.m_p = new b2Vec2();\r\n    }\r\n    Set(position, radius = this.m_radius) {\r\n        this.m_p.Copy(position);\r\n        this.m_radius = radius;\r\n        return this;\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2CircleShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        // DEBUG: b2Assert(other instanceof b2CircleShape);\r\n        this.m_p.Copy(other.m_p);\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    TestPoint(transform, p) {\r\n        const center = b2Transform.MulXV(transform, this.m_p, b2CircleShape.TestPoint_s_center);\r\n        const d = b2Vec2.SubVV(p, center, b2CircleShape.TestPoint_s_d);\r\n        return b2Vec2.DotVV(d, d) <= b2Sq(this.m_radius);\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const center = b2Transform.MulXV(xf, this.m_p, b2CircleShape.ComputeDistance_s_center);\r\n        b2Vec2.SubVV(p, center, normal);\r\n        return normal.Normalize() - this.m_radius;\r\n    }\r\n    RayCast(output, input, transform, childIndex) {\r\n        const position = b2Transform.MulXV(transform, this.m_p, b2CircleShape.RayCast_s_position);\r\n        const s = b2Vec2.SubVV(input.p1, position, b2CircleShape.RayCast_s_s);\r\n        const b = b2Vec2.DotVV(s, s) - b2Sq(this.m_radius);\r\n        // Solve quadratic equation.\r\n        const r = b2Vec2.SubVV(input.p2, input.p1, b2CircleShape.RayCast_s_r);\r\n        const c = b2Vec2.DotVV(s, r);\r\n        const rr = b2Vec2.DotVV(r, r);\r\n        const sigma = c * c - rr * b;\r\n        // Check for negative discriminant and short segment.\r\n        if (sigma < 0 || rr < b2_epsilon) {\r\n            return false;\r\n        }\r\n        // Find the point of intersection of the line with the circle.\r\n        let a = (-(c + b2Sqrt(sigma)));\r\n        // Is the intersection point on the segment?\r\n        if (0 <= a && a <= input.maxFraction * rr) {\r\n            a /= rr;\r\n            output.fraction = a;\r\n            b2Vec2.AddVMulSV(s, a, r, output.normal).SelfNormalize();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ComputeAABB(aabb, transform, childIndex) {\r\n        const p = b2Transform.MulXV(transform, this.m_p, b2CircleShape.ComputeAABB_s_p);\r\n        aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius);\r\n        aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius);\r\n    }\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        const radius_sq = b2Sq(this.m_radius);\r\n        massData.mass = density * b2_pi * radius_sq;\r\n        massData.center.Copy(this.m_p);\r\n        // inertia about the local origin\r\n        massData.I = massData.mass * (0.5 * radius_sq + b2Vec2.DotVV(this.m_p, this.m_p));\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_p);\r\n        proxy.m_count = 1;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        const p = b2Transform.MulXV(xf, this.m_p, new b2Vec2());\r\n        const l = (-(b2Vec2.DotVV(normal, p) - offset));\r\n        if (l < (-this.m_radius) + b2_epsilon) {\r\n            // Completely dry\r\n            return 0;\r\n        }\r\n        if (l > this.m_radius) {\r\n            // Completely wet\r\n            c.Copy(p);\r\n            return b2_pi * this.m_radius * this.m_radius;\r\n        }\r\n        // Magic\r\n        const r2 = this.m_radius * this.m_radius;\r\n        const l2 = l * l;\r\n        const area = r2 * (b2Asin(l / this.m_radius) + b2_pi / 2) + l * b2Sqrt(r2 - l2);\r\n        const com = (-2 / 3 * b2Pow(r2 - l2, 1.5) / area);\r\n        c.x = p.x + normal.x * com;\r\n        c.y = p.y + normal.y * com;\r\n        return area;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2CircleShape = new b2CircleShape();\\n\");\r\n        log(\"    shape.m_radius = %.15f;\\n\", this.m_radius);\r\n        log(\"    shape.m_p.Set(%.15f, %.15f);\\n\", this.m_p.x, this.m_p.y);\r\n    }\r\n}\r\n/// Implement b2Shape.\r\nb2CircleShape.TestPoint_s_center = new b2Vec2();\r\nb2CircleShape.TestPoint_s_d = new b2Vec2();\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2CircleShape.ComputeDistance_s_center = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\r\n// From Section 3.1.2\r\n// x = s + a * r\r\n// norm(x) = radius\r\nb2CircleShape.RayCast_s_position = new b2Vec2();\r\nb2CircleShape.RayCast_s_s = new b2Vec2();\r\nb2CircleShape.RayCast_s_r = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2CircleShape.ComputeAABB_s_p = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaXJjbGVTaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0NvbGxpc2lvbi9TaGFwZXMvYjJDaXJjbGVTaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzVELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBTSxNQUFNLHFCQUFxQixDQUFDO0FBSTNGLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRWpELG1CQUFtQjtBQUNuQixNQUFNLE9BQU8sYUFBYyxTQUFRLE9BQU87SUFHeEMsWUFBWSxTQUFpQixDQUFDO1FBQzVCLEtBQUssQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBSDNCLFFBQUcsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBSTNDLENBQUM7SUFFTSxHQUFHLENBQUMsUUFBWSxFQUFFLFNBQWlCLElBQUksQ0FBQyxRQUFRO1FBQ3JELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHNCQUFzQjtJQUNmLEtBQUs7UUFDVixPQUFPLElBQUksYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBb0I7UUFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQixtREFBbUQ7UUFFbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENB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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert, b2_epsilon_sq } from \"../../Common/b2Settings\";\r\nimport { b2_epsilon, b2_maxFloat, b2_linearSlop, b2_polygonRadius } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2MassData } from \"./b2Shape\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A convex polygon. It is assumed that the interior of the polygon is to\r\n/// the left of each edge.\r\n/// In most cases you should not need many vertices for a convex polygon.\r\nexport class b2PolygonShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_polygonShape, b2_polygonRadius);\r\n        this.m_centroid = new b2Vec2(0, 0);\r\n        this.m_vertices = [];\r\n        this.m_normals = [];\r\n        this.m_count = 0;\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2PolygonShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        // DEBUG: b2Assert(other instanceof b2PolygonShape);\r\n        this.m_centroid.Copy(other.m_centroid);\r\n        this.m_count = other.m_count;\r\n        this.m_vertices = b2Vec2.MakeArray(this.m_count);\r\n        this.m_normals = b2Vec2.MakeArray(this.m_count);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_vertices[i].Copy(other.m_vertices[i]);\r\n            this.m_normals[i].Copy(other.m_normals[i]);\r\n        }\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    Set(vertices, count = vertices.length, start = 0) {\r\n        // DEBUG: b2Assert(3 <= count);\r\n        if (count < 3) {\r\n            return this.SetAsBox(1, 1);\r\n        }\r\n        let n = count;\r\n        // Perform welding and copy vertices into local buffer.\r\n        const ps = [];\r\n        for (let i = 0; i < n; ++i) {\r\n            const /*b2Vec2*/ v = vertices[start + i];\r\n            let /*bool*/ unique = true;\r\n            for (let /*int32*/ j = 0; j < ps.length; ++j) {\r\n                if (b2Vec2.DistanceSquaredVV(v, ps[j]) < ((0.5 * b2_linearSlop) * (0.5 * b2_linearSlop))) {\r\n                    unique = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (unique) {\r\n                ps.push(v);\r\n            }\r\n        }\r\n        n = ps.length;\r\n        if (n < 3) {\r\n            // Polygon is degenerate.\r\n            // DEBUG: b2Assert(false);\r\n            return this.SetAsBox(1.0, 1.0);\r\n        }\r\n        // Create the convex hull using the Gift wrapping algorithm\r\n        // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\r\n        // Find the right most point on the hull\r\n        let i0 = 0;\r\n        let x0 = ps[0].x;\r\n        for (let i = 1; i < n; ++i) {\r\n            const x = ps[i].x;\r\n            if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\r\n                i0 = i;\r\n                x0 = x;\r\n            }\r\n        }\r\n        const hull = [];\r\n        let m = 0;\r\n        let ih = i0;\r\n        for (;;) {\r\n            hull[m] = ih;\r\n            let ie = 0;\r\n            for (let j = 1; j < n; ++j) {\r\n                if (ie === ih) {\r\n                    ie = j;\r\n                    continue;\r\n                }\r\n                const r = b2Vec2.SubVV(ps[ie], ps[hull[m]], b2PolygonShape.Set_s_r);\r\n                const v = b2Vec2.SubVV(ps[j], ps[hull[m]], b2PolygonShape.Set_s_v);\r\n                const c = b2Vec2.CrossVV(r, v);\r\n                if (c < 0) {\r\n                    ie = j;\r\n                }\r\n                // Collinearity check\r\n                if (c === 0 && v.LengthSquared() > r.LengthSquared()) {\r\n                    ie = j;\r\n                }\r\n            }\r\n            ++m;\r\n            ih = ie;\r\n            if (ie === i0) {\r\n                break;\r\n            }\r\n        }\r\n        this.m_count = m;\r\n        this.m_vertices = b2Vec2.MakeArray(this.m_count);\r\n        this.m_normals = b2Vec2.MakeArray(this.m_count);\r\n        // Copy vertices.\r\n        for (let i = 0; i < m; ++i) {\r\n            this.m_vertices[i].Copy(ps[hull[i]]);\r\n        }\r\n        // Compute normals. Ensure the edges have non-zero length.\r\n        for (let i = 0; i < m; ++i) {\r\n            const vertexi1 = this.m_vertices[i];\r\n            const vertexi2 = this.m_vertices[(i + 1) % m];\r\n            const edge = b2Vec2.SubVV(vertexi2, vertexi1, b2Vec2.s_t0); // edge uses s_t0\r\n            // DEBUG: b2Assert(edge.LengthSquared() > b2_epsilon_sq);\r\n            b2Vec2.CrossVOne(edge, this.m_normals[i]).SelfNormalize();\r\n        }\r\n        // Compute the polygon centroid.\r\n        b2PolygonShape.ComputeCentroid(this.m_vertices, m, this.m_centroid);\r\n        return this;\r\n    }\r\n    SetAsArray(vertices, count = vertices.length) {\r\n        return this.Set(vertices, count);\r\n    }\r\n    /// Build vertices to represent an axis-aligned box or an oriented box.\r\n    /// @param hx the half-width.\r\n    /// @param hy the half-height.\r\n    /// @param center the center of the box in local coordinates.\r\n    /// @param angle the rotation of the box in local coordinates.\r\n    SetAsBox(hx, hy, center, angle = 0) {\r\n        this.m_count = 4;\r\n        this.m_vertices = b2Vec2.MakeArray(this.m_count);\r\n        this.m_normals = b2Vec2.MakeArray(this.m_count);\r\n        this.m_vertices[0].Set((-hx), (-hy));\r\n        this.m_vertices[1].Set(hx, (-hy));\r\n        this.m_vertices[2].Set(hx, hy);\r\n        this.m_vertices[3].Set((-hx), hy);\r\n        this.m_normals[0].Set(0, (-1));\r\n        this.m_normals[1].Set(1, 0);\r\n        this.m_normals[2].Set(0, 1);\r\n        this.m_normals[3].Set((-1), 0);\r\n        this.m_centroid.SetZero();\r\n        if (center) {\r\n            this.m_centroid.Copy(center);\r\n            const xf = new b2Transform();\r\n            xf.SetPosition(center);\r\n            xf.SetRotationAngle(angle);\r\n            // Transform vertices and normals.\r\n            for (let i = 0; i < this.m_count; ++i) {\r\n                b2Transform.MulXV(xf, this.m_vertices[i], this.m_vertices[i]);\r\n                b2Rot.MulRV(xf.q, this.m_normals[i], this.m_normals[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    TestPoint(xf, p) {\r\n        const pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.TestPoint_s_pLocal);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));\r\n            if (dot > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const pLocal = b2Transform.MulTXV(xf, p, b2PolygonShape.ComputeDistance_s_pLocal);\r\n        let maxDistance = -b2_maxFloat;\r\n        const normalForMaxDistance = b2PolygonShape.ComputeDistance_s_normalForMaxDistance.Copy(pLocal);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const dot = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(pLocal, this.m_vertices[i], b2Vec2.s_t0));\r\n            if (dot > maxDistance) {\r\n                maxDistance = dot;\r\n                normalForMaxDistance.Copy(this.m_normals[i]);\r\n            }\r\n        }\r\n        if (maxDistance > 0) {\r\n            const minDistance = b2PolygonShape.ComputeDistance_s_minDistance.Copy(normalForMaxDistance);\r\n            let minDistance2 = maxDistance * maxDistance;\r\n            for (let i = 0; i < this.m_count; ++i) {\r\n                const distance = b2Vec2.SubVV(pLocal, this.m_vertices[i], b2PolygonShape.ComputeDistance_s_distance);\r\n                const distance2 = distance.LengthSquared();\r\n                if (minDistance2 > distance2) {\r\n                    minDistance.Copy(distance);\r\n                    minDistance2 = distance2;\r\n                }\r\n            }\r\n            b2Rot.MulRV(xf.q, minDistance, normal);\r\n            normal.Normalize();\r\n            return Math.sqrt(minDistance2);\r\n        }\r\n        else {\r\n            b2Rot.MulRV(xf.q, normalForMaxDistance, normal);\r\n            return maxDistance;\r\n        }\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        // Put the ray into the polygon's frame of reference.\r\n        const p1 = b2Transform.MulTXV(xf, input.p1, b2PolygonShape.RayCast_s_p1);\r\n        const p2 = b2Transform.MulTXV(xf, input.p2, b2PolygonShape.RayCast_s_p2);\r\n        const d = b2Vec2.SubVV(p2, p1, b2PolygonShape.RayCast_s_d);\r\n        let lower = 0, upper = input.maxFraction;\r\n        let index = -1;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            // p = p1 + a * d\r\n            // dot(normal, p - v) = 0\r\n            // dot(normal, p1 - v) + a * dot(normal, d) = 0\r\n            const numerator = b2Vec2.DotVV(this.m_normals[i], b2Vec2.SubVV(this.m_vertices[i], p1, b2Vec2.s_t0));\r\n            const denominator = b2Vec2.DotVV(this.m_normals[i], d);\r\n            if (denominator === 0) {\r\n                if (numerator < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                // Note: we want this predicate without division:\r\n                // lower < numerator / denominator, where denominator < 0\r\n                // Since denominator < 0, we have to flip the inequality:\r\n                // lower < numerator / denominator <==> denominator * lower > numerator.\r\n                if (denominator < 0 && numerator < lower * denominator) {\r\n                    // Increase lower.\r\n                    // The segment enters this half-space.\r\n                    lower = numerator / denominator;\r\n                    index = i;\r\n                }\r\n                else if (denominator > 0 && numerator < upper * denominator) {\r\n                    // Decrease upper.\r\n                    // The segment exits this half-space.\r\n                    upper = numerator / denominator;\r\n                }\r\n            }\r\n            // The use of epsilon here causes the assert on lower to trip\r\n            // in some cases. Apparently the use of epsilon was to make edge\r\n            // shapes work, but now those are handled separately.\r\n            // if (upper < lower - b2_epsilon)\r\n            if (upper < lower) {\r\n                return false;\r\n            }\r\n        }\r\n        // DEBUG: b2Assert(0 <= lower && lower <= input.maxFraction);\r\n        if (index >= 0) {\r\n            output.fraction = lower;\r\n            b2Rot.MulRV(xf.q, this.m_normals[index], output.normal);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        const lower = b2Transform.MulXV(xf, this.m_vertices[0], aabb.lowerBound);\r\n        const upper = aabb.upperBound.Copy(lower);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const v = b2Transform.MulXV(xf, this.m_vertices[i], b2PolygonShape.ComputeAABB_s_v);\r\n            b2Vec2.MinV(v, lower, lower);\r\n            b2Vec2.MaxV(v, upper, upper);\r\n        }\r\n        const r = this.m_radius;\r\n        lower.SelfSubXY(r, r);\r\n        upper.SelfAddXY(r, r);\r\n    }\r\n    ComputeMass(massData, density) {\r\n        // Polygon mass, centroid, and inertia.\r\n        // Let rho be the polygon density in mass per unit area.\r\n        // Then:\r\n        // mass = rho * int(dA)\r\n        // centroid.x = (1/mass) * rho * int(x * dA)\r\n        // centroid.y = (1/mass) * rho * int(y * dA)\r\n        // I = rho * int((x*x + y*y) * dA)\r\n        //\r\n        // We can compute these integrals by summing all the integrals\r\n        // for each triangle of the polygon. To evaluate the integral\r\n        // for a single triangle, we make a change of variables to\r\n        // the (u,v) coordinates of the triangle:\r\n        // x = x0 + e1x * u + e2x * v\r\n        // y = y0 + e1y * u + e2y * v\r\n        // where 0 <= u && 0 <= v && u + v <= 1.\r\n        //\r\n        // We integrate u from [0,1-v] and then v from [0,1].\r\n        // We also need to use the Jacobian of the transformation:\r\n        // D = cross(e1, e2)\r\n        //\r\n        // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\r\n        //\r\n        // The rest of the derivation is handled by computer algebra.\r\n        // DEBUG: b2Assert(this.m_count >= 3);\r\n        const center = b2PolygonShape.ComputeMass_s_center.SetZero();\r\n        let area = 0;\r\n        let I = 0;\r\n        // s is the reference point for forming triangles.\r\n        // It's location doesn't change the result (except for rounding error).\r\n        const s = b2PolygonShape.ComputeMass_s_s.SetZero();\r\n        // This code would put the reference point inside the polygon.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            s.SelfAdd(this.m_vertices[i]);\r\n        }\r\n        s.SelfMul(1 / this.m_count);\r\n        const k_inv3 = 1 / 3;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            // Triangle vertices.\r\n            const e1 = b2Vec2.SubVV(this.m_vertices[i], s, b2PolygonShape.ComputeMass_s_e1);\r\n            const e2 = b2Vec2.SubVV(this.m_vertices[(i + 1) % this.m_count], s, b2PolygonShape.ComputeMass_s_e2);\r\n            const D = b2Vec2.CrossVV(e1, e2);\r\n            const triangleArea = 0.5 * D;\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            center.SelfAdd(b2Vec2.MulSV(triangleArea * k_inv3, b2Vec2.AddVV(e1, e2, b2Vec2.s_t0), b2Vec2.s_t1));\r\n            const ex1 = e1.x;\r\n            const ey1 = e1.y;\r\n            const ex2 = e2.x;\r\n            const ey2 = e2.y;\r\n            const intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\r\n            const inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\r\n            I += (0.25 * k_inv3 * D) * (intx2 + inty2);\r\n        }\r\n        // Total mass\r\n        massData.mass = density * area;\r\n        // Center of mass\r\n        // DEBUG: b2Assert(area > b2_epsilon);\r\n        center.SelfMul(1 / area);\r\n        b2Vec2.AddVV(center, s, massData.center);\r\n        // Inertia tensor relative to the local origin (point s).\r\n        massData.I = density * I;\r\n        // Shift to center of mass then to original body origin.\r\n        massData.I += massData.mass * (b2Vec2.DotVV(massData.center, massData.center) - b2Vec2.DotVV(center, center));\r\n    }\r\n    Validate() {\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const i1 = i;\r\n            const i2 = (i + 1) % this.m_count;\r\n            const p = this.m_vertices[i1];\r\n            const e = b2Vec2.SubVV(this.m_vertices[i2], p, b2PolygonShape.Validate_s_e);\r\n            for (let j = 0; j < this.m_count; ++j) {\r\n                if (j === i1 || j === i2) {\r\n                    continue;\r\n                }\r\n                const v = b2Vec2.SubVV(this.m_vertices[j], p, b2PolygonShape.Validate_s_v);\r\n                const c = b2Vec2.CrossVV(e, v);\r\n                if (c < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = this.m_vertices;\r\n        proxy.m_count = this.m_count;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        // Transform plane into shape co-ordinates\r\n        const normalL = b2Rot.MulTRV(xf.q, normal, b2PolygonShape.ComputeSubmergedArea_s_normalL);\r\n        const offsetL = offset - b2Vec2.DotVV(normal, xf.p);\r\n        const depths = [];\r\n        let diveCount = 0;\r\n        let intoIndex = -1;\r\n        let outoIndex = -1;\r\n        let lastSubmerged = false;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            depths[i] = b2Vec2.DotVV(normalL, this.m_vertices[i]) - offsetL;\r\n            const isSubmerged = depths[i] < (-b2_epsilon);\r\n            if (i > 0) {\r\n                if (isSubmerged) {\r\n                    if (!lastSubmerged) {\r\n                        intoIndex = i - 1;\r\n                        diveCount++;\r\n                    }\r\n                }\r\n                else {\r\n                    if (lastSubmerged) {\r\n                        outoIndex = i - 1;\r\n                        diveCount++;\r\n                    }\r\n                }\r\n            }\r\n            lastSubmerged = isSubmerged;\r\n        }\r\n        switch (diveCount) {\r\n            case 0:\r\n                if (lastSubmerged) {\r\n                    // Completely submerged\r\n                    const md = b2PolygonShape.ComputeSubmergedArea_s_md;\r\n                    this.ComputeMass(md, 1);\r\n                    b2Transform.MulXV(xf, md.center, c);\r\n                    return md.mass;\r\n                }\r\n                else {\r\n                    // Completely dry\r\n                    return 0;\r\n                }\r\n            case 1:\r\n                if (intoIndex === (-1)) {\r\n                    intoIndex = this.m_count - 1;\r\n                }\r\n                else {\r\n                    outoIndex = this.m_count - 1;\r\n                }\r\n                break;\r\n        }\r\n        const intoIndex2 = ((intoIndex + 1) % this.m_count);\r\n        const outoIndex2 = ((outoIndex + 1) % this.m_count);\r\n        const intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);\r\n        const outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);\r\n        const intoVec = b2PolygonShape.ComputeSubmergedArea_s_intoVec.Set(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);\r\n        const outoVec = b2PolygonShape.ComputeSubmergedArea_s_outoVec.Set(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);\r\n        // Initialize accumulator\r\n        let area = 0;\r\n        const center = b2PolygonShape.ComputeSubmergedArea_s_center.SetZero();\r\n        let p2 = this.m_vertices[intoIndex2];\r\n        let p3;\r\n        // An awkward loop from intoIndex2+1 to outIndex2\r\n        let i = intoIndex2;\r\n        while (i !== outoIndex2) {\r\n            i = (i + 1) % this.m_count;\r\n            if (i === outoIndex2) {\r\n                p3 = outoVec;\r\n            }\r\n            else {\r\n                p3 = this.m_vertices[i];\r\n            }\r\n            const triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;\r\n            center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;\r\n            p2 = p3;\r\n        }\r\n        // Normalize and transform centroid\r\n        center.SelfMul(1 / area);\r\n        b2Transform.MulXV(xf, center, c);\r\n        return area;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2PolygonShape = new b2PolygonShape();\\n\");\r\n        log(\"    const vs: b2Vec2[] = [];\\n\");\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            log(\"    vs[%d] = new b2Vec2(%.15f, %.15f);\\n\", i, this.m_vertices[i].x, this.m_vertices[i].y);\r\n        }\r\n        log(\"    shape.Set(vs, %d);\\n\", this.m_count);\r\n    }\r\n    static ComputeCentroid(vs, count, out) {\r\n        // DEBUG: b2Assert(count >= 3);\r\n        const c = out;\r\n        c.SetZero();\r\n        let area = 0;\r\n        // s is the reference point for forming triangles.\r\n        // It's location doesn't change the result (except for rounding error).\r\n        const pRef = b2PolygonShape.ComputeCentroid_s_pRef.SetZero();\r\n        /*\r\n    #if 0\r\n        // This code would put the reference point inside the polygon.\r\n        for (let i: number = 0; i < count; ++i) {\r\n          pRef.SelfAdd(vs[i]);\r\n        }\r\n        pRef.SelfMul(1 / count);\r\n    #endif\r\n        */\r\n        const inv3 = 1 / 3;\r\n        for (let i = 0; i < count; ++i) {\r\n            // Triangle vertices.\r\n            const p1 = pRef;\r\n            const p2 = vs[i];\r\n            const p3 = vs[(i + 1) % count];\r\n            const e1 = b2Vec2.SubVV(p2, p1, b2PolygonShape.ComputeCentroid_s_e1);\r\n            const e2 = b2Vec2.SubVV(p3, p1, b2PolygonShape.ComputeCentroid_s_e2);\r\n            const D = b2Vec2.CrossVV(e1, e2);\r\n            const triangleArea = 0.5 * D;\r\n            area += triangleArea;\r\n            // Area weighted centroid\r\n            c.x += triangleArea * inv3 * (p1.x + p2.x + p3.x);\r\n            c.y += triangleArea * inv3 * (p1.y + p2.y + p3.y);\r\n        }\r\n        // Centroid\r\n        // DEBUG: b2Assert(area > b2_epsilon);\r\n        c.SelfMul(1 / area);\r\n        return c;\r\n    }\r\n}\r\n/// Create a convex hull from the given array of points.\r\n/// @warning the points may be re-ordered, even if they form a convex polygon\r\n/// @warning collinear points are handled but not removed. Collinear points\r\n/// may lead to poor stacking behavior.\r\nb2PolygonShape.Set_s_r = new b2Vec2();\r\nb2PolygonShape.Set_s_v = new b2Vec2();\r\n/// @see b2Shape::TestPoint\r\nb2PolygonShape.TestPoint_s_pLocal = new b2Vec2();\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2PolygonShape.ComputeDistance_s_pLocal = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_normalForMaxDistance = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_minDistance = new b2Vec2();\r\nb2PolygonShape.ComputeDistance_s_distance = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\nb2PolygonShape.RayCast_s_p1 = new b2Vec2();\r\nb2PolygonShape.RayCast_s_p2 = new b2Vec2();\r\nb2PolygonShape.RayCast_s_d = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2PolygonShape.ComputeAABB_s_v = new b2Vec2();\r\n/// @see b2Shape::ComputeMass\r\nb2PolygonShape.ComputeMass_s_center = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_s = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_e1 = new b2Vec2();\r\nb2PolygonShape.ComputeMass_s_e2 = new b2Vec2();\r\nb2PolygonShape.Validate_s_e = new b2Vec2();\r\nb2PolygonShape.Validate_s_v = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_normalL = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_md = new b2MassData();\r\nb2PolygonShape.ComputeSubmergedArea_s_intoVec = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_outoVec = new b2Vec2();\r\nb2PolygonShape.ComputeSubmergedArea_s_center = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_pRef = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_e1 = new b2Vec2();\r\nb2PolygonShape.ComputeCentroid_s_e2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_polygonRadius } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\n/// A line segment (edge) shape. These can be connected in chains or loops\r\n/// to other edge shapes. The connectivity information is used to ensure\r\n/// correct contact normals.\r\nexport class b2EdgeShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_edgeShape, b2_polygonRadius);\r\n        this.m_vertex1 = new b2Vec2();\r\n        this.m_vertex2 = new b2Vec2();\r\n        this.m_vertex0 = new b2Vec2();\r\n        this.m_vertex3 = new b2Vec2();\r\n        this.m_hasVertex0 = false;\r\n        this.m_hasVertex3 = false;\r\n    }\r\n    /// Set this as an isolated edge.\r\n    Set(v1, v2) {\r\n        this.m_vertex1.Copy(v1);\r\n        this.m_vertex2.Copy(v2);\r\n        this.m_hasVertex0 = false;\r\n        this.m_hasVertex3 = false;\r\n        return this;\r\n    }\r\n    /// Implement b2Shape.\r\n    Clone() {\r\n        return new b2EdgeShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        // DEBUG: b2Assert(other instanceof b2EdgeShape);\r\n        this.m_vertex1.Copy(other.m_vertex1);\r\n        this.m_vertex2.Copy(other.m_vertex2);\r\n        this.m_vertex0.Copy(other.m_vertex0);\r\n        this.m_vertex3.Copy(other.m_vertex3);\r\n        this.m_hasVertex0 = other.m_hasVertex0;\r\n        this.m_hasVertex3 = other.m_hasVertex3;\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        return 1;\r\n    }\r\n    /// @see b2Shape::TestPoint\r\n    TestPoint(xf, p) {\r\n        return false;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeDistance_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeDistance_s_v2);\r\n        const d = b2Vec2.SubVV(p, v1, b2EdgeShape.ComputeDistance_s_d);\r\n        const s = b2Vec2.SubVV(v2, v1, b2EdgeShape.ComputeDistance_s_s);\r\n        const ds = b2Vec2.DotVV(d, s);\r\n        if (ds > 0) {\r\n            const s2 = b2Vec2.DotVV(s, s);\r\n            if (ds > s2) {\r\n                b2Vec2.SubVV(p, v2, d);\r\n            }\r\n            else {\r\n                d.SelfMulSub(ds / s2, s);\r\n            }\r\n        }\r\n        normal.Copy(d);\r\n        return normal.Normalize();\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        // Put the ray into the edge's frame of reference.\r\n        const p1 = b2Transform.MulTXV(xf, input.p1, b2EdgeShape.RayCast_s_p1);\r\n        const p2 = b2Transform.MulTXV(xf, input.p2, b2EdgeShape.RayCast_s_p2);\r\n        const d = b2Vec2.SubVV(p2, p1, b2EdgeShape.RayCast_s_d);\r\n        const v1 = this.m_vertex1;\r\n        const v2 = this.m_vertex2;\r\n        const e = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_e);\r\n        const normal = output.normal.Set(e.y, -e.x).SelfNormalize();\r\n        // q = p1 + t * d\r\n        // dot(normal, q - v1) = 0\r\n        // dot(normal, p1 - v1) + t * dot(normal, d) = 0\r\n        const numerator = b2Vec2.DotVV(normal, b2Vec2.SubVV(v1, p1, b2Vec2.s_t0));\r\n        const denominator = b2Vec2.DotVV(normal, d);\r\n        if (denominator === 0) {\r\n            return false;\r\n        }\r\n        const t = numerator / denominator;\r\n        if (t < 0 || input.maxFraction < t) {\r\n            return false;\r\n        }\r\n        const q = b2Vec2.AddVMulSV(p1, t, d, b2EdgeShape.RayCast_s_q);\r\n        // q = v1 + s * r\r\n        // s = dot(q - v1, r) / dot(r, r)\r\n        const r = b2Vec2.SubVV(v2, v1, b2EdgeShape.RayCast_s_r);\r\n        const rr = b2Vec2.DotVV(r, r);\r\n        if (rr === 0) {\r\n            return false;\r\n        }\r\n        const s = b2Vec2.DotVV(b2Vec2.SubVV(q, v1, b2Vec2.s_t0), r) / rr;\r\n        if (s < 0 || 1 < s) {\r\n            return false;\r\n        }\r\n        output.fraction = t;\r\n        b2Rot.MulRV(xf.q, output.normal, output.normal);\r\n        if (numerator > 0) {\r\n            output.normal.SelfNeg();\r\n        }\r\n        return true;\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        const v1 = b2Transform.MulXV(xf, this.m_vertex1, b2EdgeShape.ComputeAABB_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, this.m_vertex2, b2EdgeShape.ComputeAABB_s_v2);\r\n        b2Vec2.MinV(v1, v2, aabb.lowerBound);\r\n        b2Vec2.MaxV(v1, v2, aabb.upperBound);\r\n        const r = this.m_radius;\r\n        aabb.lowerBound.SelfSubXY(r, r);\r\n        aabb.upperBound.SelfAddXY(r, r);\r\n    }\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        massData.mass = 0;\r\n        b2Vec2.MidVV(this.m_vertex1, this.m_vertex2, massData.center);\r\n        massData.I = 0;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_vertex1);\r\n        proxy.m_vertices[1].Copy(this.m_vertex2);\r\n        proxy.m_count = 2;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        c.SetZero();\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2EdgeShape = new b2EdgeShape();\\n\");\r\n        log(\"    shape.m_radius = %.15f;\\n\", this.m_radius);\r\n        log(\"    shape.m_vertex0.Set(%.15f, %.15f);\\n\", this.m_vertex0.x, this.m_vertex0.y);\r\n        log(\"    shape.m_vertex1.Set(%.15f, %.15f);\\n\", this.m_vertex1.x, this.m_vertex1.y);\r\n        log(\"    shape.m_vertex2.Set(%.15f, %.15f);\\n\", this.m_vertex2.x, this.m_vertex2.y);\r\n        log(\"    shape.m_vertex3.Set(%.15f, %.15f);\\n\", this.m_vertex3.x, this.m_vertex3.y);\r\n        log(\"    shape.m_hasVertex0 = %s;\\n\", this.m_hasVertex0);\r\n        log(\"    shape.m_hasVertex3 = %s;\\n\", this.m_hasVertex3);\r\n    }\r\n}\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2EdgeShape.ComputeDistance_s_v1 = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_v2 = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_d = new b2Vec2();\r\nb2EdgeShape.ComputeDistance_s_s = new b2Vec2();\r\n// #endif\r\n/// Implement b2Shape.\r\n// p = p1 + t * d\r\n// v = v1 + s * e\r\n// p1 + t * d = v1 + s * e\r\n// s * e - t * d = p1 - v1\r\nb2EdgeShape.RayCast_s_p1 = new b2Vec2();\r\nb2EdgeShape.RayCast_s_p2 = new b2Vec2();\r\nb2EdgeShape.RayCast_s_d = new b2Vec2();\r\nb2EdgeShape.RayCast_s_e = new b2Vec2();\r\nb2EdgeShape.RayCast_s_q = new b2Vec2();\r\nb2EdgeShape.RayCast_s_r = new b2Vec2();\r\n/// @see b2Shape::ComputeAABB\r\nb2EdgeShape.ComputeAABB_s_v1 = new b2Vec2();\r\nb2EdgeShape.ComputeAABB_s_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert, b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2_polygonRadius } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Shape, b2ShapeType } from \"./b2Shape\";\r\nimport { b2EdgeShape } from \"./b2EdgeShape\";\r\n/// A chain shape is a free form sequence of line segments.\r\n/// The chain has two-sided collision, so you can use inside and outside collision.\r\n/// Therefore, you may use any winding order.\r\n/// Since there may be many vertices, they are allocated using b2Alloc.\r\n/// Connectivity information is used to create smooth collisions.\r\n/// WARNING: The chain will not collide properly if there are self-intersections.\r\nexport class b2ChainShape extends b2Shape {\r\n    constructor() {\r\n        super(b2ShapeType.e_chainShape, b2_polygonRadius);\r\n        this.m_vertices = [];\r\n        this.m_count = 0;\r\n        this.m_prevVertex = new b2Vec2();\r\n        this.m_nextVertex = new b2Vec2();\r\n        this.m_hasPrevVertex = false;\r\n        this.m_hasNextVertex = false;\r\n    }\r\n    /// Create a loop. This automatically adjusts connectivity.\r\n    /// @param vertices an array of vertices, these are copied\r\n    /// @param count the vertex count\r\n    CreateLoop(vertices, count = vertices.length, start = 0) {\r\n        // DEBUG: b2Assert(count >= 3);\r\n        if (count < 3) {\r\n            return this;\r\n        }\r\n        // DEBUG: for (let i: number = 1; i < count; ++i) {\r\n        // DEBUG:   const v1 = vertices[start + i - 1];\r\n        // DEBUG:   const v2 = vertices[start + i];\r\n        // DEBUG:   // If the code crashes here, it means your vertices are too close together.\r\n        // DEBUG:   b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\r\n        // DEBUG: }\r\n        this.m_count = count + 1;\r\n        this.m_vertices = b2Vec2.MakeArray(this.m_count);\r\n        for (let i = 0; i < count; ++i) {\r\n            this.m_vertices[i].Copy(vertices[start + i]);\r\n        }\r\n        this.m_vertices[count].Copy(this.m_vertices[0]);\r\n        this.m_prevVertex.Copy(this.m_vertices[this.m_count - 2]);\r\n        this.m_nextVertex.Copy(this.m_vertices[1]);\r\n        this.m_hasPrevVertex = true;\r\n        this.m_hasNextVertex = true;\r\n        return this;\r\n    }\r\n    /// Create a chain with isolated end vertices.\r\n    /// @param vertices an array of vertices, these are copied\r\n    /// @param count the vertex count\r\n    CreateChain(vertices, count = vertices.length, start = 0) {\r\n        // DEBUG: b2Assert(count >= 2);\r\n        // DEBUG: for (let i: number = 1; i < count; ++i) {\r\n        // DEBUG:   const v1 = vertices[start + i - 1];\r\n        // DEBUG:   const v2 = vertices[start + i];\r\n        // DEBUG:   // If the code crashes here, it means your vertices are too close together.\r\n        // DEBUG:   b2Assert(b2Vec2.DistanceSquaredVV(v1, v2) > b2_linearSlop * b2_linearSlop);\r\n        // DEBUG: }\r\n        this.m_count = count;\r\n        this.m_vertices = b2Vec2.MakeArray(count);\r\n        for (let i = 0; i < count; ++i) {\r\n            this.m_vertices[i].Copy(vertices[start + i]);\r\n        }\r\n        this.m_hasPrevVertex = false;\r\n        this.m_hasNextVertex = false;\r\n        this.m_prevVertex.SetZero();\r\n        this.m_nextVertex.SetZero();\r\n        return this;\r\n    }\r\n    /// Establish connectivity to a vertex that precedes the first vertex.\r\n    /// Don't call this for loops.\r\n    SetPrevVertex(prevVertex) {\r\n        this.m_prevVertex.Copy(prevVertex);\r\n        this.m_hasPrevVertex = true;\r\n        return this;\r\n    }\r\n    /// Establish connectivity to a vertex that follows the last vertex.\r\n    /// Don't call this for loops.\r\n    SetNextVertex(nextVertex) {\r\n        this.m_nextVertex.Copy(nextVertex);\r\n        this.m_hasNextVertex = true;\r\n        return this;\r\n    }\r\n    /// Implement b2Shape. Vertices are cloned using b2Alloc.\r\n    Clone() {\r\n        return new b2ChainShape().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        super.Copy(other);\r\n        // DEBUG: b2Assert(other instanceof b2ChainShape);\r\n        this.CreateChain(other.m_vertices, other.m_count);\r\n        this.m_prevVertex.Copy(other.m_prevVertex);\r\n        this.m_nextVertex.Copy(other.m_nextVertex);\r\n        this.m_hasPrevVertex = other.m_hasPrevVertex;\r\n        this.m_hasNextVertex = other.m_hasNextVertex;\r\n        return this;\r\n    }\r\n    /// @see b2Shape::GetChildCount\r\n    GetChildCount() {\r\n        // edge count = vertex count - 1\r\n        return this.m_count - 1;\r\n    }\r\n    /// Get a child edge.\r\n    GetChildEdge(edge, index) {\r\n        // DEBUG: b2Assert(0 <= index && index < this.m_count - 1);\r\n        edge.m_type = b2ShapeType.e_edgeShape;\r\n        edge.m_radius = this.m_radius;\r\n        edge.m_vertex1.Copy(this.m_vertices[index]);\r\n        edge.m_vertex2.Copy(this.m_vertices[index + 1]);\r\n        if (index > 0) {\r\n            edge.m_vertex0.Copy(this.m_vertices[index - 1]);\r\n            edge.m_hasVertex0 = true;\r\n        }\r\n        else {\r\n            edge.m_vertex0.Copy(this.m_prevVertex);\r\n            edge.m_hasVertex0 = this.m_hasPrevVertex;\r\n        }\r\n        if (index < this.m_count - 2) {\r\n            edge.m_vertex3.Copy(this.m_vertices[index + 2]);\r\n            edge.m_hasVertex3 = true;\r\n        }\r\n        else {\r\n            edge.m_vertex3.Copy(this.m_nextVertex);\r\n            edge.m_hasVertex3 = this.m_hasNextVertex;\r\n        }\r\n    }\r\n    /// This always return false.\r\n    /// @see b2Shape::TestPoint\r\n    TestPoint(xf, p) {\r\n        return false;\r\n    }\r\n    ComputeDistance(xf, p, normal, childIndex) {\r\n        const edge = b2ChainShape.ComputeDistance_s_edgeShape;\r\n        this.GetChildEdge(edge, childIndex);\r\n        return edge.ComputeDistance(xf, p, normal, 0);\r\n    }\r\n    RayCast(output, input, xf, childIndex) {\r\n        // DEBUG: b2Assert(childIndex < this.m_count);\r\n        const edgeShape = b2ChainShape.RayCast_s_edgeShape;\r\n        edgeShape.m_vertex1.Copy(this.m_vertices[childIndex]);\r\n        edgeShape.m_vertex2.Copy(this.m_vertices[(childIndex + 1) % this.m_count]);\r\n        return edgeShape.RayCast(output, input, xf, 0);\r\n    }\r\n    ComputeAABB(aabb, xf, childIndex) {\r\n        // DEBUG: b2Assert(childIndex < this.m_count);\r\n        const vertexi1 = this.m_vertices[childIndex];\r\n        const vertexi2 = this.m_vertices[(childIndex + 1) % this.m_count];\r\n        const v1 = b2Transform.MulXV(xf, vertexi1, b2ChainShape.ComputeAABB_s_v1);\r\n        const v2 = b2Transform.MulXV(xf, vertexi2, b2ChainShape.ComputeAABB_s_v2);\r\n        b2Vec2.MinV(v1, v2, aabb.lowerBound);\r\n        b2Vec2.MaxV(v1, v2, aabb.upperBound);\r\n    }\r\n    /// Chains have zero mass.\r\n    /// @see b2Shape::ComputeMass\r\n    ComputeMass(massData, density) {\r\n        massData.mass = 0;\r\n        massData.center.SetZero();\r\n        massData.I = 0;\r\n    }\r\n    SetupDistanceProxy(proxy, index) {\r\n        // DEBUG: b2Assert(0 <= index && index < this.m_count);\r\n        proxy.m_vertices = proxy.m_buffer;\r\n        proxy.m_vertices[0].Copy(this.m_vertices[index]);\r\n        if (index + 1 < this.m_count) {\r\n            proxy.m_vertices[1].Copy(this.m_vertices[index + 1]);\r\n        }\r\n        else {\r\n            proxy.m_vertices[1].Copy(this.m_vertices[0]);\r\n        }\r\n        proxy.m_count = 2;\r\n        proxy.m_radius = this.m_radius;\r\n    }\r\n    ComputeSubmergedArea(normal, offset, xf, c) {\r\n        c.SetZero();\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"    const shape: b2ChainShape = new b2ChainShape();\\n\");\r\n        log(\"    const vs: b2Vec2[] = [];\\n\");\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            log(\"    vs[%d] = new bVec2(%.15f, %.15f);\\n\", i, this.m_vertices[i].x, this.m_vertices[i].y);\r\n        }\r\n        log(\"    shape.CreateChain(vs, %d);\\n\", this.m_count);\r\n        log(\"    shape.m_prevVertex.Set(%.15f, %.15f);\\n\", this.m_prevVertex.x, this.m_prevVertex.y);\r\n        log(\"    shape.m_nextVertex.Set(%.15f, %.15f);\\n\", this.m_nextVertex.x, this.m_nextVertex.y);\r\n        log(\"    shape.m_hasPrevVertex = %s;\\n\", (this.m_hasPrevVertex) ? (\"true\") : (\"false\"));\r\n        log(\"    shape.m_hasNextVertex = %s;\\n\", (this.m_hasNextVertex) ? (\"true\") : (\"false\"));\r\n    }\r\n}\r\n// #if B2_ENABLE_PARTICLE\r\n/// @see b2Shape::ComputeDistance\r\nb2ChainShape.ComputeDistance_s_edgeShape = new b2EdgeShape();\r\n// #endif\r\n/// Implement b2Shape.\r\nb2ChainShape.RayCast_s_edgeShape = new b2EdgeShape();\r\n/// @see b2Shape::ComputeAABB\r\nb2ChainShape.ComputeAABB_s_v1 = new b2Vec2();\r\nb2ChainShape.ComputeAABB_s_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2MakeArray, b2Maybe } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2AABB } from \"../Collision/b2Collision\";\r\nimport { b2MassData } from \"../Collision/Shapes/b2Shape\";\r\n/// This holds contact filtering data.\r\nexport class b2Filter {\r\n    constructor() {\r\n        /// The collision category bits. Normally you would just set one bit.\r\n        this.categoryBits = 0x0001;\r\n        /// The collision mask bits. This states the categories that this\r\n        /// shape would accept for collision.\r\n        this.maskBits = 0xFFFF;\r\n        /// Collision groups allow a certain group of objects to never collide (negative)\r\n        /// or always collide (positive). Zero means no collision group. Non-zero group\r\n        /// filtering always wins against the mask bits.\r\n        this.groupIndex = 0;\r\n    }\r\n    Clone() {\r\n        return new b2Filter().Copy(this);\r\n    }\r\n    Copy(other) {\r\n        // DEBUG: b2Assert(this !== other);\r\n        this.categoryBits = other.categoryBits;\r\n        this.maskBits = other.maskBits;\r\n        this.groupIndex = other.groupIndex || 0;\r\n        return this;\r\n    }\r\n}\r\nb2Filter.DEFAULT = new b2Filter();\r\n/// A fixture definition is used to create a fixture. This class defines an\r\n/// abstract fixture definition. You can reuse fixture definitions safely.\r\nexport class b2FixtureDef {\r\n    constructor() {\r\n        /// Use this to store application specific fixture data.\r\n        this.userData = null;\r\n        /// The friction coefficient, usually in the range [0,1].\r\n        this.friction = 0.2;\r\n        /// The restitution (elasticity) usually in the range [0,1].\r\n        this.restitution = 0;\r\n        /// The density, usually in kg/m^2.\r\n        this.density = 0;\r\n        /// A sensor shape collects contact information but never generates a collision\r\n        /// response.\r\n        this.isSensor = false;\r\n        /// Contact filtering data.\r\n        this.filter = new b2Filter();\r\n    }\r\n}\r\n/// This proxy is used internally to connect fixtures to the broad-phase.\r\nexport class b2FixtureProxy {\r\n    constructor(fixture) {\r\n        this.aabb = new b2AABB();\r\n        this.childIndex = 0;\r\n        this.fixture = fixture;\r\n    }\r\n}\r\n/// A fixture is used to attach a shape to a body for collision detection. A fixture\r\n/// inherits its transform from its parent. Fixtures hold additional non-geometric data\r\n/// such as friction, collision filters, etc.\r\n/// Fixtures are created via b2Body::CreateFixture.\r\n/// @warning you cannot reuse fixtures.\r\nexport class b2Fixture {\r\n    constructor(def, body) {\r\n        this.m_density = 0;\r\n        this.m_next = null;\r\n        this.m_friction = 0;\r\n        this.m_restitution = 0;\r\n        this.m_proxies = [];\r\n        this.m_proxyCount = 0;\r\n        this.m_filter = new b2Filter();\r\n        this.m_isSensor = false;\r\n        this.m_userData = null;\r\n        this.m_body = body;\r\n        this.m_shape = def.shape.Clone();\r\n    }\r\n    /// Get the type of the child shape. You can use this to down cast to the concrete shape.\r\n    /// @return the shape type.\r\n    GetType() {\r\n        return this.m_shape.GetType();\r\n    }\r\n    /// Get the child shape. You can modify the child shape, however you should not change the\r\n    /// number of vertices because this will crash some collision caching mechanisms.\r\n    /// Manipulating the shape may lead to non-physical behavior.\r\n    GetShape() {\r\n        return this.m_shape;\r\n    }\r\n    /// Set if this fixture is a sensor.\r\n    SetSensor(sensor) {\r\n        if (sensor !== this.m_isSensor) {\r\n            this.m_body.SetAwake(true);\r\n            this.m_isSensor = sensor;\r\n        }\r\n    }\r\n    /// Is this fixture a sensor (non-solid)?\r\n    /// @return the true if the shape is a sensor.\r\n    IsSensor() {\r\n        return this.m_isSensor;\r\n    }\r\n    /// Set the contact filtering data. This will not update contacts until the next time\r\n    /// step when either parent body is active and awake.\r\n    /// This automatically calls Refilter.\r\n    SetFilterData(filter) {\r\n        this.m_filter.Copy(filter);\r\n        this.Refilter();\r\n    }\r\n    /// Get the contact filtering data.\r\n    GetFilterData() {\r\n        return this.m_filter;\r\n    }\r\n    /// Call this if you want to establish collision that was previously disabled by b2ContactFilter::ShouldCollide.\r\n    Refilter() {\r\n        // Flag associated contacts for filtering.\r\n        let edge = this.m_body.GetContactList();\r\n        while (edge) {\r\n            const contact = edge.contact;\r\n            const fixtureA = contact.GetFixtureA();\r\n            const fixtureB = contact.GetFixtureB();\r\n            if (fixtureA === this || fixtureB === this) {\r\n                contact.FlagForFiltering();\r\n            }\r\n            edge = edge.next;\r\n        }\r\n        const world = this.m_body.GetWorld();\r\n        if (world === null) {\r\n            return;\r\n        }\r\n        // Touch each proxy so that new pairs may be created\r\n        const broadPhase = world.m_contactManager.m_broadPhase;\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            broadPhase.TouchProxy(this.m_proxies[i].treeNode);\r\n        }\r\n    }\r\n    /// Get the parent body of this fixture. This is NULL if the fixture is not attached.\r\n    /// @return the parent body.\r\n    GetBody() {\r\n        return this.m_body;\r\n    }\r\n    /// Get the next fixture in the parent body's fixture list.\r\n    /// @return the next shape.\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /// Get the user data that was assigned in the fixture definition. Use this to\r\n    /// store your application specific data.\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    /// Set the user data. Use this to store your application specific data.\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    /// Test a point for containment in this fixture.\r\n    /// @param p a point in world coordinates.\r\n    TestPoint(p) {\r\n        return this.m_shape.TestPoint(this.m_body.GetTransform(), p);\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ComputeDistance(p, normal, childIndex) {\r\n        return this.m_shape.ComputeDistance(this.m_body.GetTransform(), p, normal, childIndex);\r\n    }\r\n    // #endif\r\n    /// Cast a ray against this shape.\r\n    /// @param output the ray-cast results.\r\n    /// @param input the ray-cast input parameters.\r\n    RayCast(output, input, childIndex) {\r\n        return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex);\r\n    }\r\n    /// Get the mass data for this fixture. The mass data is based on the density and\r\n    /// the shape. The rotational inertia is about the shape's origin. This operation\r\n    /// may be expensive.\r\n    GetMassData(massData = new b2MassData()) {\r\n        this.m_shape.ComputeMass(massData, this.m_density);\r\n        return massData;\r\n    }\r\n    /// Set the density of this fixture. This will _not_ automatically adjust the mass\r\n    /// of the body. You must call b2Body::ResetMassData to update the body's mass.\r\n    SetDensity(density) {\r\n        this.m_density = density;\r\n    }\r\n    /// Get the density of this fixture.\r\n    GetDensity() {\r\n        return this.m_density;\r\n    }\r\n    /// Get the coefficient of friction.\r\n    GetFriction() {\r\n        return this.m_friction;\r\n    }\r\n    /// Set the coefficient of friction. This will _not_ change the friction of\r\n    /// existing contacts.\r\n    SetFriction(friction) {\r\n        this.m_friction = friction;\r\n    }\r\n    /// Get the coefficient of restitution.\r\n    GetRestitution() {\r\n        return this.m_restitution;\r\n    }\r\n    /// Set the coefficient of restitution. This will _not_ change the restitution of\r\n    /// existing contacts.\r\n    SetRestitution(restitution) {\r\n        this.m_restitution = restitution;\r\n    }\r\n    /// Get the fixture's AABB. This AABB may be enlarge and/or stale.\r\n    /// If you need a more accurate AABB, compute it using the shape and\r\n    /// the body transform.\r\n    GetAABB(childIndex) {\r\n        // DEBUG: b2Assert(0 <= childIndex && childIndex < this.m_proxyCount);\r\n        return this.m_proxies[childIndex].aabb;\r\n    }\r\n    /// Dump this fixture to the log file.\r\n    Dump(log, bodyIndex) {\r\n        log(\"    const fd: b2FixtureDef = new b2FixtureDef();\\n\");\r\n        log(\"    fd.friction = %.15f;\\n\", this.m_friction);\r\n        log(\"    fd.restitution = %.15f;\\n\", this.m_restitution);\r\n        log(\"    fd.density = %.15f;\\n\", this.m_density);\r\n        log(\"    fd.isSensor = %s;\\n\", (this.m_isSensor) ? (\"true\") : (\"false\"));\r\n        log(\"    fd.filter.categoryBits = %d;\\n\", this.m_filter.categoryBits);\r\n        log(\"    fd.filter.maskBits = %d;\\n\", this.m_filter.maskBits);\r\n        log(\"    fd.filter.groupIndex = %d;\\n\", this.m_filter.groupIndex);\r\n        this.m_shape.Dump(log);\r\n        log(\"\\n\");\r\n        log(\"    fd.shape = shape;\\n\");\r\n        log(\"\\n\");\r\n        log(\"    bodies[%d].CreateFixture(fd);\\n\", bodyIndex);\r\n    }\r\n    // We need separation create/destroy functions from the constructor/destructor because\r\n    // the destructor cannot access the allocator (no destructor arguments allowed by C++).\r\n    Create(def) {\r\n        this.m_userData = def.userData;\r\n        this.m_friction = b2Maybe(def.friction, 0.2);\r\n        this.m_restitution = b2Maybe(def.restitution, 0);\r\n        // this.m_body = body;\r\n        this.m_next = null;\r\n        this.m_filter.Copy(b2Maybe(def.filter, b2Filter.DEFAULT));\r\n        this.m_isSensor = b2Maybe(def.isSensor, false);\r\n        // Reserve proxy space\r\n        // const childCount = m_shape->GetChildCount();\r\n        // m_proxies = (b2FixtureProxy*)allocator->Allocate(childCount * sizeof(b2FixtureProxy));\r\n        // for (int32 i = 0; i < childCount; ++i)\r\n        // {\r\n        //   m_proxies[i].fixture = NULL;\r\n        //   m_proxies[i].proxyId = b2BroadPhase::e_nullProxy;\r\n        // }\r\n        // this.m_proxies = b2FixtureProxy.MakeArray(this.m_shape.GetChildCount());\r\n        this.m_proxies = b2MakeArray(this.m_shape.GetChildCount(), (i) => new b2FixtureProxy(this));\r\n        this.m_proxyCount = 0;\r\n        this.m_density = b2Maybe(def.density, 0);\r\n    }\r\n    Destroy() {\r\n        // The proxies must be destroyed before calling this.\r\n        // DEBUG: b2Assert(this.m_proxyCount === 0);\r\n        // Free the proxy array.\r\n        // int32 childCount = m_shape->GetChildCount();\r\n        // allocator->Free(m_proxies, childCount * sizeof(b2FixtureProxy));\r\n        // m_proxies = NULL;\r\n        // this.m_shape = null;\r\n    }\r\n    // These support body activation/deactivation.\r\n    CreateProxies(xf) {\r\n        const broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;\r\n        // DEBUG: b2Assert(this.m_proxyCount === 0);\r\n        // Create proxies in the broad-phase.\r\n        this.m_proxyCount = this.m_shape.GetChildCount();\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i] = new b2FixtureProxy(this);\r\n            this.m_shape.ComputeAABB(proxy.aabb, xf, i);\r\n            proxy.treeNode = broadPhase.CreateProxy(proxy.aabb, proxy);\r\n            proxy.childIndex = i;\r\n        }\r\n    }\r\n    DestroyProxies() {\r\n        const broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;\r\n        // Destroy proxies in the broad-phase.\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i];\r\n            delete proxy.treeNode.userData;\r\n            broadPhase.DestroyProxy(proxy.treeNode);\r\n            delete proxy.treeNode;\r\n        }\r\n        this.m_proxyCount = 0;\r\n    }\r\n    TouchProxies() {\r\n        const broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;\r\n        const proxyCount = this.m_proxyCount;\r\n        for (let i = 0; i < proxyCount; ++i) {\r\n            broadPhase.TouchProxy(this.m_proxies[i].treeNode);\r\n        }\r\n    }\r\n    Synchronize(transform1, transform2) {\r\n        if (this.m_proxyCount === 0) {\r\n            return;\r\n        }\r\n        const broadPhase = this.m_body.m_world.m_contactManager.m_broadPhase;\r\n        for (let i = 0; i < this.m_proxyCount; ++i) {\r\n            const proxy = this.m_proxies[i];\r\n            // Compute an AABB that covers the swept shape (may miss some rotation effect).\r\n            const aabb1 = b2Fixture.Synchronize_s_aabb1;\r\n            const aabb2 = b2Fixture.Synchronize_s_aabb2;\r\n            this.m_shape.ComputeAABB(aabb1, transform1, i);\r\n            this.m_shape.ComputeAABB(aabb2, transform2, i);\r\n            proxy.aabb.Combine2(aabb1, aabb2);\r\n            const displacement = b2Vec2.SubVV(transform2.p, transform1.p, b2Fixture.Synchronize_s_displacement);\r\n            broadPhase.MoveProxy(proxy.treeNode, proxy.aabb, displacement);\r\n        }\r\n    }\r\n}\r\nb2Fixture.Synchronize_s_aabb1 = new b2AABB();\r\nb2Fixture.Synchronize_s_aabb2 = new b2AABB();\r\nb2Fixture.Synchronize_s_displacement = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJGaXh0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvRHluYW1pY3MvYjJGaXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBRUYsMERBQTBEO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLE1BQU0sRUFBZSxNQUFNLGtCQUFrQixDQUFDO0FBRXZELE9BQU8sRUFBRSxNQUFNLEVBQW1DLE1BQU0sMEJBQTBCLENBQUM7QUFFbkYsT0FBTyxFQUF3QixVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQWtCL0Usc0NBQXNDO0FBQ3RDLE1BQU0sT0FBTyxRQUFRO0lBQXJCO1FBR0UscUVBQXFFO1FBQzlELGlCQUFZLEdBQVcsTUFBTSxDQUFDO1FBRXJDLGlFQUFpRTtRQUNqRSxxQ0FBcUM7UUFDOUIsYUFBUSxHQUFXLE1BQU0sQ0FBQztRQUVqQyxpRkFBaUY7UUFDakYsK0VBQStFO1FBQy9FLGdEQUFnRDtRQUN6QyxlQUFVLEdBQVcsQ0FBQyxDQUFDO0lBYWhDLENBQUM7SUFYUSxLQUFLO1FBQ1YsT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWdCO1FBQzFCLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUM7UUFDeEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQXhCc0IsZ0JBQU8sR0FBdUIsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQXNEdEUsMkVBQTJFO0FBQzNF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","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_linearSlop, b2_maxLinearCorrection, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Distance joint definition. This requires defining an\r\n/// anchor point on both bodies and the non-zero length of the\r\n/// distance joint. The definition uses local anchor points\r\n/// so that the initial configuration can violate the constraint\r\n/// slightly. This helps when saving and loading a game.\r\n/// @warning Do not use a zero or short length.\r\nexport class b2DistanceJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_distanceJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.length = 1;\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    Initialize(b1, b2, anchor1, anchor2) {\r\n        this.bodyA = b1;\r\n        this.bodyB = b2;\r\n        this.bodyA.GetLocalPoint(anchor1, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor2, this.localAnchorB);\r\n        this.length = b2Vec2.DistanceVV(anchor1, anchor2);\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n}\r\nexport class b2DistanceJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_bias = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_gamma = 0;\r\n        this.m_impulse = 0;\r\n        this.m_length = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_u = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n        this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_length = def.length;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        out.x = inv_dt * this.m_impulse * this.m_u.x;\r\n        out.y = inv_dt * this.m_impulse * this.m_u.y;\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetLength(length) {\r\n        this.m_length = length;\r\n    }\r\n    Length() {\r\n        return this.m_length;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2DistanceJointDef = new b2DistanceJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.length = %.15f;\\n\", this.m_length);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // m_u = cB + m_rB - cA - m_rA;\r\n        this.m_u.x = cB.x + this.m_rB.x - cA.x - this.m_rA.x;\r\n        this.m_u.y = cB.y + this.m_rB.y - cA.y - this.m_rA.y;\r\n        // Handle singularity.\r\n        const length = this.m_u.Length();\r\n        if (length > b2_linearSlop) {\r\n            this.m_u.SelfMul(1 / length);\r\n        }\r\n        else {\r\n            this.m_u.SetZero();\r\n        }\r\n        // float32 crAu = b2Cross(m_rA, m_u);\r\n        const crAu = b2Vec2.CrossVV(this.m_rA, this.m_u);\r\n        // float32 crBu = b2Cross(m_rB, m_u);\r\n        const crBu = b2Vec2.CrossVV(this.m_rB, this.m_u);\r\n        // float32 invMass = m_invMassA + m_invIA * crAu * crAu + m_invMassB + m_invIB * crBu * crBu;\r\n        let invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB + this.m_invIB * crBu * crBu;\r\n        // Compute the effective mass matrix.\r\n        this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        if (this.m_frequencyHz > 0) {\r\n            const C = length - this.m_length;\r\n            // Frequency\r\n            const omega = 2 * b2_pi * this.m_frequencyHz;\r\n            // Damping coefficient\r\n            const d = 2 * this.m_mass * this.m_dampingRatio * omega;\r\n            // Spring stiffness\r\n            const k = this.m_mass * omega * omega;\r\n            // magic formulas\r\n            const h = data.step.dt;\r\n            this.m_gamma = h * (d + h * k);\r\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n            this.m_bias = C * h * k * this.m_gamma;\r\n            invMass += this.m_gamma;\r\n            this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        }\r\n        else {\r\n            this.m_gamma = 0;\r\n            this.m_bias = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale the impulse to support a variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_u;\r\n            const P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2DistanceJoint.InitVelocityConstraints_s_P);\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            // wA -= m_invIA * b2Cross(m_rA, P);\r\n            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            // wB += m_invIB * b2Cross(m_rB, P);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2DistanceJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2DistanceJoint.SolveVelocityConstraints_s_vpB);\r\n        // float32 Cdot = b2Dot(m_u, vpB - vpA);\r\n        const Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\r\n        const impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));\r\n        this.m_impulse += impulse;\r\n        // b2Vec2 P = impulse * m_u;\r\n        const P = b2Vec2.MulSV(impulse, this.m_u, b2DistanceJoint.SolveVelocityConstraints_s_P);\r\n        // vA -= m_invMassA * P;\r\n        vA.SelfMulSub(this.m_invMassA, P);\r\n        // wA -= m_invIA * b2Cross(m_rA, P);\r\n        wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n        // vB += m_invMassB * P;\r\n        vB.SelfMulAdd(this.m_invMassB, P);\r\n        // wB += m_invIB * b2Cross(m_rB, P);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        if (this.m_frequencyHz > 0) {\r\n            // There is no position correction for soft distance constraints.\r\n            return true;\r\n        }\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA); // use m_rA\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB); // use m_rB\r\n        // b2Vec2 u = cB + rB - cA - rA;\r\n        const u = this.m_u; // use m_u\r\n        u.x = cB.x + rB.x - cA.x - rA.x;\r\n        u.y = cB.y + rB.y - cA.y - rA.y;\r\n        // float32 length = u.Normalize();\r\n        const length = this.m_u.Normalize();\r\n        // float32 C = length - m_length;\r\n        let C = length - this.m_length;\r\n        C = b2Clamp(C, (-b2_maxLinearCorrection), b2_maxLinearCorrection);\r\n        const impulse = (-this.m_mass * C);\r\n        // b2Vec2 P = impulse * u;\r\n        const P = b2Vec2.MulSV(impulse, u, b2DistanceJoint.SolvePositionConstraints_s_P);\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        // aA -= m_invIA * b2Cross(rA, P);\r\n        aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        // aB += m_invIB * b2Cross(rB, P);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return b2Abs(C) < b2_linearSlop;\r\n    }\r\n}\r\nb2DistanceJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2DistanceJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2DistanceJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_epsilon, b2_linearSlop, b2_maxLinearCorrection, b2MakeNumberArray, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Sq, b2Sqrt, b2Vec2 } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\nimport { b2DistanceJointDef } from \"./b2DistanceJoint\";\r\nexport class b2AreaJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_areaJoint);\r\n        this.bodies = [];\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    AddBody(body) {\r\n        this.bodies.push(body);\r\n        if (this.bodies.length === 1) {\r\n            this.bodyA = body;\r\n        }\r\n        else if (this.bodies.length === 2) {\r\n            this.bodyB = body;\r\n        }\r\n    }\r\n}\r\nexport class b2AreaJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        this.m_impulse = 0;\r\n        this.m_targetArea = 0;\r\n        // DEBUG: b2Assert(def.bodies.length >= 3, \"You cannot create an area joint with less than three bodies.\");\r\n        this.m_bodies = def.bodies;\r\n        this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n        this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n        this.m_targetLengths = b2MakeNumberArray(def.bodies.length);\r\n        this.m_normals = b2Vec2.MakeArray(def.bodies.length);\r\n        this.m_joints = []; // b2MakeNullArray(def.bodies.length);\r\n        this.m_deltas = b2Vec2.MakeArray(def.bodies.length);\r\n        this.m_delta = new b2Vec2();\r\n        const djd = new b2DistanceJointDef();\r\n        djd.frequencyHz = this.m_frequencyHz;\r\n        djd.dampingRatio = this.m_dampingRatio;\r\n        this.m_targetArea = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const body_c = body.GetWorldCenter();\r\n            const next_c = next.GetWorldCenter();\r\n            this.m_targetLengths[i] = b2Vec2.DistanceVV(body_c, next_c);\r\n            this.m_targetArea += b2Vec2.CrossVV(body_c, next_c);\r\n            djd.Initialize(body, next, body_c, next_c);\r\n            this.m_joints[i] = body.GetWorld().CreateJoint(djd);\r\n        }\r\n        this.m_targetArea *= 0.5;\r\n    }\r\n    GetAnchorA(out) {\r\n        return out;\r\n    }\r\n    GetAnchorB(out) {\r\n        return out;\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n        for (let i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetFrequency(hz);\r\n        }\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n        for (let i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetDampingRatio(ratio);\r\n        }\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    Dump(log) {\r\n        log(\"Area joint dumping is not supported.\\n\");\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const prev = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const prev_c = data.positions[prev.m_islandIndex].c;\r\n            const next_c = data.positions[next.m_islandIndex].c;\r\n            const delta = this.m_deltas[i];\r\n            b2Vec2.SubVV(next_c, prev_c, delta);\r\n        }\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse *= data.step.dtRatio;\r\n            for (let i = 0; i < this.m_bodies.length; ++i) {\r\n                const body = this.m_bodies[i];\r\n                const body_v = data.velocities[body.m_islandIndex].v;\r\n                const delta = this.m_deltas[i];\r\n                body_v.x += body.m_invMass * delta.y * 0.5 * this.m_impulse;\r\n                body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\r\n            }\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        let dotMassSum = 0;\r\n        let crossMassSum = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_v = data.velocities[body.m_islandIndex].v;\r\n            const delta = this.m_deltas[i];\r\n            dotMassSum += delta.LengthSquared() / body.GetMass();\r\n            crossMassSum += b2Vec2.CrossVV(body_v, delta);\r\n        }\r\n        const lambda = -2 * crossMassSum / dotMassSum;\r\n        // lambda = b2Clamp(lambda, -b2_maxLinearCorrection, b2_maxLinearCorrection);\r\n        this.m_impulse += lambda;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_v = data.velocities[body.m_islandIndex].v;\r\n            const delta = this.m_deltas[i];\r\n            body_v.x += body.m_invMass * delta.y * 0.5 * lambda;\r\n            body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\r\n        }\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        let perimeter = 0;\r\n        let area = 0;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            const body_c = data.positions[body.m_islandIndex].c;\r\n            const next_c = data.positions[next.m_islandIndex].c;\r\n            const delta = b2Vec2.SubVV(next_c, body_c, this.m_delta);\r\n            let dist = delta.Length();\r\n            if (dist < b2_epsilon) {\r\n                dist = 1;\r\n            }\r\n            this.m_normals[i].x = delta.y / dist;\r\n            this.m_normals[i].y = -delta.x / dist;\r\n            perimeter += dist;\r\n            area += b2Vec2.CrossVV(body_c, next_c);\r\n        }\r\n        area *= 0.5;\r\n        const deltaArea = this.m_targetArea - area;\r\n        const toExtrude = 0.5 * deltaArea / perimeter;\r\n        let done = true;\r\n        for (let i = 0; i < this.m_bodies.length; ++i) {\r\n            const body = this.m_bodies[i];\r\n            const body_c = data.positions[body.m_islandIndex].c;\r\n            const next_i = (i + 1) % this.m_bodies.length;\r\n            const delta = b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\r\n            delta.SelfMul(toExtrude);\r\n            const norm_sq = delta.LengthSquared();\r\n            if (norm_sq > b2Sq(b2_maxLinearCorrection)) {\r\n                delta.SelfMul(b2_maxLinearCorrection / b2Sqrt(norm_sq));\r\n            }\r\n            if (norm_sq > b2Sq(b2_linearSlop)) {\r\n                done = false;\r\n            }\r\n            body_c.x += delta.x;\r\n            body_c.y += delta.y;\r\n        }\r\n        return done;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Clamp, b2Vec2, b2Mat22, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Friction joint definition.\r\nexport class b2FrictionJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_frictionJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.maxForce = 0;\r\n        this.maxTorque = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n    }\r\n}\r\nexport class b2FrictionJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        // Solver shared\r\n        this.m_linearImpulse = new b2Vec2();\r\n        this.m_angularImpulse = 0;\r\n        this.m_maxForce = 0;\r\n        this.m_maxTorque = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_linearMass = new b2Mat22();\r\n        this.m_angularMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        this.m_localAnchorA.Copy(def.localAnchorA);\r\n        this.m_localAnchorB.Copy(def.localAnchorB);\r\n        this.m_linearImpulse.SetZero();\r\n        this.m_maxForce = b2Maybe(def.maxForce, 0);\r\n        this.m_maxTorque = b2Maybe(def.maxTorque, 0);\r\n        this.m_linearMass.SetZero();\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        // const cA: b2Vec2 = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        // const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // const qA: b2Rot = new b2Rot(aA), qB: b2Rot = new b2Rot(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective mass matrix.\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const K = this.m_K; // new b2Mat22();\r\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n        K.GetInverse(this.m_linearMass);\r\n        this.m_angularMass = iA + iB;\r\n        if (this.m_angularMass > 0) {\r\n            this.m_angularMass = 1 / this.m_angularMass;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            // m_linearImpulse *= data.step.dtRatio;\r\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\r\n            this.m_angularImpulse *= data.step.dtRatio;\r\n            // const P: b2Vec2(m_linearImpulse.x, m_linearImpulse.y);\r\n            const P = this.m_linearImpulse;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            // wA -= iA * (b2Cross(m_rA, P) + m_angularImpulse);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_angularImpulse);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            // wB += iB * (b2Cross(m_rB, P) + m_angularImpulse);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_angularImpulse);\r\n        }\r\n        else {\r\n            this.m_linearImpulse.SetZero();\r\n            this.m_angularImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const h = data.step.dt;\r\n        // Solve angular friction\r\n        {\r\n            const Cdot = wB - wA;\r\n            let impulse = (-this.m_angularMass * Cdot);\r\n            const oldImpulse = this.m_angularImpulse;\r\n            const maxImpulse = h * this.m_maxTorque;\r\n            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);\r\n            impulse = this.m_angularImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve linear friction\r\n        {\r\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = -b2Mul(m_linearMass, Cdot);\r\n            const impulseV = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2FrictionJoint.SolveVelocityConstraints_s_impulseV).SelfNeg();\r\n            // b2Vec2 oldImpulse = m_linearImpulse;\r\n            const oldImpulseV = b2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV.Copy(this.m_linearImpulse);\r\n            // m_linearImpulse += impulse;\r\n            this.m_linearImpulse.SelfAdd(impulseV);\r\n            const maxImpulse = h * this.m_maxForce;\r\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n                this.m_linearImpulse.Normalize();\r\n                this.m_linearImpulse.SelfMul(maxImpulse);\r\n            }\r\n            // impulse = m_linearImpulse - oldImpulse;\r\n            b2Vec2.SubVV(this.m_linearImpulse, oldImpulseV, impulseV);\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulseV);\r\n            // wA -= iA * b2Cross(m_rA, impulse);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, impulseV);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulseV);\r\n            // wB += iB * b2Cross(m_rB, impulse);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, impulseV);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        out.x = inv_dt * this.m_linearImpulse.x;\r\n        out.y = inv_dt * this.m_linearImpulse.y;\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_angularImpulse;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetMaxForce(force) {\r\n        this.m_maxForce = force;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetMaxTorque(torque) {\r\n        this.m_maxTorque = torque;\r\n    }\r\n    GetMaxTorque() {\r\n        return this.m_maxTorque;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2FrictionJointDef = new b2FrictionJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\r\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2FrictionJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2FrictionJoint.SolveVelocityConstraints_s_impulseV = new b2Vec2();\r\nb2FrictionJoint.SolveVelocityConstraints_s_oldImpulseV = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../../Common/b2Math\";\r\nimport { b2_linearSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Gear joint definition. This definition requires two existing\r\n/// revolute or prismatic joints (any combination will work).\r\nexport class b2GearJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_gearJoint);\r\n        this.ratio = 1;\r\n    }\r\n}\r\nexport class b2GearJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_typeA = b2JointType.e_unknownJoint;\r\n        this.m_typeB = b2JointType.e_unknownJoint;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localAnchorC = new b2Vec2();\r\n        this.m_localAnchorD = new b2Vec2();\r\n        this.m_localAxisC = new b2Vec2();\r\n        this.m_localAxisD = new b2Vec2();\r\n        this.m_referenceAngleA = 0;\r\n        this.m_referenceAngleB = 0;\r\n        this.m_constant = 0;\r\n        this.m_ratio = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_indexC = 0;\r\n        this.m_indexD = 0;\r\n        this.m_lcA = new b2Vec2();\r\n        this.m_lcB = new b2Vec2();\r\n        this.m_lcC = new b2Vec2();\r\n        this.m_lcD = new b2Vec2();\r\n        this.m_mA = 0;\r\n        this.m_mB = 0;\r\n        this.m_mC = 0;\r\n        this.m_mD = 0;\r\n        this.m_iA = 0;\r\n        this.m_iB = 0;\r\n        this.m_iC = 0;\r\n        this.m_iD = 0;\r\n        this.m_JvAC = new b2Vec2();\r\n        this.m_JvBD = new b2Vec2();\r\n        this.m_JwA = 0;\r\n        this.m_JwB = 0;\r\n        this.m_JwC = 0;\r\n        this.m_JwD = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_qC = new b2Rot();\r\n        this.m_qD = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_lalcC = new b2Vec2();\r\n        this.m_lalcD = new b2Vec2();\r\n        this.m_joint1 = def.joint1;\r\n        this.m_joint2 = def.joint2;\r\n        this.m_typeA = this.m_joint1.GetType();\r\n        this.m_typeB = this.m_joint2.GetType();\r\n        // DEBUG: b2Assert(this.m_typeA === b2JointType.e_revoluteJoint || this.m_typeA === b2JointType.e_prismaticJoint);\r\n        // DEBUG: b2Assert(this.m_typeB === b2JointType.e_revoluteJoint || this.m_typeB === b2JointType.e_prismaticJoint);\r\n        let coordinateA, coordinateB;\r\n        // TODO_ERIN there might be some problem with the joint edges in b2Joint.\r\n        this.m_bodyC = this.m_joint1.GetBodyA();\r\n        this.m_bodyA = this.m_joint1.GetBodyB();\r\n        // Get geometry of joint1\r\n        const xfA = this.m_bodyA.m_xf;\r\n        const aA = this.m_bodyA.m_sweep.a;\r\n        const xfC = this.m_bodyC.m_xf;\r\n        const aC = this.m_bodyC.m_sweep.a;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            const revolute = def.joint1;\r\n            this.m_localAnchorC.Copy(revolute.m_localAnchorA);\r\n            this.m_localAnchorA.Copy(revolute.m_localAnchorB);\r\n            this.m_referenceAngleA = revolute.m_referenceAngle;\r\n            this.m_localAxisC.SetZero();\r\n            coordinateA = aA - aC - this.m_referenceAngleA;\r\n        }\r\n        else {\r\n            const prismatic = def.joint1;\r\n            this.m_localAnchorC.Copy(prismatic.m_localAnchorA);\r\n            this.m_localAnchorA.Copy(prismatic.m_localAnchorB);\r\n            this.m_referenceAngleA = prismatic.m_referenceAngle;\r\n            this.m_localAxisC.Copy(prismatic.m_localXAxisA);\r\n            // b2Vec2 pC = m_localAnchorC;\r\n            const pC = this.m_localAnchorC;\r\n            // b2Vec2 pA = b2MulT(xfC.q, b2Mul(xfA.q, m_localAnchorA) + (xfA.p - xfC.p));\r\n            const pA = b2Rot.MulTRV(xfC.q, b2Vec2.AddVV(b2Rot.MulRV(xfA.q, this.m_localAnchorA, b2Vec2.s_t0), b2Vec2.SubVV(xfA.p, xfC.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0); // pA uses s_t0\r\n            // coordinateA = b2Dot(pA - pC, m_localAxisC);\r\n            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\r\n        }\r\n        this.m_bodyD = this.m_joint2.GetBodyA();\r\n        this.m_bodyB = this.m_joint2.GetBodyB();\r\n        // Get geometry of joint2\r\n        const xfB = this.m_bodyB.m_xf;\r\n        const aB = this.m_bodyB.m_sweep.a;\r\n        const xfD = this.m_bodyD.m_xf;\r\n        const aD = this.m_bodyD.m_sweep.a;\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            const revolute = def.joint2;\r\n            this.m_localAnchorD.Copy(revolute.m_localAnchorA);\r\n            this.m_localAnchorB.Copy(revolute.m_localAnchorB);\r\n            this.m_referenceAngleB = revolute.m_referenceAngle;\r\n            this.m_localAxisD.SetZero();\r\n            coordinateB = aB - aD - this.m_referenceAngleB;\r\n        }\r\n        else {\r\n            const prismatic = def.joint2;\r\n            this.m_localAnchorD.Copy(prismatic.m_localAnchorA);\r\n            this.m_localAnchorB.Copy(prismatic.m_localAnchorB);\r\n            this.m_referenceAngleB = prismatic.m_referenceAngle;\r\n            this.m_localAxisD.Copy(prismatic.m_localXAxisA);\r\n            // b2Vec2 pD = m_localAnchorD;\r\n            const pD = this.m_localAnchorD;\r\n            // b2Vec2 pB = b2MulT(xfD.q, b2Mul(xfB.q, m_localAnchorB) + (xfB.p - xfD.p));\r\n            const pB = b2Rot.MulTRV(xfD.q, b2Vec2.AddVV(b2Rot.MulRV(xfB.q, this.m_localAnchorB, b2Vec2.s_t0), b2Vec2.SubVV(xfB.p, xfD.p, b2Vec2.s_t1), b2Vec2.s_t0), b2Vec2.s_t0); // pB uses s_t0\r\n            // coordinateB = b2Dot(pB - pD, m_localAxisD);\r\n            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\r\n        }\r\n        this.m_ratio = b2Maybe(def.ratio, 1);\r\n        this.m_constant = coordinateA + this.m_ratio * coordinateB;\r\n        this.m_impulse = 0;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_indexC = this.m_bodyC.m_islandIndex;\r\n        this.m_indexD = this.m_bodyD.m_islandIndex;\r\n        this.m_lcA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_lcB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_lcC.Copy(this.m_bodyC.m_sweep.localCenter);\r\n        this.m_lcD.Copy(this.m_bodyD.m_sweep.localCenter);\r\n        this.m_mA = this.m_bodyA.m_invMass;\r\n        this.m_mB = this.m_bodyB.m_invMass;\r\n        this.m_mC = this.m_bodyC.m_invMass;\r\n        this.m_mD = this.m_bodyD.m_invMass;\r\n        this.m_iA = this.m_bodyA.m_invI;\r\n        this.m_iB = this.m_bodyB.m_invI;\r\n        this.m_iC = this.m_bodyC.m_invI;\r\n        this.m_iD = this.m_bodyD.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const aC = data.positions[this.m_indexC].a;\r\n        const vC = data.velocities[this.m_indexC].v;\r\n        let wC = data.velocities[this.m_indexC].w;\r\n        const aD = data.positions[this.m_indexD].a;\r\n        const vD = data.velocities[this.m_indexD].v;\r\n        let wD = data.velocities[this.m_indexD].w;\r\n        // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\r\n        this.m_mass = 0;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            this.m_JvAC.SetZero();\r\n            this.m_JwA = 1;\r\n            this.m_JwC = 1;\r\n            this.m_mass += this.m_iA + this.m_iC;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qC, m_localAxisC);\r\n            const u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.InitVelocityConstraints_s_u);\r\n            // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\r\n            b2Vec2.SubVV(this.m_localAnchorC, this.m_lcC, this.m_lalcC);\r\n            const rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.InitVelocityConstraints_s_rC);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\r\n            b2Vec2.SubVV(this.m_localAnchorA, this.m_lcA, this.m_lalcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.InitVelocityConstraints_s_rA);\r\n            // m_JvAC = u;\r\n            this.m_JvAC.Copy(u);\r\n            // m_JwC = b2Cross(rC, u);\r\n            this.m_JwC = b2Vec2.CrossVV(rC, u);\r\n            // m_JwA = b2Cross(rA, u);\r\n            this.m_JwA = b2Vec2.CrossVV(rA, u);\r\n            this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\r\n        }\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            this.m_JvBD.SetZero();\r\n            this.m_JwB = this.m_ratio;\r\n            this.m_JwD = this.m_ratio;\r\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qD, m_localAxisD);\r\n            const u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.InitVelocityConstraints_s_u);\r\n            // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\r\n            b2Vec2.SubVV(this.m_localAnchorD, this.m_lcD, this.m_lalcD);\r\n            const rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.InitVelocityConstraints_s_rD);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\r\n            b2Vec2.SubVV(this.m_localAnchorB, this.m_lcB, this.m_lalcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.InitVelocityConstraints_s_rB);\r\n            // m_JvBD = m_ratio * u;\r\n            b2Vec2.MulSV(this.m_ratio, u, this.m_JvBD);\r\n            // m_JwD = m_ratio * b2Cross(rD, u);\r\n            this.m_JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\r\n            // m_JwB = m_ratio * b2Cross(rB, u);\r\n            this.m_JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\r\n            this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\r\n        }\r\n        // Compute effective mass.\r\n        this.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\r\n        if (data.step.warmStarting) {\r\n            // vA += (m_mA * m_impulse) * m_JvAC;\r\n            vA.SelfMulAdd(this.m_mA * this.m_impulse, this.m_JvAC);\r\n            wA += this.m_iA * this.m_impulse * this.m_JwA;\r\n            // vB += (m_mB * m_impulse) * m_JvBD;\r\n            vB.SelfMulAdd(this.m_mB * this.m_impulse, this.m_JvBD);\r\n            wB += this.m_iB * this.m_impulse * this.m_JwB;\r\n            // vC -= (m_mC * m_impulse) * m_JvAC;\r\n            vC.SelfMulSub(this.m_mC * this.m_impulse, this.m_JvAC);\r\n            wC -= this.m_iC * this.m_impulse * this.m_JwC;\r\n            // vD -= (m_mD * m_impulse) * m_JvBD;\r\n            vD.SelfMulSub(this.m_mD * this.m_impulse, this.m_JvBD);\r\n            wD -= this.m_iD * this.m_impulse * this.m_JwD;\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n        // data.velocities[this.m_indexC].v = vC;\r\n        data.velocities[this.m_indexC].w = wC;\r\n        // data.velocities[this.m_indexD].v = vD;\r\n        data.velocities[this.m_indexD].w = wD;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const vC = data.velocities[this.m_indexC].v;\r\n        let wC = data.velocities[this.m_indexC].w;\r\n        const vD = data.velocities[this.m_indexD].v;\r\n        let wD = data.velocities[this.m_indexD].w;\r\n        // float32 Cdot = b2Dot(m_JvAC, vA - vC) + b2Dot(m_JvBD, vB - vD);\r\n        let Cdot = b2Vec2.DotVV(this.m_JvAC, b2Vec2.SubVV(vA, vC, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(this.m_JvBD, b2Vec2.SubVV(vB, vD, b2Vec2.s_t0));\r\n        Cdot += (this.m_JwA * wA - this.m_JwC * wC) + (this.m_JwB * wB - this.m_JwD * wD);\r\n        const impulse = -this.m_mass * Cdot;\r\n        this.m_impulse += impulse;\r\n        // vA += (m_mA * impulse) * m_JvAC;\r\n        vA.SelfMulAdd((this.m_mA * impulse), this.m_JvAC);\r\n        wA += this.m_iA * impulse * this.m_JwA;\r\n        // vB += (m_mB * impulse) * m_JvBD;\r\n        vB.SelfMulAdd((this.m_mB * impulse), this.m_JvBD);\r\n        wB += this.m_iB * impulse * this.m_JwB;\r\n        // vC -= (m_mC * impulse) * m_JvAC;\r\n        vC.SelfMulSub((this.m_mC * impulse), this.m_JvAC);\r\n        wC -= this.m_iC * impulse * this.m_JwC;\r\n        // vD -= (m_mD * impulse) * m_JvBD;\r\n        vD.SelfMulSub((this.m_mD * impulse), this.m_JvBD);\r\n        wD -= this.m_iD * impulse * this.m_JwD;\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n        // data.velocities[this.m_indexC].v = vC;\r\n        data.velocities[this.m_indexC].w = wC;\r\n        // data.velocities[this.m_indexD].v = vD;\r\n        data.velocities[this.m_indexD].w = wD;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const cC = data.positions[this.m_indexC].c;\r\n        let aC = data.positions[this.m_indexC].a;\r\n        const cD = data.positions[this.m_indexD].c;\r\n        let aD = data.positions[this.m_indexD].a;\r\n        // b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB), qC = this.m_qC.SetAngle(aC), qD = this.m_qD.SetAngle(aD);\r\n        const linearError = 0;\r\n        let coordinateA, coordinateB;\r\n        const JvAC = this.m_JvAC, JvBD = this.m_JvBD;\r\n        let JwA, JwB, JwC, JwD;\r\n        let mass = 0;\r\n        if (this.m_typeA === b2JointType.e_revoluteJoint) {\r\n            JvAC.SetZero();\r\n            JwA = 1;\r\n            JwC = 1;\r\n            mass += this.m_iA + this.m_iC;\r\n            coordinateA = aA - aC - this.m_referenceAngleA;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qC, m_localAxisC);\r\n            const u = b2Rot.MulRV(qC, this.m_localAxisC, b2GearJoint.SolvePositionConstraints_s_u);\r\n            // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\r\n            const rC = b2Rot.MulRV(qC, this.m_lalcC, b2GearJoint.SolvePositionConstraints_s_rC);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, b2GearJoint.SolvePositionConstraints_s_rA);\r\n            // JvAC = u;\r\n            JvAC.Copy(u);\r\n            // JwC = b2Cross(rC, u);\r\n            JwC = b2Vec2.CrossVV(rC, u);\r\n            // JwA = b2Cross(rA, u);\r\n            JwA = b2Vec2.CrossVV(rA, u);\r\n            mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\r\n            // b2Vec2 pC = m_localAnchorC - m_lcC;\r\n            const pC = this.m_lalcC;\r\n            // b2Vec2 pA = b2MulT(qC, rA + (cA - cC));\r\n            const pA = b2Rot.MulTRV(qC, b2Vec2.AddVV(rA, b2Vec2.SubVV(cA, cC, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0); // pA uses s_t0\r\n            // coordinateA = b2Dot(pA - pC, m_localAxisC);\r\n            coordinateA = b2Vec2.DotVV(b2Vec2.SubVV(pA, pC, b2Vec2.s_t0), this.m_localAxisC);\r\n        }\r\n        if (this.m_typeB === b2JointType.e_revoluteJoint) {\r\n            JvBD.SetZero();\r\n            JwB = this.m_ratio;\r\n            JwD = this.m_ratio;\r\n            mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\r\n            coordinateB = aB - aD - this.m_referenceAngleB;\r\n        }\r\n        else {\r\n            // b2Vec2 u = b2Mul(qD, m_localAxisD);\r\n            const u = b2Rot.MulRV(qD, this.m_localAxisD, b2GearJoint.SolvePositionConstraints_s_u);\r\n            // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\r\n            const rD = b2Rot.MulRV(qD, this.m_lalcD, b2GearJoint.SolvePositionConstraints_s_rD);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, b2GearJoint.SolvePositionConstraints_s_rB);\r\n            // JvBD = m_ratio * u;\r\n            b2Vec2.MulSV(this.m_ratio, u, JvBD);\r\n            // JwD = m_ratio * b2Cross(rD, u);\r\n            JwD = this.m_ratio * b2Vec2.CrossVV(rD, u);\r\n            // JwB = m_ratio * b2Cross(rB, u);\r\n            JwB = this.m_ratio * b2Vec2.CrossVV(rB, u);\r\n            mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * JwD * JwD + this.m_iB * JwB * JwB;\r\n            // b2Vec2 pD = m_localAnchorD - m_lcD;\r\n            const pD = this.m_lalcD;\r\n            // b2Vec2 pB = b2MulT(qD, rB + (cB - cD));\r\n            const pB = b2Rot.MulTRV(qD, b2Vec2.AddVV(rB, b2Vec2.SubVV(cB, cD, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0); // pB uses s_t0\r\n            // coordinateB = b2Dot(pB - pD, m_localAxisD);\r\n            coordinateB = b2Vec2.DotVV(b2Vec2.SubVV(pB, pD, b2Vec2.s_t0), this.m_localAxisD);\r\n        }\r\n        const C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant;\r\n        let impulse = 0;\r\n        if (mass > 0) {\r\n            impulse = -C / mass;\r\n        }\r\n        // cA += m_mA * impulse * JvAC;\r\n        cA.SelfMulAdd(this.m_mA * impulse, JvAC);\r\n        aA += this.m_iA * impulse * JwA;\r\n        // cB += m_mB * impulse * JvBD;\r\n        cB.SelfMulAdd(this.m_mB * impulse, JvBD);\r\n        aB += this.m_iB * impulse * JwB;\r\n        // cC -= m_mC * impulse * JvAC;\r\n        cC.SelfMulSub(this.m_mC * impulse, JvAC);\r\n        aC -= this.m_iC * impulse * JwC;\r\n        // cD -= m_mD * impulse * JvBD;\r\n        cD.SelfMulSub(this.m_mD * impulse, JvBD);\r\n        aD -= this.m_iD * impulse * JwD;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        // data.positions[this.m_indexC].c = cC;\r\n        data.positions[this.m_indexC].a = aC;\r\n        // data.positions[this.m_indexD].c = cD;\r\n        data.positions[this.m_indexD].a = aD;\r\n        // TODO_ERIN not implemented\r\n        return linearError < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P = m_impulse * m_JvAC;\r\n        // return inv_dt * P;\r\n        return b2Vec2.MulSV(inv_dt * this.m_impulse, this.m_JvAC, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        // float32 L = m_impulse * m_JwA;\r\n        // return inv_dt * L;\r\n        return inv_dt * this.m_impulse * this.m_JwA;\r\n    }\r\n    GetJoint1() { return this.m_joint1; }\r\n    GetJoint2() { return this.m_joint2; }\r\n    GetRatio() {\r\n        return this.m_ratio;\r\n    }\r\n    SetRatio(ratio) {\r\n        // DEBUG: b2Assert(b2IsValid(ratio));\r\n        this.m_ratio = ratio;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        const index1 = this.m_joint1.m_index;\r\n        const index2 = this.m_joint2.m_index;\r\n        log(\"  const jd: b2GearJointDef = new b2GearJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.joint1 = joints[%d];\\n\", index1);\r\n        log(\"  jd.joint2 = joints[%d];\\n\", index2);\r\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2GearJoint.InitVelocityConstraints_s_u = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rA = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rB = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rC = new b2Vec2();\r\nb2GearJoint.InitVelocityConstraints_s_rD = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_u = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rA = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rB = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rC = new b2Vec2();\r\nb2GearJoint.SolvePositionConstraints_s_rD = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2012 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../../Common/b2Math\";\r\nimport { b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Clamp, b2Vec2, b2Mat22, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\nexport class b2MotorJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_motorJoint);\r\n        this.linearOffset = new b2Vec2(0, 0);\r\n        this.angularOffset = 0;\r\n        this.maxForce = 1;\r\n        this.maxTorque = 1;\r\n        this.correctionFactor = 0.3;\r\n    }\r\n    Initialize(bA, bB) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        // b2Vec2 xB = bodyB->GetPosition();\r\n        // linearOffset = bodyA->GetLocalPoint(xB);\r\n        this.bodyA.GetLocalPoint(this.bodyB.GetPosition(), this.linearOffset);\r\n        const angleA = this.bodyA.GetAngle();\r\n        const angleB = this.bodyB.GetAngle();\r\n        this.angularOffset = angleB - angleA;\r\n    }\r\n}\r\nexport class b2MotorJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_linearOffset = new b2Vec2();\r\n        this.m_angularOffset = 0;\r\n        this.m_linearImpulse = new b2Vec2();\r\n        this.m_angularImpulse = 0;\r\n        this.m_maxForce = 0;\r\n        this.m_maxTorque = 0;\r\n        this.m_correctionFactor = 0.3;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_linearError = new b2Vec2();\r\n        this.m_angularError = 0;\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_linearMass = new b2Mat22();\r\n        this.m_angularMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_K = new b2Mat22();\r\n        this.m_linearOffset.Copy(b2Maybe(def.linearOffset, b2Vec2.ZERO));\r\n        this.m_linearImpulse.SetZero();\r\n        this.m_maxForce = b2Maybe(def.maxForce, 0);\r\n        this.m_maxTorque = b2Maybe(def.maxTorque, 0);\r\n        this.m_correctionFactor = b2Maybe(def.correctionFactor, 0.3);\r\n    }\r\n    GetAnchorA(out) {\r\n        const pos = this.m_bodyA.GetPosition();\r\n        out.x = pos.x;\r\n        out.y = pos.y;\r\n        return out;\r\n    }\r\n    GetAnchorB(out) {\r\n        const pos = this.m_bodyB.GetPosition();\r\n        out.x = pos.x;\r\n        out.y = pos.y;\r\n        return out;\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * m_linearImpulse;\r\n        return b2Vec2.MulSV(inv_dt, this.m_linearImpulse, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_angularImpulse;\r\n    }\r\n    SetLinearOffset(linearOffset) {\r\n        if (!b2Vec2.IsEqualToV(linearOffset, this.m_linearOffset)) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_linearOffset.Copy(linearOffset);\r\n        }\r\n    }\r\n    GetLinearOffset() {\r\n        return this.m_linearOffset;\r\n    }\r\n    SetAngularOffset(angularOffset) {\r\n        if (angularOffset !== this.m_angularOffset) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_angularOffset = angularOffset;\r\n        }\r\n    }\r\n    GetAngularOffset() {\r\n        return this.m_angularOffset;\r\n    }\r\n    SetMaxForce(force) {\r\n        // DEBUG: b2Assert(b2IsValid(force) && force >= 0);\r\n        this.m_maxForce = force;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetMaxTorque(torque) {\r\n        // DEBUG: b2Assert(b2IsValid(torque) && torque >= 0);\r\n        this.m_maxTorque = torque;\r\n    }\r\n    GetMaxTorque() {\r\n        return this.m_maxTorque;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective mass matrix.\r\n        // this.m_rA = b2Mul(qA, m_linearOffset - this.m_localCenterA);\r\n        const rA = b2Rot.MulRV(qA, b2Vec2.SubVV(this.m_linearOffset, this.m_localCenterA, b2Vec2.s_t0), this.m_rA);\r\n        // this.m_rB = b2Mul(qB, -this.m_localCenterB);\r\n        const rB = b2Rot.MulRV(qB, b2Vec2.NegV(this.m_localCenterB, b2Vec2.s_t0), this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Upper 2 by 2 of K for point to point\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n        K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n        // this.m_linearMass = K.GetInverse();\r\n        K.GetInverse(this.m_linearMass);\r\n        this.m_angularMass = iA + iB;\r\n        if (this.m_angularMass > 0) {\r\n            this.m_angularMass = 1 / this.m_angularMass;\r\n        }\r\n        // this.m_linearError = cB + rB - cA - rA;\r\n        b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), this.m_linearError);\r\n        this.m_angularError = aB - aA - this.m_angularOffset;\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            // this.m_linearImpulse *= data.step.dtRatio;\r\n            this.m_linearImpulse.SelfMul(data.step.dtRatio);\r\n            this.m_angularImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P(this.m_linearImpulse.x, this.m_linearImpulse.y);\r\n            const P = this.m_linearImpulse;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(rA, P) + this.m_angularImpulse);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(rB, P) + this.m_angularImpulse);\r\n        }\r\n        else {\r\n            this.m_linearImpulse.SetZero();\r\n            this.m_angularImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA; // vA is a reference\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB; // vB is a reference\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const h = data.step.dt;\r\n        const inv_h = data.step.inv_dt;\r\n        // Solve angular friction\r\n        {\r\n            const Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\r\n            let impulse = -this.m_angularMass * Cdot;\r\n            const oldImpulse = this.m_angularImpulse;\r\n            const maxImpulse = h * this.m_maxTorque;\r\n            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_angularImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve linear friction\r\n        {\r\n            const rA = this.m_rA;\r\n            const rB = this.m_rB;\r\n            // b2Vec2 Cdot = vB + b2Vec2.CrossSV(wB, rB) - vA - b2Vec2.CrossSV(wA, rA) + inv_h * this.m_correctionFactor * this.m_linearError;\r\n            const Cdot_v2 = b2Vec2.AddVV(b2Vec2.SubVV(b2Vec2.AddVV(vB, b2Vec2.CrossSV(wB, rB, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.AddVV(vA, b2Vec2.CrossSV(wA, rA, b2Vec2.s_t1), b2Vec2.s_t1), b2Vec2.s_t2), b2Vec2.MulSV(inv_h * this.m_correctionFactor, this.m_linearError, b2Vec2.s_t3), b2MotorJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = -b2Mul(this.m_linearMass, Cdot);\r\n            const impulse_v2 = b2Mat22.MulMV(this.m_linearMass, Cdot_v2, b2MotorJoint.SolveVelocityConstraints_s_impulse_v2).SelfNeg();\r\n            // b2Vec2 oldImpulse = this.m_linearImpulse;\r\n            const oldImpulse_v2 = b2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2.Copy(this.m_linearImpulse);\r\n            // this.m_linearImpulse += impulse;\r\n            this.m_linearImpulse.SelfAdd(impulse_v2);\r\n            const maxImpulse = h * this.m_maxForce;\r\n            if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n                this.m_linearImpulse.Normalize();\r\n                // this.m_linearImpulse *= maxImpulse;\r\n                this.m_linearImpulse.SelfMul(maxImpulse);\r\n            }\r\n            // impulse = this.m_linearImpulse - oldImpulse;\r\n            b2Vec2.SubVV(this.m_linearImpulse, oldImpulse_v2, impulse_v2);\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulse_v2);\r\n            // wA -= iA * b2Vec2.CrossVV(rA, impulse);\r\n            wA -= iA * b2Vec2.CrossVV(rA, impulse_v2);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulse_v2);\r\n            // wB += iB * b2Vec2.CrossVV(rB, impulse);\r\n            wB += iB * b2Vec2.CrossVV(rB, impulse_v2);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA; // vA is a reference\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB; // vB is a reference\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2MotorJointDef = new b2MotorJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.linearOffset.Set(%.15f, %.15f);\\n\", this.m_linearOffset.x, this.m_linearOffset.y);\r\n        log(\"  jd.angularOffset = %.15f;\\n\", this.m_angularOffset);\r\n        log(\"  jd.maxForce = %.15f;\\n\", this.m_maxForce);\r\n        log(\"  jd.maxTorque = %.15f;\\n\", this.m_maxTorque);\r\n        log(\"  jd.correctionFactor = %.15f;\\n\", this.m_correctionFactor);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2MotorJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2MotorJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();\r\nb2MotorJoint.SolveVelocityConstraints_s_oldImpulse_v2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert, b2_epsilon } from \"../../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../../Common/b2Math\";\r\nimport { b2_pi, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Mat22, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Mouse joint definition. This requires a world target point,\r\n/// tuning parameters, and the time step.\r\nexport class b2MouseJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_mouseJoint);\r\n        this.target = new b2Vec2();\r\n        this.maxForce = 0;\r\n        this.frequencyHz = 5;\r\n        this.dampingRatio = 0.7;\r\n    }\r\n}\r\nexport class b2MouseJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_targetA = new b2Vec2();\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_beta = 0;\r\n        // Solver shared\r\n        this.m_impulse = new b2Vec2();\r\n        this.m_maxForce = 0;\r\n        this.m_gamma = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassB = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = new b2Mat22();\r\n        this.m_C = new b2Vec2();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        this.m_targetA.Copy(b2Maybe(def.target, b2Vec2.ZERO));\r\n        // DEBUG: b2Assert(this.m_targetA.IsValid());\r\n        b2Transform.MulTXV(this.m_bodyB.GetTransform(), this.m_targetA, this.m_localAnchorB);\r\n        this.m_maxForce = b2Maybe(def.maxForce, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_maxForce) && this.m_maxForce >= 0);\r\n        this.m_impulse.SetZero();\r\n        this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_frequencyHz) && this.m_frequencyHz >= 0);\r\n        this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_dampingRatio) && this.m_dampingRatio >= 0);\r\n        this.m_beta = 0;\r\n        this.m_gamma = 0;\r\n    }\r\n    SetTarget(target) {\r\n        if (!this.m_bodyB.IsAwake()) {\r\n            this.m_bodyB.SetAwake(true);\r\n        }\r\n        this.m_targetA.Copy(target);\r\n    }\r\n    GetTarget() {\r\n        return this.m_targetA;\r\n    }\r\n    SetMaxForce(maxForce) {\r\n        this.m_maxForce = maxForce;\r\n    }\r\n    GetMaxForce() {\r\n        return this.m_maxForce;\r\n    }\r\n    SetFrequency(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetFrequency() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qB = this.m_qB.SetAngle(aB);\r\n        const mass = this.m_bodyB.GetMass();\r\n        // Frequency\r\n        const omega = 2 * b2_pi * this.m_frequencyHz;\r\n        // Damping coefficient\r\n        const d = 2 * mass * this.m_dampingRatio * omega;\r\n        // Spring stiffness\r\n        const k = mass * (omega * omega);\r\n        // magic formulas\r\n        // gamma has units of inverse mass.\r\n        // beta has units of inverse time.\r\n        const h = data.step.dt;\r\n        // DEBUG: b2Assert(d + h * k > b2_epsilon);\r\n        this.m_gamma = h * (d + h * k);\r\n        if (this.m_gamma !== 0) {\r\n            this.m_gamma = 1 / this.m_gamma;\r\n        }\r\n        this.m_beta = h * k * this.m_gamma;\r\n        // Compute the effective mass matrix.\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]\r\n        //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]\r\n        //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]\r\n        const K = this.m_K;\r\n        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\r\n        K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\r\n        K.GetInverse(this.m_mass);\r\n        // m_C = cB + m_rB - m_targetA;\r\n        this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\r\n        this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\r\n        // m_C *= m_beta;\r\n        this.m_C.SelfMul(this.m_beta);\r\n        // Cheat with some damping\r\n        wB *= 0.98;\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // vB += m_invMassB * m_impulse;\r\n            vB.x += this.m_invMassB * this.m_impulse.x;\r\n            vB.y += this.m_invMassB * this.m_impulse.y;\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, this.m_impulse);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Cdot = v + cross(w, r)\r\n        // b2Vec2 Cdot = vB + b2Cross(wB, m_rB);\r\n        const Cdot = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);\r\n        //  b2Vec2 impulse = b2Mul(m_mass, -(Cdot + m_C + m_gamma * m_impulse));\r\n        const impulse = b2Mat22.MulMV(this.m_mass, b2Vec2.AddVV(Cdot, b2Vec2.AddVV(this.m_C, b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Vec2.s_t0), b2Vec2.s_t0), b2Vec2.s_t0).SelfNeg(), b2MouseJoint.SolveVelocityConstraints_s_impulse);\r\n        // b2Vec2 oldImpulse = m_impulse;\r\n        const oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\r\n        // m_impulse += impulse;\r\n        this.m_impulse.SelfAdd(impulse);\r\n        const maxImpulse = data.step.dt * this.m_maxForce;\r\n        if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n            this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\r\n        }\r\n        // impulse = m_impulse - oldImpulse;\r\n        b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\r\n        // vB += m_invMassB * impulse;\r\n        vB.SelfMulAdd(this.m_invMassB, impulse);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, impulse);\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        return true;\r\n    }\r\n    GetAnchorA(out) {\r\n        out.x = this.m_targetA.x;\r\n        out.y = this.m_targetA.y;\r\n        return out;\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        return b2Vec2.MulSV(inv_dt, this.m_impulse, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    Dump(log) {\r\n        log(\"Mouse joint dumping is not supported.\\n\");\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_targetA.SelfSub(newOrigin);\r\n    }\r\n}\r\nb2MouseJoint.SolveVelocityConstraints_s_Cdot = new b2Vec2();\r\nb2MouseJoint.SolveVelocityConstraints_s_impulse = new b2Vec2();\r\nb2MouseJoint.SolveVelocityConstraints_s_oldImpulse = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxLinearCorrection, b2_angularSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Clamp, b2Vec2, b2Mat22, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Prismatic joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nexport class b2PrismaticJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_prismaticJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.localAxisA = new b2Vec2(1, 0);\r\n        this.referenceAngle = 0;\r\n        this.enableLimit = false;\r\n        this.lowerTranslation = 0;\r\n        this.upperTranslation = 0;\r\n        this.enableMotor = false;\r\n        this.maxMotorForce = 0;\r\n        this.motorSpeed = 0;\r\n    }\r\n    Initialize(bA, bB, anchor, axis) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2PrismaticJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localXAxisA = new b2Vec2();\r\n        this.m_localYAxisA = new b2Vec2();\r\n        this.m_referenceAngle = 0;\r\n        this.m_impulse = new b2Vec3(0, 0, 0);\r\n        this.m_motorImpulse = 0;\r\n        this.m_lowerTranslation = 0;\r\n        this.m_upperTranslation = 0;\r\n        this.m_maxMotorForce = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableLimit = false;\r\n        this.m_enableMotor = false;\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_axis = new b2Vec2(0, 0);\r\n        this.m_perp = new b2Vec2(0, 0);\r\n        this.m_s1 = 0;\r\n        this.m_s2 = 0;\r\n        this.m_a1 = 0;\r\n        this.m_a2 = 0;\r\n        this.m_K = new b2Mat33();\r\n        this.m_K3 = new b2Mat33();\r\n        this.m_K2 = new b2Mat22();\r\n        this.m_motorMass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n        this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, new b2Vec2(1, 0))).SelfNormalize();\r\n        b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\r\n        this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\r\n        this.m_lowerTranslation = b2Maybe(def.lowerTranslation, 0);\r\n        this.m_upperTranslation = b2Maybe(def.upperTranslation, 0);\r\n        this.m_maxMotorForce = b2Maybe(def.maxMotorForce, 0);\r\n        this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\r\n        this.m_enableLimit = b2Maybe(def.enableLimit, false);\r\n        this.m_enableMotor = b2Maybe(def.enableMotor, false);\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective masses.\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = (cB - cA) + rB - rA;\r\n        const d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_d);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Compute motor Jacobian and effective mass.\r\n        {\r\n            // m_axis = b2Mul(qA, m_localXAxisA);\r\n            b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\r\n            // m_a1 = b2Cross(d + rA, m_axis);\r\n            this.m_a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_axis);\r\n            // m_a2 = b2Cross(rB, m_axis);\r\n            this.m_a2 = b2Vec2.CrossVV(rB, this.m_axis);\r\n            this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\r\n            if (this.m_motorMass > 0) {\r\n                this.m_motorMass = 1 / this.m_motorMass;\r\n            }\r\n        }\r\n        // Prismatic constraint.\r\n        {\r\n            // m_perp = b2Mul(qA, m_localYAxisA);\r\n            b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\r\n            // m_s1 = b2Cross(d + rA, m_perp);\r\n            this.m_s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_perp);\r\n            // m_s2 = b2Cross(rB, m_perp);\r\n            this.m_s2 = b2Vec2.CrossVV(rB, this.m_perp);\r\n            // float32 k11 = mA + mB + iA * m_s1 * m_s1 + iB * m_s2 * m_s2;\r\n            this.m_K.ex.x = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\r\n            // float32 k12 = iA * m_s1 + iB * m_s2;\r\n            this.m_K.ex.y = iA * this.m_s1 + iB * this.m_s2;\r\n            // float32 k13 = iA * m_s1 * m_a1 + iB * m_s2 * m_a2;\r\n            this.m_K.ex.z = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\r\n            this.m_K.ey.x = this.m_K.ex.y;\r\n            // float32 k22 = iA + iB;\r\n            this.m_K.ey.y = iA + iB;\r\n            if (this.m_K.ey.y === 0) {\r\n                // For bodies with fixed rotation.\r\n                this.m_K.ey.y = 1;\r\n            }\r\n            // float32 k23 = iA * m_a1 + iB * m_a2;\r\n            this.m_K.ey.z = iA * this.m_a1 + iB * this.m_a2;\r\n            this.m_K.ez.x = this.m_K.ex.z;\r\n            this.m_K.ez.y = this.m_K.ey.z;\r\n            // float32 k33 = mA + mB + iA * m_a1 * m_a1 + iB * m_a2 * m_a2;\r\n            this.m_K.ez.z = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\r\n            // m_K.ex.Set(k11, k12, k13);\r\n            // m_K.ey.Set(k12, k22, k23);\r\n            // m_K.ez.Set(k13, k23, k33);\r\n        }\r\n        // Compute motor and limit terms.\r\n        if (this.m_enableLimit) {\r\n            // float32 jointTranslation = b2Dot(m_axis, d);\r\n            const jointTranslation = b2Vec2.DotVV(this.m_axis, d);\r\n            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\r\n                this.m_limitState = b2LimitState.e_equalLimits;\r\n            }\r\n            else if (jointTranslation <= this.m_lowerTranslation) {\r\n                if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\r\n                    this.m_limitState = b2LimitState.e_atLowerLimit;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n            }\r\n            else if (jointTranslation >= this.m_upperTranslation) {\r\n                if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\r\n                    this.m_limitState = b2LimitState.e_atUpperLimit;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n            }\r\n            else {\r\n                this.m_limitState = b2LimitState.e_inactiveLimit;\r\n                this.m_impulse.z = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.m_limitState = b2LimitState.e_inactiveLimit;\r\n            this.m_impulse.z = 0;\r\n        }\r\n        if (!this.m_enableMotor) {\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Account for variable time step.\r\n            // m_impulse *= data.step.dtRatio;\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV((this.m_motorImpulse + this.m_impulse.z), this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.InitVelocityConstraints_s_P);\r\n            // float32 LA = m_impulse.x * m_s1 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a1;\r\n            const LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\r\n            // float32 LB = m_impulse.x * m_s2 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a2;\r\n            const LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // Solve linear motor constraint.\r\n        if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits) {\r\n            // float32 Cdot = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\r\n            const Cdot = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\r\n            let impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorForce;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            // b2Vec2 P = impulse * m_axis;\r\n            const P = b2Vec2.MulSV(impulse, this.m_axis, b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_a1;\r\n            const LB = impulse * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // b2Vec2 Cdot1;\r\n        // Cdot1.x = b2Dot(m_perp, vB - vA) + m_s2 * wB - m_s1 * wA;\r\n        const Cdot1_x = b2Vec2.DotVV(this.m_perp, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_s2 * wB - this.m_s1 * wA;\r\n        // Cdot1.y = wB - wA;\r\n        const Cdot1_y = wB - wA;\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit) {\r\n            // Solve prismatic and limit constraint in block form.\r\n            // float32 Cdot2;\r\n            // Cdot2 = b2Dot(m_axis, vB - vA) + m_a2 * wB - m_a1 * wA;\r\n            const Cdot2 = b2Vec2.DotVV(this.m_axis, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_a2 * wB - this.m_a1 * wA;\r\n            // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 f1 = m_impulse;\r\n            const f1 = b2PrismaticJoint.SolveVelocityConstraints_s_f1.Copy(this.m_impulse);\r\n            // b2Vec3 df =  m_K.Solve33(-Cdot);\r\n            const df3 = this.m_K.Solve33((-Cdot1_x), (-Cdot1_y), (-Cdot2), b2PrismaticJoint.SolveVelocityConstraints_s_df3);\r\n            // m_impulse += df;\r\n            this.m_impulse.SelfAdd(df3);\r\n            if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                this.m_impulse.z = b2Max(this.m_impulse.z, 0);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                this.m_impulse.z = b2Min(this.m_impulse.z, 0);\r\n            }\r\n            // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) + f1(1:2)\r\n            // b2Vec2 b = -Cdot1 - (m_impulse.z - f1.z) * b2Vec2(m_K.ez.x, m_K.ez.y);\r\n            const b_x = (-Cdot1_x) - (this.m_impulse.z - f1.z) * this.m_K.ez.x;\r\n            const b_y = (-Cdot1_y) - (this.m_impulse.z - f1.z) * this.m_K.ez.y;\r\n            // b2Vec2 f2r = m_K.Solve22(b) + b2Vec2(f1.x, f1.y);\r\n            const f2r = this.m_K.Solve22(b_x, b_y, b2PrismaticJoint.SolveVelocityConstraints_s_f2r);\r\n            f2r.x += f1.x;\r\n            f2r.y += f1.y;\r\n            // m_impulse.x = f2r.x;\r\n            this.m_impulse.x = f2r.x;\r\n            // m_impulse.y = f2r.y;\r\n            this.m_impulse.y = f2r.y;\r\n            // df = m_impulse - f1;\r\n            df3.x = this.m_impulse.x - f1.x;\r\n            df3.y = this.m_impulse.y - f1.y;\r\n            df3.z = this.m_impulse.z - f1.z;\r\n            // b2Vec2 P = df.x * m_perp + df.z * m_axis;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(df3.x, this.m_perp, b2Vec2.s_t0), b2Vec2.MulSV(df3.z, this.m_axis, b2Vec2.s_t1), b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            // float32 LA = df.x * m_s1 + df.y + df.z * m_a1;\r\n            const LA = df3.x * this.m_s1 + df3.y + df3.z * this.m_a1;\r\n            // float32 LB = df.x * m_s2 + df.y + df.z * m_a2;\r\n            const LB = df3.x * this.m_s2 + df3.y + df3.z * this.m_a2;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        else {\r\n            // Limit is inactive, just solve the prismatic constraint in block form.\r\n            // b2Vec2 df = m_K.Solve22(-Cdot1);\r\n            const df2 = this.m_K.Solve22((-Cdot1_x), (-Cdot1_y), b2PrismaticJoint.SolveVelocityConstraints_s_df2);\r\n            this.m_impulse.x += df2.x;\r\n            this.m_impulse.y += df2.y;\r\n            // b2Vec2 P = df.x * m_perp;\r\n            const P = b2Vec2.MulSV(df2.x, this.m_perp, b2PrismaticJoint.SolveVelocityConstraints_s_P);\r\n            // float32 LA = df.x * m_s1 + df.y;\r\n            const LA = df2.x * this.m_s1 + df2.y;\r\n            // float32 LB = df.x * m_s2 + df.y;\r\n            const LB = df2.x * this.m_s2 + df2.y;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = cB + rB - cA - rA;\r\n        const d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_d);\r\n        // b2Vec2 axis = b2Mul(qA, m_localXAxisA);\r\n        const axis = b2Rot.MulRV(qA, this.m_localXAxisA, this.m_axis);\r\n        // float32 a1 = b2Cross(d + rA, axis);\r\n        const a1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), axis);\r\n        // float32 a2 = b2Cross(rB, axis);\r\n        const a2 = b2Vec2.CrossVV(rB, axis);\r\n        // b2Vec2 perp = b2Mul(qA, m_localYAxisA);\r\n        const perp = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_perp);\r\n        // float32 s1 = b2Cross(d + rA, perp);\r\n        const s1 = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), perp);\r\n        // float32 s2 = b2Cross(rB, perp);\r\n        const s2 = b2Vec2.CrossVV(rB, perp);\r\n        // b2Vec3 impulse;\r\n        let impulse = b2PrismaticJoint.SolvePositionConstraints_s_impulse;\r\n        // b2Vec2 C1;\r\n        // C1.x = b2Dot(perp, d);\r\n        const C1_x = b2Vec2.DotVV(perp, d);\r\n        // C1.y = aB - aA - m_referenceAngle;\r\n        const C1_y = aB - aA - this.m_referenceAngle;\r\n        let linearError = b2Abs(C1_x);\r\n        const angularError = b2Abs(C1_y);\r\n        let active = false;\r\n        let C2 = 0;\r\n        if (this.m_enableLimit) {\r\n            // float32 translation = b2Dot(axis, d);\r\n            const translation = b2Vec2.DotVV(axis, d);\r\n            if (b2Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2 * b2_linearSlop) {\r\n                // Prevent large angular corrections\r\n                C2 = b2Clamp(translation, (-b2_maxLinearCorrection), b2_maxLinearCorrection);\r\n                linearError = b2Max(linearError, b2Abs(translation));\r\n                active = true;\r\n            }\r\n            else if (translation <= this.m_lowerTranslation) {\r\n                // Prevent large linear corrections and allow some slop.\r\n                C2 = b2Clamp(translation - this.m_lowerTranslation + b2_linearSlop, (-b2_maxLinearCorrection), 0);\r\n                linearError = b2Max(linearError, this.m_lowerTranslation - translation);\r\n                active = true;\r\n            }\r\n            else if (translation >= this.m_upperTranslation) {\r\n                // Prevent large linear corrections and allow some slop.\r\n                C2 = b2Clamp(translation - this.m_upperTranslation - b2_linearSlop, 0, b2_maxLinearCorrection);\r\n                linearError = b2Max(linearError, translation - this.m_upperTranslation);\r\n                active = true;\r\n            }\r\n        }\r\n        if (active) {\r\n            // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            // float32 k12 = iA * s1 + iB * s2;\r\n            const k12 = iA * s1 + iB * s2;\r\n            // float32 k13 = iA * s1 * a1 + iB * s2 * a2;\r\n            const k13 = iA * s1 * a1 + iB * s2 * a2;\r\n            // float32 k22 = iA + iB;\r\n            let k22 = iA + iB;\r\n            if (k22 === 0) {\r\n                // For fixed rotation\r\n                k22 = 1;\r\n            }\r\n            // float32 k23 = iA * a1 + iB * a2;\r\n            const k23 = iA * a1 + iB * a2;\r\n            // float32 k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\r\n            const k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2;\r\n            // b2Mat33 K;\r\n            const K = this.m_K3;\r\n            // K.ex.Set(k11, k12, k13);\r\n            K.ex.SetXYZ(k11, k12, k13);\r\n            // K.ey.Set(k12, k22, k23);\r\n            K.ey.SetXYZ(k12, k22, k23);\r\n            // K.ez.Set(k13, k23, k33);\r\n            K.ez.SetXYZ(k13, k23, k33);\r\n            // b2Vec3 C;\r\n            // C.x = C1.x;\r\n            // C.y = C1.y;\r\n            // C.z = C2;\r\n            // impulse = K.Solve33(-C);\r\n            impulse = K.Solve33((-C1_x), (-C1_y), (-C2), impulse);\r\n        }\r\n        else {\r\n            // float32 k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            const k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2;\r\n            // float32 k12 = iA * s1 + iB * s2;\r\n            const k12 = iA * s1 + iB * s2;\r\n            // float32 k22 = iA + iB;\r\n            let k22 = iA + iB;\r\n            if (k22 === 0) {\r\n                k22 = 1;\r\n            }\r\n            // b2Mat22 K;\r\n            const K2 = this.m_K2;\r\n            // K.ex.Set(k11, k12);\r\n            K2.ex.Set(k11, k12);\r\n            // K.ey.Set(k12, k22);\r\n            K2.ey.Set(k12, k22);\r\n            // b2Vec2 impulse1 = K.Solve(-C1);\r\n            const impulse1 = K2.Solve((-C1_x), (-C1_y), b2PrismaticJoint.SolvePositionConstraints_s_impulse1);\r\n            impulse.x = impulse1.x;\r\n            impulse.y = impulse1.y;\r\n            impulse.z = 0;\r\n        }\r\n        // b2Vec2 P = impulse.x * perp + impulse.z * axis;\r\n        const P = b2Vec2.AddVV(b2Vec2.MulSV(impulse.x, perp, b2Vec2.s_t0), b2Vec2.MulSV(impulse.z, axis, b2Vec2.s_t1), b2PrismaticJoint.SolvePositionConstraints_s_P);\r\n        // float32 LA = impulse.x * s1 + impulse.y + impulse.z * a1;\r\n        const LA = impulse.x * s1 + impulse.y + impulse.z * a1;\r\n        // float32 LB = impulse.x * s2 + impulse.y + impulse.z * a2;\r\n        const LB = impulse.x * s2 + impulse.y + impulse.z * a2;\r\n        // cA -= mA * P;\r\n        cA.SelfMulSub(mA, P);\r\n        aA -= iA * LA;\r\n        // cB += mB * P;\r\n        cB.SelfMulAdd(mB, P);\r\n        aB += iB * LB;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return linearError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * (m_impulse.x * m_perp + (m_motorImpulse + m_impulse.z) * m_axis);\r\n        out.x = inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x);\r\n        out.y = inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y);\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.y;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetLocalAxisA() { return this.m_localXAxisA; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    GetJointTranslation() {\r\n        // b2Vec2 pA = m_bodyA.GetWorldPoint(m_localAnchorA);\r\n        const pA = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PrismaticJoint.GetJointTranslation_s_pA);\r\n        // b2Vec2 pB = m_bodyB.GetWorldPoint(m_localAnchorB);\r\n        const pB = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PrismaticJoint.GetJointTranslation_s_pB);\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2PrismaticJoint.GetJointTranslation_s_d);\r\n        // b2Vec2 axis = m_bodyA.GetWorldVector(m_localXAxisA);\r\n        const axis = this.m_bodyA.GetWorldVector(this.m_localXAxisA, b2PrismaticJoint.GetJointTranslation_s_axis);\r\n        // float32 translation = b2Dot(d, axis);\r\n        const translation = b2Vec2.DotVV(d, axis);\r\n        return translation;\r\n    }\r\n    GetJointSpeed() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 pA = bA->m_sweep.c + rA;\r\n        const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\r\n        // b2Vec2 pB = bB->m_sweep.c + rB;\r\n        const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\r\n        // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, this.m_axis);\r\n        const vA = bA.m_linearVelocity;\r\n        const vB = bB.m_linearVelocity;\r\n        const wA = bA.m_angularVelocity;\r\n        const wB = bB.m_angularVelocity;\r\n        // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n        const speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n        return speed;\r\n    }\r\n    IsLimitEnabled() {\r\n        return this.m_enableLimit;\r\n    }\r\n    EnableLimit(flag) {\r\n        if (flag !== this.m_enableLimit) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableLimit = flag;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    GetLowerLimit() {\r\n        return this.m_lowerTranslation;\r\n    }\r\n    GetUpperLimit() {\r\n        return this.m_upperTranslation;\r\n    }\r\n    SetLimits(lower, upper) {\r\n        if (lower !== this.m_lowerTranslation || upper !== this.m_upperTranslation) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_lowerTranslation = lower;\r\n            this.m_upperTranslation = upper;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        if (flag !== this.m_enableMotor) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableMotor = flag;\r\n        }\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        if (speed !== this.m_motorSpeed) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_motorSpeed = speed;\r\n        }\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    SetMaxMotorForce(force) {\r\n        if (force !== this.m_maxMotorForce) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_maxMotorForce = force;\r\n        }\r\n    }\r\n    GetMaxMotorForce() { return this.m_maxMotorForce; }\r\n    GetMotorForce(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2PrismaticJointDef = new b2PrismaticJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.lowerTranslation = %.15f;\\n\", this.m_lowerTranslation);\r\n        log(\"  jd.upperTranslation = %.15f;\\n\", this.m_upperTranslation);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorForce = %.15f;\\n\", this.m_maxMotorForce);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2PrismaticJoint.InitVelocityConstraints_s_d = new b2Vec2();\r\nb2PrismaticJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_f2r = new b2Vec2();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_f1 = new b2Vec3();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_df3 = new b2Vec3();\r\nb2PrismaticJoint.SolveVelocityConstraints_s_df2 = new b2Vec2();\r\n// A velocity based solver computes reaction forces(impulses) using the velocity constraint solver.Under this context,\r\n// the position solver is not there to resolve forces.It is only there to cope with integration error.\r\n//\r\n// Therefore, the pseudo impulses in the position solver do not have any physical meaning.Thus it is okay if they suck.\r\n//\r\n// We could take the active state from the velocity solver.However, the joint might push past the limit when the velocity\r\n// solver indicates the limit is inactive.\r\nb2PrismaticJoint.SolvePositionConstraints_s_d = new b2Vec2();\r\nb2PrismaticJoint.SolvePositionConstraints_s_impulse = new b2Vec3();\r\nb2PrismaticJoint.SolvePositionConstraints_s_impulse1 = new b2Vec2();\r\nb2PrismaticJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_pA = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_pB = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_d = new b2Vec2();\r\nb2PrismaticJoint.GetJointTranslation_s_axis = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert, b2_epsilon } from \"../../Common/b2Settings\";\r\nimport { b2_linearSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\nexport const b2_minPulleyLength = 2;\r\n/// Pulley joint definition. This requires two ground anchors,\r\n/// two dynamic body anchor points, and a pulley ratio.\r\nexport class b2PulleyJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_pulleyJoint);\r\n        this.groundAnchorA = new b2Vec2(-1, 1);\r\n        this.groundAnchorB = new b2Vec2(1, 1);\r\n        this.localAnchorA = new b2Vec2(-1, 0);\r\n        this.localAnchorB = new b2Vec2(1, 0);\r\n        this.lengthA = 0;\r\n        this.lengthB = 0;\r\n        this.ratio = 1;\r\n        this.collideConnected = true;\r\n    }\r\n    Initialize(bA, bB, groundA, groundB, anchorA, anchorB, r) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.groundAnchorA.Copy(groundA);\r\n        this.groundAnchorB.Copy(groundB);\r\n        this.bodyA.GetLocalPoint(anchorA, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchorB, this.localAnchorB);\r\n        this.lengthA = b2Vec2.DistanceVV(anchorA, groundA);\r\n        this.lengthB = b2Vec2.DistanceVV(anchorB, groundB);\r\n        this.ratio = r;\r\n        // DEBUG: b2Assert(this.ratio > b2_epsilon);\r\n    }\r\n}\r\nexport class b2PulleyJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_groundAnchorA = new b2Vec2();\r\n        this.m_groundAnchorB = new b2Vec2();\r\n        this.m_lengthA = 0;\r\n        this.m_lengthB = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_constant = 0;\r\n        this.m_ratio = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_uA = new b2Vec2();\r\n        this.m_uB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_groundAnchorA.Copy(b2Maybe(def.groundAnchorA, new b2Vec2(-1, 1)));\r\n        this.m_groundAnchorB.Copy(b2Maybe(def.groundAnchorB, new b2Vec2(1, 0)));\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));\r\n        this.m_lengthA = b2Maybe(def.lengthA, 0);\r\n        this.m_lengthB = b2Maybe(def.lengthB, 0);\r\n        // DEBUG: b2Assert(b2Maybe(def.ratio, 1) !== 0);\r\n        this.m_ratio = b2Maybe(def.ratio, 1);\r\n        this.m_constant = b2Maybe(def.lengthA, 0) + this.m_ratio * b2Maybe(def.lengthB, 0);\r\n        this.m_impulse = 0;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // Get the pulley axes.\r\n        // m_uA = cA + m_rA - m_groundAnchorA;\r\n        this.m_uA.Copy(cA).SelfAdd(this.m_rA).SelfSub(this.m_groundAnchorA);\r\n        // m_uB = cB + m_rB - m_groundAnchorB;\r\n        this.m_uB.Copy(cB).SelfAdd(this.m_rB).SelfSub(this.m_groundAnchorB);\r\n        const lengthA = this.m_uA.Length();\r\n        const lengthB = this.m_uB.Length();\r\n        if (lengthA > 10 * b2_linearSlop) {\r\n            this.m_uA.SelfMul(1 / lengthA);\r\n        }\r\n        else {\r\n            this.m_uA.SetZero();\r\n        }\r\n        if (lengthB > 10 * b2_linearSlop) {\r\n            this.m_uB.SelfMul(1 / lengthB);\r\n        }\r\n        else {\r\n            this.m_uB.SetZero();\r\n        }\r\n        // Compute effective mass.\r\n        const ruA = b2Vec2.CrossVV(this.m_rA, this.m_uA);\r\n        const ruB = b2Vec2.CrossVV(this.m_rB, this.m_uB);\r\n        const mA = this.m_invMassA + this.m_invIA * ruA * ruA;\r\n        const mB = this.m_invMassB + this.m_invIB * ruB * ruB;\r\n        this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\r\n        if (this.m_mass > 0) {\r\n            this.m_mass = 1 / this.m_mass;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support variable time steps.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // Warm starting.\r\n            // b2Vec2 PA = -(m_impulse) * m_uA;\r\n            const PA = b2Vec2.MulSV(-(this.m_impulse), this.m_uA, b2PulleyJoint.InitVelocityConstraints_s_PA);\r\n            // b2Vec2 PB = (-m_ratio * m_impulse) * m_uB;\r\n            const PB = b2Vec2.MulSV((-this.m_ratio * this.m_impulse), this.m_uB, b2PulleyJoint.InitVelocityConstraints_s_PB);\r\n            // vA += m_invMassA * PA;\r\n            vA.SelfMulAdd(this.m_invMassA, PA);\r\n            wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\r\n            // vB += m_invMassB * PB;\r\n            vB.SelfMulAdd(this.m_invMassB, PB);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2PulleyJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2PulleyJoint.SolveVelocityConstraints_s_vpB);\r\n        const Cdot = -b2Vec2.DotVV(this.m_uA, vpA) - this.m_ratio * b2Vec2.DotVV(this.m_uB, vpB);\r\n        const impulse = -this.m_mass * Cdot;\r\n        this.m_impulse += impulse;\r\n        // b2Vec2 PA = -impulse * m_uA;\r\n        const PA = b2Vec2.MulSV(-impulse, this.m_uA, b2PulleyJoint.SolveVelocityConstraints_s_PA);\r\n        // b2Vec2 PB = -m_ratio * impulse * m_uB;\r\n        const PB = b2Vec2.MulSV(-this.m_ratio * impulse, this.m_uB, b2PulleyJoint.SolveVelocityConstraints_s_PB);\r\n        // vA += m_invMassA * PA;\r\n        vA.SelfMulAdd(this.m_invMassA, PA);\r\n        wA += this.m_invIA * b2Vec2.CrossVV(this.m_rA, PA);\r\n        // vB += m_invMassB * PB;\r\n        vB.SelfMulAdd(this.m_invMassB, PB);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, PB);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // Get the pulley axes.\r\n        // b2Vec2 uA = cA + rA - m_groundAnchorA;\r\n        const uA = this.m_uA.Copy(cA).SelfAdd(rA).SelfSub(this.m_groundAnchorA);\r\n        // b2Vec2 uB = cB + rB - m_groundAnchorB;\r\n        const uB = this.m_uB.Copy(cB).SelfAdd(rB).SelfSub(this.m_groundAnchorB);\r\n        const lengthA = uA.Length();\r\n        const lengthB = uB.Length();\r\n        if (lengthA > 10 * b2_linearSlop) {\r\n            uA.SelfMul(1 / lengthA);\r\n        }\r\n        else {\r\n            uA.SetZero();\r\n        }\r\n        if (lengthB > 10 * b2_linearSlop) {\r\n            uB.SelfMul(1 / lengthB);\r\n        }\r\n        else {\r\n            uB.SetZero();\r\n        }\r\n        // Compute effective mass.\r\n        const ruA = b2Vec2.CrossVV(rA, uA);\r\n        const ruB = b2Vec2.CrossVV(rB, uB);\r\n        const mA = this.m_invMassA + this.m_invIA * ruA * ruA;\r\n        const mB = this.m_invMassB + this.m_invIB * ruB * ruB;\r\n        let mass = mA + this.m_ratio * this.m_ratio * mB;\r\n        if (mass > 0) {\r\n            mass = 1 / mass;\r\n        }\r\n        const C = this.m_constant - lengthA - this.m_ratio * lengthB;\r\n        const linearError = b2Abs(C);\r\n        const impulse = -mass * C;\r\n        // b2Vec2 PA = -impulse * uA;\r\n        const PA = b2Vec2.MulSV(-impulse, uA, b2PulleyJoint.SolvePositionConstraints_s_PA);\r\n        // b2Vec2 PB = -m_ratio * impulse * uB;\r\n        const PB = b2Vec2.MulSV(-this.m_ratio * impulse, uB, b2PulleyJoint.SolvePositionConstraints_s_PB);\r\n        // cA += m_invMassA * PA;\r\n        cA.SelfMulAdd(this.m_invMassA, PA);\r\n        aA += this.m_invIA * b2Vec2.CrossVV(rA, PA);\r\n        // cB += m_invMassB * PB;\r\n        cB.SelfMulAdd(this.m_invMassB, PB);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, PB);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return linearError < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P = m_impulse * m_uB;\r\n        // return inv_dt * P;\r\n        out.x = inv_dt * this.m_impulse * this.m_uB.x;\r\n        out.y = inv_dt * this.m_impulse * this.m_uB.y;\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetGroundAnchorA() {\r\n        return this.m_groundAnchorA;\r\n    }\r\n    GetGroundAnchorB() {\r\n        return this.m_groundAnchorB;\r\n    }\r\n    GetLengthA() {\r\n        return this.m_lengthA;\r\n    }\r\n    GetLengthB() {\r\n        return this.m_lengthB;\r\n    }\r\n    GetRatio() {\r\n        return this.m_ratio;\r\n    }\r\n    GetCurrentLengthA() {\r\n        // b2Vec2 p = m_bodyA->GetWorldPoint(m_localAnchorA);\r\n        // b2Vec2 s = m_groundAnchorA;\r\n        // b2Vec2 d = p - s;\r\n        // return d.Length();\r\n        const p = this.m_bodyA.GetWorldPoint(this.m_localAnchorA, b2PulleyJoint.GetCurrentLengthA_s_p);\r\n        const s = this.m_groundAnchorA;\r\n        return b2Vec2.DistanceVV(p, s);\r\n    }\r\n    GetCurrentLengthB() {\r\n        // b2Vec2 p = m_bodyB->GetWorldPoint(m_localAnchorB);\r\n        // b2Vec2 s = m_groundAnchorB;\r\n        // b2Vec2 d = p - s;\r\n        // return d.Length();\r\n        const p = this.m_bodyB.GetWorldPoint(this.m_localAnchorB, b2PulleyJoint.GetCurrentLengthB_s_p);\r\n        const s = this.m_groundAnchorB;\r\n        return b2Vec2.DistanceVV(p, s);\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2PulleyJointDef = new b2PulleyJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.groundAnchorA.Set(%.15f, %.15f);\\n\", this.m_groundAnchorA.x, this.m_groundAnchorA.y);\r\n        log(\"  jd.groundAnchorB.Set(%.15f, %.15f);\\n\", this.m_groundAnchorB.x, this.m_groundAnchorB.y);\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.lengthA = %.15f;\\n\", this.m_lengthA);\r\n        log(\"  jd.lengthB = %.15f;\\n\", this.m_lengthB);\r\n        log(\"  jd.ratio = %.15f;\\n\", this.m_ratio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n    ShiftOrigin(newOrigin) {\r\n        this.m_groundAnchorA.SelfSub(newOrigin);\r\n        this.m_groundAnchorB.SelfSub(newOrigin);\r\n    }\r\n}\r\nb2PulleyJoint.InitVelocityConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.InitVelocityConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.SolveVelocityConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.SolvePositionConstraints_s_PA = new b2Vec2();\r\nb2PulleyJoint.SolvePositionConstraints_s_PB = new b2Vec2();\r\nb2PulleyJoint.GetCurrentLengthA_s_p = new b2Vec2();\r\nb2PulleyJoint.GetCurrentLengthB_s_p = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_angularSlop, b2_maxAngularCorrection, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Mat22, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Revolute joint definition. This requires defining an\r\n/// anchor point where the bodies are joined. The definition\r\n/// uses local anchor points so that the initial configuration\r\n/// can violate the constraint slightly. You also need to\r\n/// specify the initial relative angle for joint limits. This\r\n/// helps when saving and loading a game.\r\n/// The local anchor points are measured from the body's origin\r\n/// rather than the center of mass because:\r\n/// 1. you might not know where the center of mass will be.\r\n/// 2. if you add/remove shapes from a body and recompute the mass,\r\n///    the joints will be broken.\r\nexport class b2RevoluteJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_revoluteJoint);\r\n        this.localAnchorA = new b2Vec2(0, 0);\r\n        this.localAnchorB = new b2Vec2(0, 0);\r\n        this.referenceAngle = 0;\r\n        this.enableLimit = false;\r\n        this.lowerAngle = 0;\r\n        this.upperAngle = 0;\r\n        this.enableMotor = false;\r\n        this.motorSpeed = 0;\r\n        this.maxMotorTorque = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2RevoluteJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_impulse = new b2Vec3();\r\n        this.m_motorImpulse = 0;\r\n        this.m_enableMotor = false;\r\n        this.m_maxMotorTorque = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableLimit = false;\r\n        this.m_referenceAngle = 0;\r\n        this.m_lowerAngle = 0;\r\n        this.m_upperAngle = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = new b2Mat33(); // effective mass for point-to-point constraint.\r\n        this.m_motorMass = 0; // effective mass for motor/limit angular constraint.\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat22();\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n        this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\r\n        this.m_impulse.SetZero();\r\n        this.m_motorImpulse = 0;\r\n        this.m_lowerAngle = b2Maybe(def.lowerAngle, 0);\r\n        this.m_upperAngle = b2Maybe(def.upperAngle, 0);\r\n        this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);\r\n        this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\r\n        this.m_enableLimit = b2Maybe(def.enableLimit, false);\r\n        this.m_enableMotor = b2Maybe(def.enableMotor, false);\r\n        this.m_limitState = b2LimitState.e_inactiveLimit;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const fixedRotation = (iA + iB === 0);\r\n        this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n        this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n        this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n        this.m_mass.ex.y = this.m_mass.ey.x;\r\n        this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n        this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n        this.m_mass.ex.z = this.m_mass.ez.x;\r\n        this.m_mass.ey.z = this.m_mass.ez.y;\r\n        this.m_mass.ez.z = iA + iB;\r\n        this.m_motorMass = iA + iB;\r\n        if (this.m_motorMass > 0) {\r\n            this.m_motorMass = 1 / this.m_motorMass;\r\n        }\r\n        if (!this.m_enableMotor || fixedRotation) {\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (this.m_enableLimit && !fixedRotation) {\r\n            const jointAngle = aB - aA - this.m_referenceAngle;\r\n            if (b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2 * b2_angularSlop) {\r\n                this.m_limitState = b2LimitState.e_equalLimits;\r\n            }\r\n            else if (jointAngle <= this.m_lowerAngle) {\r\n                if (this.m_limitState !== b2LimitState.e_atLowerLimit) {\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                this.m_limitState = b2LimitState.e_atLowerLimit;\r\n            }\r\n            else if (jointAngle >= this.m_upperAngle) {\r\n                if (this.m_limitState !== b2LimitState.e_atUpperLimit) {\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                this.m_limitState = b2LimitState.e_atUpperLimit;\r\n            }\r\n            else {\r\n                this.m_limitState = b2LimitState.e_inactiveLimit;\r\n                this.m_impulse.z = 0;\r\n            }\r\n        }\r\n        else {\r\n            this.m_limitState = b2LimitState.e_inactiveLimit;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n            const P = b2RevoluteJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const fixedRotation = (iA + iB === 0);\r\n        // Solve motor constraint.\r\n        if (this.m_enableMotor && this.m_limitState !== b2LimitState.e_equalLimits && !fixedRotation) {\r\n            const Cdot = wB - wA - this.m_motorSpeed;\r\n            let impulse = -this.m_motorMass * Cdot;\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorTorque;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve limit constraint.\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit && !fixedRotation) {\r\n            // b2Vec2 Cdot1 = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot1);\r\n            const Cdot2 = wB - wA;\r\n            // b2Vec3 Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 impulse = -this.m_mass.Solve33(Cdot);\r\n            const impulse_v3 = this.m_mass.Solve33(Cdot1.x, Cdot1.y, Cdot2, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3).SelfNeg();\r\n            if (this.m_limitState === b2LimitState.e_equalLimits) {\r\n                this.m_impulse.SelfAdd(impulse_v3);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                const newImpulse = this.m_impulse.z + impulse_v3.z;\r\n                if (newImpulse < 0) {\r\n                    // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\r\n                    const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\r\n                    const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\r\n                    const reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);\r\n                    impulse_v3.x = reduced_v2.x;\r\n                    impulse_v3.y = reduced_v2.y;\r\n                    impulse_v3.z = -this.m_impulse.z;\r\n                    this.m_impulse.x += reduced_v2.x;\r\n                    this.m_impulse.y += reduced_v2.y;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                else {\r\n                    this.m_impulse.SelfAdd(impulse_v3);\r\n                }\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                const newImpulse = this.m_impulse.z + impulse_v3.z;\r\n                if (newImpulse > 0) {\r\n                    // b2Vec2 rhs = -Cdot1 + m_impulse.z * b2Vec2(m_mass.ez.x, m_mass.ez.y);\r\n                    const rhs_x = -Cdot1.x + this.m_impulse.z * this.m_mass.ez.x;\r\n                    const rhs_y = -Cdot1.y + this.m_impulse.z * this.m_mass.ez.y;\r\n                    const reduced_v2 = this.m_mass.Solve22(rhs_x, rhs_y, b2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2);\r\n                    impulse_v3.x = reduced_v2.x;\r\n                    impulse_v3.y = reduced_v2.y;\r\n                    impulse_v3.z = -this.m_impulse.z;\r\n                    this.m_impulse.x += reduced_v2.x;\r\n                    this.m_impulse.y += reduced_v2.y;\r\n                    this.m_impulse.z = 0;\r\n                }\r\n                else {\r\n                    this.m_impulse.SelfAdd(impulse_v3);\r\n                }\r\n            }\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2RevoluteJoint.SolveVelocityConstraints_s_P.Set(impulse_v3.x, impulse_v3.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse_v3.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse_v3.z);\r\n        }\r\n        else {\r\n            // Solve point-to-point constraint\r\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\r\n            const Cdot_v2 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2);\r\n            // b2Vec2 impulse = m_mass.Solve22(-Cdot);\r\n            const impulse_v2 = this.m_mass.Solve22(-Cdot_v2.x, -Cdot_v2.y, b2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2);\r\n            this.m_impulse.x += impulse_v2.x;\r\n            this.m_impulse.y += impulse_v2.y;\r\n            // vA -= mA * impulse;\r\n            vA.SelfMulSub(mA, impulse_v2);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, impulse_v2);\r\n            // vB += mB * impulse;\r\n            vB.SelfMulAdd(mB, impulse_v2);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, impulse_v2);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        // b2Rot qA(aA), qB(aB);\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        let angularError = 0;\r\n        let positionError = 0;\r\n        const fixedRotation = (this.m_invIA + this.m_invIB === 0);\r\n        // Solve angular limit constraint.\r\n        if (this.m_enableLimit && this.m_limitState !== b2LimitState.e_inactiveLimit && !fixedRotation) {\r\n            const angle = aB - aA - this.m_referenceAngle;\r\n            let limitImpulse = 0;\r\n            if (this.m_limitState === b2LimitState.e_equalLimits) {\r\n                // Prevent large angular corrections\r\n                const C = b2Clamp(angle - this.m_lowerAngle, -b2_maxAngularCorrection, b2_maxAngularCorrection);\r\n                limitImpulse = -this.m_motorMass * C;\r\n                angularError = b2Abs(C);\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atLowerLimit) {\r\n                let C = angle - this.m_lowerAngle;\r\n                angularError = -C;\r\n                // Prevent large angular corrections and allow some slop.\r\n                C = b2Clamp(C + b2_angularSlop, -b2_maxAngularCorrection, 0);\r\n                limitImpulse = -this.m_motorMass * C;\r\n            }\r\n            else if (this.m_limitState === b2LimitState.e_atUpperLimit) {\r\n                let C = angle - this.m_upperAngle;\r\n                angularError = C;\r\n                // Prevent large angular corrections and allow some slop.\r\n                C = b2Clamp(C - b2_angularSlop, 0, b2_maxAngularCorrection);\r\n                limitImpulse = -this.m_motorMass * C;\r\n            }\r\n            aA -= this.m_invIA * limitImpulse;\r\n            aB += this.m_invIB * limitImpulse;\r\n        }\r\n        // Solve point-to-point constraint.\r\n        {\r\n            qA.SetAngle(aA);\r\n            qB.SetAngle(aB);\r\n            // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n            b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n            const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n            // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n            b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n            const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n            // b2Vec2 C = cB + rB - cA - rA;\r\n            const C_v2 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2RevoluteJoint.SolvePositionConstraints_s_C_v2);\r\n            // positionError = C.Length();\r\n            positionError = C_v2.Length();\r\n            const mA = this.m_invMassA, mB = this.m_invMassB;\r\n            const iA = this.m_invIA, iB = this.m_invIB;\r\n            const K = this.m_K;\r\n            K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\r\n            K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\r\n            K.ey.x = K.ex.y;\r\n            K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\r\n            // b2Vec2 impulse = -K.Solve(C);\r\n            const impulse = K.Solve(C_v2.x, C_v2.y, b2RevoluteJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n            // cA -= mA * impulse;\r\n            cA.SelfMulSub(mA, impulse);\r\n            aA -= iA * b2Vec2.CrossVV(rA, impulse);\r\n            // cB += mB * impulse;\r\n            cB.SelfMulAdd(mB, impulse);\r\n            aB += iB * b2Vec2.CrossVV(rB, impulse);\r\n        }\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n        // return inv_dt * P;\r\n        out.x = inv_dt * this.m_impulse.x;\r\n        out.y = inv_dt * this.m_impulse.y;\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.z;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    GetJointAngle() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_sweep.a - bA->this.m_sweep.a - this.m_referenceAngle;\r\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;\r\n    }\r\n    GetJointSpeed() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_angularVelocity - bA->this.m_angularVelocity;\r\n        return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        if (flag !== this.m_enableMotor) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableMotor = flag;\r\n        }\r\n    }\r\n    GetMotorTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    SetMaxMotorTorque(torque) {\r\n        if (torque !== this.m_maxMotorTorque) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_maxMotorTorque = torque;\r\n        }\r\n    }\r\n    GetMaxMotorTorque() { return this.m_maxMotorTorque; }\r\n    IsLimitEnabled() {\r\n        return this.m_enableLimit;\r\n    }\r\n    EnableLimit(flag) {\r\n        if (flag !== this.m_enableLimit) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableLimit = flag;\r\n            this.m_impulse.z = 0;\r\n        }\r\n    }\r\n    GetLowerLimit() {\r\n        return this.m_lowerAngle;\r\n    }\r\n    GetUpperLimit() {\r\n        return this.m_upperAngle;\r\n    }\r\n    SetLimits(lower, upper) {\r\n        if (lower !== this.m_lowerAngle || upper !== this.m_upperAngle) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_impulse.z = 0;\r\n            this.m_lowerAngle = lower;\r\n            this.m_upperAngle = upper;\r\n        }\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        if (speed !== this.m_motorSpeed) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_motorSpeed = speed;\r\n        }\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2RevoluteJointDef = new b2RevoluteJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.enableLimit = %s;\\n\", (this.m_enableLimit) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.lowerAngle = %.15f;\\n\", this.m_lowerAngle);\r\n        log(\"  jd.upperAngle = %.15f;\\n\", this.m_upperAngle);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2RevoluteJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_Cdot_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_impulse_v3 = new b2Vec3();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_reduced_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolveVelocityConstraints_s_impulse_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolvePositionConstraints_s_C_v2 = new b2Vec2();\r\nb2RevoluteJoint.SolvePositionConstraints_s_impulse = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop, b2_maxLinearCorrection, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Min, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2LimitState } from \"./b2Joint\";\r\n/// Rope joint definition. This requires two body anchor points and\r\n/// a maximum lengths.\r\n/// Note: by default the connected objects will not collide.\r\n/// see collideConnected in b2JointDef.\r\nexport class b2RopeJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_ropeJoint);\r\n        this.localAnchorA = new b2Vec2(-1, 0);\r\n        this.localAnchorB = new b2Vec2(1, 0);\r\n        this.maxLength = 0;\r\n    }\r\n}\r\nexport class b2RopeJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_maxLength = 0;\r\n        this.m_length = 0;\r\n        this.m_impulse = 0;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_u = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = 0;\r\n        this.m_state = b2LimitState.e_inactiveLimit;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, new b2Vec2(-1, 0)));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, new b2Vec2(1, 0)));\r\n        this.m_maxLength = b2Maybe(def.maxLength, 0);\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // this.m_u = cB + this.m_rB - cA - this.m_rA;\r\n        this.m_u.Copy(cB).SelfAdd(this.m_rB).SelfSub(cA).SelfSub(this.m_rA);\r\n        this.m_length = this.m_u.Length();\r\n        const C = this.m_length - this.m_maxLength;\r\n        if (C > 0) {\r\n            this.m_state = b2LimitState.e_atUpperLimit;\r\n        }\r\n        else {\r\n            this.m_state = b2LimitState.e_inactiveLimit;\r\n        }\r\n        if (this.m_length > b2_linearSlop) {\r\n            this.m_u.SelfMul(1 / this.m_length);\r\n        }\r\n        else {\r\n            this.m_u.SetZero();\r\n            this.m_mass = 0;\r\n            this.m_impulse = 0;\r\n            return;\r\n        }\r\n        // Compute effective mass.\r\n        const crA = b2Vec2.CrossVV(this.m_rA, this.m_u);\r\n        const crB = b2Vec2.CrossVV(this.m_rB, this.m_u);\r\n        const invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB + this.m_invIB * crB * crB;\r\n        this.m_mass = invMass !== 0 ? 1 / invMass : 0;\r\n        if (data.step.warmStarting) {\r\n            // Scale the impulse to support a variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_u;\r\n            const P = b2Vec2.MulSV(this.m_impulse, this.m_u, b2RopeJoint.InitVelocityConstraints_s_P);\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Cdot = dot(u, v + cross(w, r))\r\n        // b2Vec2 vpA = vA + b2Cross(wA, m_rA);\r\n        const vpA = b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2RopeJoint.SolveVelocityConstraints_s_vpA);\r\n        // b2Vec2 vpB = vB + b2Cross(wB, m_rB);\r\n        const vpB = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2RopeJoint.SolveVelocityConstraints_s_vpB);\r\n        // float32 C = m_length - m_maxLength;\r\n        const C = this.m_length - this.m_maxLength;\r\n        // float32 Cdot = b2Dot(m_u, vpB - vpA);\r\n        let Cdot = b2Vec2.DotVV(this.m_u, b2Vec2.SubVV(vpB, vpA, b2Vec2.s_t0));\r\n        // Predictive constraint.\r\n        if (C < 0) {\r\n            Cdot += data.step.inv_dt * C;\r\n        }\r\n        let impulse = -this.m_mass * Cdot;\r\n        const oldImpulse = this.m_impulse;\r\n        this.m_impulse = b2Min(0, this.m_impulse + impulse);\r\n        impulse = this.m_impulse - oldImpulse;\r\n        // b2Vec2 P = impulse * m_u;\r\n        const P = b2Vec2.MulSV(impulse, this.m_u, b2RopeJoint.SolveVelocityConstraints_s_P);\r\n        // vA -= m_invMassA * P;\r\n        vA.SelfMulSub(this.m_invMassA, P);\r\n        wA -= this.m_invIA * b2Vec2.CrossVV(this.m_rA, P);\r\n        // vB += m_invMassB * P;\r\n        vB.SelfMulAdd(this.m_invMassB, P);\r\n        wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, P);\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 u = cB + rB - cA - rA;\r\n        const u = this.m_u.Copy(cB).SelfAdd(rB).SelfSub(cA).SelfSub(rA);\r\n        const length = u.Normalize();\r\n        let C = length - this.m_maxLength;\r\n        C = b2Clamp(C, 0, b2_maxLinearCorrection);\r\n        const impulse = -this.m_mass * C;\r\n        // b2Vec2 P = impulse * u;\r\n        const P = b2Vec2.MulSV(impulse, u, b2RopeJoint.SolvePositionConstraints_s_P);\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        aA -= this.m_invIA * b2Vec2.CrossVV(rA, P);\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        aB += this.m_invIB * b2Vec2.CrossVV(rB, P);\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return length - this.m_maxLength < b2_linearSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return out.Set(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);\r\n        return b2Vec2.MulSV((inv_dt * this.m_impulse), this.m_u, out);\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return 0;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    SetMaxLength(length) { this.m_maxLength = length; }\r\n    GetMaxLength() {\r\n        return this.m_maxLength;\r\n    }\r\n    GetLimitState() {\r\n        return this.m_state;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2RopeJointDef = new b2RopeJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.maxLength = %.15f;\\n\", this.m_maxLength);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2RopeJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_vpA = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_vpB = new b2Vec2();\r\nb2RopeJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2RopeJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_pi, b2_linearSlop, b2_angularSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Vec2, b2Vec3, b2Mat33, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Weld joint definition. You need to specify local anchor points\r\n/// where they are attached and the relative body angle. The position\r\n/// of the anchor points is important for computing the reaction torque.\r\nexport class b2WeldJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_weldJoint);\r\n        this.localAnchorA = new b2Vec2();\r\n        this.localAnchorB = new b2Vec2();\r\n        this.referenceAngle = 0;\r\n        this.frequencyHz = 0;\r\n        this.dampingRatio = 0;\r\n    }\r\n    Initialize(bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    }\r\n}\r\nexport class b2WeldJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        this.m_bias = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_referenceAngle = 0;\r\n        this.m_gamma = 0;\r\n        this.m_impulse = new b2Vec3(0, 0, 0);\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_mass = new b2Mat33();\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_K = new b2Mat33();\r\n        this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n        this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n        this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\r\n        this.m_impulse.SetZero();\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n        K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n        K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            K.GetInverse22(this.m_mass);\r\n            let invM = iA + iB;\r\n            const m = invM > 0 ? 1 / invM : 0;\r\n            const C = aB - aA - this.m_referenceAngle;\r\n            // Frequency\r\n            const omega = 2 * b2_pi * this.m_frequencyHz;\r\n            // Damping coefficient\r\n            const d = 2 * m * this.m_dampingRatio * omega;\r\n            // Spring stiffness\r\n            const k = m * omega * omega;\r\n            // magic formulas\r\n            const h = data.step.dt;\r\n            this.m_gamma = h * (d + h * k);\r\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n            this.m_bias = C * h * k * this.m_gamma;\r\n            invM += this.m_gamma;\r\n            this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\r\n        }\r\n        else {\r\n            K.GetSymInverse33(this.m_mass);\r\n            this.m_gamma = 0;\r\n            this.m_bias = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n            const P = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        if (this.m_frequencyHz > 0) {\r\n            const Cdot2 = wB - wA;\r\n            const impulse2 = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\r\n            this.m_impulse.z += impulse2;\r\n            wA -= iA * impulse2;\r\n            wB += iB * impulse2;\r\n            // b2Vec2 Cdot1 = vB + b2Vec2.CrossSV(wB, this.m_rB) - vA - b2Vec2.CrossSV(wA, this.m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            // b2Vec2 impulse1 = -b2Mul22(m_mass, Cdot1);\r\n            const impulse1 = b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();\r\n            this.m_impulse.x += impulse1.x;\r\n            this.m_impulse.y += impulse1.y;\r\n            // b2Vec2 P = impulse1;\r\n            const P = impulse1;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            // wA -= iA * b2Cross(m_rA, P);\r\n            wA -= iA * b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            // wB += iB * b2Cross(m_rB, P);\r\n            wB += iB * b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 Cdot1 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA);\r\n            const Cdot1 = b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            const Cdot2 = wB - wA;\r\n            // b2Vec3 const Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 impulse = -b2Mul(m_mass, Cdot);\r\n            const impulse = b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();\r\n            this.m_impulse.SelfAdd(impulse);\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        let positionError, angularError;\r\n        const K = this.m_K;\r\n        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\r\n        K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\r\n        K.ez.x = -rA.y * iA - rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\r\n        K.ez.y = rA.x * iA + rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            const C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            positionError = C1.Length();\r\n            angularError = 0;\r\n            // b2Vec2 P = -K.Solve22(C1);\r\n            const P = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * b2Vec2.CrossVV(rA, P);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * b2Vec2.CrossVV(rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            const C1 = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            const C2 = aB - aA - this.m_referenceAngle;\r\n            positionError = C1.Length();\r\n            angularError = b2Abs(C2);\r\n            // b2Vec3 C(C1.x, C1.y, C2);\r\n            // b2Vec3 impulse = -K.Solve33(C);\r\n            const impulse = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            const P = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n        // return inv_dt * P;\r\n        out.x = inv_dt * this.m_impulse.x;\r\n        out.y = inv_dt * this.m_impulse.y;\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_impulse.z;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetReferenceAngle() { return this.m_referenceAngle; }\r\n    SetFrequency(hz) { this.m_frequencyHz = hz; }\r\n    GetFrequency() { return this.m_frequencyHz; }\r\n    SetDampingRatio(ratio) { this.m_dampingRatio = ratio; }\r\n    GetDampingRatio() { return this.m_dampingRatio; }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WeldJointDef = new b2WeldJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2WeldJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_impulse1 = new b2Vec2();\r\nb2WeldJoint.SolveVelocityConstraints_s_impulse = new b2Vec3();\r\nb2WeldJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_C1 = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2WeldJoint.SolvePositionConstraints_s_impulse = new b2Vec3();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_pi, b2_linearSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Rot } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType } from \"./b2Joint\";\r\n/// Wheel joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nexport class b2WheelJointDef extends b2JointDef {\r\n    constructor() {\r\n        super(b2JointType.e_wheelJoint);\r\n        this.localAnchorA = new b2Vec2(0, 0);\r\n        this.localAnchorB = new b2Vec2(0, 0);\r\n        this.localAxisA = new b2Vec2(1, 0);\r\n        this.enableMotor = false;\r\n        this.maxMotorTorque = 0;\r\n        this.motorSpeed = 0;\r\n        this.frequencyHz = 2;\r\n        this.dampingRatio = 0.7;\r\n    }\r\n    Initialize(bA, bB, anchor, axis) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n    }\r\n}\r\nexport class b2WheelJoint extends b2Joint {\r\n    constructor(def) {\r\n        super(def);\r\n        this.m_frequencyHz = 0;\r\n        this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        this.m_localAnchorA = new b2Vec2();\r\n        this.m_localAnchorB = new b2Vec2();\r\n        this.m_localXAxisA = new b2Vec2();\r\n        this.m_localYAxisA = new b2Vec2();\r\n        this.m_impulse = 0;\r\n        this.m_motorImpulse = 0;\r\n        this.m_springImpulse = 0;\r\n        this.m_maxMotorTorque = 0;\r\n        this.m_motorSpeed = 0;\r\n        this.m_enableMotor = false;\r\n        // Solver temp\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_localCenterA = new b2Vec2();\r\n        this.m_localCenterB = new b2Vec2();\r\n        this.m_invMassA = 0;\r\n        this.m_invMassB = 0;\r\n        this.m_invIA = 0;\r\n        this.m_invIB = 0;\r\n        this.m_ax = new b2Vec2();\r\n        this.m_ay = new b2Vec2();\r\n        this.m_sAx = 0;\r\n        this.m_sBx = 0;\r\n        this.m_sAy = 0;\r\n        this.m_sBy = 0;\r\n        this.m_mass = 0;\r\n        this.m_motorMass = 0;\r\n        this.m_springMass = 0;\r\n        this.m_bias = 0;\r\n        this.m_gamma = 0;\r\n        this.m_qA = new b2Rot();\r\n        this.m_qB = new b2Rot();\r\n        this.m_lalcA = new b2Vec2();\r\n        this.m_lalcB = new b2Vec2();\r\n        this.m_rA = new b2Vec2();\r\n        this.m_rB = new b2Vec2();\r\n        this.m_frequencyHz = b2Maybe(def.frequencyHz, 2);\r\n        this.m_dampingRatio = b2Maybe(def.dampingRatio, 0.7);\r\n        this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n        this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n        this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, b2Vec2.UNITX));\r\n        b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\r\n        this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);\r\n        this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\r\n        this.m_enableMotor = b2Maybe(def.enableMotor, false);\r\n        this.m_ax.SetZero();\r\n        this.m_ay.SetZero();\r\n    }\r\n    GetMotorSpeed() {\r\n        return this.m_motorSpeed;\r\n    }\r\n    GetMaxMotorTorque() {\r\n        return this.m_maxMotorTorque;\r\n    }\r\n    SetSpringFrequencyHz(hz) {\r\n        this.m_frequencyHz = hz;\r\n    }\r\n    GetSpringFrequencyHz() {\r\n        return this.m_frequencyHz;\r\n    }\r\n    SetSpringDampingRatio(ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    }\r\n    GetSpringDampingRatio() {\r\n        return this.m_dampingRatio;\r\n    }\r\n    InitVelocityConstraints(data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const cA = data.positions[this.m_indexA].c;\r\n        const aA = data.positions[this.m_indexA].a;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        const aB = data.positions[this.m_indexB].a;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective masses.\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = cB + rB - cA - rA;\r\n        const d = b2Vec2.SubVV(b2Vec2.AddVV(cB, rB, b2Vec2.s_t0), b2Vec2.AddVV(cA, rA, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_d);\r\n        // Point to line constraint\r\n        {\r\n            // m_ay = b2Mul(qA, m_localYAxisA);\r\n            b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n            // m_sAy = b2Cross(d + rA, m_ay);\r\n            this.m_sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ay);\r\n            // m_sBy = b2Cross(rB, m_ay);\r\n            this.m_sBy = b2Vec2.CrossVV(rB, this.m_ay);\r\n            this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\r\n            if (this.m_mass > 0) {\r\n                this.m_mass = 1 / this.m_mass;\r\n            }\r\n        }\r\n        // Spring constraint\r\n        this.m_springMass = 0;\r\n        this.m_bias = 0;\r\n        this.m_gamma = 0;\r\n        if (this.m_frequencyHz > 0) {\r\n            // m_ax = b2Mul(qA, m_localXAxisA);\r\n            b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\r\n            // m_sAx = b2Cross(d + rA, m_ax);\r\n            this.m_sAx = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ax);\r\n            // m_sBx = b2Cross(rB, m_ax);\r\n            this.m_sBx = b2Vec2.CrossVV(rB, this.m_ax);\r\n            const invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\r\n            if (invMass > 0) {\r\n                this.m_springMass = 1 / invMass;\r\n                const C = b2Vec2.DotVV(d, this.m_ax);\r\n                // Frequency\r\n                const omega = 2 * b2_pi * this.m_frequencyHz;\r\n                // Damping coefficient\r\n                const damp = 2 * this.m_springMass * this.m_dampingRatio * omega;\r\n                // Spring stiffness\r\n                const k = this.m_springMass * omega * omega;\r\n                // magic formulas\r\n                const h = data.step.dt;\r\n                this.m_gamma = h * (damp + h * k);\r\n                if (this.m_gamma > 0) {\r\n                    this.m_gamma = 1 / this.m_gamma;\r\n                }\r\n                this.m_bias = C * h * k * this.m_gamma;\r\n                this.m_springMass = invMass + this.m_gamma;\r\n                if (this.m_springMass > 0) {\r\n                    this.m_springMass = 1 / this.m_springMass;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.m_springImpulse = 0;\r\n        }\r\n        // Rotational motor\r\n        if (this.m_enableMotor) {\r\n            this.m_motorMass = iA + iB;\r\n            if (this.m_motorMass > 0) {\r\n                this.m_motorMass = 1 / this.m_motorMass;\r\n            }\r\n        }\r\n        else {\r\n            this.m_motorMass = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Account for variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            this.m_springImpulse *= data.step.dtRatio;\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_ay + m_springImpulse * m_ax;\r\n            const P = b2Vec2.AddVV(b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Vec2.s_t0), b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_P);\r\n            // float32 LA = m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;\r\n            const LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\r\n            // float32 LB = m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;\r\n            const LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            wA -= this.m_invIA * LA;\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            wB += this.m_invIB * LB;\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n            this.m_springImpulse = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolveVelocityConstraints(data) {\r\n        const mA = this.m_invMassA, mB = this.m_invMassB;\r\n        const iA = this.m_invIA, iB = this.m_invIB;\r\n        const vA = data.velocities[this.m_indexA].v;\r\n        let wA = data.velocities[this.m_indexA].w;\r\n        const vB = data.velocities[this.m_indexB].v;\r\n        let wB = data.velocities[this.m_indexB].w;\r\n        // Solve spring constraint\r\n        {\r\n            const Cdot = b2Vec2.DotVV(this.m_ax, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\r\n            const impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\r\n            this.m_springImpulse += impulse;\r\n            // b2Vec2 P = impulse * m_ax;\r\n            const P = b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_sAx;\r\n            const LB = impulse * this.m_sBx;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // Solve rotational motor constraint\r\n        {\r\n            const Cdot = wB - wA - this.m_motorSpeed;\r\n            let impulse = -this.m_motorMass * Cdot;\r\n            const oldImpulse = this.m_motorImpulse;\r\n            const maxImpulse = data.step.dt * this.m_maxMotorTorque;\r\n            this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve point to line constraint\r\n        {\r\n            const Cdot = b2Vec2.DotVV(this.m_ay, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;\r\n            const impulse = -this.m_mass * Cdot;\r\n            this.m_impulse += impulse;\r\n            // b2Vec2 P = impulse * m_ay;\r\n            const P = b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            const LA = impulse * this.m_sAy;\r\n            const LB = impulse * this.m_sBy;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    }\r\n    SolvePositionConstraints(data) {\r\n        const cA = data.positions[this.m_indexA].c;\r\n        let aA = data.positions[this.m_indexA].a;\r\n        const cB = data.positions[this.m_indexB].c;\r\n        let aB = data.positions[this.m_indexB].a;\r\n        const qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = (cB - cA) + rB - rA;\r\n        const d = b2Vec2.AddVV(b2Vec2.SubVV(cB, cA, b2Vec2.s_t0), b2Vec2.SubVV(rB, rA, b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);\r\n        // b2Vec2 ay = b2Mul(qA, m_localYAxisA);\r\n        const ay = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n        // float32 sAy = b2Cross(d + rA, ay);\r\n        const sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), ay);\r\n        // float32 sBy = b2Cross(rB, ay);\r\n        const sBy = b2Vec2.CrossVV(rB, ay);\r\n        // float32 C = b2Dot(d, ay);\r\n        const C = b2Vec2.DotVV(d, this.m_ay);\r\n        const k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;\r\n        let impulse;\r\n        if (k !== 0) {\r\n            impulse = -C / k;\r\n        }\r\n        else {\r\n            impulse = 0;\r\n        }\r\n        // b2Vec2 P = impulse * ay;\r\n        const P = b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\r\n        const LA = impulse * sAy;\r\n        const LB = impulse * sBy;\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        aA -= this.m_invIA * LA;\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        aB += this.m_invIB * LB;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return b2Abs(C) <= b2_linearSlop;\r\n    }\r\n    GetDefinition(def) {\r\n        // DEBUG: b2Assert(false); // TODO\r\n        return def;\r\n    }\r\n    GetAnchorA(out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    }\r\n    GetAnchorB(out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    }\r\n    GetReactionForce(inv_dt, out) {\r\n        // return inv_dt * (m_impulse * m_ay + m_springImpulse * m_ax);\r\n        out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);\r\n        out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);\r\n        return out;\r\n    }\r\n    GetReactionTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    GetLocalAnchorA() { return this.m_localAnchorA; }\r\n    GetLocalAnchorB() { return this.m_localAnchorB; }\r\n    GetLocalAxisA() { return this.m_localXAxisA; }\r\n    GetJointTranslation() {\r\n        return this.GetPrismaticJointTranslation();\r\n    }\r\n    GetJointLinearSpeed() {\r\n        return this.GetPrismaticJointSpeed();\r\n    }\r\n    GetJointAngle() {\r\n        return this.GetRevoluteJointAngle();\r\n    }\r\n    GetJointAngularSpeed() {\r\n        return this.GetRevoluteJointSpeed();\r\n    }\r\n    GetPrismaticJointTranslation() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        const pA = bA.GetWorldPoint(this.m_localAnchorA, new b2Vec2());\r\n        const pB = bB.GetWorldPoint(this.m_localAnchorB, new b2Vec2());\r\n        const d = b2Vec2.SubVV(pB, pA, new b2Vec2());\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n        const translation = b2Vec2.DotVV(d, axis);\r\n        return translation;\r\n    }\r\n    GetPrismaticJointSpeed() {\r\n        const bA = this.m_bodyA;\r\n        const bB = this.m_bodyB;\r\n        // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n        const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n        b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n        const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 pA = bA->m_sweep.c + rA;\r\n        const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\r\n        // b2Vec2 pB = bB->m_sweep.c + rB;\r\n        const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\r\n        // b2Vec2 d = pB - pA;\r\n        const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\r\n        // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n        const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n        const vA = bA.m_linearVelocity;\r\n        const vB = bB.m_linearVelocity;\r\n        const wA = bA.m_angularVelocity;\r\n        const wB = bB.m_angularVelocity;\r\n        // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n        const speed = b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\r\n            b2Vec2.DotVV(axis, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n        return speed;\r\n    }\r\n    GetRevoluteJointAngle() {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_sweep.a - bA->this.m_sweep.a;\r\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\r\n    }\r\n    GetRevoluteJointSpeed() {\r\n        const wA = this.m_bodyA.m_angularVelocity;\r\n        const wB = this.m_bodyB.m_angularVelocity;\r\n        return wB - wA;\r\n    }\r\n    IsMotorEnabled() {\r\n        return this.m_enableMotor;\r\n    }\r\n    EnableMotor(flag) {\r\n        if (flag !== this.m_enableMotor) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableMotor = flag;\r\n        }\r\n    }\r\n    SetMotorSpeed(speed) {\r\n        if (speed !== this.m_motorSpeed) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_motorSpeed = speed;\r\n        }\r\n    }\r\n    SetMaxMotorTorque(force) {\r\n        if (force !== this.m_maxMotorTorque) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_maxMotorTorque = force;\r\n        }\r\n    }\r\n    GetMotorTorque(inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    }\r\n    Dump(log) {\r\n        const indexA = this.m_bodyA.m_islandIndex;\r\n        const indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WheelJointDef = new b2WheelJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    }\r\n}\r\nb2WheelJoint.InitVelocityConstraints_s_d = new b2Vec2();\r\nb2WheelJoint.InitVelocityConstraints_s_P = new b2Vec2();\r\nb2WheelJoint.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2WheelJoint.SolvePositionConstraints_s_d = new b2Vec2();\r\nb2WheelJoint.SolvePositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJXaGVlbEpvaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vQm94MkQvRHluYW1pY3MvSm9pbnRzL2IyV2hlZWxKb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFNLE1BQU0scUJBQXFCLENBQUM7QUFDeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFlLE1BQU0sV0FBVyxDQUFDO0FBc0IxRSw0REFBNEQ7QUFDNUQsdUVBQXVFO0FBQ3ZFLG9FQUFvRTtBQUNwRSxzRUFBc0U7QUFDdEUscUVBQXFFO0FBQ3JFLGtFQUFrRTtBQUNsRSxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxVQUFVO0lBaUI3QztRQUNFLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFqQmxCLGlCQUFZLEdBQVcsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXhDLGlCQUFZLEdBQVcsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXhDLGVBQVUsR0FBVyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFL0MsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFFcEIsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFFM0IsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUV2QixnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUV4QixpQkFBWSxHQUFXLEdBQUcsQ0FBQztJQUlsQyxDQUFDO0lBRU0sVUFBVSxDQUFDLEVBQVUsRUFBRSxFQUFVLEVBQUUsTUFBYyxFQUFFLElBQVk7UUFD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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_linearSlop } from \"../../Common/b2Settings\";\r\nimport { b2Sqrt } from \"../../Common/b2Math\";\r\nimport { b2Manifold } from \"../../Collision/b2Collision\";\r\nimport { b2TestOverlapShape } from \"../../Collision/b2Collision\";\r\nimport { b2TimeOfImpact, b2TOIInput, b2TOIOutput } from \"../../Collision/b2TimeOfImpact\";\r\n/// Friction mixing law. The idea is to allow either fixture to drive the friction to zero.\r\n/// For example, anything slides on ice.\r\nexport function b2MixFriction(friction1, friction2) {\r\n    return b2Sqrt(friction1 * friction2);\r\n}\r\n/// Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface.\r\n/// For example, a superball bounces on anything.\r\nexport function b2MixRestitution(restitution1, restitution2) {\r\n    return restitution1 > restitution2 ? restitution1 : restitution2;\r\n}\r\nexport class b2ContactEdge {\r\n    constructor(contact) {\r\n        this.prev = null; ///< the previous contact edge in the body's contact list\r\n        this.next = null; ///< the next contact edge in the body's contact list\r\n        this.contact = contact;\r\n    }\r\n}\r\nexport class b2Contact {\r\n    constructor() {\r\n        this.m_islandFlag = false; /// Used when crawling contact graph when forming islands.\r\n        this.m_touchingFlag = false; /// Set when the shapes are touching.\r\n        this.m_enabledFlag = false; /// This contact can be disabled (by user)\r\n        this.m_filterFlag = false; /// This contact needs filtering because a fixture filter was changed.\r\n        this.m_bulletHitFlag = false; /// This bullet contact had a TOI event\r\n        this.m_toiFlag = false; /// This contact has a valid TOI in m_toi\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_indexA = 0;\r\n        this.m_indexB = 0;\r\n        this.m_manifold = new b2Manifold(); // TODO: readonly\r\n        this.m_toiCount = 0;\r\n        this.m_toi = 0;\r\n        this.m_friction = 0;\r\n        this.m_restitution = 0;\r\n        this.m_tangentSpeed = 0;\r\n        this.m_oldManifold = new b2Manifold(); // TODO: readonly\r\n        this.m_nodeA = new b2ContactEdge(this);\r\n        this.m_nodeB = new b2ContactEdge(this);\r\n    }\r\n    GetManifold() {\r\n        return this.m_manifold;\r\n    }\r\n    GetWorldManifold(worldManifold) {\r\n        const bodyA = this.m_fixtureA.GetBody();\r\n        const bodyB = this.m_fixtureB.GetBody();\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);\r\n    }\r\n    IsTouching() {\r\n        return this.m_touchingFlag;\r\n    }\r\n    SetEnabled(flag) {\r\n        this.m_enabledFlag = flag;\r\n    }\r\n    IsEnabled() {\r\n        return this.m_enabledFlag;\r\n    }\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    GetFixtureA() {\r\n        return this.m_fixtureA;\r\n    }\r\n    GetChildIndexA() {\r\n        return this.m_indexA;\r\n    }\r\n    GetFixtureB() {\r\n        return this.m_fixtureB;\r\n    }\r\n    GetChildIndexB() {\r\n        return this.m_indexB;\r\n    }\r\n    FlagForFiltering() {\r\n        this.m_filterFlag = true;\r\n    }\r\n    SetFriction(friction) {\r\n        this.m_friction = friction;\r\n    }\r\n    GetFriction() {\r\n        return this.m_friction;\r\n    }\r\n    ResetFriction() {\r\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\r\n    }\r\n    SetRestitution(restitution) {\r\n        this.m_restitution = restitution;\r\n    }\r\n    GetRestitution() {\r\n        return this.m_restitution;\r\n    }\r\n    ResetRestitution() {\r\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\r\n    }\r\n    SetTangentSpeed(speed) {\r\n        this.m_tangentSpeed = speed;\r\n    }\r\n    GetTangentSpeed() {\r\n        return this.m_tangentSpeed;\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        this.m_islandFlag = false;\r\n        this.m_touchingFlag = false;\r\n        this.m_enabledFlag = true;\r\n        this.m_filterFlag = false;\r\n        this.m_bulletHitFlag = false;\r\n        this.m_toiFlag = false;\r\n        this.m_fixtureA = fixtureA;\r\n        this.m_fixtureB = fixtureB;\r\n        this.m_indexA = indexA;\r\n        this.m_indexB = indexB;\r\n        this.m_manifold.pointCount = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        delete this.m_nodeA.contact; // = null;\r\n        this.m_nodeA.prev = null;\r\n        this.m_nodeA.next = null;\r\n        delete this.m_nodeA.other; // = null;\r\n        delete this.m_nodeB.contact; // = null;\r\n        this.m_nodeB.prev = null;\r\n        this.m_nodeB.next = null;\r\n        delete this.m_nodeB.other; // = null;\r\n        this.m_toiCount = 0;\r\n        this.m_friction = b2MixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\r\n        this.m_restitution = b2MixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\r\n    }\r\n    Update(listener) {\r\n        const tManifold = this.m_oldManifold;\r\n        this.m_oldManifold = this.m_manifold;\r\n        this.m_manifold = tManifold;\r\n        // Re-enable this contact.\r\n        this.m_enabledFlag = true;\r\n        let touching = false;\r\n        const wasTouching = this.m_touchingFlag;\r\n        const sensorA = this.m_fixtureA.IsSensor();\r\n        const sensorB = this.m_fixtureB.IsSensor();\r\n        const sensor = sensorA || sensorB;\r\n        const bodyA = this.m_fixtureA.GetBody();\r\n        const bodyB = this.m_fixtureB.GetBody();\r\n        const xfA = bodyA.GetTransform();\r\n        const xfB = bodyB.GetTransform();\r\n        ///const aabbOverlap = b2TestOverlapAABB(this.m_fixtureA.GetAABB(0), this.m_fixtureB.GetAABB(0));\r\n        // Is this contact a sensor?\r\n        if (sensor) {\r\n            ///if (aabbOverlap)\r\n            ///{\r\n            const shapeA = this.m_fixtureA.GetShape();\r\n            const shapeB = this.m_fixtureB.GetShape();\r\n            touching = b2TestOverlapShape(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\r\n            ///}\r\n            // Sensors don't generate manifolds.\r\n            this.m_manifold.pointCount = 0;\r\n        }\r\n        else {\r\n            ///if (aabbOverlap)\r\n            ///{\r\n            this.Evaluate(this.m_manifold, xfA, xfB);\r\n            touching = this.m_manifold.pointCount > 0;\r\n            // Match old contact ids to new contact ids and copy the\r\n            // stored impulses to warm start the solver.\r\n            for (let i = 0; i < this.m_manifold.pointCount; ++i) {\r\n                const mp2 = this.m_manifold.points[i];\r\n                mp2.normalImpulse = 0;\r\n                mp2.tangentImpulse = 0;\r\n                const id2 = mp2.id;\r\n                for (let j = 0; j < this.m_oldManifold.pointCount; ++j) {\r\n                    const mp1 = this.m_oldManifold.points[j];\r\n                    if (mp1.id.key === id2.key) {\r\n                        mp2.normalImpulse = mp1.normalImpulse;\r\n                        mp2.tangentImpulse = mp1.tangentImpulse;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            ///}\r\n            ///else\r\n            ///{\r\n            ///  this.m_manifold.pointCount = 0;\r\n            ///}\r\n            if (touching !== wasTouching) {\r\n                bodyA.SetAwake(true);\r\n                bodyB.SetAwake(true);\r\n            }\r\n        }\r\n        this.m_touchingFlag = touching;\r\n        if (!wasTouching && touching && listener) {\r\n            listener.BeginContact(this);\r\n        }\r\n        if (wasTouching && !touching && listener) {\r\n            listener.EndContact(this);\r\n        }\r\n        if (!sensor && touching && listener) {\r\n            listener.PreSolve(this, this.m_oldManifold);\r\n        }\r\n    }\r\n    ComputeTOI(sweepA, sweepB) {\r\n        const input = b2Contact.ComputeTOI_s_input;\r\n        input.proxyA.SetShape(this.m_fixtureA.GetShape(), this.m_indexA);\r\n        input.proxyB.SetShape(this.m_fixtureB.GetShape(), this.m_indexB);\r\n        input.sweepA.Copy(sweepA);\r\n        input.sweepB.Copy(sweepB);\r\n        input.tMax = b2_linearSlop;\r\n        const output = b2Contact.ComputeTOI_s_output;\r\n        b2TimeOfImpact(output, input);\r\n        return output.t;\r\n    }\r\n}\r\nb2Contact.ComputeTOI_s_input = new b2TOIInput();\r\nb2Contact.ComputeTOI_s_output = new b2TOIOutput();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideCircles } from \"../../Collision/b2CollideCircle\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2CircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2CircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA.GetType() === b2ShapeType.e_circleShape);\r\n        // DEBUG: b2Assert(shapeB.GetType() === b2ShapeType.e_circleShape);\r\n        b2CollideCircles(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaXJjbGVDb250YWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vQm94MkQvRHluYW1pY3MvQ29udGFjdHMvYjJDaXJjbGVDb250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBS0YsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFJbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd4QyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBQzVDO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSxlQUFlLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFrQixFQUFFLFNBQWM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFtQixFQUFFLE1BQWMsRUFBRSxRQUFtQixFQUFFLE1BQWM7UUFDbkYsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sUUFBUSxDQUFDLFFBQW9CLEVBQUUsR0FBZ0IsRUFBRSxHQUFnQjtRQUN0RSxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsbUVBQW1FO1FBQ25FLG1FQUFtRTtRQUNuRSxnQkFBZ0IsQ0FDZCxRQUFRLEVBQ1IsTUFBdUIsRUFBRSxHQUFHLEVBQzVCLE1BQXVCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGIn0=","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollidePolygons } from \"../../Collision/b2CollidePolygon\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2PolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2PolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA.GetType() === b2ShapeType.e_polygonShape);\r\n        // DEBUG: b2Assert(shapeB.GetType() === b2ShapeType.e_polygonShape);\r\n        b2CollidePolygons(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQb2x5Z29uQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyUG9seWdvbkNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFLRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUlyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxTQUFTO0lBQzdDO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxRQUFRLENBQUMsUUFBb0IsRUFBRSxHQUFnQixFQUFFLEdBQWdCO1FBQ3RFLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxvRUFBb0U7UUFDcEUsb0VBQW9FO1FBQ3BFLGlCQUFpQixDQUNmLFFBQVEsRUFDUixNQUF3QixFQUFFLEdBQUcsRUFDN0IsTUFBd0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollidePolygonAndCircle } from \"../../Collision/b2CollideCircle\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2PolygonAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2PolygonAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        // DEBUG: b2Assert(fixtureA.GetType() === b2ShapeType.e_polygonShape);\r\n        // DEBUG: b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA instanceof b2PolygonShape);\r\n        // DEBUG: b2Assert(shapeB instanceof b2CircleShape);\r\n        b2CollidePolygonAndCircle(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQb2x5Z29uQW5kQ2lyY2xlQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyUG9seWdvbkFuZENpcmNsZUNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFLRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUs1RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxTQUFTO0lBQ3REO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSx5QkFBeUIsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELHNFQUFzRTtRQUN0RSxxRUFBcUU7SUFDdkUsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFvQixFQUFFLEdBQWdCLEVBQUUsR0FBZ0I7UUFDdEUsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELHFEQUFxRDtRQUNyRCxvREFBb0Q7UUFDcEQseUJBQXlCLENBQ3ZCLFFBQVEsRUFDUixNQUF3QixFQUFFLEdBQUcsRUFDN0IsTUFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndCircle } from \"../../Collision/b2CollideEdge\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2EdgeAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2EdgeAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        // DEBUG: b2Assert(fixtureA.GetType() === b2ShapeType.e_edgeShape);\r\n        // DEBUG: b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA instanceof b2EdgeShape);\r\n        // DEBUG: b2Assert(shapeB instanceof b2CircleShape);\r\n        b2CollideEdgeAndCircle(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJFZGdlQW5kQ2lyY2xlQ29udGFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyRWRnZUFuZENpcmNsZUNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFLRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUt2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxTQUFTO0lBQ25EO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSxzQkFBc0IsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELG1FQUFtRTtRQUNuRSxxRUFBcUU7SUFDdkUsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFvQixFQUFFLEdBQWdCLEVBQUUsR0FBZ0I7UUFDdEUsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELGtEQUFrRDtRQUNsRCxvREFBb0Q7UUFDcEQsc0JBQXNCLENBQ3BCLFFBQVEsRUFDUixNQUFxQixFQUFFLEdBQUcsRUFDMUIsTUFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0YifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndPolygon } from \"../../Collision/b2CollideEdge\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2EdgeAndPolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2EdgeAndPolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        // DEBUG: b2Assert(fixtureA.GetType() === b2ShapeType.e_edgeShape);\r\n        // DEBUG: b2Assert(fixtureB.GetType() === b2ShapeType.e_polygonShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA instanceof b2EdgeShape);\r\n        // DEBUG: b2Assert(shapeB instanceof b2PolygonShape);\r\n        b2CollideEdgeAndPolygon(manifold, shapeA, xfA, shapeB, xfB);\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJFZGdlQW5kUG9seWdvbkNvbnRhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9Cb3gyRC9EeW5hbWljcy9Db250YWN0cy9iMkVkZ2VBbmRQb2x5Z29uQ29udGFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUtGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS3hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEMsTUFBTSxPQUFPLHVCQUF3QixTQUFRLFNBQVM7SUFDcEQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQWM7UUFDakMsT0FBTyxJQUFJLHVCQUF1QixFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBa0IsRUFBRSxTQUFjO0lBQ3hELENBQUM7SUFFTSxLQUFLLENBQUMsUUFBbUIsRUFBRSxNQUFjLEVBQUUsUUFBbUIsRUFBRSxNQUFjO1FBQ25GLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEQsbUVBQW1FO1FBQ25FLHNFQUFzRTtJQUN4RSxDQUFDO0lBRU0sUUFBUSxDQUFDLFFBQW9CLEVBQUUsR0FBZ0IsRUFBRSxHQUFnQjtRQUN0RSxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsa0RBQWtEO1FBQ2xELHFEQUFxRDtRQUNyRCx1QkFBdUIsQ0FDckIsUUFBUSxFQUNSLE1BQXFCLEVBQUUsR0FBRyxFQUMxQixNQUF3QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDRiJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndCircle } from \"../../Collision/b2CollideEdge\";\r\nimport { b2EdgeShape } from \"../../Collision/Shapes/b2EdgeShape\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2ChainAndCircleContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2ChainAndCircleContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        // DEBUG: b2Assert(fixtureA.GetType() === b2ShapeType.e_chainShape);\r\n        // DEBUG: b2Assert(fixtureB.GetType() === b2ShapeType.e_circleShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA instanceof b2ChainShape);\r\n        // DEBUG: b2Assert(shapeB instanceof b2CircleShape);\r\n        const chain = shapeA;\r\n        const edge = b2ChainAndCircleContact.Evaluate_s_edge;\r\n        chain.GetChildEdge(edge, this.m_indexA);\r\n        b2CollideEdgeAndCircle(manifold, edge, xfA, shapeB, xfB);\r\n    }\r\n}\r\nb2ChainAndCircleContact.Evaluate_s_edge = new b2EdgeShape();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaGFpbkFuZENpcmNsZUNvbnRhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9Cb3gyRC9EeW5hbWljcy9Db250YWN0cy9iMkNoYWluQW5kQ2lyY2xlQ29udGFjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUtGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBS3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxTQUFTO0lBQ3BEO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFjO1FBQ2pDLE9BQU8sSUFBSSx1QkFBdUIsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWtCLEVBQUUsU0FBYztJQUN4RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQW1CLEVBQUUsTUFBYyxFQUFFLFFBQW1CLEVBQUUsTUFBYztRQUNuRixLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELG9FQUFvRTtRQUNwRSxxRUFBcUU7SUFDdkUsQ0FBQztJQUdNLFFBQVEsQ0FBQyxRQUFvQixFQUFFLEdBQWdCLEVBQUUsR0FBZ0I7UUFDdEUsTUFBTSxNQUFNLEdBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELG1EQUFtRDtRQUNuRCxvREFBb0Q7UUFDcEQsTUFBTSxLQUFLLEdBQWlCLE1BQXNCLENBQUM7UUFDbkQsTUFBTSxJQUFJLEdBQWdCLHVCQUF1QixDQUFDLGVBQWUsQ0FBQztRQUNsRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEMsc0JBQXNCLENBQ3BCLFFBQVEsRUFDUixJQUFJLEVBQUUsR0FBRyxFQUNULE1BQXVCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7QUFiYyx1Q0FBZSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMifQ==","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2CollideEdgeAndPolygon } from \"../../Collision/b2CollideEdge\";\r\nimport { b2EdgeShape } from \"../../Collision/Shapes/b2EdgeShape\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nexport class b2ChainAndPolygonContact extends b2Contact {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static Create(allocator) {\r\n        return new b2ChainAndPolygonContact();\r\n    }\r\n    static Destroy(contact, allocator) {\r\n    }\r\n    Reset(fixtureA, indexA, fixtureB, indexB) {\r\n        super.Reset(fixtureA, indexA, fixtureB, indexB);\r\n        // DEBUG: b2Assert(fixtureA.GetType() === b2ShapeType.e_chainShape);\r\n        // DEBUG: b2Assert(fixtureB.GetType() === b2ShapeType.e_polygonShape);\r\n    }\r\n    Evaluate(manifold, xfA, xfB) {\r\n        const shapeA = this.m_fixtureA.GetShape();\r\n        const shapeB = this.m_fixtureB.GetShape();\r\n        // DEBUG: b2Assert(shapeA instanceof b2ChainShape);\r\n        // DEBUG: b2Assert(shapeB instanceof b2PolygonShape);\r\n        const chain = shapeA;\r\n        const edge = b2ChainAndPolygonContact.Evaluate_s_edge;\r\n        chain.GetChildEdge(edge, this.m_indexA);\r\n        b2CollideEdgeAndPolygon(manifold, edge, xfA, shapeB, xfB);\r\n    }\r\n}\r\nb2ChainAndPolygonContact.Evaluate_s_edge = new b2EdgeShape();\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDaGFpbkFuZFBvbHlnb25Db250YWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vQm94MkQvRHluYW1pY3MvQ29udGFjdHMvYjJDaGFpbkFuZFBvbHlnb25Db250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0VBZ0JFO0FBS0YsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFJeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEMsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFNBQVM7SUFDckQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQWM7UUFDakMsT0FBTyxJQUFJLHdCQUF3QixFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBa0IsRUFBRSxTQUFjO0lBQ3hELENBQUM7SUFFTSxLQUFLLENBQUMsUUFBbUIsRUFBRSxNQUFjLEVBQUUsUUFBbUIsRUFBRSxNQUFjO1FBQ25GLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEQsb0VBQW9FO1FBQ3BFLHNFQUFzRTtJQUN4RSxDQUFDO0lBR00sUUFBUSxDQUFDLFFBQW9CLEVBQUUsR0FBZ0IsRUFBRSxHQUFnQjtRQUN0RSxNQUFNLE1BQU0sR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkQsbURBQW1EO1FBQ25ELHFEQUFxRDtRQUNyRCxNQUFNLEtBQUssR0FBaUIsTUFBc0IsQ0FBQztRQUNuRCxNQUFNLElBQUksR0FBZ0Isd0JBQXdCLENBQUMsZUFBZSxDQUFDO1FBQ25FLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4Qyx1QkFBdUIsQ0FDckIsUUFBUSxFQUNSLElBQUksRUFBRSxHQUFHLEVBQ1QsTUFBd0IsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOztBQWJjLHdDQUFlLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyJ9","// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2MakeArray } from \"../../Common/b2Settings\";\r\nimport { b2ShapeType } from \"../../Collision/Shapes/b2Shape\";\r\nimport { b2CircleContact } from \"./b2CircleContact\";\r\nimport { b2PolygonContact } from \"./b2PolygonContact\";\r\nimport { b2PolygonAndCircleContact } from \"./b2PolygonAndCircleContact\";\r\nimport { b2EdgeAndCircleContact } from \"./b2EdgeAndCircleContact\";\r\nimport { b2EdgeAndPolygonContact } from \"./b2EdgeAndPolygonContact\";\r\nimport { b2ChainAndCircleContact } from \"./b2ChainAndCircleContact\";\r\nimport { b2ChainAndPolygonContact } from \"./b2ChainAndPolygonContact\";\r\nexport class b2ContactRegister {\r\n    constructor() {\r\n        // public pool: b2Contact[];\r\n        this.createFcn = null;\r\n        this.destroyFcn = null;\r\n        this.primary = false;\r\n    }\r\n}\r\nexport class b2ContactFactory {\r\n    constructor(allocator) {\r\n        this.m_allocator = null;\r\n        this.m_allocator = allocator;\r\n        this.InitializeRegisters();\r\n    }\r\n    AddType(createFcn, destroyFcn, type1, type2) {\r\n        const pool = b2MakeArray(256, (i) => createFcn(this.m_allocator)); // TODO: b2Settings\r\n        function poolCreateFcn(allocator) {\r\n            // if (pool.length > 0) {\r\n            //   return pool.pop();\r\n            // }\r\n            // return createFcn(allocator);\r\n            return pool.pop() || createFcn(allocator);\r\n        }\r\n        function poolDestroyFcn(contact, allocator) {\r\n            pool.push(contact);\r\n        }\r\n        // this.m_registers[type1][type2].pool = pool;\r\n        this.m_registers[type1][type2].createFcn = poolCreateFcn;\r\n        this.m_registers[type1][type2].destroyFcn = poolDestroyFcn;\r\n        this.m_registers[type1][type2].primary = true;\r\n        if (type1 !== type2) {\r\n            // this.m_registers[type2][type1].pool = pool;\r\n            this.m_registers[type2][type1].createFcn = poolCreateFcn;\r\n            this.m_registers[type2][type1].destroyFcn = poolDestroyFcn;\r\n            this.m_registers[type2][type1].primary = false;\r\n        }\r\n        /*\r\n        this.m_registers[type1][type2].createFcn = createFcn;\r\n        this.m_registers[type1][type2].destroyFcn = destroyFcn;\r\n        this.m_registers[type1][type2].primary = true;\r\n    \r\n        if (type1 !== type2) {\r\n          this.m_registers[type2][type1].createFcn = createFcn;\r\n          this.m_registers[type2][type1].destroyFcn = destroyFcn;\r\n          this.m_registers[type2][type1].primary = false;\r\n        }\r\n        */\r\n    }\r\n    InitializeRegisters() {\r\n        this.m_registers = [ /*b2ShapeType.e_shapeTypeCount*/];\r\n        for (let i = 0; i < b2ShapeType.e_shapeTypeCount; i++) {\r\n            this.m_registers[i] = [ /*b2ShapeType.e_shapeTypeCount*/];\r\n            for (let j = 0; j < b2ShapeType.e_shapeTypeCount; j++) {\r\n                this.m_registers[i][j] = new b2ContactRegister();\r\n            }\r\n        }\r\n        this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2ShapeType.e_circleShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonAndCircleContact.Create, b2PolygonAndCircleContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_polygonShape);\r\n        this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2ShapeType.e_edgeShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2EdgeAndPolygonContact.Create, b2EdgeAndPolygonContact.Destroy, b2ShapeType.e_edgeShape, b2ShapeType.e_polygonShape);\r\n        this.AddType(b2ChainAndCircleContact.Create, b2ChainAndCircleContact.Destroy, b2ShapeType.e_chainShape, b2ShapeType.e_circleShape);\r\n        this.AddType(b2ChainAndPolygonContact.Create, b2ChainAndPolygonContact.Destroy, b2ShapeType.e_chainShape, b2ShapeType.e_polygonShape);\r\n    }\r\n    Create(fixtureA, indexA, fixtureB, indexB) {\r\n        const type1 = fixtureA.GetType();\r\n        const type2 = fixtureB.GetType();\r\n        // DEBUG: b2Assert(0 <= type1 && type1 < b2ShapeType.e_shapeTypeCount);\r\n        // DEBUG: b2Assert(0 <= type2 && type2 < b2ShapeType.e_shapeTypeCount);\r\n        const reg = this.m_registers[type1][type2];\r\n        if (reg.createFcn) {\r\n            const c = reg.createFcn(this.m_allocator);\r\n            if (reg.primary) {\r\n                c.Reset(fixtureA, indexA, fixtureB, indexB);\r\n            }\r\n            else {\r\n                c.Reset(fixtureB, indexB, fixtureA, indexA);\r\n            }\r\n            return c;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    Destroy(contact) {\r\n        const fixtureA = contact.m_fixtureA;\r\n        const fixtureB = contact.m_fixtureB;\r\n        if (contact.m_manifold.pointCount > 0 &&\r\n            !fixtureA.IsSensor() &&\r\n            !fixtureB.IsSensor()) {\r\n            fixtureA.GetBody().SetAwake(true);\r\n            fixtureB.GetBody().SetAwake(true);\r\n        }\r\n        const typeA = fixtureA.GetType();\r\n        const typeB = fixtureB.GetType();\r\n        // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        const reg = this.m_registers[typeA][typeB];\r\n        if (reg.destroyFcn) {\r\n            reg.destroyFcn(contact, this.m_allocator);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb250YWN0RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JveDJEL0R5bmFtaWNzL0NvbnRhY3RzL2IyQ29udGFjdEZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR3RFLE1BQU0sT0FBTyxpQkFBaUI7SUFBOUI7UUFDRSw0QkFBNEI7UUFDckIsY0FBUyxHQUEyQyxJQUFJLENBQUM7UUFDekQsZUFBVSxHQUEwRCxJQUFJLENBQUM7UUFDekUsWUFBTyxHQUFZLEtBQUssQ0FBQztJQUNsQyxDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBSTNCLFlBQVksU0FBYztRQUhuQixnQkFBVyxHQUFRLElBQUksQ0FBQztRQUk3QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU8sT0FBTyxDQUFDLFNBQXdDLEVBQUUsVUFBd0QsRUFBRSxLQUFrQixFQUFFLEtBQWtCO1FBQ3hK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","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2_maxManifoldPoints, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2BodyType } from \"./b2Body\";\r\n// #endif\r\n/// Joints and fixtures are destroyed when their associated\r\n/// body is destroyed. Implement this listener so that you\r\n/// may nullify references to these joints and shapes.\r\nexport class b2DestructionListener {\r\n    /// Called when any joint is about to be destroyed due\r\n    /// to the destruction of one of its attached bodies.\r\n    SayGoodbyeJoint(joint) { }\r\n    /// Called when any fixture is about to be destroyed due\r\n    /// to the destruction of its parent body.\r\n    SayGoodbyeFixture(fixture) { }\r\n    // #if B2_ENABLE_PARTICLE\r\n    /// Called when any particle group is about to be destroyed.\r\n    SayGoodbyeParticleGroup(group) { }\r\n    /// Called when a particle is about to be destroyed.\r\n    /// The index can be used in conjunction with\r\n    /// b2ParticleSystem::GetUserDataBuffer() or\r\n    /// b2ParticleSystem::GetParticleHandleFromIndex() to determine which\r\n    /// particle has been destroyed.\r\n    SayGoodbyeParticle(system, index) { }\r\n}\r\n/// Implement this class to provide collision filtering. In other words, you can implement\r\n/// this class if you want finer control over contact creation.\r\nexport class b2ContactFilter {\r\n    /// Return true if contact calculations should be performed between these two shapes.\r\n    /// @warning for performance reasons this is only called when the AABBs begin to overlap.\r\n    ShouldCollide(fixtureA, fixtureB) {\r\n        const bodyA = fixtureA.GetBody();\r\n        const bodyB = fixtureB.GetBody();\r\n        // At least one body should be dynamic or kinematic.\r\n        if (bodyB.GetType() === b2BodyType.b2_staticBody && bodyA.GetType() === b2BodyType.b2_staticBody) {\r\n            return false;\r\n        }\r\n        // Does a joint prevent collision?\r\n        if (!bodyB.ShouldCollideConnected(bodyA)) {\r\n            return false;\r\n        }\r\n        const filter1 = fixtureA.GetFilterData();\r\n        const filter2 = fixtureB.GetFilterData();\r\n        if (filter1.groupIndex === filter2.groupIndex && filter1.groupIndex !== 0) {\r\n            return (filter1.groupIndex > 0);\r\n        }\r\n        const collide = (((filter1.maskBits & filter2.categoryBits) !== 0) && ((filter1.categoryBits & filter2.maskBits) !== 0));\r\n        return collide;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ShouldCollideFixtureParticle(fixture, system, index) {\r\n        return true;\r\n    }\r\n    ShouldCollideParticleParticle(system, indexA, indexB) {\r\n        return true;\r\n    }\r\n}\r\n// #endif\r\nb2ContactFilter.b2_defaultFilter = new b2ContactFilter();\r\n/// Contact impulses for reporting. Impulses are used instead of forces because\r\n/// sub-step forces may approach infinity for rigid body collisions. These\r\n/// match up one-to-one with the contact points in b2Manifold.\r\nexport class b2ContactImpulse {\r\n    constructor() {\r\n        this.normalImpulses = b2MakeNumberArray(b2_maxManifoldPoints);\r\n        this.tangentImpulses = b2MakeNumberArray(b2_maxManifoldPoints);\r\n        this.count = 0;\r\n    }\r\n}\r\n/// Implement this class to get contact information. You can use these results for\r\n/// things like sounds and game logic. You can also get contact results by\r\n/// traversing the contact lists after the time step. However, you might miss\r\n/// some contacts because continuous physics leads to sub-stepping.\r\n/// Additionally you may receive multiple callbacks for the same contact in a\r\n/// single time step.\r\n/// You should strive to make your callbacks efficient because there may be\r\n/// many callbacks per time step.\r\n/// @warning You cannot create/destroy Box2D entities inside these callbacks.\r\nexport class b2ContactListener {\r\n    /// Called when two fixtures begin to touch.\r\n    BeginContact(contact) { }\r\n    /// Called when two fixtures cease to touch.\r\n    EndContact(contact) { }\r\n    // #if B2_ENABLE_PARTICLE\r\n    BeginContactFixtureParticle(system, contact) { }\r\n    EndContactFixtureParticle(system, contact) { }\r\n    BeginContactParticleParticle(system, contact) { }\r\n    EndContactParticleParticle(system, contact) { }\r\n    // #endif\r\n    /// This is called after a contact is updated. This allows you to inspect a\r\n    /// contact before it goes to the solver. If you are careful, you can modify the\r\n    /// contact manifold (e.g. disable contact).\r\n    /// A copy of the old manifold is provided so that you can detect changes.\r\n    /// Note: this is called only for awake bodies.\r\n    /// Note: this is called even when the number of contact points is zero.\r\n    /// Note: this is not called for sensors.\r\n    /// Note: if you set the number of contact points to zero, you will not\r\n    /// get an EndContact callback. However, you may get a BeginContact callback\r\n    /// the next step.\r\n    PreSolve(contact, oldManifold) { }\r\n    /// This lets you inspect a contact after the solver is finished. This is useful\r\n    /// for inspecting impulses.\r\n    /// Note: the contact manifold does not include time of impact impulses, which can be\r\n    /// arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly\r\n    /// in a separate data structure.\r\n    /// Note: this is only called for contacts that are touching, solid, and awake.\r\n    PostSolve(contact, impulse) { }\r\n}\r\nb2ContactListener.b2_defaultListener = new b2ContactListener();\r\n/// Callback class for AABB queries.\r\n/// See b2World::Query\r\nexport class b2QueryCallback {\r\n    /// Called for each fixture found in the query AABB.\r\n    /// @return false to terminate the query.\r\n    ReportFixture(fixture) {\r\n        return true;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ReportParticle(system, index) {\r\n        return false;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        return true;\r\n    }\r\n}\r\n/// Callback class for ray casts.\r\n/// See b2World::RayCast\r\nexport class b2RayCastCallback {\r\n    /// Called for each fixture found in the query. You control how the ray cast\r\n    /// proceeds by returning a float:\r\n    /// return -1: ignore this fixture and continue\r\n    /// return 0: terminate the ray cast\r\n    /// return fraction: clip the ray to this point\r\n    /// return 1: don't clip the ray and continue\r\n    /// @param fixture the fixture hit by the ray\r\n    /// @param point the point of initial intersection\r\n    /// @param normal the normal vector at the point of intersection\r\n    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for\r\n    /// closest hit, 1 to continue\r\n    ReportFixture(fixture, point, normal, fraction) {\r\n        return fraction;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    ReportParticle(system, index, point, normal, fraction) {\r\n        return 0;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJXb3JsZENhbGxiYWNrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0R5bmFtaWNzL2IyV29ybGRDYWxsYmFja3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUkvRSxPQUFPLEVBQVUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBTTlDLFNBQVM7QUFFVCwyREFBMkQ7QUFDM0QsMERBQTBEO0FBQzFELHNEQUFzRDtBQUN0RCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLHNEQUFzRDtJQUN0RCxxREFBcUQ7SUFDOUMsZUFBZSxDQUFDLEtBQWMsSUFBUyxDQUFDO0lBRS9DLHdEQUF3RDtJQUN4RCwwQ0FBMEM7SUFDbkMsaUJBQWlCLENBQUMsT0FBa0IsSUFBUyxDQUFDO0lBRXJELHlCQUF5QjtJQUN6Qiw0REFBNEQ7SUFDckQsdUJBQXVCLENBQUMsS0FBc0IsSUFBUyxDQUFDO0lBRS9ELG9EQUFvRDtJQUNwRCw2Q0FBNkM7SUFDN0MsNENBQTRDO0lBQzVDLHFFQUFxRTtJQUNyRSxnQ0FBZ0M7SUFDekIsa0JBQWtCLENBQUMsTUFBd0IsRUFBRSxLQUFhLElBQVMsQ0FBQztDQUU1RTtBQUVELDBGQUEwRjtBQUMxRiwrREFBK0Q7QUFDL0QsTUFBTSxPQUFPLGVBQWU7SUFDMUIscUZBQXFGO0lBQ3JGLHlGQUF5RjtJQUNsRixhQUFhLENBQUMsUUFBbUIsRUFBRSxRQUFtQjtRQUMzRCxNQUFNLEtBQUssR0FBVyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQVcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXpDLG9EQUFvRDtRQUNwRCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxVQUFVLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxVQUFVLENBQUMsYUFBYSxFQUFFO1lBQ2hHLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxPQUFPLEdBQWEsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ25ELE1BQU0sT0FBTyxHQUFhLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVuRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtZQUN6RSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNqQztRQUVELE1BQU0sT0FBTyxHQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xJLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCx5QkFBeUI7SUFDbEIsNEJBQTRCLENBQUMsT0FBa0IsRUFBRSxNQUF3QixFQUFFLEtBQWE7UUFDN0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sNkJBQTZCLENBQUMsTUFBd0IsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUMzRixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBQ0QsU0FBUztBQUVjLGdDQUFnQixHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0FBR25GLCtFQUErRTtBQUMvRSwwRUFBMEU7QUFDMUUsOERBQThEO0FBQzlELE1BQU0sT0FBTyxnQkFBZ0I7SUFBN0I7UUFDUyxtQkFBYyxHQUFhLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbkUsb0JBQWUsR0FBYSxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BFLFVBQUssR0FBVyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUFBO0FBRUQsa0ZBQWtGO0FBQ2xGLDBFQUEwRTtBQUMxRSw2RUFBNkU7QUFDN0UsbUVBQW1FO0FBQ25FLDZFQUE2RTtBQUM3RSxxQkFBcUI7QUFDckIsMkVBQTJFO0FBQzNFLGlDQUFpQztBQUNqQyw2RUFBNkU7QUFDN0UsTUFBTSxPQUFPLGlCQUFpQjtJQUM1Qiw0Q0FBNEM7SUFDckMsWUFBWSxDQUFDLE9BQWtCLElBQVMsQ0FBQztJQUVoRCw0Q0FBNEM7SUFDckMsVUFBVSxDQUFDLE9BQWtCLElBQVMsQ0FBQztJQUU5Qyx5QkFBeUI7SUFDbEIsMkJBQTJCLENBQUMsTUFBd0IsRUFBRSxPQUE4QixJQUFTLENBQUM7SUFDOUYseUJBQXlCLENBQUMsTUFBd0IsRUFBRSxPQUE4QixJQUFTLENBQUM7SUFDNUYsNEJBQTRCLENBQUMsTUFBd0IsRUFBRSxPQUEwQixJQUFTLENBQUM7SUFDM0YsMEJBQTBCLENBQUMsTUFBd0IsRUFBRSxPQUEwQixJQUFTLENBQUM7SUFDaEcsU0FBUztJQUVULDJFQUEyRTtJQUMzRSxnRkFBZ0Y7SUFDaEYsNENBQTRDO0lBQzVDLDBFQUEwRTtJQUMxRSwrQ0FBK0M7SUFDL0Msd0VBQXdFO0lBQ3hFLHlDQUF5QztJQUN6Qyx1RUFBdUU7SUFDdkUsNEVBQTRFO0lBQzVFLGtCQUFrQjtJQUNYLFFBQVEsQ0FBQyxPQUFrQixFQUFFLFdBQXVCLElBQVMsQ0FBQztJQUVyRSxnRkFBZ0Y7SUFDaEYsNEJBQTRCO0lBQzVCLHFGQUFxRjtJQUNyRix3RkFBd0Y7SUFDeEYsaUNBQWlDO0lBQ2pDLCtFQUErRTtJQUN4RSxTQUFTLENBQUMsT0FBa0IsRUFBRSxPQUF5QixJQUFTLENBQUM7O0FBRWpELG9DQUFrQixHQUFzQixJQUFJLGlCQUFpQixFQUFFLENBQUM7QUFHekYsb0NBQW9DO0FBQ3BDLHNCQUFzQjtBQUN0QixNQUFNLE9BQU8sZUFBZTtJQUMxQixvREFBb0Q7SUFDcEQseUNBQXlDO0lBQ2xDLGFBQWEsQ0FBQyxPQUFrQjtRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx5QkFBeUI7SUFDbEIsY0FBYyxDQUFDLE1BQXdCLEVBQUUsS0FBYTtRQUMzRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDTSx5QkFBeUIsQ0FBQyxNQUF3QjtRQUN2RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FFRjtBQUlELGlDQUFpQztBQUNqQyx3QkFBd0I7QUFDeEIsTUFBTSxPQUFPLGlCQUFpQjtJQUM1Qiw0RUFBNEU7SUFDNUUsa0NBQWtDO0lBQ2xDLCtDQUErQztJQUMvQyxvQ0FBb0M7SUFDcEMsK0NBQStDO0lBQy9DLDZDQUE2QztJQUM3Qyw2Q0FBNkM7SUFDN0Msa0RBQWtEO0lBQ2xELGdFQUFnRTtJQUNoRSxzRUFBc0U7SUFDdEUsOEJBQThCO0lBQ3ZCLGFBQWEsQ0FBQyxPQUFrQixFQUFFLEtBQWEsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7UUFDdEYsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELHlCQUF5QjtJQUNsQixjQUFjLENBQUMsTUFBd0IsRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxRQUFnQjtRQUM1RyxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUM7SUFDTSx5QkFBeUIsQ0FBQyxNQUF3QjtRQUN2RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FFRiJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2BroadPhase } from \"../Collision/b2BroadPhase\";\r\nimport { b2TestOverlapAABB } from \"../Collision/b2Collision\";\r\nimport { b2ContactFactory } from \"./Contacts/b2ContactFactory\";\r\nimport { b2BodyType } from \"./b2Body\";\r\nimport { b2ContactFilter, b2ContactListener } from \"./b2WorldCallbacks\";\r\n// Delegate of b2World.\r\nexport class b2ContactManager {\r\n    constructor() {\r\n        this.m_broadPhase = new b2BroadPhase();\r\n        this.m_contactList = null;\r\n        this.m_contactCount = 0;\r\n        this.m_contactFilter = b2ContactFilter.b2_defaultFilter;\r\n        this.m_contactListener = b2ContactListener.b2_defaultListener;\r\n        this.m_allocator = null;\r\n        this.m_contactFactory = new b2ContactFactory(this.m_allocator);\r\n    }\r\n    // Broad-phase callback.\r\n    AddPair(proxyA, proxyB) {\r\n        // DEBUG: b2Assert(proxyA instanceof b2FixtureProxy);\r\n        // DEBUG: b2Assert(proxyB instanceof b2FixtureProxy);\r\n        let fixtureA = proxyA.fixture;\r\n        let fixtureB = proxyB.fixture;\r\n        let indexA = proxyA.childIndex;\r\n        let indexB = proxyB.childIndex;\r\n        let bodyA = fixtureA.GetBody();\r\n        let bodyB = fixtureB.GetBody();\r\n        // Are the fixtures on the same body?\r\n        if (bodyA === bodyB) {\r\n            return;\r\n        }\r\n        // TODO_ERIN use a hash table to remove a potential bottleneck when both\r\n        // bodies have a lot of contacts.\r\n        // Does a contact already exist?\r\n        let edge = bodyB.GetContactList();\r\n        while (edge) {\r\n            if (edge.other === bodyA) {\r\n                const fA = edge.contact.GetFixtureA();\r\n                const fB = edge.contact.GetFixtureB();\r\n                const iA = edge.contact.GetChildIndexA();\r\n                const iB = edge.contact.GetChildIndexB();\r\n                if (fA === fixtureA && fB === fixtureB && iA === indexA && iB === indexB) {\r\n                    // A contact already exists.\r\n                    return;\r\n                }\r\n                if (fA === fixtureB && fB === fixtureA && iA === indexB && iB === indexA) {\r\n                    // A contact already exists.\r\n                    return;\r\n                }\r\n            }\r\n            edge = edge.next;\r\n        }\r\n        // Check user filtering.\r\n        if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\r\n            return;\r\n        }\r\n        // Call the factory.\r\n        const c = this.m_contactFactory.Create(fixtureA, indexA, fixtureB, indexB);\r\n        if (c === null) {\r\n            return;\r\n        }\r\n        // Contact creation may swap fixtures.\r\n        fixtureA = c.GetFixtureA();\r\n        fixtureB = c.GetFixtureB();\r\n        indexA = c.GetChildIndexA();\r\n        indexB = c.GetChildIndexB();\r\n        bodyA = fixtureA.m_body;\r\n        bodyB = fixtureB.m_body;\r\n        // Insert into the world.\r\n        c.m_prev = null;\r\n        c.m_next = this.m_contactList;\r\n        if (this.m_contactList !== null) {\r\n            this.m_contactList.m_prev = c;\r\n        }\r\n        this.m_contactList = c;\r\n        // Connect to island graph.\r\n        // Connect to body A\r\n        c.m_nodeA.contact = c;\r\n        c.m_nodeA.other = bodyB;\r\n        c.m_nodeA.prev = null;\r\n        c.m_nodeA.next = bodyA.m_contactList;\r\n        if (bodyA.m_contactList !== null) {\r\n            bodyA.m_contactList.prev = c.m_nodeA;\r\n        }\r\n        bodyA.m_contactList = c.m_nodeA;\r\n        // Connect to body B\r\n        c.m_nodeB.contact = c;\r\n        c.m_nodeB.other = bodyA;\r\n        c.m_nodeB.prev = null;\r\n        c.m_nodeB.next = bodyB.m_contactList;\r\n        if (bodyB.m_contactList !== null) {\r\n            bodyB.m_contactList.prev = c.m_nodeB;\r\n        }\r\n        bodyB.m_contactList = c.m_nodeB;\r\n        // Wake up the bodies\r\n        if (!fixtureA.IsSensor() && !fixtureB.IsSensor()) {\r\n            bodyA.SetAwake(true);\r\n            bodyB.SetAwake(true);\r\n        }\r\n        ++this.m_contactCount;\r\n    }\r\n    FindNewContacts() {\r\n        this.m_broadPhase.UpdatePairs((proxyA, proxyB) => {\r\n            this.AddPair(proxyA, proxyB);\r\n        });\r\n    }\r\n    Destroy(c) {\r\n        const fixtureA = c.GetFixtureA();\r\n        const fixtureB = c.GetFixtureB();\r\n        const bodyA = fixtureA.GetBody();\r\n        const bodyB = fixtureB.GetBody();\r\n        if (this.m_contactListener && c.IsTouching()) {\r\n            this.m_contactListener.EndContact(c);\r\n        }\r\n        // Remove from the world.\r\n        if (c.m_prev) {\r\n            c.m_prev.m_next = c.m_next;\r\n        }\r\n        if (c.m_next) {\r\n            c.m_next.m_prev = c.m_prev;\r\n        }\r\n        if (c === this.m_contactList) {\r\n            this.m_contactList = c.m_next;\r\n        }\r\n        // Remove from body 1\r\n        if (c.m_nodeA.prev) {\r\n            c.m_nodeA.prev.next = c.m_nodeA.next;\r\n        }\r\n        if (c.m_nodeA.next) {\r\n            c.m_nodeA.next.prev = c.m_nodeA.prev;\r\n        }\r\n        if (c.m_nodeA === bodyA.m_contactList) {\r\n            bodyA.m_contactList = c.m_nodeA.next;\r\n        }\r\n        // Remove from body 2\r\n        if (c.m_nodeB.prev) {\r\n            c.m_nodeB.prev.next = c.m_nodeB.next;\r\n        }\r\n        if (c.m_nodeB.next) {\r\n            c.m_nodeB.next.prev = c.m_nodeB.prev;\r\n        }\r\n        if (c.m_nodeB === bodyB.m_contactList) {\r\n            bodyB.m_contactList = c.m_nodeB.next;\r\n        }\r\n        // Call the factory.\r\n        this.m_contactFactory.Destroy(c);\r\n        --this.m_contactCount;\r\n    }\r\n    // This is the top level collision call for the time step. Here\r\n    // all the narrow phase collision is processed for the world\r\n    // contact list.\r\n    Collide() {\r\n        // Update awake contacts.\r\n        let c = this.m_contactList;\r\n        while (c) {\r\n            const fixtureA = c.GetFixtureA();\r\n            const fixtureB = c.GetFixtureB();\r\n            const indexA = c.GetChildIndexA();\r\n            const indexB = c.GetChildIndexB();\r\n            const bodyA = fixtureA.GetBody();\r\n            const bodyB = fixtureB.GetBody();\r\n            // Is this contact flagged for filtering?\r\n            if (c.m_filterFlag) {\r\n                // Check user filtering.\r\n                if (this.m_contactFilter && !this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {\r\n                    const cNuke = c;\r\n                    c = cNuke.m_next;\r\n                    this.Destroy(cNuke);\r\n                    continue;\r\n                }\r\n                // Clear the filtering flag.\r\n                c.m_filterFlag = false;\r\n            }\r\n            const activeA = bodyA.IsAwake() && bodyA.m_type !== b2BodyType.b2_staticBody;\r\n            const activeB = bodyB.IsAwake() && bodyB.m_type !== b2BodyType.b2_staticBody;\r\n            // At least one body must be awake and it must be dynamic or kinematic.\r\n            if (!activeA && !activeB) {\r\n                c = c.m_next;\r\n                continue;\r\n            }\r\n            const proxyA = fixtureA.m_proxies[indexA].treeNode;\r\n            const proxyB = fixtureB.m_proxies[indexB].treeNode;\r\n            const overlap = b2TestOverlapAABB(proxyA.aabb, proxyB.aabb);\r\n            // Here we destroy contacts that cease to overlap in the broad-phase.\r\n            if (!overlap) {\r\n                const cNuke = c;\r\n                c = cNuke.m_next;\r\n                this.Destroy(cNuke);\r\n                continue;\r\n            }\r\n            // The contact persists.\r\n            c.Update(this.m_contactListener);\r\n            c = c.m_next;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb250YWN0TWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0R5bmFtaWNzL2IyQ29udGFjdE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRiwwREFBMEQ7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBVSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXhFLHVCQUF1QjtBQUN2QixNQUFNLE9BQU8sZ0JBQWdCO0lBVTNCO1FBVGdCLGlCQUFZLEdBQWlDLElBQUksWUFBWSxFQUFrQixDQUFDO1FBQ3pGLGtCQUFhLEdBQXFCLElBQUksQ0FBQztRQUN2QyxtQkFBYyxHQUFXLENBQUMsQ0FBQztRQUMzQixvQkFBZSxHQUFvQixlQUFlLENBQUMsZ0JBQWdCLENBQUM7UUFDcEUsc0JBQWlCLEdBQXNCLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDO1FBQzVFLGdCQUFXLEdBQVEsSUFBSSxDQUFDO1FBSzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsd0JBQXdCO0lBQ2pCLE9BQU8sQ0FBQyxNQUFzQixFQUFFLE1BQXNCO1FBQzNELHFEQUFxRDtRQUNyRCxxREFBcUQ7UUFFckQsSUFBSSxRQUFRLEdBQWMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN6QyxJQUFJLFFBQVEsR0FBYyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBRXpDLElBQUksTUFBTSxH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","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nimport { b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\n/// Profiling data. Times are in milliseconds.\r\nexport class b2Profile {\r\n    constructor() {\r\n        this.step = 0;\r\n        this.collide = 0;\r\n        this.solve = 0;\r\n        this.solveInit = 0;\r\n        this.solveVelocity = 0;\r\n        this.solvePosition = 0;\r\n        this.broadphase = 0;\r\n        this.solveTOI = 0;\r\n    }\r\n    Reset() {\r\n        this.step = 0;\r\n        this.collide = 0;\r\n        this.solve = 0;\r\n        this.solveInit = 0;\r\n        this.solveVelocity = 0;\r\n        this.solvePosition = 0;\r\n        this.broadphase = 0;\r\n        this.solveTOI = 0;\r\n        return this;\r\n    }\r\n}\r\n/// This is an internal structure.\r\nexport class b2TimeStep {\r\n    constructor() {\r\n        this.dt = 0; // time step\r\n        this.inv_dt = 0; // inverse time step (0 if dt == 0).\r\n        this.dtRatio = 0; // dt * inv_dt0\r\n        this.velocityIterations = 0;\r\n        this.positionIterations = 0;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.particleIterations = 0;\r\n        // #endif\r\n        this.warmStarting = false;\r\n    }\r\n    Copy(step) {\r\n        this.dt = step.dt;\r\n        this.inv_dt = step.inv_dt;\r\n        this.dtRatio = step.dtRatio;\r\n        this.positionIterations = step.positionIterations;\r\n        this.velocityIterations = step.velocityIterations;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.particleIterations = step.particleIterations;\r\n        // #endif\r\n        this.warmStarting = step.warmStarting;\r\n        return this;\r\n    }\r\n}\r\nexport class b2Position {\r\n    constructor() {\r\n        this.c = new b2Vec2();\r\n        this.a = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Position());\r\n    }\r\n}\r\nexport class b2Velocity {\r\n    constructor() {\r\n        this.v = new b2Vec2();\r\n        this.w = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2Velocity());\r\n    }\r\n}\r\nexport class b2SolverData {\r\n    constructor() {\r\n        this.step = new b2TimeStep();\r\n    }\r\n}\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJUaW1lU3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0R5bmFtaWNzL2IyVGltZVN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7RUFnQkU7QUFFRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTFDLDhDQUE4QztBQUM5QyxNQUFNLE9BQU8sU0FBUztJQUF0QjtRQUNTLFNBQUksR0FBVyxDQUFDLENBQUM7UUFDakIsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUNwQixVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBQ2xCLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFDdEIsa0JBQWEsR0FBVyxDQUFDLENBQUM7UUFDMUIsa0JBQWEsR0FBVyxDQUFDLENBQUM7UUFDMUIsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUN2QixhQUFRLEdBQVcsQ0FBQyxDQUFDO0lBYTlCLENBQUM7SUFYUSxLQUFLO1FBQ1YsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsa0NBQWtDO0FBQ2xDLE1BQU0sT0FBTyxVQUFVO0lBQXZCO1FBQ1MsT0FBRSxHQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVk7UUFDNUIsV0FBTSxHQUFXLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztRQUN4RCxZQUFPLEdBQVcsQ0FBQyxDQUFDLENBQUMsZUFBZTtRQUNwQyx1QkFBa0IsR0FBVyxDQUFDLENBQUM7UUFDL0IsdUJBQWtCLEdBQVcsQ0FBQyxDQUFDO1FBQ3RDLHlCQUF5QjtRQUNsQix1QkFBa0IsR0FBVyxDQUFDLENBQUM7UUFDdEMsU0FBUztRQUNGLGlCQUFZLEdBQVksS0FBSyxDQUFDO0lBY3ZDLENBQUM7SUFaUSxJQUFJLENBQUMsSUFBZ0I7UUFDMUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUNsRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xELHlCQUF5QjtRQUN6QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xELFNBQVM7UUFDVCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUF2QjtRQUNrQixNQUFDLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNsQyxNQUFDLEdBQVcsQ0FBQyxDQUFDO0lBS3ZCLENBQUM7SUFIUSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWM7UUFDcEMsT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBUyxFQUFjLEVBQUUsQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLFVBQVU7SUFBdkI7UUFDa0IsTUFBQyxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDbEMsTUFBQyxHQUFXLENBQUMsQ0FBQztJQUt2QixDQUFDO0lBSFEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFjO1FBQ3BDLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQVMsRUFBYyxFQUFFLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxZQUFZO0lBQXpCO1FBQ2tCLFNBQUksR0FBZSxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBR3RELENBQUM7Q0FBQSJ9","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_linearSlop, b2_maxManifoldPoints, b2_velocityThreshold, b2_maxLinearCorrection, b2_baumgarte, b2_toiBaumgarte, b2MakeArray } from \"../../Common/b2Settings\";\r\nimport { b2Min, b2Max, b2Clamp, b2Vec2, b2Mat22, b2Rot, b2Transform } from \"../../Common/b2Math\";\r\nimport { b2WorldManifold } from \"../../Collision/b2Collision\";\r\nimport { b2ManifoldType } from \"../../Collision/b2Collision\";\r\nimport { b2TimeStep } from \"../b2TimeStep\";\r\n// Solver debugging is normally disabled because the block solver sometimes has to deal with a poorly conditioned effective mass matrix.\r\n// #define B2_DEBUG_SOLVER 0\r\nexport let g_blockSolve = false;\r\nexport class b2VelocityConstraintPoint {\r\n    constructor() {\r\n        this.rA = new b2Vec2();\r\n        this.rB = new b2Vec2();\r\n        this.normalImpulse = 0;\r\n        this.tangentImpulse = 0;\r\n        this.normalMass = 0;\r\n        this.tangentMass = 0;\r\n        this.velocityBias = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2VelocityConstraintPoint());\r\n    }\r\n}\r\nexport class b2ContactVelocityConstraint {\r\n    constructor() {\r\n        this.points = b2VelocityConstraintPoint.MakeArray(b2_maxManifoldPoints);\r\n        this.normal = new b2Vec2();\r\n        this.tangent = new b2Vec2();\r\n        this.normalMass = new b2Mat22();\r\n        this.K = new b2Mat22();\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.invMassA = 0;\r\n        this.invMassB = 0;\r\n        this.invIA = 0;\r\n        this.invIB = 0;\r\n        this.friction = 0;\r\n        this.restitution = 0;\r\n        this.tangentSpeed = 0;\r\n        this.pointCount = 0;\r\n        this.contactIndex = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ContactVelocityConstraint());\r\n    }\r\n}\r\nexport class b2ContactPositionConstraint {\r\n    constructor() {\r\n        this.localPoints = b2Vec2.MakeArray(b2_maxManifoldPoints);\r\n        this.localNormal = new b2Vec2();\r\n        this.localPoint = new b2Vec2();\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.invMassA = 0;\r\n        this.invMassB = 0;\r\n        this.localCenterA = new b2Vec2();\r\n        this.localCenterB = new b2Vec2();\r\n        this.invIA = 0;\r\n        this.invIB = 0;\r\n        this.type = b2ManifoldType.e_unknown;\r\n        this.radiusA = 0;\r\n        this.radiusB = 0;\r\n        this.pointCount = 0;\r\n    }\r\n    static MakeArray(length) {\r\n        return b2MakeArray(length, (i) => new b2ContactPositionConstraint());\r\n    }\r\n}\r\nexport class b2ContactSolverDef {\r\n    constructor() {\r\n        this.step = new b2TimeStep();\r\n        this.count = 0;\r\n        this.allocator = null;\r\n    }\r\n}\r\nexport class b2PositionSolverManifold {\r\n    constructor() {\r\n        this.normal = new b2Vec2();\r\n        this.point = new b2Vec2();\r\n        this.separation = 0;\r\n    }\r\n    Initialize(pc, xfA, xfB, index) {\r\n        const pointA = b2PositionSolverManifold.Initialize_s_pointA;\r\n        const pointB = b2PositionSolverManifold.Initialize_s_pointB;\r\n        const planePoint = b2PositionSolverManifold.Initialize_s_planePoint;\r\n        const clipPoint = b2PositionSolverManifold.Initialize_s_clipPoint;\r\n        // DEBUG: b2Assert(pc.pointCount > 0);\r\n        switch (pc.type) {\r\n            case b2ManifoldType.e_circles: {\r\n                // b2Vec2 pointA = b2Mul(xfA, pc->localPoint);\r\n                b2Transform.MulXV(xfA, pc.localPoint, pointA);\r\n                // b2Vec2 pointB = b2Mul(xfB, pc->localPoints[0]);\r\n                b2Transform.MulXV(xfB, pc.localPoints[0], pointB);\r\n                // normal = pointB - pointA;\r\n                // normal.Normalize();\r\n                b2Vec2.SubVV(pointB, pointA, this.normal).SelfNormalize();\r\n                // point = 0.5f * (pointA + pointB);\r\n                b2Vec2.MidVV(pointA, pointB, this.point);\r\n                // separation = b2Dot(pointB - pointA, normal) - pc->radius;\r\n                this.separation = b2Vec2.DotVV(b2Vec2.SubVV(pointB, pointA, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                break;\r\n            }\r\n            case b2ManifoldType.e_faceA: {\r\n                // normal = b2Mul(xfA.q, pc->localNormal);\r\n                b2Rot.MulRV(xfA.q, pc.localNormal, this.normal);\r\n                // b2Vec2 planePoint = b2Mul(xfA, pc->localPoint);\r\n                b2Transform.MulXV(xfA, pc.localPoint, planePoint);\r\n                // b2Vec2 clipPoint = b2Mul(xfB, pc->localPoints[index]);\r\n                b2Transform.MulXV(xfB, pc.localPoints[index], clipPoint);\r\n                // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\r\n                this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                // point = clipPoint;\r\n                this.point.Copy(clipPoint);\r\n                break;\r\n            }\r\n            case b2ManifoldType.e_faceB: {\r\n                // normal = b2Mul(xfB.q, pc->localNormal);\r\n                b2Rot.MulRV(xfB.q, pc.localNormal, this.normal);\r\n                // b2Vec2 planePoint = b2Mul(xfB, pc->localPoint);\r\n                b2Transform.MulXV(xfB, pc.localPoint, planePoint);\r\n                // b2Vec2 clipPoint = b2Mul(xfA, pc->localPoints[index]);\r\n                b2Transform.MulXV(xfA, pc.localPoints[index], clipPoint);\r\n                // separation = b2Dot(clipPoint - planePoint, normal) - pc->radius;\r\n                this.separation = b2Vec2.DotVV(b2Vec2.SubVV(clipPoint, planePoint, b2Vec2.s_t0), this.normal) - pc.radiusA - pc.radiusB;\r\n                // point = clipPoint;\r\n                this.point.Copy(clipPoint);\r\n                // Ensure normal points from A to B\r\n                // normal = -normal;\r\n                this.normal.SelfNeg();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nb2PositionSolverManifold.Initialize_s_pointA = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_pointB = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_planePoint = new b2Vec2();\r\nb2PositionSolverManifold.Initialize_s_clipPoint = new b2Vec2();\r\nexport class b2ContactSolver {\r\n    constructor() {\r\n        this.m_step = new b2TimeStep();\r\n        this.m_allocator = null;\r\n        this.m_positionConstraints = b2ContactPositionConstraint.MakeArray(1024); // TODO: b2Settings\r\n        this.m_velocityConstraints = b2ContactVelocityConstraint.MakeArray(1024); // TODO: b2Settings\r\n        this.m_count = 0;\r\n    }\r\n    Initialize(def) {\r\n        this.m_step.Copy(def.step);\r\n        this.m_allocator = def.allocator;\r\n        this.m_count = def.count;\r\n        // TODO:\r\n        if (this.m_positionConstraints.length < this.m_count) {\r\n            const new_length = b2Max(this.m_positionConstraints.length * 2, this.m_count);\r\n            while (this.m_positionConstraints.length < new_length) {\r\n                this.m_positionConstraints[this.m_positionConstraints.length] = new b2ContactPositionConstraint();\r\n            }\r\n        }\r\n        // TODO:\r\n        if (this.m_velocityConstraints.length < this.m_count) {\r\n            const new_length = b2Max(this.m_velocityConstraints.length * 2, this.m_count);\r\n            while (this.m_velocityConstraints.length < new_length) {\r\n                this.m_velocityConstraints[this.m_velocityConstraints.length] = new b2ContactVelocityConstraint();\r\n            }\r\n        }\r\n        this.m_positions = def.positions;\r\n        this.m_velocities = def.velocities;\r\n        this.m_contacts = def.contacts;\r\n        // Initialize position independent portions of the constraints.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const contact = this.m_contacts[i];\r\n            const fixtureA = contact.m_fixtureA;\r\n            const fixtureB = contact.m_fixtureB;\r\n            const shapeA = fixtureA.GetShape();\r\n            const shapeB = fixtureB.GetShape();\r\n            const radiusA = shapeA.m_radius;\r\n            const radiusB = shapeB.m_radius;\r\n            const bodyA = fixtureA.GetBody();\r\n            const bodyB = fixtureB.GetBody();\r\n            const manifold = contact.GetManifold();\r\n            const pointCount = manifold.pointCount;\r\n            // DEBUG: b2Assert(pointCount > 0);\r\n            const vc = this.m_velocityConstraints[i];\r\n            vc.friction = contact.m_friction;\r\n            vc.restitution = contact.m_restitution;\r\n            vc.tangentSpeed = contact.m_tangentSpeed;\r\n            vc.indexA = bodyA.m_islandIndex;\r\n            vc.indexB = bodyB.m_islandIndex;\r\n            vc.invMassA = bodyA.m_invMass;\r\n            vc.invMassB = bodyB.m_invMass;\r\n            vc.invIA = bodyA.m_invI;\r\n            vc.invIB = bodyB.m_invI;\r\n            vc.contactIndex = i;\r\n            vc.pointCount = pointCount;\r\n            vc.K.SetZero();\r\n            vc.normalMass.SetZero();\r\n            const pc = this.m_positionConstraints[i];\r\n            pc.indexA = bodyA.m_islandIndex;\r\n            pc.indexB = bodyB.m_islandIndex;\r\n            pc.invMassA = bodyA.m_invMass;\r\n            pc.invMassB = bodyB.m_invMass;\r\n            pc.localCenterA.Copy(bodyA.m_sweep.localCenter);\r\n            pc.localCenterB.Copy(bodyB.m_sweep.localCenter);\r\n            pc.invIA = bodyA.m_invI;\r\n            pc.invIB = bodyB.m_invI;\r\n            pc.localNormal.Copy(manifold.localNormal);\r\n            pc.localPoint.Copy(manifold.localPoint);\r\n            pc.pointCount = pointCount;\r\n            pc.radiusA = radiusA;\r\n            pc.radiusB = radiusB;\r\n            pc.type = manifold.type;\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const cp = manifold.points[j];\r\n                const vcp = vc.points[j];\r\n                if (this.m_step.warmStarting) {\r\n                    vcp.normalImpulse = this.m_step.dtRatio * cp.normalImpulse;\r\n                    vcp.tangentImpulse = this.m_step.dtRatio * cp.tangentImpulse;\r\n                }\r\n                else {\r\n                    vcp.normalImpulse = 0;\r\n                    vcp.tangentImpulse = 0;\r\n                }\r\n                vcp.rA.SetZero();\r\n                vcp.rB.SetZero();\r\n                vcp.normalMass = 0;\r\n                vcp.tangentMass = 0;\r\n                vcp.velocityBias = 0;\r\n                pc.localPoints[j].Copy(cp.localPoint);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    InitializeVelocityConstraints() {\r\n        const xfA = b2ContactSolver.InitializeVelocityConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.InitializeVelocityConstraints_s_xfB;\r\n        const worldManifold = b2ContactSolver.InitializeVelocityConstraints_s_worldManifold;\r\n        const k_maxConditionNumber = 1000;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const pc = this.m_positionConstraints[i];\r\n            const radiusA = pc.radiusA;\r\n            const radiusB = pc.radiusB;\r\n            const manifold = this.m_contacts[vc.contactIndex].GetManifold();\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const mB = vc.invMassB;\r\n            const iA = vc.invIA;\r\n            const iB = vc.invIB;\r\n            const localCenterA = pc.localCenterA;\r\n            const localCenterB = pc.localCenterB;\r\n            const cA = this.m_positions[indexA].c;\r\n            const aA = this.m_positions[indexA].a;\r\n            const vA = this.m_velocities[indexA].v;\r\n            const wA = this.m_velocities[indexA].w;\r\n            const cB = this.m_positions[indexB].c;\r\n            const aB = this.m_positions[indexB].a;\r\n            const vB = this.m_velocities[indexB].v;\r\n            const wB = this.m_velocities[indexB].w;\r\n            // DEBUG: b2Assert(manifold.pointCount > 0);\r\n            xfA.q.SetAngle(aA);\r\n            xfB.q.SetAngle(aB);\r\n            b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n            b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n            worldManifold.Initialize(manifold, xfA, radiusA, xfB, radiusB);\r\n            vc.normal.Copy(worldManifold.normal);\r\n            b2Vec2.CrossVOne(vc.normal, vc.tangent); // compute from normal\r\n            const pointCount = vc.pointCount;\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // vcp->rA = worldManifold.points[j] - cA;\r\n                b2Vec2.SubVV(worldManifold.points[j], cA, vcp.rA);\r\n                // vcp->rB = worldManifold.points[j] - cB;\r\n                b2Vec2.SubVV(worldManifold.points[j], cB, vcp.rB);\r\n                const rnA = b2Vec2.CrossVV(vcp.rA, vc.normal);\r\n                const rnB = b2Vec2.CrossVV(vcp.rB, vc.normal);\r\n                const kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                vcp.normalMass = kNormal > 0 ? 1 / kNormal : 0;\r\n                // b2Vec2 tangent = b2Cross(vc->normal, 1.0f);\r\n                const tangent = vc.tangent; // precomputed from normal\r\n                const rtA = b2Vec2.CrossVV(vcp.rA, tangent);\r\n                const rtB = b2Vec2.CrossVV(vcp.rB, tangent);\r\n                const kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\r\n                vcp.tangentMass = kTangent > 0 ? 1 / kTangent : 0;\r\n                // Setup a velocity bias for restitution.\r\n                vcp.velocityBias = 0;\r\n                // float32 vRel = b2Dot(vc->normal, vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA));\r\n                const vRel = b2Vec2.DotVV(vc.normal, b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), b2Vec2.s_t0));\r\n                if (vRel < (-b2_velocityThreshold)) {\r\n                    vcp.velocityBias += (-vc.restitution * vRel);\r\n                }\r\n            }\r\n            // If we have two points, then prepare the block solver.\r\n            if (vc.pointCount === 2 && g_blockSolve) {\r\n                const vcp1 = vc.points[0];\r\n                const vcp2 = vc.points[1];\r\n                const rn1A = b2Vec2.CrossVV(vcp1.rA, vc.normal);\r\n                const rn1B = b2Vec2.CrossVV(vcp1.rB, vc.normal);\r\n                const rn2A = b2Vec2.CrossVV(vcp2.rA, vc.normal);\r\n                const rn2B = b2Vec2.CrossVV(vcp2.rB, vc.normal);\r\n                const k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\r\n                const k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\r\n                const k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\r\n                // Ensure a reasonable condition number.\r\n                // float32 k_maxConditionNumber = 1000.0f;\r\n                if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\r\n                    // K is safe to invert.\r\n                    vc.K.ex.Set(k11, k12);\r\n                    vc.K.ey.Set(k12, k22);\r\n                    vc.K.GetInverse(vc.normalMass);\r\n                }\r\n                else {\r\n                    // The constraints are redundant, just use one.\r\n                    // TODO_ERIN use deepest?\r\n                    vc.pointCount = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    WarmStart() {\r\n        const P = b2ContactSolver.WarmStart_s_P;\r\n        // Warm start.\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const iA = vc.invIA;\r\n            const mB = vc.invMassB;\r\n            const iB = vc.invIB;\r\n            const pointCount = vc.pointCount;\r\n            const vA = this.m_velocities[indexA].v;\r\n            let wA = this.m_velocities[indexA].w;\r\n            const vB = this.m_velocities[indexB].v;\r\n            let wB = this.m_velocities[indexB].w;\r\n            const normal = vc.normal;\r\n            // b2Vec2 tangent = b2Cross(normal, 1.0f);\r\n            const tangent = vc.tangent; // precomputed from normal\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // b2Vec2 P = vcp->normalImpulse * normal + vcp->tangentImpulse * tangent;\r\n                b2Vec2.AddVV(b2Vec2.MulSV(vcp.normalImpulse, normal, b2Vec2.s_t0), b2Vec2.MulSV(vcp.tangentImpulse, tangent, b2Vec2.s_t1), P);\r\n                // wA -= iA * b2Cross(vcp->rA, P);\r\n                wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                // vA -= mA * P;\r\n                vA.SelfMulSub(mA, P);\r\n                // wB += iB * b2Cross(vcp->rB, P);\r\n                wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n                // vB += mB * P;\r\n                vB.SelfMulAdd(mB, P);\r\n            }\r\n            // this.m_velocities[indexA].v = vA;\r\n            this.m_velocities[indexA].w = wA;\r\n            // this.m_velocities[indexB].v = vB;\r\n            this.m_velocities[indexB].w = wB;\r\n        }\r\n    }\r\n    SolveVelocityConstraints() {\r\n        const dv = b2ContactSolver.SolveVelocityConstraints_s_dv;\r\n        const dv1 = b2ContactSolver.SolveVelocityConstraints_s_dv1;\r\n        const dv2 = b2ContactSolver.SolveVelocityConstraints_s_dv2;\r\n        const P = b2ContactSolver.SolveVelocityConstraints_s_P;\r\n        const a = b2ContactSolver.SolveVelocityConstraints_s_a;\r\n        const b = b2ContactSolver.SolveVelocityConstraints_s_b;\r\n        const x = b2ContactSolver.SolveVelocityConstraints_s_x;\r\n        const d = b2ContactSolver.SolveVelocityConstraints_s_d;\r\n        const P1 = b2ContactSolver.SolveVelocityConstraints_s_P1;\r\n        const P2 = b2ContactSolver.SolveVelocityConstraints_s_P2;\r\n        const P1P2 = b2ContactSolver.SolveVelocityConstraints_s_P1P2;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const indexA = vc.indexA;\r\n            const indexB = vc.indexB;\r\n            const mA = vc.invMassA;\r\n            const iA = vc.invIA;\r\n            const mB = vc.invMassB;\r\n            const iB = vc.invIB;\r\n            const pointCount = vc.pointCount;\r\n            const vA = this.m_velocities[indexA].v;\r\n            let wA = this.m_velocities[indexA].w;\r\n            const vB = this.m_velocities[indexB].v;\r\n            let wB = this.m_velocities[indexB].w;\r\n            // b2Vec2 normal = vc->normal;\r\n            const normal = vc.normal;\r\n            // b2Vec2 tangent = b2Cross(normal, 1.0f);\r\n            const tangent = vc.tangent; // precomputed from normal\r\n            const friction = vc.friction;\r\n            // DEBUG: b2Assert(pointCount === 1 || pointCount === 2);\r\n            // Solve tangent constraints first because non-penetration is more important\r\n            // than friction.\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                const vcp = vc.points[j];\r\n                // Relative velocity at contact\r\n                // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);\r\n                // Compute tangent force\r\n                // float32 vt = b2Dot(dv, tangent) - vc->tangentSpeed;\r\n                const vt = b2Vec2.DotVV(dv, tangent) - vc.tangentSpeed;\r\n                let lambda = vcp.tangentMass * (-vt);\r\n                // b2Clamp the accumulated force\r\n                const maxFriction = friction * vcp.normalImpulse;\r\n                const newImpulse = b2Clamp(vcp.tangentImpulse + lambda, (-maxFriction), maxFriction);\r\n                lambda = newImpulse - vcp.tangentImpulse;\r\n                vcp.tangentImpulse = newImpulse;\r\n                // Apply contact impulse\r\n                // b2Vec2 P = lambda * tangent;\r\n                b2Vec2.MulSV(lambda, tangent, P);\r\n                // vA -= mA * P;\r\n                vA.SelfMulSub(mA, P);\r\n                // wA -= iA * b2Cross(vcp->rA, P);\r\n                wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                // vB += mB * P;\r\n                vB.SelfMulAdd(mB, P);\r\n                // wB += iB * b2Cross(vcp->rB, P);\r\n                wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n            }\r\n            // Solve normal constraints\r\n            if (vc.pointCount === 1 || g_blockSolve === false) {\r\n                for (let j = 0; j < pointCount; ++j) {\r\n                    const vcp = vc.points[j];\r\n                    // Relative velocity at contact\r\n                    // b2Vec2 dv = vB + b2Cross(wB, vcp->rB) - vA - b2Cross(wA, vcp->rA);\r\n                    b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, vcp.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, vcp.rA, b2Vec2.s_t1), dv);\r\n                    // Compute normal impulse\r\n                    // float32 vn = b2Dot(dv, normal);\r\n                    const vn = b2Vec2.DotVV(dv, normal);\r\n                    let lambda = (-vcp.normalMass * (vn - vcp.velocityBias));\r\n                    // b2Clamp the accumulated impulse\r\n                    // float32 newImpulse = b2Max(vcp->normalImpulse + lambda, 0.0f);\r\n                    const newImpulse = b2Max(vcp.normalImpulse + lambda, 0);\r\n                    lambda = newImpulse - vcp.normalImpulse;\r\n                    vcp.normalImpulse = newImpulse;\r\n                    // Apply contact impulse\r\n                    // b2Vec2 P = lambda * normal;\r\n                    b2Vec2.MulSV(lambda, normal, P);\r\n                    // vA -= mA * P;\r\n                    vA.SelfMulSub(mA, P);\r\n                    // wA -= iA * b2Cross(vcp->rA, P);\r\n                    wA -= iA * b2Vec2.CrossVV(vcp.rA, P);\r\n                    // vB += mB * P;\r\n                    vB.SelfMulAdd(mB, P);\r\n                    // wB += iB * b2Cross(vcp->rB, P);\r\n                    wB += iB * b2Vec2.CrossVV(vcp.rB, P);\r\n                }\r\n            }\r\n            else {\r\n                // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on Box2D_Lite).\r\n                // Build the mini LCP for this contact patch\r\n                //\r\n                // vn = A * x + b, vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2\r\n                //\r\n                // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\r\n                // b = vn0 - velocityBias\r\n                //\r\n                // The system is solved using the \"Total enumeration method\" (s. Murty). The complementary constraint vn_i * x_i\r\n                // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D contact problem the cases\r\n                // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be tested. The first valid\r\n                // solution that satisfies the problem is chosen.\r\n                //\r\n                // In order to account of the accumulated impulse 'a' (because of the iterative nature of the solver which only requires\r\n                // that the accumulated impulse is clamped and not the incremental impulse) we change the impulse variable (x_i).\r\n                //\r\n                // Substitute:\r\n                //\r\n                // x = a + d\r\n                //\r\n                // a := old total impulse\r\n                // x := new total impulse\r\n                // d := incremental impulse\r\n                //\r\n                // For the current iteration we extend the formula for the incremental impulse\r\n                // to compute the new total impulse:\r\n                //\r\n                // vn = A * d + b\r\n                //    = A * (x - a) + b\r\n                //    = A * x + b - A * a\r\n                //    = A * x + b'\r\n                // b' = b - A * a;\r\n                const cp1 = vc.points[0];\r\n                const cp2 = vc.points[1];\r\n                // b2Vec2 a(cp1->normalImpulse, cp2->normalImpulse);\r\n                a.Set(cp1.normalImpulse, cp2.normalImpulse);\r\n                // DEBUG: b2Assert(a.x >= 0 && a.y >= 0);\r\n                // Relative velocity at contact\r\n                // b2Vec2 dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp1.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp1.rA, b2Vec2.s_t1), dv1);\r\n                // b2Vec2 dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n                b2Vec2.SubVV(b2Vec2.AddVCrossSV(vB, wB, cp2.rB, b2Vec2.s_t0), b2Vec2.AddVCrossSV(vA, wA, cp2.rA, b2Vec2.s_t1), dv2);\r\n                // Compute normal velocity\r\n                // float32 vn1 = b2Dot(dv1, normal);\r\n                let vn1 = b2Vec2.DotVV(dv1, normal);\r\n                // float32 vn2 = b2Dot(dv2, normal);\r\n                let vn2 = b2Vec2.DotVV(dv2, normal);\r\n                // b2Vec2 b;\r\n                b.x = vn1 - cp1.velocityBias;\r\n                b.y = vn2 - cp2.velocityBias;\r\n                // Compute b'\r\n                // b -= b2Mul(vc->K, a);\r\n                b.SelfSub(b2Mat22.MulMV(vc.K, a, b2Vec2.s_t0));\r\n                /*\r\n                #if B2_DEBUG_SOLVER === 1\r\n                const k_errorTol: number = 0.001;\r\n                #endif\r\n                */\r\n                for (;;) {\r\n                    //\r\n                    // Case 1: vn = 0\r\n                    //\r\n                    // 0 = A * x + b'\r\n                    //\r\n                    // Solve for x:\r\n                    //\r\n                    // x = - inv(A) * b'\r\n                    //\r\n                    // b2Vec2 x = - b2Mul(vc->normalMass, b);\r\n                    b2Mat22.MulMV(vc.normalMass, b, x).SelfNeg();\r\n                    if (x.x >= 0 && x.y >= 0) {\r\n                        // Get the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn1 = b2Dot(dv1, normal);\r\n                        vn2 = b2Dot(dv2, normal);\r\n            \r\n                        b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\r\n                        b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 2: vn1 = 0 and x2 = 0\r\n                    //\r\n                    //   0 = a11 * x1 + a12 * 0 + b1'\r\n                    // vn2 = a21 * x1 + a22 * 0 + b2'\r\n                    //\r\n                    x.x = (-cp1.normalMass * b.x);\r\n                    x.y = 0;\r\n                    vn1 = 0;\r\n                    vn2 = vc.K.ex.y * x.x + b.y;\r\n                    if (x.x >= 0 && vn2 >= 0) {\r\n                        // Get the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv1 = vB + b2Cross(wB, cp1->rB) - vA - b2Cross(wA, cp1->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn1 = b2Dot(dv1, normal);\r\n            \r\n                        b2Assert(b2Abs(vn1 - cp1->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 3: vn2 = 0 and x1 = 0\r\n                    //\r\n                    // vn1 = a11 * 0 + a12 * x2 + b1'\r\n                    //   0 = a21 * 0 + a22 * x2 + b2'\r\n                    //\r\n                    x.x = 0;\r\n                    x.y = (-cp2.normalMass * b.y);\r\n                    vn1 = vc.K.ey.x * x.y + b.x;\r\n                    vn2 = 0;\r\n                    if (x.y >= 0 && vn1 >= 0) {\r\n                        // Resubstitute for the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        /*\r\n                        #if B2_DEBUG_SOLVER === 1\r\n                        // Postconditions\r\n                        dv2 = vB + b2Cross(wB, cp2->rB) - vA - b2Cross(wA, cp2->rA);\r\n            \r\n                        // Compute normal velocity\r\n                        vn2 = b2Dot(dv2, normal);\r\n            \r\n                        b2Assert(b2Abs(vn2 - cp2->velocityBias) < k_errorTol);\r\n                        #endif\r\n                        */\r\n                        break;\r\n                    }\r\n                    //\r\n                    // Case 4: x1 = 0 and x2 = 0\r\n                    //\r\n                    // vn1 = b1\r\n                    // vn2 = b2;\r\n                    x.x = 0;\r\n                    x.y = 0;\r\n                    vn1 = b.x;\r\n                    vn2 = b.y;\r\n                    if (vn1 >= 0 && vn2 >= 0) {\r\n                        // Resubstitute for the incremental impulse\r\n                        // b2Vec2 d = x - a;\r\n                        b2Vec2.SubVV(x, a, d);\r\n                        // Apply incremental impulse\r\n                        // b2Vec2 P1 = d.x * normal;\r\n                        b2Vec2.MulSV(d.x, normal, P1);\r\n                        // b2Vec2 P2 = d.y * normal;\r\n                        b2Vec2.MulSV(d.y, normal, P2);\r\n                        b2Vec2.AddVV(P1, P2, P1P2);\r\n                        // vA -= mA * (P1 + P2);\r\n                        vA.SelfMulSub(mA, P1P2);\r\n                        // wA -= iA * (b2Cross(cp1->rA, P1) + b2Cross(cp2->rA, P2));\r\n                        wA -= iA * (b2Vec2.CrossVV(cp1.rA, P1) + b2Vec2.CrossVV(cp2.rA, P2));\r\n                        // vB += mB * (P1 + P2);\r\n                        vB.SelfMulAdd(mB, P1P2);\r\n                        // wB += iB * (b2Cross(cp1->rB, P1) + b2Cross(cp2->rB, P2));\r\n                        wB += iB * (b2Vec2.CrossVV(cp1.rB, P1) + b2Vec2.CrossVV(cp2.rB, P2));\r\n                        // Accumulate\r\n                        cp1.normalImpulse = x.x;\r\n                        cp2.normalImpulse = x.y;\r\n                        break;\r\n                    }\r\n                    // No solution, give up. This is hit sometimes, but it doesn't seem to matter.\r\n                    break;\r\n                }\r\n            }\r\n            // this.m_velocities[indexA].v = vA;\r\n            this.m_velocities[indexA].w = wA;\r\n            // this.m_velocities[indexB].v = vB;\r\n            this.m_velocities[indexB].w = wB;\r\n        }\r\n    }\r\n    StoreImpulses() {\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const vc = this.m_velocityConstraints[i];\r\n            const manifold = this.m_contacts[vc.contactIndex].GetManifold();\r\n            for (let j = 0; j < vc.pointCount; ++j) {\r\n                manifold.points[j].normalImpulse = vc.points[j].normalImpulse;\r\n                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse;\r\n            }\r\n        }\r\n    }\r\n    SolvePositionConstraints() {\r\n        const xfA = b2ContactSolver.SolvePositionConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.SolvePositionConstraints_s_xfB;\r\n        const psm = b2ContactSolver.SolvePositionConstraints_s_psm;\r\n        const rA = b2ContactSolver.SolvePositionConstraints_s_rA;\r\n        const rB = b2ContactSolver.SolvePositionConstraints_s_rB;\r\n        const P = b2ContactSolver.SolvePositionConstraints_s_P;\r\n        let minSeparation = 0;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const pc = this.m_positionConstraints[i];\r\n            const indexA = pc.indexA;\r\n            const indexB = pc.indexB;\r\n            const localCenterA = pc.localCenterA;\r\n            const mA = pc.invMassA;\r\n            const iA = pc.invIA;\r\n            const localCenterB = pc.localCenterB;\r\n            const mB = pc.invMassB;\r\n            const iB = pc.invIB;\r\n            const pointCount = pc.pointCount;\r\n            const cA = this.m_positions[indexA].c;\r\n            let aA = this.m_positions[indexA].a;\r\n            const cB = this.m_positions[indexB].c;\r\n            let aB = this.m_positions[indexB].a;\r\n            // Solve normal constraints\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                xfA.q.SetAngle(aA);\r\n                xfB.q.SetAngle(aB);\r\n                b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n                b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n                psm.Initialize(pc, xfA, xfB, j);\r\n                const normal = psm.normal;\r\n                const point = psm.point;\r\n                const separation = psm.separation;\r\n                // b2Vec2 rA = point - cA;\r\n                b2Vec2.SubVV(point, cA, rA);\r\n                // b2Vec2 rB = point - cB;\r\n                b2Vec2.SubVV(point, cB, rB);\r\n                // Track max constraint error.\r\n                minSeparation = b2Min(minSeparation, separation);\r\n                // Prevent large corrections and allow slop.\r\n                const C = b2Clamp(b2_baumgarte * (separation + b2_linearSlop), (-b2_maxLinearCorrection), 0);\r\n                // Compute the effective mass.\r\n                // float32 rnA = b2Cross(rA, normal);\r\n                const rnA = b2Vec2.CrossVV(rA, normal);\r\n                // float32 rnB = b2Cross(rB, normal);\r\n                const rnB = b2Vec2.CrossVV(rB, normal);\r\n                // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                const K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                // Compute normal impulse\r\n                const impulse = K > 0 ? -C / K : 0;\r\n                // b2Vec2 P = impulse * normal;\r\n                b2Vec2.MulSV(impulse, normal, P);\r\n                // cA -= mA * P;\r\n                cA.SelfMulSub(mA, P);\r\n                // aA -= iA * b2Cross(rA, P);\r\n                aA -= iA * b2Vec2.CrossVV(rA, P);\r\n                // cB += mB * P;\r\n                cB.SelfMulAdd(mB, P);\r\n                // aB += iB * b2Cross(rB, P);\r\n                aB += iB * b2Vec2.CrossVV(rB, P);\r\n            }\r\n            // this.m_positions[indexA].c = cA;\r\n            this.m_positions[indexA].a = aA;\r\n            // this.m_positions[indexB].c = cB;\r\n            this.m_positions[indexB].a = aB;\r\n        }\r\n        // We can't expect minSpeparation >= -b2_linearSlop because we don't\r\n        // push the separation above -b2_linearSlop.\r\n        return minSeparation > (-3 * b2_linearSlop);\r\n    }\r\n    SolveTOIPositionConstraints(toiIndexA, toiIndexB) {\r\n        const xfA = b2ContactSolver.SolveTOIPositionConstraints_s_xfA;\r\n        const xfB = b2ContactSolver.SolveTOIPositionConstraints_s_xfB;\r\n        const psm = b2ContactSolver.SolveTOIPositionConstraints_s_psm;\r\n        const rA = b2ContactSolver.SolveTOIPositionConstraints_s_rA;\r\n        const rB = b2ContactSolver.SolveTOIPositionConstraints_s_rB;\r\n        const P = b2ContactSolver.SolveTOIPositionConstraints_s_P;\r\n        let minSeparation = 0;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            const pc = this.m_positionConstraints[i];\r\n            const indexA = pc.indexA;\r\n            const indexB = pc.indexB;\r\n            const localCenterA = pc.localCenterA;\r\n            const localCenterB = pc.localCenterB;\r\n            const pointCount = pc.pointCount;\r\n            let mA = 0;\r\n            let iA = 0;\r\n            if (indexA === toiIndexA || indexA === toiIndexB) {\r\n                mA = pc.invMassA;\r\n                iA = pc.invIA;\r\n            }\r\n            let mB = 0;\r\n            let iB = 0;\r\n            if (indexB === toiIndexA || indexB === toiIndexB) {\r\n                mB = pc.invMassB;\r\n                iB = pc.invIB;\r\n            }\r\n            const cA = this.m_positions[indexA].c;\r\n            let aA = this.m_positions[indexA].a;\r\n            const cB = this.m_positions[indexB].c;\r\n            let aB = this.m_positions[indexB].a;\r\n            // Solve normal constraints\r\n            for (let j = 0; j < pointCount; ++j) {\r\n                xfA.q.SetAngle(aA);\r\n                xfB.q.SetAngle(aB);\r\n                b2Vec2.SubVV(cA, b2Rot.MulRV(xfA.q, localCenterA, b2Vec2.s_t0), xfA.p);\r\n                b2Vec2.SubVV(cB, b2Rot.MulRV(xfB.q, localCenterB, b2Vec2.s_t0), xfB.p);\r\n                psm.Initialize(pc, xfA, xfB, j);\r\n                const normal = psm.normal;\r\n                const point = psm.point;\r\n                const separation = psm.separation;\r\n                // b2Vec2 rA = point - cA;\r\n                b2Vec2.SubVV(point, cA, rA);\r\n                // b2Vec2 rB = point - cB;\r\n                b2Vec2.SubVV(point, cB, rB);\r\n                // Track max constraint error.\r\n                minSeparation = b2Min(minSeparation, separation);\r\n                // Prevent large corrections and allow slop.\r\n                const C = b2Clamp(b2_toiBaumgarte * (separation + b2_linearSlop), (-b2_maxLinearCorrection), 0);\r\n                // Compute the effective mass.\r\n                // float32 rnA = b2Cross(rA, normal);\r\n                const rnA = b2Vec2.CrossVV(rA, normal);\r\n                // float32 rnB = b2Cross(rB, normal);\r\n                const rnB = b2Vec2.CrossVV(rB, normal);\r\n                // float32 K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                const K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\r\n                // Compute normal impulse\r\n                const impulse = K > 0 ? -C / K : 0;\r\n                // b2Vec2 P = impulse * normal;\r\n                b2Vec2.MulSV(impulse, normal, P);\r\n                // cA -= mA * P;\r\n                cA.SelfMulSub(mA, P);\r\n                // aA -= iA * b2Cross(rA, P);\r\n                aA -= iA * b2Vec2.CrossVV(rA, P);\r\n                // cB += mB * P;\r\n                cB.SelfMulAdd(mB, P);\r\n                // aB += iB * b2Cross(rB, P);\r\n                aB += iB * b2Vec2.CrossVV(rB, P);\r\n            }\r\n            // this.m_positions[indexA].c = cA;\r\n            this.m_positions[indexA].a = aA;\r\n            // this.m_positions[indexB].c = cB;\r\n            this.m_positions[indexB].a = aB;\r\n        }\r\n        // We can't expect minSpeparation >= -b2_linearSlop because we don't\r\n        // push the separation above -b2_linearSlop.\r\n        return minSeparation >= -1.5 * b2_linearSlop;\r\n    }\r\n}\r\nb2ContactSolver.InitializeVelocityConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.InitializeVelocityConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.InitializeVelocityConstraints_s_worldManifold = new b2WorldManifold();\r\nb2ContactSolver.WarmStart_s_P = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv1 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_dv2 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_a = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_b = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_x = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_d = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P1 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P2 = new b2Vec2();\r\nb2ContactSolver.SolveVelocityConstraints_s_P1P2 = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.SolvePositionConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.SolvePositionConstraints_s_psm = new b2PositionSolverManifold();\r\nb2ContactSolver.SolvePositionConstraints_s_rA = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_rB = new b2Vec2();\r\nb2ContactSolver.SolvePositionConstraints_s_P = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_xfA = new b2Transform();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_xfB = new b2Transform();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_psm = new b2PositionSolverManifold();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_rA = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_rB = new b2Vec2();\r\nb2ContactSolver.SolveTOIPositionConstraints_s_P = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_maxFloat, b2_timeToSleep } from \"../Common/b2Settings\";\r\nimport { b2_maxTranslation, b2_maxTranslationSquared } from \"../Common/b2Settings\";\r\nimport { b2_maxRotation, b2_maxRotationSquared } from \"../Common/b2Settings\";\r\nimport { b2_linearSleepTolerance, b2_angularSleepTolerance } from \"../Common/b2Settings\";\r\nimport { b2Abs, b2Min, b2Max, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2ContactSolver, b2ContactSolverDef } from \"./Contacts/b2ContactSolver\";\r\nimport { b2BodyType } from \"./b2Body\";\r\nimport { b2SolverData, b2Position, b2Velocity } from \"./b2TimeStep\";\r\nimport { b2ContactImpulse } from \"./b2WorldCallbacks\";\r\n/*\r\nPosition Correction Notes\r\n=========================\r\nI tried the several algorithms for position correction of the 2D revolute joint.\r\nI looked at these systems:\r\n- simple pendulum (1m diameter sphere on massless 5m stick) with initial angular velocity of 100 rad/s.\r\n- suspension bridge with 30 1m long planks of length 1m.\r\n- multi-link chain with 30 1m long links.\r\n\r\nHere are the algorithms:\r\n\r\nBaumgarte - A fraction of the position error is added to the velocity error. There is no\r\nseparate position solver.\r\n\r\nPseudo Velocities - After the velocity solver and position integration,\r\nthe position error, Jacobian, and effective mass are recomputed. Then\r\nthe velocity constraints are solved with pseudo velocities and a fraction\r\nof the position error is added to the pseudo velocity error. The pseudo\r\nvelocities are initialized to zero and there is no warm-starting. After\r\nthe position solver, the pseudo velocities are added to the positions.\r\nThis is also called the First Order World method or the Position LCP method.\r\n\r\nModified Nonlinear Gauss-Seidel (NGS) - Like Pseudo Velocities except the\r\nposition error is re-computed for each constraint and the positions are updated\r\nafter the constraint is solved. The radius vectors (aka Jacobians) are\r\nre-computed too (otherwise the algorithm has horrible instability). The pseudo\r\nvelocity states are not needed because they are effectively zero at the beginning\r\nof each iteration. Since we have the current position error, we allow the\r\niterations to terminate early if the error becomes smaller than b2_linearSlop.\r\n\r\nFull NGS or just NGS - Like Modified NGS except the effective mass are re-computed\r\neach time a constraint is solved.\r\n\r\nHere are the results:\r\nBaumgarte - this is the cheapest algorithm but it has some stability problems,\r\nespecially with the bridge. The chain links separate easily close to the root\r\nand they jitter as they struggle to pull together. This is one of the most common\r\nmethods in the field. The big drawback is that the position correction artificially\r\naffects the momentum, thus leading to instabilities and false bounce. I used a\r\nbias factor of 0.2. A larger bias factor makes the bridge less stable, a smaller\r\nfactor makes joints and contacts more spongy.\r\n\r\nPseudo Velocities - the is more stable than the Baumgarte method. The bridge is\r\nstable. However, joints still separate with large angular velocities. Drag the\r\nsimple pendulum in a circle quickly and the joint will separate. The chain separates\r\neasily and does not recover. I used a bias factor of 0.2. A larger value lead to\r\nthe bridge collapsing when a heavy cube drops on it.\r\n\r\nModified NGS - this algorithm is better in some ways than Baumgarte and Pseudo\r\nVelocities, but in other ways it is worse. The bridge and chain are much more\r\nstable, but the simple pendulum goes unstable at high angular velocities.\r\n\r\nFull NGS - stable in all tests. The joints display good stiffness. The bridge\r\nstill sags, but this is better than infinite forces.\r\n\r\nRecommendations\r\nPseudo Velocities are not really worthwhile because the bridge and chain cannot\r\nrecover from joint separation. In other cases the benefit over Baumgarte is small.\r\n\r\nModified NGS is not a robust method for the revolute joint due to the violent\r\ninstability seen in the simple pendulum. Perhaps it is viable with other constraint\r\ntypes, especially scalar constraints where the effective mass is a scalar.\r\n\r\nThis leaves Baumgarte and Full NGS. Baumgarte has small, but manageable instabilities\r\nand is very fast. I don't think we can escape Baumgarte, especially in highly\r\ndemanding cases where high constraint fidelity is not needed.\r\n\r\nFull NGS is robust and easy on the eyes. I recommend this as an option for\r\nhigher fidelity simulation and certainly for suspension bridges and long chains.\r\nFull NGS might be a good choice for ragdolls, especially motorized ragdolls where\r\njoint separation can be problematic. The number of NGS iterations can be reduced\r\nfor better performance without harming robustness much.\r\n\r\nEach joint in a can be handled differently in the position solver. So I recommend\r\na system where the user can select the algorithm on a per joint basis. I would\r\nprobably default to the slower Full NGS and let the user select the faster\r\nBaumgarte method in performance critical scenarios.\r\n*/\r\n/*\r\nCache Performance\r\n\r\nThe Box2D solvers are dominated by cache misses. Data structures are designed\r\nto increase the number of cache hits. Much of misses are due to random access\r\nto body data. The constraint structures are iterated over linearly, which leads\r\nto few cache misses.\r\n\r\nThe bodies are not accessed during iteration. Instead read only data, such as\r\nthe mass values are stored with the constraints. The mutable data are the constraint\r\nimpulses and the bodies velocities/positions. The impulses are held inside the\r\nconstraint structures. The body velocities/positions are held in compact, temporary\r\narrays to increase the number of cache hits. Linear and angular velocity are\r\nstored in a single array since multiple arrays lead to multiple misses.\r\n*/\r\n/*\r\n2D Rotation\r\n\r\nR = [cos(theta) -sin(theta)]\r\n    [sin(theta) cos(theta) ]\r\n\r\nthetaDot = omega\r\n\r\nLet q1 = cos(theta), q2 = sin(theta).\r\nR = [q1 -q2]\r\n    [q2  q1]\r\n\r\nq1Dot = -thetaDot * q2\r\nq2Dot = thetaDot * q1\r\n\r\nq1_new = q1_old - dt * w * q2\r\nq2_new = q2_old + dt * w * q1\r\nthen normalize.\r\n\r\nThis might be faster than computing sin+cos.\r\nHowever, we can compute sin+cos of the same angle fast.\r\n*/\r\nexport class b2Island {\r\n    constructor() {\r\n        this.m_allocator = null;\r\n        this.m_bodies = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_contacts = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_joints = [ /*1024*/]; // TODO: b2Settings\r\n        this.m_positions = b2Position.MakeArray(1024); // TODO: b2Settings\r\n        this.m_velocities = b2Velocity.MakeArray(1024); // TODO: b2Settings\r\n        this.m_bodyCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_bodyCapacity = 0;\r\n        this.m_contactCapacity = 0;\r\n        this.m_jointCapacity = 0;\r\n    }\r\n    Initialize(bodyCapacity, contactCapacity, jointCapacity, allocator, listener) {\r\n        this.m_bodyCapacity = bodyCapacity;\r\n        this.m_contactCapacity = contactCapacity;\r\n        this.m_jointCapacity = jointCapacity;\r\n        this.m_bodyCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_allocator = allocator;\r\n        this.m_listener = listener;\r\n        // TODO:\r\n        // while (this.m_bodies.length < bodyCapacity) {\r\n        //   this.m_bodies[this.m_bodies.length] = null;\r\n        // }\r\n        // TODO:\r\n        // while (this.m_contacts.length < contactCapacity) {\r\n        //   this.m_contacts[this.m_contacts.length] = null;\r\n        // }\r\n        // TODO:\r\n        // while (this.m_joints.length < jointCapacity) {\r\n        //   this.m_joints[this.m_joints.length] = null;\r\n        // }\r\n        // TODO:\r\n        if (this.m_positions.length < bodyCapacity) {\r\n            const new_length = b2Max(this.m_positions.length * 2, bodyCapacity);\r\n            while (this.m_positions.length < new_length) {\r\n                this.m_positions[this.m_positions.length] = new b2Position();\r\n            }\r\n        }\r\n        // TODO:\r\n        if (this.m_velocities.length < bodyCapacity) {\r\n            const new_length = b2Max(this.m_velocities.length * 2, bodyCapacity);\r\n            while (this.m_velocities.length < new_length) {\r\n                this.m_velocities[this.m_velocities.length] = new b2Velocity();\r\n            }\r\n        }\r\n    }\r\n    Clear() {\r\n        this.m_bodyCount = 0;\r\n        this.m_contactCount = 0;\r\n        this.m_jointCount = 0;\r\n    }\r\n    AddBody(body) {\r\n        // DEBUG: b2Assert(this.m_bodyCount < this.m_bodyCapacity);\r\n        body.m_islandIndex = this.m_bodyCount;\r\n        this.m_bodies[this.m_bodyCount++] = body;\r\n    }\r\n    AddContact(contact) {\r\n        // DEBUG: b2Assert(this.m_contactCount < this.m_contactCapacity);\r\n        this.m_contacts[this.m_contactCount++] = contact;\r\n    }\r\n    AddJoint(joint) {\r\n        // DEBUG: b2Assert(this.m_jointCount < this.m_jointCapacity);\r\n        this.m_joints[this.m_jointCount++] = joint;\r\n    }\r\n    Solve(profile, step, gravity, allowSleep) {\r\n        const timer = b2Island.s_timer.Reset();\r\n        const h = step.dt;\r\n        // Integrate velocities and apply damping. Initialize the body state.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const b = this.m_bodies[i];\r\n            // const c: b2Vec2 =\r\n            this.m_positions[i].c.Copy(b.m_sweep.c);\r\n            const a = b.m_sweep.a;\r\n            const v = this.m_velocities[i].v.Copy(b.m_linearVelocity);\r\n            let w = b.m_angularVelocity;\r\n            // Store positions for continuous collision.\r\n            b.m_sweep.c0.Copy(b.m_sweep.c);\r\n            b.m_sweep.a0 = b.m_sweep.a;\r\n            if (b.m_type === b2BodyType.b2_dynamicBody) {\r\n                // Integrate velocities.\r\n                v.x += h * (b.m_gravityScale * gravity.x + b.m_invMass * b.m_force.x);\r\n                v.y += h * (b.m_gravityScale * gravity.y + b.m_invMass * b.m_force.y);\r\n                w += h * b.m_invI * b.m_torque;\r\n                // Apply damping.\r\n                // ODE: dv/dt + c * v = 0\r\n                // Solution: v(t) = v0 * exp(-c * t)\r\n                // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\r\n                // v2 = exp(-c * dt) * v1\r\n                // Pade approximation:\r\n                // v2 = v1 * 1 / (1 + c * dt)\r\n                v.SelfMul(1.0 / (1.0 + h * b.m_linearDamping));\r\n                w *= 1.0 / (1.0 + h * b.m_angularDamping);\r\n            }\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n        }\r\n        timer.Reset();\r\n        // Solver data\r\n        const solverData = b2Island.s_solverData;\r\n        solverData.step.Copy(step);\r\n        solverData.positions = this.m_positions;\r\n        solverData.velocities = this.m_velocities;\r\n        // Initialize velocity constraints.\r\n        const contactSolverDef = b2Island.s_contactSolverDef;\r\n        contactSolverDef.step.Copy(step);\r\n        contactSolverDef.contacts = this.m_contacts;\r\n        contactSolverDef.count = this.m_contactCount;\r\n        contactSolverDef.positions = this.m_positions;\r\n        contactSolverDef.velocities = this.m_velocities;\r\n        contactSolverDef.allocator = this.m_allocator;\r\n        const contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\r\n        contactSolver.InitializeVelocityConstraints();\r\n        if (step.warmStarting) {\r\n            contactSolver.WarmStart();\r\n        }\r\n        for (let i = 0; i < this.m_jointCount; ++i) {\r\n            this.m_joints[i].InitVelocityConstraints(solverData);\r\n        }\r\n        profile.solveInit = timer.GetMilliseconds();\r\n        // Solve velocity constraints.\r\n        timer.Reset();\r\n        for (let i = 0; i < step.velocityIterations; ++i) {\r\n            for (let j = 0; j < this.m_jointCount; ++j) {\r\n                this.m_joints[j].SolveVelocityConstraints(solverData);\r\n            }\r\n            contactSolver.SolveVelocityConstraints();\r\n        }\r\n        // Store impulses for warm starting\r\n        contactSolver.StoreImpulses();\r\n        profile.solveVelocity = timer.GetMilliseconds();\r\n        // Integrate positions.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const c = this.m_positions[i].c;\r\n            let a = this.m_positions[i].a;\r\n            const v = this.m_velocities[i].v;\r\n            let w = this.m_velocities[i].w;\r\n            // Check for large velocities\r\n            const translation = b2Vec2.MulSV(h, v, b2Island.s_translation);\r\n            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\r\n                const ratio = b2_maxTranslation / translation.Length();\r\n                v.SelfMul(ratio);\r\n            }\r\n            const rotation = h * w;\r\n            if (rotation * rotation > b2_maxRotationSquared) {\r\n                const ratio = b2_maxRotation / b2Abs(rotation);\r\n                w *= ratio;\r\n            }\r\n            // Integrate\r\n            c.x += h * v.x;\r\n            c.y += h * v.y;\r\n            a += h * w;\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n        }\r\n        // Solve position constraints\r\n        timer.Reset();\r\n        let positionSolved = false;\r\n        for (let i = 0; i < step.positionIterations; ++i) {\r\n            const contactsOkay = contactSolver.SolvePositionConstraints();\r\n            let jointsOkay = true;\r\n            for (let j = 0; j < this.m_jointCount; ++j) {\r\n                const jointOkay = this.m_joints[j].SolvePositionConstraints(solverData);\r\n                jointsOkay = jointsOkay && jointOkay;\r\n            }\r\n            if (contactsOkay && jointsOkay) {\r\n                // Exit early if the position errors are small.\r\n                positionSolved = true;\r\n                break;\r\n            }\r\n        }\r\n        // Copy state buffers back to the bodies\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const body = this.m_bodies[i];\r\n            body.m_sweep.c.Copy(this.m_positions[i].c);\r\n            body.m_sweep.a = this.m_positions[i].a;\r\n            body.m_linearVelocity.Copy(this.m_velocities[i].v);\r\n            body.m_angularVelocity = this.m_velocities[i].w;\r\n            body.SynchronizeTransform();\r\n        }\r\n        profile.solvePosition = timer.GetMilliseconds();\r\n        this.Report(contactSolver.m_velocityConstraints);\r\n        if (allowSleep) {\r\n            let minSleepTime = b2_maxFloat;\r\n            const linTolSqr = b2_linearSleepTolerance * b2_linearSleepTolerance;\r\n            const angTolSqr = b2_angularSleepTolerance * b2_angularSleepTolerance;\r\n            for (let i = 0; i < this.m_bodyCount; ++i) {\r\n                const b = this.m_bodies[i];\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    continue;\r\n                }\r\n                if (!b.m_autoSleepFlag ||\r\n                    b.m_angularVelocity * b.m_angularVelocity > angTolSqr ||\r\n                    b2Vec2.DotVV(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {\r\n                    b.m_sleepTime = 0;\r\n                    minSleepTime = 0;\r\n                }\r\n                else {\r\n                    b.m_sleepTime += h;\r\n                    minSleepTime = b2Min(minSleepTime, b.m_sleepTime);\r\n                }\r\n            }\r\n            if (minSleepTime >= b2_timeToSleep && positionSolved) {\r\n                for (let i = 0; i < this.m_bodyCount; ++i) {\r\n                    const b = this.m_bodies[i];\r\n                    b.SetAwake(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveTOI(subStep, toiIndexA, toiIndexB) {\r\n        // DEBUG: b2Assert(toiIndexA < this.m_bodyCount);\r\n        // DEBUG: b2Assert(toiIndexB < this.m_bodyCount);\r\n        // Initialize the body state.\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const b = this.m_bodies[i];\r\n            this.m_positions[i].c.Copy(b.m_sweep.c);\r\n            this.m_positions[i].a = b.m_sweep.a;\r\n            this.m_velocities[i].v.Copy(b.m_linearVelocity);\r\n            this.m_velocities[i].w = b.m_angularVelocity;\r\n        }\r\n        const contactSolverDef = b2Island.s_contactSolverDef;\r\n        contactSolverDef.contacts = this.m_contacts;\r\n        contactSolverDef.count = this.m_contactCount;\r\n        contactSolverDef.allocator = this.m_allocator;\r\n        contactSolverDef.step.Copy(subStep);\r\n        contactSolverDef.positions = this.m_positions;\r\n        contactSolverDef.velocities = this.m_velocities;\r\n        const contactSolver = b2Island.s_contactSolver.Initialize(contactSolverDef);\r\n        // Solve position constraints.\r\n        for (let i = 0; i < subStep.positionIterations; ++i) {\r\n            const contactsOkay = contactSolver.SolveTOIPositionConstraints(toiIndexA, toiIndexB);\r\n            if (contactsOkay) {\r\n                break;\r\n            }\r\n        }\r\n        /*\r\n        #if 0\r\n          // Is the new position really safe?\r\n          for (int32 i = 0; i < this.m_contactCount; ++i) {\r\n            b2Contact* c = this.m_contacts[i];\r\n            b2Fixture* fA = c.GetFixtureA();\r\n            b2Fixture* fB = c.GetFixtureB();\r\n      \r\n            b2Body* bA = fA.GetBody();\r\n            b2Body* bB = fB.GetBody();\r\n      \r\n            int32 indexA = c.GetChildIndexA();\r\n            int32 indexB = c.GetChildIndexB();\r\n      \r\n            b2DistanceInput input;\r\n            input.proxyA.Set(fA.GetShape(), indexA);\r\n            input.proxyB.Set(fB.GetShape(), indexB);\r\n            input.transformA = bA.GetTransform();\r\n            input.transformB = bB.GetTransform();\r\n            input.useRadii = false;\r\n      \r\n            b2DistanceOutput output;\r\n            b2SimplexCache cache;\r\n            cache.count = 0;\r\n            b2Distance(&output, &cache, &input);\r\n      \r\n            if (output.distance === 0 || cache.count === 3) {\r\n              cache.count += 0;\r\n            }\r\n          }\r\n        #endif\r\n        */\r\n        // Leap of faith to new safe state.\r\n        this.m_bodies[toiIndexA].m_sweep.c0.Copy(this.m_positions[toiIndexA].c);\r\n        this.m_bodies[toiIndexA].m_sweep.a0 = this.m_positions[toiIndexA].a;\r\n        this.m_bodies[toiIndexB].m_sweep.c0.Copy(this.m_positions[toiIndexB].c);\r\n        this.m_bodies[toiIndexB].m_sweep.a0 = this.m_positions[toiIndexB].a;\r\n        // No warm starting is needed for TOI events because warm\r\n        // starting impulses were applied in the discrete solver.\r\n        contactSolver.InitializeVelocityConstraints();\r\n        // Solve velocity constraints.\r\n        for (let i = 0; i < subStep.velocityIterations; ++i) {\r\n            contactSolver.SolveVelocityConstraints();\r\n        }\r\n        // Don't store the TOI contact forces for warm starting\r\n        // because they can be quite large.\r\n        const h = subStep.dt;\r\n        // Integrate positions\r\n        for (let i = 0; i < this.m_bodyCount; ++i) {\r\n            const c = this.m_positions[i].c;\r\n            let a = this.m_positions[i].a;\r\n            const v = this.m_velocities[i].v;\r\n            let w = this.m_velocities[i].w;\r\n            // Check for large velocities\r\n            const translation = b2Vec2.MulSV(h, v, b2Island.s_translation);\r\n            if (b2Vec2.DotVV(translation, translation) > b2_maxTranslationSquared) {\r\n                const ratio = b2_maxTranslation / translation.Length();\r\n                v.SelfMul(ratio);\r\n            }\r\n            const rotation = h * w;\r\n            if (rotation * rotation > b2_maxRotationSquared) {\r\n                const ratio = b2_maxRotation / b2Abs(rotation);\r\n                w *= ratio;\r\n            }\r\n            // Integrate\r\n            c.SelfMulAdd(h, v);\r\n            a += h * w;\r\n            // this.m_positions[i].c = c;\r\n            this.m_positions[i].a = a;\r\n            // this.m_velocities[i].v = v;\r\n            this.m_velocities[i].w = w;\r\n            // Sync bodies\r\n            const body = this.m_bodies[i];\r\n            body.m_sweep.c.Copy(c);\r\n            body.m_sweep.a = a;\r\n            body.m_linearVelocity.Copy(v);\r\n            body.m_angularVelocity = w;\r\n            body.SynchronizeTransform();\r\n        }\r\n        this.Report(contactSolver.m_velocityConstraints);\r\n    }\r\n    Report(constraints) {\r\n        if (this.m_listener === null) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.m_contactCount; ++i) {\r\n            const c = this.m_contacts[i];\r\n            if (!c) {\r\n                continue;\r\n            }\r\n            const vc = constraints[i];\r\n            const impulse = b2Island.s_impulse;\r\n            impulse.count = vc.pointCount;\r\n            for (let j = 0; j < vc.pointCount; ++j) {\r\n                impulse.normalImpulses[j] = vc.points[j].normalImpulse;\r\n                impulse.tangentImpulses[j] = vc.points[j].tangentImpulse;\r\n            }\r\n            this.m_listener.PostSolve(c, impulse);\r\n        }\r\n    }\r\n}\r\nb2Island.s_timer = new b2Timer();\r\nb2Island.s_solverData = new b2SolverData();\r\nb2Island.s_contactSolverDef = new b2ContactSolverDef();\r\nb2Island.s_contactSolver = new b2ContactSolver();\r\nb2Island.s_translation = new b2Vec2();\r\nb2Island.s_impulse = new b2ContactImpulse();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_invalidParticleIndex } from \"../Common/b2Settings\";\r\nimport { b2Clamp, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\n/**\r\n * The particle type. Can be combined with the | operator.\r\n */\r\nexport var b2ParticleFlag;\r\n(function (b2ParticleFlag) {\r\n    /// Water particle.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_waterParticle\"] = 0] = \"b2_waterParticle\";\r\n    /// Removed after next simulation step.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_zombieParticle\"] = 2] = \"b2_zombieParticle\";\r\n    /// Zero velocity.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_wallParticle\"] = 4] = \"b2_wallParticle\";\r\n    /// With restitution from stretching.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_springParticle\"] = 8] = \"b2_springParticle\";\r\n    /// With restitution from deformation.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_elasticParticle\"] = 16] = \"b2_elasticParticle\";\r\n    /// With viscosity.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_viscousParticle\"] = 32] = \"b2_viscousParticle\";\r\n    /// Without isotropic pressure.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_powderParticle\"] = 64] = \"b2_powderParticle\";\r\n    /// With surface tension.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_tensileParticle\"] = 128] = \"b2_tensileParticle\";\r\n    /// Mix color between contacting particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_colorMixingParticle\"] = 256] = \"b2_colorMixingParticle\";\r\n    /// Call b2DestructionListener on destruction.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_destructionListenerParticle\"] = 512] = \"b2_destructionListenerParticle\";\r\n    /// Prevents other particles from leaking.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_barrierParticle\"] = 1024] = \"b2_barrierParticle\";\r\n    /// Less compressibility.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_staticPressureParticle\"] = 2048] = \"b2_staticPressureParticle\";\r\n    /// Makes pairs or triads with other particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_reactiveParticle\"] = 4096] = \"b2_reactiveParticle\";\r\n    /// With high repulsive force.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_repulsiveParticle\"] = 8192] = \"b2_repulsiveParticle\";\r\n    /// Call b2ContactListener when this particle is about to interact with\r\n    /// a rigid body or stops interacting with a rigid body.\r\n    /// This results in an expensive operation compared to using\r\n    /// b2_fixtureContactFilterParticle to detect collisions between\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactListenerParticle\"] = 16384] = \"b2_fixtureContactListenerParticle\";\r\n    /// Call b2ContactListener when this particle is about to interact with\r\n    /// another particle or stops interacting with another particle.\r\n    /// This results in an expensive operation compared to using\r\n    /// b2_particleContactFilterParticle to detect collisions between\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactListenerParticle\"] = 32768] = \"b2_particleContactListenerParticle\";\r\n    /// Call b2ContactFilter when this particle interacts with rigid bodies.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_fixtureContactFilterParticle\"] = 65536] = \"b2_fixtureContactFilterParticle\";\r\n    /// Call b2ContactFilter when this particle interacts with other\r\n    /// particles.\r\n    b2ParticleFlag[b2ParticleFlag[\"b2_particleContactFilterParticle\"] = 131072] = \"b2_particleContactFilterParticle\";\r\n})(b2ParticleFlag || (b2ParticleFlag = {}));\r\nexport class b2ParticleDef {\r\n    constructor() {\r\n        this.flags = 0;\r\n        this.position = new b2Vec2();\r\n        this.velocity = new b2Vec2();\r\n        this.color = new b2Color(0, 0, 0, 0);\r\n        this.lifetime = 0.0;\r\n        this.userData = null;\r\n        this.group = null;\r\n    }\r\n}\r\nexport function b2CalculateParticleIterations(gravity, radius, timeStep) {\r\n    // In some situations you may want more particle iterations than this,\r\n    // but to avoid excessive cycle cost, don't recommend more than this.\r\n    const B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS = 8;\r\n    const B2_RADIUS_THRESHOLD = 0.01;\r\n    const iterations = Math.ceil(Math.sqrt(gravity / (B2_RADIUS_THRESHOLD * radius)) * timeStep);\r\n    return b2Clamp(iterations, 1, B2_MAX_RECOMMENDED_PARTICLE_ITERATIONS);\r\n}\r\nexport class b2ParticleHandle {\r\n    constructor() {\r\n        this.m_index = b2_invalidParticleIndex;\r\n    }\r\n    GetIndex() { return this.m_index; }\r\n    SetIndex(index) { this.m_index = index; }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQYXJ0aWNsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL1BhcnRpY2xlL2IyUGFydGljbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCx5QkFBeUI7QUFFekIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQU0sTUFBTSxrQkFBa0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsT0FBTyxFQUFRLE1BQU0sa0JBQWtCLENBQUM7QUFHakQ7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxjQThDWDtBQTlDRCxXQUFZLGNBQWM7SUFDeEIsbUJBQW1CO0lBQ25CLDJFQUFvQixDQUFBO0lBQ3BCLHVDQUF1QztJQUN2Qyw2RUFBMEIsQ0FBQTtJQUMxQixrQkFBa0I7SUFDbEIseUVBQXdCLENBQUE7SUFDeEIscUNBQXFDO0lBQ3JDLDZFQUEwQixDQUFBO0lBQzFCLHNDQUFzQztJQUN0QyxnRkFBMkIsQ0FBQTtJQUMzQixtQkFBbUI7SUFDbkIsZ0ZBQTJCLENBQUE7SUFDM0IsK0JBQStCO0lBQy9CLDhFQUEwQixDQUFBO0lBQzFCLHlCQUF5QjtJQUN6QixpRkFBMkIsQ0FBQTtJQUMzQiwyQ0FBMkM7SUFDM0MseUZBQStCLENBQUE7SUFDL0IsOENBQThDO0lBQzlDLHlHQUF1QyxDQUFBO0lBQ3ZDLDBDQUEwQztJQUMxQyxrRkFBNEIsQ0FBQTtJQUM1Qix5QkFBeUI7SUFDekIsZ0dBQW1DLENBQUE7SUFDbkMsK0NBQStDO0lBQy9DLG9GQUE2QixDQUFBO0lBQzdCLDhCQUE4QjtJQUM5QixzRkFBOEIsQ0FBQTtJQUM5Qix1RUFBdUU7SUFDdkUsd0RBQXdEO0lBQ3hELDREQUE0RDtJQUM1RCxnRUFBZ0U7SUFDaEUsY0FBYztJQUNkLGlIQUEyQyxDQUFBO0lBQzNDLHVFQUF1RTtJQUN2RSxnRUFBZ0U7SUFDaEUsNERBQTREO0lBQzVELGlFQUFpRTtJQUNqRSxjQUFjO0lBQ2QsbUhBQTRDLENBQUE7SUFDNUMsd0VBQXdFO0lBQ3hFLDZHQUF5QyxDQUFBO0lBQ3pDLGdFQUFnRTtJQUNoRSxjQUFjO0lBQ2QsZ0hBQTBDLENBQUE7QUFDNUMsQ0FBQyxFQTlDVyxjQUFjLEtBQWQsY0FBYyxRQThDekI7QUFZRCxNQUFNLE9BQU8sYUFBYTtJQUExQjtRQUNTLFVBQUssR0FBbUIsQ0FBQyxDQUFDO1FBQ2pCLGFBQVEsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLGFBQVEsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ2hDLFVBQUssR0FBWSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxhQUFRLEdBQVcsR0FBRyxDQUFDO1FBQ3ZCLGFBQVEsR0FBUSxJQUFJLENBQUM7UUFDckIsVUFBSyxHQUEyQixJQUFJLENBQUM7SUFDOUMsQ0FBQztDQUFBO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUFDLE9BQWUsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7SUFDN0Ysc0VBQXNFO0lBQ3RFLHFFQUFxRTtJQUNyRSxNQUFNLHNDQUFzQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztJQUM3RixPQUFPLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLHNDQUFzQyxDQUFDLENBQUM7QUFDeEUsQ0FBQztBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFBN0I7UUFDUyxZQUFPLEdBQVcsdUJBQXVCLENBQUM7SUFHbkQsQ0FBQztJQUZRLFFBQVEsS0FBYSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzNDLFFBQVEsQ0FBQyxLQUFhLElBQVUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQy9EO0FBRUQsU0FBUyJ9","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\nexport var b2ParticleGroupFlag;\r\n(function (b2ParticleGroupFlag) {\r\n    /// Prevents overlapping or leaking.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_solidParticleGroup\"] = 1] = \"b2_solidParticleGroup\";\r\n    /// Keeps its shape.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_rigidParticleGroup\"] = 2] = \"b2_rigidParticleGroup\";\r\n    /// Won't be destroyed if it gets empty.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupCanBeEmpty\"] = 4] = \"b2_particleGroupCanBeEmpty\";\r\n    /// Will be destroyed on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupWillBeDestroyed\"] = 8] = \"b2_particleGroupWillBeDestroyed\";\r\n    /// Updates depth data on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupNeedsUpdateDepth\"] = 16] = \"b2_particleGroupNeedsUpdateDepth\";\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupInternalMask\"] = 24] = \"b2_particleGroupInternalMask\";\r\n})(b2ParticleGroupFlag || (b2ParticleGroupFlag = {}));\r\nexport class b2ParticleGroupDef {\r\n    constructor() {\r\n        this.flags = 0;\r\n        this.groupFlags = 0;\r\n        this.position = new b2Vec2();\r\n        this.angle = 0.0;\r\n        this.linearVelocity = new b2Vec2();\r\n        this.angularVelocity = 0.0;\r\n        this.color = new b2Color();\r\n        this.strength = 1.0;\r\n        this.shapeCount = 0;\r\n        this.stride = 0;\r\n        this.particleCount = 0;\r\n        this.lifetime = 0;\r\n        this.userData = null;\r\n        this.group = null;\r\n    }\r\n}\r\nexport class b2ParticleGroup {\r\n    constructor(system) {\r\n        this.m_firstIndex = 0;\r\n        this.m_lastIndex = 0;\r\n        this.m_groupFlags = 0;\r\n        this.m_strength = 1.0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_timestamp = -1;\r\n        this.m_mass = 0.0;\r\n        this.m_inertia = 0.0;\r\n        this.m_center = new b2Vec2();\r\n        this.m_linearVelocity = new b2Vec2();\r\n        this.m_angularVelocity = 0.0;\r\n        this.m_transform = new b2Transform();\r\n        ///m_transform.SetIdentity();\r\n        this.m_userData = null;\r\n        this.m_system = system;\r\n    }\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    GetParticleSystem() {\r\n        return this.m_system;\r\n    }\r\n    GetParticleCount() {\r\n        return this.m_lastIndex - this.m_firstIndex;\r\n    }\r\n    GetBufferIndex() {\r\n        return this.m_firstIndex;\r\n    }\r\n    ContainsParticle(index) {\r\n        return this.m_firstIndex <= index && index < this.m_lastIndex;\r\n    }\r\n    GetAllParticleFlags() {\r\n        if (!this.m_system.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        let flags = 0;\r\n        for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            flags |= this.m_system.m_flagsBuffer.data[i];\r\n        }\r\n        return flags;\r\n    }\r\n    GetGroupFlags() {\r\n        return this.m_groupFlags;\r\n    }\r\n    SetGroupFlags(flags) {\r\n        // DEBUG: b2Assert((flags & b2ParticleGroupFlag.b2_particleGroupInternalMask) === 0);\r\n        flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\r\n        this.m_system.SetGroupFlags(this, flags);\r\n    }\r\n    GetMass() {\r\n        this.UpdateStatistics();\r\n        return this.m_mass;\r\n    }\r\n    GetInertia() {\r\n        this.UpdateStatistics();\r\n        return this.m_inertia;\r\n    }\r\n    GetCenter() {\r\n        this.UpdateStatistics();\r\n        return this.m_center;\r\n    }\r\n    GetLinearVelocity() {\r\n        this.UpdateStatistics();\r\n        return this.m_linearVelocity;\r\n    }\r\n    GetAngularVelocity() {\r\n        this.UpdateStatistics();\r\n        return this.m_angularVelocity;\r\n    }\r\n    GetTransform() {\r\n        return this.m_transform;\r\n    }\r\n    GetPosition() {\r\n        return this.m_transform.p;\r\n    }\r\n    GetAngle() {\r\n        return this.m_transform.q.GetAngle();\r\n    }\r\n    GetLinearVelocityFromWorldPoint(worldPoint, out) {\r\n        const s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\r\n        this.UpdateStatistics();\r\n        ///  return m_linearVelocity + b2Cross(m_angularVelocity, worldPoint - m_center);\r\n        return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);\r\n    }\r\n    GetUserData() {\r\n        return this.m_userData;\r\n    }\r\n    SetUserData(data) {\r\n        this.m_userData = data;\r\n    }\r\n    ApplyForce(force) {\r\n        this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\r\n    }\r\n    ApplyLinearImpulse(impulse) {\r\n        this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\r\n    }\r\n    DestroyParticles(callDestructionListener) {\r\n        if (this.m_system.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            this.m_system.DestroyParticle(i, callDestructionListener);\r\n        }\r\n    }\r\n    UpdateStatistics() {\r\n        if (!this.m_system.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_system.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const p = new b2Vec2();\r\n        const v = new b2Vec2();\r\n        if (this.m_timestamp !== this.m_system.m_timestamp) {\r\n            const m = this.m_system.GetParticleMass();\r\n            ///  this.m_mass = 0;\r\n            this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\r\n            this.m_center.SetZero();\r\n            this.m_linearVelocity.SetZero();\r\n            for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///  this.m_mass += m;\r\n                ///  this.m_center += m * this.m_system.m_positionBuffer.data[i];\r\n                this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\r\n                ///  this.m_linearVelocity += m * this.m_system.m_velocityBuffer.data[i];\r\n                this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\r\n            }\r\n            if (this.m_mass > 0) {\r\n                const inv_mass = 1 / this.m_mass;\r\n                ///this.m_center *= 1 / this.m_mass;\r\n                this.m_center.SelfMul(inv_mass);\r\n                ///this.m_linearVelocity *= 1 / this.m_mass;\r\n                this.m_linearVelocity.SelfMul(inv_mass);\r\n            }\r\n            this.m_inertia = 0;\r\n            this.m_angularVelocity = 0;\r\n            for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///b2Vec2 p = this.m_system.m_positionBuffer.data[i] - this.m_center;\r\n                b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\r\n                ///b2Vec2 v = this.m_system.m_velocityBuffer.data[i] - this.m_linearVelocity;\r\n                b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\r\n                this.m_inertia += m * b2Vec2.DotVV(p, p);\r\n                this.m_angularVelocity += m * b2Vec2.CrossVV(p, v);\r\n            }\r\n            if (this.m_inertia > 0) {\r\n                this.m_angularVelocity *= 1 / this.m_inertia;\r\n            }\r\n            this.m_timestamp = this.m_system.m_timestamp;\r\n        }\r\n    }\r\n}\r\nb2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0 = new b2Vec2();\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJQYXJ0aWNsZUdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvUGFydGljbGUvYjJQYXJ0aWNsZUdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgseUJBQXlCO0FBRXpCLDBEQUEwRDtBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBTSxNQUFNLGtCQUFrQixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLEVBQVEsTUFBTSxrQkFBa0IsQ0FBQztBQUtqRCxNQUFNLENBQU4sSUFBWSxtQkFhWDtBQWJELFdBQVksbUJBQW1CO0lBQzdCLG9DQUFvQztJQUNwQywrRkFBOEIsQ0FBQTtJQUM5QixvQkFBb0I7SUFDcEIsK0ZBQThCLENBQUE7SUFDOUIsd0NBQXdDO0lBQ3hDLHlHQUFtQyxDQUFBO0lBQ25DLDhDQUE4QztJQUM5QyxtSEFBd0MsQ0FBQTtJQUN4QywrQ0FBK0M7SUFDL0Msc0hBQXlDLENBQUE7SUFFekMsOEdBQWlHLENBQUE7QUFDbkcsQ0FBQyxFQWJXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFhOUI7QUFzQkQsTUFBTSxPQUFPLGtCQUFrQjtJQUEvQjtRQUNTLFVBQUssR0FBbUIsQ0FBQyxDQUFDO1FBQzFCLGVBQVUsR0FBd0IsQ0FBQyxDQUFDO1FBQzNCLGFBQVEsR0FBVyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ3pDLFVBQUssR0FBVyxHQUFHLENBQUM7UUFDWCxtQkFBYyxHQUFXLElBQUksTUFBTSxFQUFFLENBQUM7UUFDL0Msb0JBQWUsR0FBVyxHQUFHLENBQUM7UUFDckIsVUFBSyxHQUFZLElBQUksT0FBTyxFQUFFLENBQUM7UUFDeEMsYUFBUSxHQUFXLEdBQUcsQ0FBQztRQUd2QixlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFDbkIsa0JBQWEsR0FBVyxDQUFDLENBQUM7UUFFMUIsYUFBUSxH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","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2MakeArray } from \"../Common/b2Settings\";\r\nexport class b2StackQueue {\r\n    constructor(capacity) {\r\n        this.m_front = 0;\r\n        this.m_back = 0;\r\n        this.m_capacity = 0;\r\n        this.m_buffer = b2MakeArray(capacity, (index) => null);\r\n        this.m_capacity = capacity;\r\n    }\r\n    Push(item) {\r\n        if (this.m_back >= this.m_capacity) {\r\n            for (let i = this.m_front; i < this.m_back; i++) {\r\n                this.m_buffer[i - this.m_front] = this.m_buffer[i];\r\n            }\r\n            this.m_back -= this.m_front;\r\n            this.m_front = 0;\r\n            if (this.m_back >= this.m_capacity) {\r\n                if (this.m_capacity > 0) {\r\n                    this.m_buffer.concat(b2MakeArray(this.m_capacity, (index) => null));\r\n                    this.m_capacity *= 2;\r\n                }\r\n                else {\r\n                    this.m_buffer.concat(b2MakeArray(1, (index) => null));\r\n                    this.m_capacity = 1;\r\n                }\r\n                ///m_buffer = (T*) m_allocator->Reallocate(m_buffer, sizeof(T) * m_capacity);\r\n            }\r\n        }\r\n        this.m_buffer[this.m_back] = item;\r\n        this.m_back++;\r\n    }\r\n    Pop() {\r\n        // DEBUG: b2Assert(this.m_front < this.m_back);\r\n        this.m_buffer[this.m_front] = null;\r\n        this.m_front++;\r\n    }\r\n    Empty() {\r\n        // DEBUG: b2Assert(this.m_front <= this.m_back);\r\n        return this.m_front === this.m_back;\r\n    }\r\n    Front() {\r\n        const item = this.m_buffer[this.m_front];\r\n        if (!item) {\r\n            throw new Error();\r\n        }\r\n        return item;\r\n    }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJTdGFja1F1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvUGFydGljbGUvYjJTdGFja1F1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgseUJBQXlCO0FBRXpCLDBEQUEwRDtBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsTUFBTSxPQUFPLFlBQVk7SUFLdkIsWUFBWSxRQUFnQjtRQUhyQixZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBQ3BCLFdBQU0sR0FBVyxDQUFDLENBQUM7UUFDbkIsZUFBVSxHQUFXLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7SUFDTSxJQUFJLENBQUMsSUFBTztRQUNqQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO1lBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNsQyxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO29CQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDcEUsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO3FCQUFNO29CQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO2lCQUNyQjtnQkFDRCw2RUFBNkU7YUFDOUU7U0FDRjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNNLEdBQUc7UUFDUiwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBQ00sS0FBSztRQUNWLGdEQUFnRDtRQUNoRCxPQUFPLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0lBQ00sS0FBSztRQUNWLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxFQUFFLENBQUM7U0FBRTtRQUNqQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELFNBQVMifQ==","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_maxFloat, b2MakeArray } from \"../Common/b2Settings\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2StackQueue } from \"./b2StackQueue\";\r\n/**\r\n * A field representing the nearest generator from each point.\r\n */\r\nexport class b2VoronoiDiagram {\r\n    constructor(generatorCapacity) {\r\n        this.m_generatorCapacity = 0;\r\n        this.m_generatorCount = 0;\r\n        this.m_countX = 0;\r\n        this.m_countY = 0;\r\n        this.m_diagram = [];\r\n        this.m_generatorBuffer = b2MakeArray(generatorCapacity, (index) => new b2VoronoiDiagram.Generator());\r\n        this.m_generatorCapacity = generatorCapacity;\r\n    }\r\n    /**\r\n     * Add a generator.\r\n     *\r\n     * @param center the position of the generator.\r\n     * @param tag a tag used to identify the generator in callback functions.\r\n     * @param necessary whether to callback for nodes associated with the generator.\r\n     */\r\n    AddGenerator(center, tag, necessary) {\r\n        // DEBUG: b2Assert(this.m_generatorCount < this.m_generatorCapacity);\r\n        const g = this.m_generatorBuffer[this.m_generatorCount++];\r\n        g.center.Copy(center);\r\n        g.tag = tag;\r\n        g.necessary = necessary;\r\n    }\r\n    /**\r\n     * Generate the Voronoi diagram. It is rasterized with a given\r\n     * interval in the same range as the necessary generators exist.\r\n     *\r\n     * @param radius the interval of the diagram.\r\n     * @param margin margin for which the range of the diagram is extended.\r\n     */\r\n    Generate(radius, margin) {\r\n        const inverseRadius = 1 / radius;\r\n        const lower = new b2Vec2(+b2_maxFloat, +b2_maxFloat);\r\n        const upper = new b2Vec2(-b2_maxFloat, -b2_maxFloat);\r\n        let necessary_count = 0;\r\n        for (let k = 0; k < this.m_generatorCount; k++) {\r\n            const g = this.m_generatorBuffer[k];\r\n            if (g.necessary) {\r\n                b2Vec2.MinV(lower, g.center, lower);\r\n                b2Vec2.MaxV(upper, g.center, upper);\r\n                ++necessary_count;\r\n            }\r\n        }\r\n        if (necessary_count === 0) {\r\n            ///debugger;\r\n            this.m_countX = 0;\r\n            this.m_countY = 0;\r\n            return;\r\n        }\r\n        lower.x -= margin;\r\n        lower.y -= margin;\r\n        upper.x += margin;\r\n        upper.y += margin;\r\n        this.m_countX = 1 + Math.floor(inverseRadius * (upper.x - lower.x));\r\n        this.m_countY = 1 + Math.floor(inverseRadius * (upper.y - lower.y));\r\n        ///  m_diagram = (Generator**) m_allocator->Allocate(sizeof(Generator*) * m_countX * m_countY);\r\n        ///  for (int32 i = 0; i < m_countX * m_countY; i++)\r\n        ///  {\r\n        ///    m_diagram[i] = NULL;\r\n        ///  }\r\n        this.m_diagram = []; // b2MakeArray(this.m_countX * this.m_countY, (index) => null);\r\n        // (4 * m_countX * m_countY) is the queue capacity that is experimentally\r\n        // known to be necessary and sufficient for general particle distributions.\r\n        const queue = new b2StackQueue(4 * this.m_countX * this.m_countY);\r\n        for (let k = 0; k < this.m_generatorCount; k++) {\r\n            const g = this.m_generatorBuffer[k];\r\n            ///  g.center = inverseRadius * (g.center - lower);\r\n            g.center.SelfSub(lower).SelfMul(inverseRadius);\r\n            const x = Math.floor(g.center.x);\r\n            const y = Math.floor(g.center.y);\r\n            if (x >= 0 && y >= 0 && x < this.m_countX && y < this.m_countY) {\r\n                queue.Push(new b2VoronoiDiagram.Task(x, y, x + y * this.m_countX, g));\r\n            }\r\n        }\r\n        while (!queue.Empty()) {\r\n            const task = queue.Front();\r\n            const x = task.m_x;\r\n            const y = task.m_y;\r\n            const i = task.m_i;\r\n            const g = task.m_generator;\r\n            queue.Pop();\r\n            if (!this.m_diagram[i]) {\r\n                this.m_diagram[i] = g;\r\n                if (x > 0) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, g));\r\n                }\r\n                if (y > 0) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, g));\r\n                }\r\n                if (x < this.m_countX - 1) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, g));\r\n                }\r\n                if (y < this.m_countY - 1) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, g));\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < this.m_countY; y++) {\r\n            for (let x = 0; x < this.m_countX - 1; x++) {\r\n                const i = x + y * this.m_countX;\r\n                const a = this.m_diagram[i];\r\n                const b = this.m_diagram[i + 1];\r\n                if (a !== b) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));\r\n                    queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, a));\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < this.m_countY - 1; y++) {\r\n            for (let x = 0; x < this.m_countX; x++) {\r\n                const i = x + y * this.m_countX;\r\n                const a = this.m_diagram[i];\r\n                const b = this.m_diagram[i + this.m_countX];\r\n                if (a !== b) {\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y, i, b));\r\n                    queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, a));\r\n                }\r\n            }\r\n        }\r\n        while (!queue.Empty()) {\r\n            const task = queue.Front();\r\n            const x = task.m_x;\r\n            const y = task.m_y;\r\n            const i = task.m_i;\r\n            const k = task.m_generator;\r\n            queue.Pop();\r\n            const a = this.m_diagram[i];\r\n            const b = k;\r\n            if (a !== b) {\r\n                const ax = a.center.x - x;\r\n                const ay = a.center.y - y;\r\n                const bx = b.center.x - x;\r\n                const by = b.center.y - y;\r\n                const a2 = ax * ax + ay * ay;\r\n                const b2 = bx * bx + by * by;\r\n                if (a2 > b2) {\r\n                    this.m_diagram[i] = b;\r\n                    if (x > 0) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x - 1, y, i - 1, b));\r\n                    }\r\n                    if (y > 0) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x, y - 1, i - this.m_countX, b));\r\n                    }\r\n                    if (x < this.m_countX - 1) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x + 1, y, i + 1, b));\r\n                    }\r\n                    if (y < this.m_countY - 1) {\r\n                        queue.Push(new b2VoronoiDiagram.Task(x, y + 1, i + this.m_countX, b));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Enumerate all nodes that contain at least one necessary\r\n     * generator.\r\n     */\r\n    GetNodes(callback) {\r\n        for (let y = 0; y < this.m_countY - 1; y++) {\r\n            for (let x = 0; x < this.m_countX - 1; x++) {\r\n                const i = x + y * this.m_countX;\r\n                const a = this.m_diagram[i];\r\n                const b = this.m_diagram[i + 1];\r\n                const c = this.m_diagram[i + this.m_countX];\r\n                const d = this.m_diagram[i + 1 + this.m_countX];\r\n                if (b !== c) {\r\n                    if (a !== b && a !== c &&\r\n                        (a.necessary || b.necessary || c.necessary)) {\r\n                        callback(a.tag, b.tag, c.tag);\r\n                    }\r\n                    if (d !== b && d !== c &&\r\n                        (a.necessary || b.necessary || c.necessary)) {\r\n                        callback(b.tag, d.tag, c.tag);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n(function (b2VoronoiDiagram) {\r\n    class Generator {\r\n        constructor() {\r\n            this.center = new b2Vec2();\r\n            this.tag = 0;\r\n            this.necessary = false;\r\n        }\r\n    }\r\n    b2VoronoiDiagram.Generator = Generator;\r\n    class Task {\r\n        constructor(x, y, i, g) {\r\n            this.m_x = x;\r\n            this.m_y = y;\r\n            this.m_i = i;\r\n            this.m_generator = g;\r\n        }\r\n    }\r\n    b2VoronoiDiagram.Task = Task;\r\n})(b2VoronoiDiagram || (b2VoronoiDiagram = {})); // namespace b2VoronoiDiagram\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_PARTICLE\r\n// DEBUG: import { b2Assert, b2_maxParticleIndex } from \"../Common/b2Settings\";\r\nimport { b2_linearSlop, b2_maxFloat, b2_invalidParticleIndex, b2_minParticleSystemBufferCapacity, b2_maxTriadDistanceSquared, b2_barrierCollisionTime, b2MakeArray, b2Maybe } from \"../Common/b2Settings\";\r\nimport { b2_maxParticlePressure, b2_minParticleWeight, b2_maxParticleForce, b2_particleStride } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Max, b2Abs, b2Clamp, b2Sqrt, b2InvSqrt, b2Vec2, b2Rot, b2Transform } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from \"../Collision/b2Collision\";\r\nimport { b2ShapeType, b2Shape } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2EdgeShape } from \"../Collision/Shapes/b2EdgeShape\";\r\nimport { b2TimeStep } from \"../Dynamics/b2TimeStep\";\r\nimport { b2QueryCallback } from \"../Dynamics/b2WorldCallbacks\";\r\nimport { b2ParticleFlag, b2ParticleDef, b2ParticleHandle } from \"./b2Particle\";\r\nimport { b2ParticleGroupFlag, b2ParticleGroupDef, b2ParticleGroup } from \"./b2ParticleGroup\";\r\nimport { b2VoronoiDiagram } from \"./b2VoronoiDiagram\";\r\nfunction std_iter_swap(array, a, b) {\r\n    const tmp = array[a];\r\n    array[a] = array[b];\r\n    array[b] = tmp;\r\n}\r\nfunction default_compare(a, b) { return a < b; }\r\nfunction std_sort(array, first = 0, len = array.length - first, cmp = default_compare) {\r\n    let left = first;\r\n    const stack = [];\r\n    let pos = 0;\r\n    for (;;) { /* outer loop */\r\n        for (; left + 1 < len; len++) { /* sort left to len-1 */\r\n            const pivot = array[left + Math.floor(Math.random() * (len - left))]; /* pick random pivot */\r\n            stack[pos++] = len; /* sort right part later */\r\n            for (let right = left - 1;;) { /* inner loop: partitioning */\r\n                while (cmp(array[++right], pivot)) { } /* look for greater element */\r\n                while (cmp(pivot, array[--len])) { } /* look for smaller element */\r\n                if (right >= len) {\r\n                    break;\r\n                } /* partition point found? */\r\n                std_iter_swap(array, right, len); /* the only swap */\r\n            } /* partitioned, continue left part */\r\n        }\r\n        if (pos === 0) {\r\n            break;\r\n        } /* stack empty? */\r\n        left = len; /* left to right is sorted */\r\n        len = stack[--pos]; /* get next range to sort */\r\n    }\r\n    return array;\r\n}\r\nfunction std_stable_sort(array, first = 0, len = array.length - first, cmp = default_compare) {\r\n    return std_sort(array, first, len, cmp);\r\n}\r\nfunction std_remove_if(array, predicate, length = array.length) {\r\n    let l = 0;\r\n    for (let c = 0; c < length; ++c) {\r\n        // if we can be collapsed, keep l where it is.\r\n        if (predicate(array[c])) {\r\n            continue;\r\n        }\r\n        // this node can't be collapsed; push it back as far as we can.\r\n        if (c === l) {\r\n            ++l;\r\n            continue; // quick exit if we're already in the right spot\r\n        }\r\n        // array[l++] = array[c];\r\n        std_iter_swap(array, l++, c);\r\n    }\r\n    return l;\r\n}\r\nfunction std_lower_bound(array, first, last, val, cmp = default_compare) {\r\n    let count = last - first;\r\n    while (count > 0) {\r\n        const step = Math.floor(count / 2);\r\n        let it = first + step;\r\n        if (cmp(array[it], val)) {\r\n            first = ++it;\r\n            count -= step + 1;\r\n        }\r\n        else {\r\n            count = step;\r\n        }\r\n    }\r\n    return first;\r\n}\r\nfunction std_upper_bound(array, first, last, val, cmp = default_compare) {\r\n    let count = last - first;\r\n    while (count > 0) {\r\n        const step = Math.floor(count / 2);\r\n        let it = first + step;\r\n        if (!cmp(val, array[it])) {\r\n            first = ++it;\r\n            count -= step + 1;\r\n        }\r\n        else {\r\n            count = step;\r\n        }\r\n    }\r\n    return first;\r\n}\r\nfunction std_rotate(array, first, n_first, last) {\r\n    let next = n_first;\r\n    while (first !== next) {\r\n        std_iter_swap(array, first++, next++);\r\n        if (next === last) {\r\n            next = n_first;\r\n        }\r\n        else if (first === n_first) {\r\n            n_first = next;\r\n        }\r\n    }\r\n}\r\nfunction std_unique(array, first, last, cmp) {\r\n    if (first === last) {\r\n        return last;\r\n    }\r\n    let result = first;\r\n    while (++first !== last) {\r\n        if (!cmp(array[result], array[first])) {\r\n            ///array[++result] = array[first];\r\n            std_iter_swap(array, ++result, first);\r\n        }\r\n    }\r\n    return ++result;\r\n}\r\nexport class b2GrowableBuffer {\r\n    constructor(allocator) {\r\n        this.data = [];\r\n        this.count = 0;\r\n        this.capacity = 0;\r\n        this.allocator = allocator;\r\n    }\r\n    Append() {\r\n        if (this.count >= this.capacity) {\r\n            this.Grow();\r\n        }\r\n        return this.count++;\r\n    }\r\n    Reserve(newCapacity) {\r\n        if (this.capacity >= newCapacity) {\r\n            return;\r\n        }\r\n        // DEBUG: b2Assert(this.capacity === this.data.length);\r\n        for (let i = this.capacity; i < newCapacity; ++i) {\r\n            this.data[i] = this.allocator();\r\n        }\r\n        this.capacity = newCapacity;\r\n    }\r\n    Grow() {\r\n        // Double the capacity.\r\n        const newCapacity = this.capacity ? 2 * this.capacity : b2_minParticleSystemBufferCapacity;\r\n        // DEBUG: b2Assert(newCapacity > this.capacity);\r\n        this.Reserve(newCapacity);\r\n    }\r\n    Free() {\r\n        if (this.data.length === 0) {\r\n            return;\r\n        }\r\n        this.data = [];\r\n        this.capacity = 0;\r\n        this.count = 0;\r\n    }\r\n    Shorten(newEnd) {\r\n        // DEBUG: b2Assert(false);\r\n    }\r\n    Data() {\r\n        return this.data;\r\n    }\r\n    GetCount() {\r\n        return this.count;\r\n    }\r\n    SetCount(newCount) {\r\n        // DEBUG: b2Assert(0 <= newCount && newCount <= this.capacity);\r\n        this.count = newCount;\r\n    }\r\n    GetCapacity() {\r\n        return this.capacity;\r\n    }\r\n    RemoveIf(pred) {\r\n        // DEBUG: let count = 0;\r\n        // DEBUG: for (let i = 0; i < this.count; ++i) {\r\n        // DEBUG:   if (!pred(this.data[i])) {\r\n        // DEBUG:     count++;\r\n        // DEBUG:   }\r\n        // DEBUG: }\r\n        this.count = std_remove_if(this.data, pred, this.count);\r\n        // DEBUG: b2Assert(count === this.count);\r\n    }\r\n    Unique(pred) {\r\n        this.count = std_unique(this.data, 0, this.count, pred);\r\n    }\r\n}\r\nexport class b2FixtureParticleQueryCallback extends b2QueryCallback {\r\n    constructor(system) {\r\n        super();\r\n        this.m_system = system;\r\n    }\r\n    ShouldQueryParticleSystem(system) {\r\n        // Skip reporting particles.\r\n        return false;\r\n    }\r\n    ReportFixture(fixture) {\r\n        if (fixture.IsSensor()) {\r\n            return true;\r\n        }\r\n        const shape = fixture.GetShape();\r\n        const childCount = shape.GetChildCount();\r\n        for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n            const aabb = fixture.GetAABB(childIndex);\r\n            const enumerator = this.m_system.GetInsideBoundsEnumerator(aabb);\r\n            let index;\r\n            while ((index = enumerator.GetNext()) >= 0) {\r\n                this.ReportFixtureAndParticle(fixture, childIndex, index);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    ReportParticle(system, index) {\r\n        return false;\r\n    }\r\n    ReportFixtureAndParticle(fixture, childIndex, index) {\r\n        // DEBUG: b2Assert(false); // pure virtual\r\n    }\r\n}\r\nexport class b2ParticleContact {\r\n    constructor() {\r\n        this.indexA = 0;\r\n        this.indexB = 0;\r\n        this.weight = 0;\r\n        this.normal = new b2Vec2();\r\n        this.flags = 0;\r\n    }\r\n    SetIndices(a, b) {\r\n        // DEBUG: b2Assert(a <= b2_maxParticleIndex && b <= b2_maxParticleIndex);\r\n        this.indexA = a;\r\n        this.indexB = b;\r\n    }\r\n    SetWeight(w) {\r\n        this.weight = w;\r\n    }\r\n    SetNormal(n) {\r\n        this.normal.Copy(n);\r\n    }\r\n    SetFlags(f) {\r\n        this.flags = f;\r\n    }\r\n    GetIndexA() {\r\n        return this.indexA;\r\n    }\r\n    GetIndexB() {\r\n        return this.indexB;\r\n    }\r\n    GetWeight() {\r\n        return this.weight;\r\n    }\r\n    GetNormal() {\r\n        return this.normal;\r\n    }\r\n    GetFlags() {\r\n        return this.flags;\r\n    }\r\n    IsEqual(rhs) {\r\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && this.weight === rhs.weight && this.normal.x === rhs.normal.x && this.normal.y === rhs.normal.y;\r\n    }\r\n    IsNotEqual(rhs) {\r\n        return !this.IsEqual(rhs);\r\n    }\r\n    ApproximatelyEqual(rhs) {\r\n        const MAX_WEIGHT_DIFF = 0.01; // Weight 0 ~ 1, so about 1%\r\n        const MAX_NORMAL_DIFF_SQ = 0.01 * 0.01; // Normal length = 1, so 1%\r\n        return this.indexA === rhs.indexA && this.indexB === rhs.indexB && this.flags === rhs.flags && b2Abs(this.weight - rhs.weight) < MAX_WEIGHT_DIFF && b2Vec2.DistanceSquaredVV(this.normal, rhs.normal) < MAX_NORMAL_DIFF_SQ;\r\n    }\r\n}\r\nexport class b2ParticleBodyContact {\r\n    constructor() {\r\n        this.index = 0; // Index of the particle making contact.\r\n        this.weight = 0.0; // Weight of the contact. A value between 0.0f and 1.0f.\r\n        this.normal = new b2Vec2(); // The normalized direction from the particle to the body.\r\n        this.mass = 0.0; // The effective mass used in calculating force.\r\n    }\r\n}\r\nexport class b2ParticlePair {\r\n    constructor() {\r\n        this.indexA = 0; // Indices of the respective particles making pair.\r\n        this.indexB = 0;\r\n        this.flags = 0; // The logical sum of the particle flags. See the b2ParticleFlag enum.\r\n        this.strength = 0.0; // The strength of cohesion among the particles.\r\n        this.distance = 0.0; // The initial distance of the particles.\r\n    }\r\n}\r\nexport class b2ParticleTriad {\r\n    constructor() {\r\n        this.indexA = 0; // Indices of the respective particles making triad.\r\n        this.indexB = 0;\r\n        this.indexC = 0;\r\n        this.flags = 0; // The logical sum of the particle flags. See the b2ParticleFlag enum.\r\n        this.strength = 0.0; // The strength of cohesion among the particles.\r\n        this.pa = new b2Vec2(0.0, 0.0); // Values used for calculation.\r\n        this.pb = new b2Vec2(0.0, 0.0);\r\n        this.pc = new b2Vec2(0.0, 0.0);\r\n        this.ka = 0.0;\r\n        this.kb = 0.0;\r\n        this.kc = 0.0;\r\n        this.s = 0.0;\r\n    }\r\n}\r\nexport class b2ParticleSystemDef {\r\n    constructor() {\r\n        // Initialize physical coefficients to the maximum values that\r\n        // maintain numerical stability.\r\n        /**\r\n         * Enable strict Particle/Body contact check.\r\n         * See SetStrictContactCheck for details.\r\n         */\r\n        this.strictContactCheck = false;\r\n        /**\r\n         * Set the particle density.\r\n         * See SetDensity for details.\r\n         */\r\n        this.density = 1.0;\r\n        /**\r\n         * Change the particle gravity scale. Adjusts the effect of the\r\n         * global gravity vector on particles. Default value is 1.0f.\r\n         */\r\n        this.gravityScale = 1.0;\r\n        /**\r\n         * Particles behave as circles with this radius. In Box2D units.\r\n         */\r\n        this.radius = 1.0;\r\n        /**\r\n         * Set the maximum number of particles.\r\n         * By default, there is no maximum. The particle buffers can\r\n         * continue to grow while b2World's block allocator still has\r\n         * memory.\r\n         * See SetMaxParticleCount for details.\r\n         */\r\n        this.maxCount = 0;\r\n        /**\r\n         * Increases pressure in response to compression\r\n         * Smaller values allow more compression\r\n         */\r\n        this.pressureStrength = 0.005;\r\n        /**\r\n         * Reduces velocity along the collision normal\r\n         * Smaller value reduces less\r\n         */\r\n        this.dampingStrength = 1.0;\r\n        /**\r\n         * Restores shape of elastic particle groups\r\n         * Larger values increase elastic particle velocity\r\n         */\r\n        this.elasticStrength = 0.25;\r\n        /**\r\n         * Restores length of spring particle groups\r\n         * Larger values increase spring particle velocity\r\n         */\r\n        this.springStrength = 0.25;\r\n        /**\r\n         * Reduces relative velocity of viscous particles\r\n         * Larger values slow down viscous particles more\r\n         */\r\n        this.viscousStrength = 0.25;\r\n        /**\r\n         * Produces pressure on tensile particles\r\n         * 0~0.2. Larger values increase the amount of surface tension.\r\n         */\r\n        this.surfaceTensionPressureStrength = 0.2;\r\n        /**\r\n         * Smoothes outline of tensile particles\r\n         * 0~0.2. Larger values result in rounder, smoother,\r\n         * water-drop-like clusters of particles.\r\n         */\r\n        this.surfaceTensionNormalStrength = 0.2;\r\n        /**\r\n         * Produces additional pressure on repulsive particles\r\n         * Larger values repulse more\r\n         * Negative values mean attraction. The range where particles\r\n         * behave stably is about -0.2 to 2.0.\r\n         */\r\n        this.repulsiveStrength = 1.0;\r\n        /**\r\n         * Produces repulsion between powder particles\r\n         * Larger values repulse more\r\n         */\r\n        this.powderStrength = 0.5;\r\n        /**\r\n         * Pushes particles out of solid particle group\r\n         * Larger values repulse more\r\n         */\r\n        this.ejectionStrength = 0.5;\r\n        /**\r\n         * Produces static pressure\r\n         * Larger values increase the pressure on neighboring partilces\r\n         * For a description of static pressure, see\r\n         * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\r\n         */\r\n        this.staticPressureStrength = 0.2;\r\n        /**\r\n         * Reduces instability in static pressure calculation\r\n         * Larger values make stabilize static pressure with fewer\r\n         * iterations\r\n         */\r\n        this.staticPressureRelaxation = 0.2;\r\n        /**\r\n         * Computes static pressure more precisely\r\n         * See SetStaticPressureIterations for details\r\n         */\r\n        this.staticPressureIterations = 8;\r\n        /**\r\n         * Determines how fast colors are mixed\r\n         * 1.0f ==> mixed immediately\r\n         * 0.5f ==> mixed half way each simulation step (see\r\n         * b2World::Step())\r\n         */\r\n        this.colorMixingStrength = 0.5;\r\n        /**\r\n         * Whether to destroy particles by age when no more particles\r\n         * can be created.  See #b2ParticleSystem::SetDestructionByAge()\r\n         * for more information.\r\n         */\r\n        this.destroyByAge = true;\r\n        /**\r\n         * Granularity of particle lifetimes in seconds.  By default\r\n         * this is set to (1.0f / 60.0f) seconds.  b2ParticleSystem uses\r\n         * a 32-bit signed value to track particle lifetimes so the\r\n         * maximum lifetime of a particle is (2^32 - 1) / (1.0f /\r\n         * lifetimeGranularity) seconds. With the value set to 1/60 the\r\n         * maximum lifetime or age of a particle is 2.27 years.\r\n         */\r\n        this.lifetimeGranularity = 1.0 / 60.0;\r\n    }\r\n    Copy(def) {\r\n        this.strictContactCheck = def.strictContactCheck;\r\n        this.density = def.density;\r\n        this.gravityScale = def.gravityScale;\r\n        this.radius = def.radius;\r\n        this.maxCount = def.maxCount;\r\n        this.pressureStrength = def.pressureStrength;\r\n        this.dampingStrength = def.dampingStrength;\r\n        this.elasticStrength = def.elasticStrength;\r\n        this.springStrength = def.springStrength;\r\n        this.viscousStrength = def.viscousStrength;\r\n        this.surfaceTensionPressureStrength = def.surfaceTensionPressureStrength;\r\n        this.surfaceTensionNormalStrength = def.surfaceTensionNormalStrength;\r\n        this.repulsiveStrength = def.repulsiveStrength;\r\n        this.powderStrength = def.powderStrength;\r\n        this.ejectionStrength = def.ejectionStrength;\r\n        this.staticPressureStrength = def.staticPressureStrength;\r\n        this.staticPressureRelaxation = def.staticPressureRelaxation;\r\n        this.staticPressureIterations = def.staticPressureIterations;\r\n        this.colorMixingStrength = def.colorMixingStrength;\r\n        this.destroyByAge = def.destroyByAge;\r\n        this.lifetimeGranularity = def.lifetimeGranularity;\r\n        return this;\r\n    }\r\n    Clone() {\r\n        return new b2ParticleSystemDef().Copy(this);\r\n    }\r\n}\r\nexport class b2ParticleSystem {\r\n    constructor(def, world) {\r\n        this.m_paused = false;\r\n        this.m_timestamp = 0;\r\n        this.m_allParticleFlags = 0;\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n        this.m_allGroupFlags = 0;\r\n        this.m_needsUpdateAllGroupFlags = false;\r\n        this.m_hasForce = false;\r\n        this.m_iterationIndex = 0;\r\n        this.m_inverseDensity = 0.0;\r\n        this.m_particleDiameter = 0.0;\r\n        this.m_inverseDiameter = 0.0;\r\n        this.m_squaredDiameter = 0.0;\r\n        this.m_count = 0;\r\n        this.m_internalAllocatedCapacity = 0;\r\n        /**\r\n         * Allocator for b2ParticleHandle instances.\r\n         */\r\n        ///m_handleAllocator: any = null;\r\n        /**\r\n         * Maps particle indicies to handles.\r\n         */\r\n        this.m_handleIndexBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_flagsBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_positionBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_velocityBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_forceBuffer = [];\r\n        /**\r\n         * this.m_weightBuffer is populated in ComputeWeight and used in\r\n         * ComputeDepth(), SolveStaticPressure() and SolvePressure().\r\n         */\r\n        this.m_weightBuffer = [];\r\n        /**\r\n         * When any particles have the flag b2_staticPressureParticle,\r\n         * this.m_staticPressureBuffer is first allocated and used in\r\n         * SolveStaticPressure() and SolvePressure().  It will be\r\n         * reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_staticPressureBuffer = [];\r\n        /**\r\n         * this.m_accumulationBuffer is used in many functions as a temporary\r\n         * buffer for scalar values.\r\n         */\r\n        this.m_accumulationBuffer = [];\r\n        /**\r\n         * When any particles have the flag b2_tensileParticle,\r\n         * this.m_accumulation2Buffer is first allocated and used in\r\n         * SolveTensile() as a temporary buffer for vector values.  It\r\n         * will be reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_accumulation2Buffer = [];\r\n        /**\r\n         * When any particle groups have the flag b2_solidParticleGroup,\r\n         * this.m_depthBuffer is first allocated and populated in\r\n         * ComputeDepth() and used in SolveSolid(). It will be\r\n         * reallocated on subsequent CreateParticle() calls.\r\n         */\r\n        this.m_depthBuffer = [];\r\n        this.m_colorBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_groupBuffer = [];\r\n        this.m_userDataBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * Stuck particle detection parameters and record keeping\r\n         */\r\n        this.m_stuckThreshold = 0;\r\n        this.m_lastBodyContactStepBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_bodyContactCountBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_consecutiveContactStepsBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        this.m_stuckParticleBuffer = new b2GrowableBuffer(() => 0);\r\n        this.m_proxyBuffer = new b2GrowableBuffer(() => new b2ParticleSystem.Proxy());\r\n        this.m_contactBuffer = new b2GrowableBuffer(() => new b2ParticleContact());\r\n        this.m_bodyContactBuffer = new b2GrowableBuffer(() => new b2ParticleBodyContact());\r\n        this.m_pairBuffer = new b2GrowableBuffer(() => new b2ParticlePair());\r\n        this.m_triadBuffer = new b2GrowableBuffer(() => new b2ParticleTriad());\r\n        /**\r\n         * Time each particle should be destroyed relative to the last\r\n         * time this.m_timeElapsed was initialized.  Each unit of time\r\n         * corresponds to b2ParticleSystemDef::lifetimeGranularity\r\n         * seconds.\r\n         */\r\n        this.m_expirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * List of particle indices sorted by expiration time.\r\n         */\r\n        this.m_indexByExpirationTimeBuffer = new b2ParticleSystem.UserOverridableBuffer();\r\n        /**\r\n         * Time elapsed in 32:32 fixed point.  Each non-fractional unit\r\n         * of time corresponds to\r\n         * b2ParticleSystemDef::lifetimeGranularity seconds.\r\n         */\r\n        this.m_timeElapsed = 0;\r\n        /**\r\n         * Whether the expiration time buffer has been modified and\r\n         * needs to be resorted.\r\n         */\r\n        this.m_expirationTimeBufferRequiresSorting = false;\r\n        this.m_groupCount = 0;\r\n        this.m_groupList = null;\r\n        this.m_def = new b2ParticleSystemDef();\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.SetStrictContactCheck(def.strictContactCheck);\r\n        this.SetDensity(def.density);\r\n        this.SetGravityScale(def.gravityScale);\r\n        this.SetRadius(def.radius);\r\n        this.SetMaxParticleCount(def.maxCount);\r\n        // DEBUG: b2Assert(def.lifetimeGranularity > 0.0);\r\n        this.m_def = def.Clone();\r\n        this.m_world = world;\r\n        this.SetDestructionByAge(this.m_def.destroyByAge);\r\n    }\r\n    static computeTag(x, y) {\r\n        ///return ((uint32)(y + yOffset) << yShift) + (uint32)(xScale * x + xOffset);\r\n        return ((((y + b2ParticleSystem.yOffset) >>> 0) << b2ParticleSystem.yShift) + ((b2ParticleSystem.xScale * x + b2ParticleSystem.xOffset) >>> 0)) >>> 0;\r\n    }\r\n    static computeRelativeTag(tag, x, y) {\r\n        ///return tag + (y << yShift) + (x << xShift);\r\n        return (tag + (y << b2ParticleSystem.yShift) + (x << b2ParticleSystem.xShift)) >>> 0;\r\n    }\r\n    Drop() {\r\n        while (this.m_groupList) {\r\n            this.DestroyParticleGroup(this.m_groupList);\r\n        }\r\n        this.FreeUserOverridableBuffer(this.m_handleIndexBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_flagsBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_lastBodyContactStepBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_bodyContactCountBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_consecutiveContactStepsBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_positionBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_velocityBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_colorBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_userDataBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_expirationTimeBuffer);\r\n        this.FreeUserOverridableBuffer(this.m_indexByExpirationTimeBuffer);\r\n        this.FreeBuffer(this.m_forceBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_weightBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_staticPressureBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_accumulationBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_accumulation2Buffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_depthBuffer, this.m_internalAllocatedCapacity);\r\n        this.FreeBuffer(this.m_groupBuffer, this.m_internalAllocatedCapacity);\r\n    }\r\n    /**\r\n     * Create a particle whose properties have been defined.\r\n     *\r\n     * No reference to the definition is retained.\r\n     *\r\n     * A simulation step must occur before it's possible to interact\r\n     * with a newly created particle.  For example,\r\n     * DestroyParticleInShape() will not destroy a particle until\r\n     * b2World::Step() has been called.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     */\r\n    CreateParticle(def) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\r\n            // Double the particle capacity.\r\n            const capacity = this.m_count ? 2 * this.m_count : b2_minParticleSystemBufferCapacity;\r\n            this.ReallocateInternalAllocatedBuffers(capacity);\r\n        }\r\n        if (this.m_count >= this.m_internalAllocatedCapacity) {\r\n            // If the oldest particle should be destroyed...\r\n            if (this.m_def.destroyByAge) {\r\n                this.DestroyOldestParticle(0, false);\r\n                // Need to destroy this particle *now* so that it's possible to\r\n                // create a new particle.\r\n                this.SolveZombie();\r\n            }\r\n            else {\r\n                return b2_invalidParticleIndex;\r\n            }\r\n        }\r\n        const index = this.m_count++;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        this.m_flagsBuffer.data[index] = 0;\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            this.m_lastBodyContactStepBuffer.data[index] = 0;\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            this.m_bodyContactCountBuffer.data[index] = 0;\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            this.m_consecutiveContactStepsBuffer.data[index] = 0;\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        this.m_positionBuffer.data[index] = (this.m_positionBuffer.data[index] || new b2Vec2()).Copy(b2Maybe(def.position, b2Vec2.ZERO));\r\n        this.m_velocityBuffer.data[index] = (this.m_velocityBuffer.data[index] || new b2Vec2()).Copy(b2Maybe(def.velocity, b2Vec2.ZERO));\r\n        this.m_weightBuffer[index] = 0;\r\n        this.m_forceBuffer[index] = (this.m_forceBuffer[index] || new b2Vec2()).SetZero();\r\n        if (this.m_staticPressureBuffer) {\r\n            this.m_staticPressureBuffer[index] = 0;\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            this.m_depthBuffer[index] = 0;\r\n        }\r\n        const color = new b2Color().Copy(b2Maybe(def.color, b2Color.ZERO));\r\n        if (this.m_colorBuffer.data || !color.IsZero()) {\r\n            this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n            this.m_colorBuffer.data[index] = (this.m_colorBuffer.data[index] || new b2Color()).Copy(color);\r\n        }\r\n        if (this.m_userDataBuffer.data || def.userData) {\r\n            this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\r\n            this.m_userDataBuffer.data[index] = def.userData;\r\n        }\r\n        if (this.m_handleIndexBuffer.data) {\r\n            this.m_handleIndexBuffer.data[index] = null;\r\n        }\r\n        ///Proxy& proxy = m_proxyBuffer.Append();\r\n        const proxy = this.m_proxyBuffer.data[this.m_proxyBuffer.Append()];\r\n        // If particle lifetimes are enabled or the lifetime is set in the particle\r\n        // definition, initialize the lifetime.\r\n        const lifetime = b2Maybe(def.lifetime, 0.0);\r\n        const finiteLifetime = lifetime > 0.0;\r\n        if (this.m_expirationTimeBuffer.data || finiteLifetime) {\r\n            this.SetParticleLifetime(index, finiteLifetime ? lifetime :\r\n                this.ExpirationTimeToLifetime(-this.GetQuantizedTimeElapsed()));\r\n            // Add a reference to the newly added particle to the end of the\r\n            // queue.\r\n            if (!this.m_indexByExpirationTimeBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            this.m_indexByExpirationTimeBuffer.data[index] = index;\r\n        }\r\n        proxy.index = index;\r\n        const group = b2Maybe(def.group, null);\r\n        this.m_groupBuffer[index] = group;\r\n        if (group) {\r\n            if (group.m_firstIndex < group.m_lastIndex) {\r\n                // Move particles in the group just before the new particle.\r\n                this.RotateBuffer(group.m_firstIndex, group.m_lastIndex, index);\r\n                // DEBUG: b2Assert(group.m_lastIndex === index);\r\n                // Update the index range of the group to contain the new particle.\r\n                group.m_lastIndex = index + 1;\r\n            }\r\n            else {\r\n                // If the group is empty, reset the index range to contain only the\r\n                // new particle.\r\n                group.m_firstIndex = index;\r\n                group.m_lastIndex = index + 1;\r\n            }\r\n        }\r\n        this.SetParticleFlags(index, b2Maybe(def.flags, 0));\r\n        return index;\r\n    }\r\n    /**\r\n     * Retrieve a handle to the particle at the specified index.\r\n     *\r\n     * Please see #b2ParticleHandle for why you might want a handle.\r\n     */\r\n    GetParticleHandleFromIndex(index) {\r\n        // DEBUG: b2Assert(index >= 0 && index < this.GetParticleCount() && index !== b2_invalidParticleIndex);\r\n        this.m_handleIndexBuffer.data = this.RequestBuffer(this.m_handleIndexBuffer.data);\r\n        let handle = this.m_handleIndexBuffer.data[index];\r\n        if (handle) {\r\n            return handle;\r\n        }\r\n        // Create a handle.\r\n        ///handle = m_handleAllocator.Allocate();\r\n        handle = new b2ParticleHandle();\r\n        // DEBUG: b2Assert(handle !== null);\r\n        handle.SetIndex(index);\r\n        this.m_handleIndexBuffer.data[index] = handle;\r\n        return handle;\r\n    }\r\n    /**\r\n     * Destroy a particle.\r\n     *\r\n     * The particle is removed after the next simulation step (see\r\n     * b2World::Step()).\r\n     *\r\n     * @param index Index of the particle to destroy.\r\n     * @param callDestructionListener Whether to call the\r\n     *      destruction listener just before the particle is\r\n     *      destroyed.\r\n     */\r\n    DestroyParticle(index, callDestructionListener = false) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        let flags = b2ParticleFlag.b2_zombieParticle;\r\n        if (callDestructionListener) {\r\n            flags |= b2ParticleFlag.b2_destructionListenerParticle;\r\n        }\r\n        this.SetParticleFlags(index, this.m_flagsBuffer.data[index] | flags);\r\n    }\r\n    /**\r\n     * Destroy the Nth oldest particle in the system.\r\n     *\r\n     * The particle is removed after the next b2World::Step().\r\n     *\r\n     * @param index Index of the Nth oldest particle to\r\n     *      destroy, 0 will destroy the oldest particle in the\r\n     *      system, 1 will destroy the next oldest particle etc.\r\n     * @param callDestructionListener Whether to call the\r\n     *      destruction listener just before the particle is\r\n     *      destroyed.\r\n     */\r\n    DestroyOldestParticle(index, callDestructionListener = false) {\r\n        const particleCount = this.GetParticleCount();\r\n        // DEBUG: b2Assert(index >= 0 && index < particleCount);\r\n        // Make sure particle lifetime tracking is enabled.\r\n        // DEBUG: b2Assert(this.m_indexByExpirationTimeBuffer.data !== null);\r\n        if (!this.m_indexByExpirationTimeBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_expirationTimeBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        // Destroy the oldest particle (preferring to destroy finite\r\n        // lifetime particles first) to free a slot in the buffer.\r\n        const oldestFiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[particleCount - (index + 1)];\r\n        const oldestInfiniteLifetimeParticle = this.m_indexByExpirationTimeBuffer.data[index];\r\n        this.DestroyParticle(this.m_expirationTimeBuffer.data[oldestFiniteLifetimeParticle] > 0.0 ?\r\n            oldestFiniteLifetimeParticle : oldestInfiniteLifetimeParticle, callDestructionListener);\r\n    }\r\n    /**\r\n     * Destroy particles inside a shape.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * In addition, this function immediately destroys particles in\r\n     * the shape in constrast to DestroyParticle() which defers the\r\n     * destruction until the next simulation step.\r\n     *\r\n     * @return Number of particles destroyed.\r\n     * @param shape Shape which encloses particles\r\n     *      that should be destroyed.\r\n     * @param xf Transform applied to the shape.\r\n     * @param callDestructionListener Whether to call the\r\n     *      world b2DestructionListener for each particle\r\n     *      destroyed.\r\n     */\r\n    DestroyParticlesInShape(shape, xf, callDestructionListener = false) {\r\n        const s_aabb = b2ParticleSystem.DestroyParticlesInShape_s_aabb;\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const callback = new b2ParticleSystem.DestroyParticlesInShapeCallback(this, shape, xf, callDestructionListener);\r\n        const aabb = s_aabb;\r\n        shape.ComputeAABB(aabb, xf, 0);\r\n        this.m_world.QueryAABB(callback, aabb);\r\n        return callback.Destroyed();\r\n    }\r\n    /**\r\n     * Create a particle group whose properties have been defined.\r\n     *\r\n     * No reference to the definition is retained.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     */\r\n    CreateParticleGroup(groupDef) {\r\n        const s_transform = b2ParticleSystem.CreateParticleGroup_s_transform;\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const transform = s_transform;\r\n        transform.SetPositionAngle(b2Maybe(groupDef.position, b2Vec2.ZERO), b2Maybe(groupDef.angle, 0));\r\n        const firstIndex = this.m_count;\r\n        if (groupDef.shape) {\r\n            this.CreateParticlesWithShapeForGroup(groupDef.shape, groupDef, transform);\r\n        }\r\n        if (groupDef.shapes) {\r\n            this.CreateParticlesWithShapesForGroup(groupDef.shapes, b2Maybe(groupDef.shapeCount, groupDef.shapes.length), groupDef, transform);\r\n        }\r\n        if (groupDef.positionData) {\r\n            const count = b2Maybe(groupDef.particleCount, groupDef.positionData.length);\r\n            for (let i = 0; i < count; i++) {\r\n                const p = groupDef.positionData[i];\r\n                this.CreateParticleForGroup(groupDef, transform, p);\r\n            }\r\n        }\r\n        const lastIndex = this.m_count;\r\n        let group = new b2ParticleGroup(this);\r\n        group.m_firstIndex = firstIndex;\r\n        group.m_lastIndex = lastIndex;\r\n        group.m_strength = b2Maybe(groupDef.strength, 1);\r\n        group.m_userData = groupDef.userData;\r\n        group.m_transform.Copy(transform);\r\n        group.m_prev = null;\r\n        group.m_next = this.m_groupList;\r\n        if (this.m_groupList) {\r\n            this.m_groupList.m_prev = group;\r\n        }\r\n        this.m_groupList = group;\r\n        ++this.m_groupCount;\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            this.m_groupBuffer[i] = group;\r\n        }\r\n        this.SetGroupFlags(group, b2Maybe(groupDef.groupFlags, 0));\r\n        // Create pairs and triads between particles in the group.\r\n        const filter = new b2ParticleSystem.ConnectionFilter();\r\n        this.UpdateContacts(true);\r\n        this.UpdatePairsAndTriads(firstIndex, lastIndex, filter);\r\n        if (groupDef.group) {\r\n            this.JoinParticleGroups(groupDef.group, group);\r\n            group = groupDef.group;\r\n        }\r\n        return group;\r\n    }\r\n    /**\r\n     * Join two particle groups.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * @param groupA the first group. Expands to encompass the second group.\r\n     * @param groupB the second group. It is destroyed.\r\n     */\r\n    JoinParticleGroups(groupA, groupB) {\r\n        if (this.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        // DEBUG: b2Assert(groupA !== groupB);\r\n        this.RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, this.m_count);\r\n        // DEBUG: b2Assert(groupB.m_lastIndex === this.m_count);\r\n        this.RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex);\r\n        // DEBUG: b2Assert(groupA.m_lastIndex === groupB.m_firstIndex);\r\n        // Create pairs and triads connecting groupA and groupB.\r\n        const filter = new b2ParticleSystem.JoinParticleGroupsFilter(groupB.m_firstIndex);\r\n        this.UpdateContacts(true);\r\n        this.UpdatePairsAndTriads(groupA.m_firstIndex, groupB.m_lastIndex, filter);\r\n        for (let i = groupB.m_firstIndex; i < groupB.m_lastIndex; i++) {\r\n            this.m_groupBuffer[i] = groupA;\r\n        }\r\n        const groupFlags = groupA.m_groupFlags | groupB.m_groupFlags;\r\n        this.SetGroupFlags(groupA, groupFlags);\r\n        groupA.m_lastIndex = groupB.m_lastIndex;\r\n        groupB.m_firstIndex = groupB.m_lastIndex;\r\n        this.DestroyParticleGroup(groupB);\r\n    }\r\n    /**\r\n     * Split particle group into multiple disconnected groups.\r\n     *\r\n     * warning: This function is locked during callbacks.\r\n     *\r\n     * @param group the group to be split.\r\n     */\r\n    SplitParticleGroup(group) {\r\n        this.UpdateContacts(true);\r\n        const particleCount = group.GetParticleCount();\r\n        // We create several linked lists. Each list represents a set of connected particles.\r\n        ///ParticleListNode* nodeBuffer = (ParticleListNode*) m_world.m_stackAllocator.Allocate(sizeof(ParticleListNode) * particleCount);\r\n        const nodeBuffer = b2MakeArray(particleCount, (index) => new b2ParticleSystem.ParticleListNode());\r\n        b2ParticleSystem.InitializeParticleLists(group, nodeBuffer);\r\n        this.MergeParticleListsInContact(group, nodeBuffer);\r\n        const survivingList = b2ParticleSystem.FindLongestParticleList(group, nodeBuffer);\r\n        this.MergeZombieParticleListNodes(group, nodeBuffer, survivingList);\r\n        this.CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList);\r\n        this.UpdatePairsAndTriadsWithParticleList(group, nodeBuffer);\r\n        ///this.m_world.m_stackAllocator.Free(nodeBuffer);\r\n    }\r\n    /**\r\n     * Get the world particle group list. With the returned group,\r\n     * use b2ParticleGroup::GetNext to get the next group in the\r\n     * world list.\r\n     *\r\n     * A null group indicates the end of the list.\r\n     *\r\n     * @return the head of the world particle group list.\r\n     */\r\n    GetParticleGroupList() {\r\n        return this.m_groupList;\r\n    }\r\n    /**\r\n     * Get the number of particle groups.\r\n     */\r\n    GetParticleGroupCount() {\r\n        return this.m_groupCount;\r\n    }\r\n    /**\r\n     * Get the number of particles.\r\n     */\r\n    GetParticleCount() {\r\n        return this.m_count;\r\n    }\r\n    /**\r\n     * Get the maximum number of particles.\r\n     */\r\n    GetMaxParticleCount() {\r\n        return this.m_def.maxCount;\r\n    }\r\n    /**\r\n     * Set the maximum number of particles.\r\n     *\r\n     * A value of 0 means there is no maximum. The particle buffers\r\n     * can continue to grow while b2World's block allocator still\r\n     * has memory.\r\n     *\r\n     * Note: If you try to CreateParticle() with more than this\r\n     * count, b2_invalidParticleIndex is returned unless\r\n     * SetDestructionByAge() is used to enable the destruction of\r\n     * the oldest particles in the system.\r\n     */\r\n    SetMaxParticleCount(count) {\r\n        // DEBUG: b2Assert(this.m_count <= count);\r\n        this.m_def.maxCount = count;\r\n    }\r\n    /**\r\n     * Get all existing particle flags.\r\n     */\r\n    GetAllParticleFlags() {\r\n        return this.m_allParticleFlags;\r\n    }\r\n    /**\r\n     * Get all existing particle group flags.\r\n     */\r\n    GetAllGroupFlags() {\r\n        return this.m_allGroupFlags;\r\n    }\r\n    /**\r\n     * Pause or unpause the particle system. When paused,\r\n     * b2World::Step() skips over this particle system. All\r\n     * b2ParticleSystem function calls still work.\r\n     *\r\n     * @param paused paused is true to pause, false to un-pause.\r\n     */\r\n    SetPaused(paused) {\r\n        this.m_paused = paused;\r\n    }\r\n    /**\r\n     * Initially, true, then, the last value passed into\r\n     * SetPaused().\r\n     *\r\n     * @return true if the particle system is being updated in b2World::Step().\r\n     */\r\n    GetPaused() {\r\n        return this.m_paused;\r\n    }\r\n    /**\r\n     * Change the particle density.\r\n     *\r\n     * Particle density affects the mass of the particles, which in\r\n     * turn affects how the particles interact with b2Bodies. Note\r\n     * that the density does not affect how the particles interact\r\n     * with each other.\r\n     */\r\n    SetDensity(density) {\r\n        this.m_def.density = density;\r\n        this.m_inverseDensity = 1 / this.m_def.density;\r\n    }\r\n    /**\r\n     * Get the particle density.\r\n     */\r\n    GetDensity() {\r\n        return this.m_def.density;\r\n    }\r\n    /**\r\n     * Change the particle gravity scale. Adjusts the effect of the\r\n     * global gravity vector on particles.\r\n     */\r\n    SetGravityScale(gravityScale) {\r\n        this.m_def.gravityScale = gravityScale;\r\n    }\r\n    /**\r\n     * Get the particle gravity scale.\r\n     */\r\n    GetGravityScale() {\r\n        return this.m_def.gravityScale;\r\n    }\r\n    /**\r\n     * Damping is used to reduce the velocity of particles. The\r\n     * damping parameter can be larger than 1.0f but the damping\r\n     * effect becomes sensitive to the time step when the damping\r\n     * parameter is large.\r\n     */\r\n    SetDamping(damping) {\r\n        this.m_def.dampingStrength = damping;\r\n    }\r\n    /**\r\n     * Get damping for particles\r\n     */\r\n    GetDamping() {\r\n        return this.m_def.dampingStrength;\r\n    }\r\n    /**\r\n     * Change the number of iterations when calculating the static\r\n     * pressure of particles. By default, 8 iterations. You can\r\n     * reduce the number of iterations down to 1 in some situations,\r\n     * but this may cause instabilities when many particles come\r\n     * together. If you see particles popping away from each other\r\n     * like popcorn, you may have to increase the number of\r\n     * iterations.\r\n     *\r\n     * For a description of static pressure, see\r\n     * http://en.wikipedia.org/wiki/Static_pressure#Static_pressure_in_fluid_dynamics\r\n     */\r\n    SetStaticPressureIterations(iterations) {\r\n        this.m_def.staticPressureIterations = iterations;\r\n    }\r\n    /**\r\n     * Get the number of iterations for static pressure of\r\n     * particles.\r\n     */\r\n    GetStaticPressureIterations() {\r\n        return this.m_def.staticPressureIterations;\r\n    }\r\n    /**\r\n     * Change the particle radius.\r\n     *\r\n     * You should set this only once, on world start.\r\n     * If you change the radius during execution, existing particles\r\n     * may explode, shrink, or behave unexpectedly.\r\n     */\r\n    SetRadius(radius) {\r\n        this.m_particleDiameter = 2 * radius;\r\n        this.m_squaredDiameter = this.m_particleDiameter * this.m_particleDiameter;\r\n        this.m_inverseDiameter = 1 / this.m_particleDiameter;\r\n    }\r\n    /**\r\n     * Get the particle radius.\r\n     */\r\n    GetRadius() {\r\n        return this.m_particleDiameter / 2;\r\n    }\r\n    /**\r\n     * Get the position of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle positions array.\r\n     */\r\n    GetPositionBuffer() {\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        return this.m_positionBuffer.data;\r\n    }\r\n    /**\r\n     * Get the velocity of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle velocities array.\r\n     */\r\n    GetVelocityBuffer() {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        return this.m_velocityBuffer.data;\r\n    }\r\n    /**\r\n     * Get the color of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle colors array.\r\n     */\r\n    GetColorBuffer() {\r\n        this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n        return this.m_colorBuffer.data;\r\n    }\r\n    /**\r\n     * Get the particle-group of each particle.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle group array.\r\n     */\r\n    GetGroupBuffer() {\r\n        return this.m_groupBuffer;\r\n    }\r\n    /**\r\n     * Get the weight of each particle\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle positions array.\r\n     */\r\n    GetWeightBuffer() {\r\n        return this.m_weightBuffer;\r\n    }\r\n    /**\r\n     * Get the user-specified data of each particle.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle user-data array.\r\n     */\r\n    GetUserDataBuffer() {\r\n        this.m_userDataBuffer.data = this.RequestBuffer(this.m_userDataBuffer.data);\r\n        return this.m_userDataBuffer.data;\r\n    }\r\n    /**\r\n     * Get the flags for each particle. See the b2ParticleFlag enum.\r\n     *\r\n     * Array is length GetParticleCount()\r\n     *\r\n     * @return the pointer to the head of the particle-flags array.\r\n     */\r\n    GetFlagsBuffer() {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        return this.m_flagsBuffer.data;\r\n    }\r\n    /**\r\n     * Set flags for a particle. See the b2ParticleFlag enum.\r\n     */\r\n    SetParticleFlags(index, newFlags) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const oldFlags = this.m_flagsBuffer.data[index];\r\n        if (oldFlags & ~newFlags) {\r\n            // If any flags might be removed\r\n            this.m_needsUpdateAllParticleFlags = true;\r\n        }\r\n        if (~this.m_allParticleFlags & newFlags) {\r\n            // If any flags were added\r\n            if (newFlags & b2ParticleFlag.b2_tensileParticle) {\r\n                this.m_accumulation2Buffer = this.RequestBuffer(this.m_accumulation2Buffer);\r\n            }\r\n            if (newFlags & b2ParticleFlag.b2_colorMixingParticle) {\r\n                this.m_colorBuffer.data = this.RequestBuffer(this.m_colorBuffer.data);\r\n            }\r\n            this.m_allParticleFlags |= newFlags;\r\n        }\r\n        this.m_flagsBuffer.data[index] = newFlags;\r\n    }\r\n    /**\r\n     * Get flags for a particle. See the b2ParticleFlag enum.\r\n     */\r\n    GetParticleFlags(index) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        return this.m_flagsBuffer.data[index];\r\n    }\r\n    /**\r\n     * Set an external buffer for particle data.\r\n     *\r\n     * Normally, the b2World's block allocator is used for particle\r\n     * data. However, sometimes you may have an OpenGL or Java\r\n     * buffer for particle data. To avoid data duplication, you may\r\n     * supply this external buffer.\r\n     *\r\n     * Note that, when b2World's block allocator is used, the\r\n     * particle data buffers can grow as required. However, when\r\n     * external buffers are used, the maximum number of particles is\r\n     * clamped to the size of the smallest external buffer.\r\n     *\r\n     * @param buffer a pointer to a block of memory.\r\n     * @param capacity the number of values in the block.\r\n     */\r\n    SetFlagsBuffer(buffer, capacity) {\r\n        this.SetUserOverridableBuffer(this.m_flagsBuffer, buffer, capacity);\r\n    }\r\n    SetPositionBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Float32Array) {\r\n        ///let array = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Vec2(buffer.subarray(i * 2, i * 2 + 2));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_positionBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_positionBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetVelocityBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Float32Array) {\r\n        ///let array = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Vec2(buffer.subarray(i * 2, i * 2 + 2));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_velocityBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_velocityBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetColorBuffer(buffer, capacity) {\r\n        ///if (buffer instanceof Uint8Array) {\r\n        ///let array: b2Color[] = [];\r\n        ///for (let i = 0; i < capacity; ++i) {\r\n        ///  array[i] = new b2Color(buffer.subarray(i * 4, i * 4 + 4));\r\n        ///}\r\n        ///this.SetUserOverridableBuffer(this.m_colorBuffer, array, capacity);\r\n        ///} else {\r\n        this.SetUserOverridableBuffer(this.m_colorBuffer, buffer, capacity);\r\n        ///}\r\n    }\r\n    SetUserDataBuffer(buffer, capacity) {\r\n        this.SetUserOverridableBuffer(this.m_userDataBuffer, buffer, capacity);\r\n    }\r\n    /**\r\n     * Get contacts between particles\r\n     * Contact data can be used for many reasons, for example to\r\n     * trigger rendering or audio effects.\r\n     */\r\n    GetContacts() {\r\n        return this.m_contactBuffer.data;\r\n    }\r\n    GetContactCount() {\r\n        return this.m_contactBuffer.count;\r\n    }\r\n    /**\r\n     * Get contacts between particles and bodies\r\n     *\r\n     * Contact data can be used for many reasons, for example to\r\n     * trigger rendering or audio effects.\r\n     */\r\n    GetBodyContacts() {\r\n        return this.m_bodyContactBuffer.data;\r\n    }\r\n    GetBodyContactCount() {\r\n        return this.m_bodyContactBuffer.count;\r\n    }\r\n    /**\r\n     * Get array of particle pairs. The particles in a pair:\r\n     *   (1) are contacting,\r\n     *   (2) are in the same particle group,\r\n     *   (3) are part of a rigid particle group, or are spring, elastic,\r\n     *       or wall particles.\r\n     *   (4) have at least one particle that is a spring or barrier\r\n     *       particle (i.e. one of the types in k_pairFlags),\r\n     *   (5) have at least one particle that returns true for\r\n     *       ConnectionFilter::IsNecessary,\r\n     *   (6) are not zombie particles.\r\n     *\r\n     * Essentially, this is an array of spring or barrier particles\r\n     * that are interacting. The array is sorted by b2ParticlePair's\r\n     * indexA, and then indexB. There are no duplicate entries.\r\n     */\r\n    GetPairs() {\r\n        return this.m_pairBuffer.data;\r\n    }\r\n    GetPairCount() {\r\n        return this.m_pairBuffer.count;\r\n    }\r\n    /**\r\n     * Get array of particle triads. The particles in a triad:\r\n     *   (1) are in the same particle group,\r\n     *   (2) are in a Voronoi triangle together,\r\n     *   (3) are within b2_maxTriadDistance particle diameters of each\r\n     *       other,\r\n     *   (4) return true for ConnectionFilter::ShouldCreateTriad\r\n     *   (5) have at least one particle of type elastic (i.e. one of the\r\n     *       types in k_triadFlags),\r\n     *   (6) are part of a rigid particle group, or are spring, elastic,\r\n     *       or wall particles.\r\n     *   (7) are not zombie particles.\r\n     *\r\n     * Essentially, this is an array of elastic particles that are\r\n     * interacting. The array is sorted by b2ParticleTriad's indexA,\r\n     * then indexB, then indexC. There are no duplicate entries.\r\n     */\r\n    GetTriads() {\r\n        return this.m_triadBuffer.data;\r\n    }\r\n    GetTriadCount() {\r\n        return this.m_triadBuffer.count;\r\n    }\r\n    /**\r\n     * Set an optional threshold for the maximum number of\r\n     * consecutive particle iterations that a particle may contact\r\n     * multiple bodies before it is considered a candidate for being\r\n     * \"stuck\". Setting to zero or less disables.\r\n     */\r\n    SetStuckThreshold(steps) {\r\n        this.m_stuckThreshold = steps;\r\n        if (steps > 0) {\r\n            this.m_lastBodyContactStepBuffer.data = this.RequestBuffer(this.m_lastBodyContactStepBuffer.data);\r\n            this.m_bodyContactCountBuffer.data = this.RequestBuffer(this.m_bodyContactCountBuffer.data);\r\n            this.m_consecutiveContactStepsBuffer.data = this.RequestBuffer(this.m_consecutiveContactStepsBuffer.data);\r\n        }\r\n    }\r\n    /**\r\n     * Get potentially stuck particles from the last step; the user\r\n     * must decide if they are stuck or not, and if so, delete or\r\n     * move them\r\n     */\r\n    GetStuckCandidates() {\r\n        ///return m_stuckParticleBuffer.Data();\r\n        return this.m_stuckParticleBuffer.Data();\r\n    }\r\n    /**\r\n     * Get the number of stuck particle candidates from the last\r\n     * step.\r\n     */\r\n    GetStuckCandidateCount() {\r\n        ///return m_stuckParticleBuffer.GetCount();\r\n        return this.m_stuckParticleBuffer.GetCount();\r\n    }\r\n    /**\r\n     * Compute the kinetic energy that can be lost by damping force\r\n     */\r\n    ComputeCollisionEnergy() {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const s_v = b2ParticleSystem.ComputeCollisionEnergy_s_v;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        let sum_v2 = 0;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const n = contact.normal;\r\n            ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n            const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n            const vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                sum_v2 += vn * vn;\r\n            }\r\n        }\r\n        return 0.5 * this.GetParticleMass() * sum_v2;\r\n    }\r\n    /**\r\n     * Set strict Particle/Body contact check.\r\n     *\r\n     * This is an option that will help ensure correct behavior if\r\n     * there are corners in the world model where Particle/Body\r\n     * contact is ambiguous. This option scales at n*log(n) of the\r\n     * number of Particle/Body contacts, so it is best to only\r\n     * enable if it is necessary for your geometry. Enable if you\r\n     * see strange particle behavior around b2Body intersections.\r\n     */\r\n    SetStrictContactCheck(enabled) {\r\n        this.m_def.strictContactCheck = enabled;\r\n    }\r\n    /**\r\n     * Get the status of the strict contact check.\r\n     */\r\n    GetStrictContactCheck() {\r\n        return this.m_def.strictContactCheck;\r\n    }\r\n    /**\r\n     * Set the lifetime (in seconds) of a particle relative to the\r\n     * current time.  A lifetime of less than or equal to 0.0f\r\n     * results in the particle living forever until it's manually\r\n     * destroyed by the application.\r\n     */\r\n    SetParticleLifetime(index, lifetime) {\r\n        // DEBUG: b2Assert(this.ValidateParticleIndex(index));\r\n        const initializeExpirationTimes = this.m_indexByExpirationTimeBuffer.data === null;\r\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\r\n        this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\r\n        // Initialize the inverse mapping buffer.\r\n        if (initializeExpirationTimes) {\r\n            const particleCount = this.GetParticleCount();\r\n            for (let i = 0; i < particleCount; ++i) {\r\n                this.m_indexByExpirationTimeBuffer.data[i] = i;\r\n            }\r\n        }\r\n        ///const int32 quantizedLifetime = (int32)(lifetime / m_def.lifetimeGranularity);\r\n        const quantizedLifetime = lifetime / this.m_def.lifetimeGranularity;\r\n        // Use a negative lifetime so that it's possible to track which\r\n        // of the infinite lifetime particles are older.\r\n        const newExpirationTime = quantizedLifetime > 0.0 ? this.GetQuantizedTimeElapsed() + quantizedLifetime : quantizedLifetime;\r\n        if (newExpirationTime !== this.m_expirationTimeBuffer.data[index]) {\r\n            this.m_expirationTimeBuffer.data[index] = newExpirationTime;\r\n            this.m_expirationTimeBufferRequiresSorting = true;\r\n        }\r\n    }\r\n    /**\r\n     * Get the lifetime (in seconds) of a particle relative to the\r\n     * current time.  A value > 0.0f is returned if the particle is\r\n     * scheduled to be destroyed in the future, values <= 0.0f\r\n     * indicate the particle has an infinite lifetime.\r\n     */\r\n    GetParticleLifetime(index) {\r\n        // DEBUG: b2Assert(this.ValidateParticleIndex(index));\r\n        return this.ExpirationTimeToLifetime(this.GetExpirationTimeBuffer()[index]);\r\n    }\r\n    /**\r\n     * Enable / disable destruction of particles in CreateParticle()\r\n     * when no more particles can be created due to a prior call to\r\n     * SetMaxParticleCount().  When this is enabled, the oldest\r\n     * particle is destroyed in CreateParticle() favoring the\r\n     * destruction of particles with a finite lifetime over\r\n     * particles with infinite lifetimes. This feature is enabled by\r\n     * default when particle lifetimes are tracked.  Explicitly\r\n     * enabling this feature using this function enables particle\r\n     * lifetime tracking.\r\n     */\r\n    SetDestructionByAge(enable) {\r\n        if (enable) {\r\n            this.GetExpirationTimeBuffer();\r\n        }\r\n        this.m_def.destroyByAge = enable;\r\n    }\r\n    /**\r\n     * Get whether the oldest particle will be destroyed in\r\n     * CreateParticle() when the maximum number of particles are\r\n     * present in the system.\r\n     */\r\n    GetDestructionByAge() {\r\n        return this.m_def.destroyByAge;\r\n    }\r\n    /**\r\n     * Get the array of particle expiration times indexed by\r\n     * particle index.\r\n     *\r\n     * GetParticleCount() items are in the returned array.\r\n     */\r\n    GetExpirationTimeBuffer() {\r\n        this.m_expirationTimeBuffer.data = this.RequestBuffer(this.m_expirationTimeBuffer.data);\r\n        return this.m_expirationTimeBuffer.data;\r\n    }\r\n    /**\r\n     * Convert a expiration time value in returned by\r\n     * GetExpirationTimeBuffer() to a time in seconds relative to\r\n     * the current simulation time.\r\n     */\r\n    ExpirationTimeToLifetime(expirationTime) {\r\n        return (expirationTime > 0 ?\r\n            expirationTime - this.GetQuantizedTimeElapsed() :\r\n            expirationTime) * this.m_def.lifetimeGranularity;\r\n    }\r\n    /**\r\n     * Get the array of particle indices ordered by reverse\r\n     * lifetime. The oldest particle indexes are at the end of the\r\n     * array with the newest at the start.  Particles with infinite\r\n     * lifetimes (i.e expiration times less than or equal to 0) are\r\n     * placed at the start of the array.\r\n     * ExpirationTimeToLifetime(GetExpirationTimeBuffer()[index]) is\r\n     * equivalent to GetParticleLifetime(index).\r\n     *\r\n     * GetParticleCount() items are in the returned array.\r\n     */\r\n    GetIndexByExpirationTimeBuffer() {\r\n        // If particles are present, initialize / reinitialize the lifetime buffer.\r\n        if (this.GetParticleCount()) {\r\n            this.SetParticleLifetime(0, this.GetParticleLifetime(0));\r\n        }\r\n        else {\r\n            this.m_indexByExpirationTimeBuffer.data = this.RequestBuffer(this.m_indexByExpirationTimeBuffer.data);\r\n        }\r\n        if (!this.m_indexByExpirationTimeBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        return this.m_indexByExpirationTimeBuffer.data;\r\n    }\r\n    /**\r\n     * Apply an impulse to one particle. This immediately modifies\r\n     * the velocity. Similar to b2Body::ApplyLinearImpulse.\r\n     *\r\n     * @param index the particle that will be modified.\r\n     * @param impulse impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n     */\r\n    ParticleApplyLinearImpulse(index, impulse) {\r\n        this.ApplyLinearImpulse(index, index + 1, impulse);\r\n    }\r\n    /**\r\n     * Apply an impulse to all particles between 'firstIndex' and\r\n     * 'lastIndex'. This immediately modifies the velocity. Note\r\n     * that the impulse is applied to the total mass of all\r\n     * particles. So, calling ParticleApplyLinearImpulse(0, impulse)\r\n     * and ParticleApplyLinearImpulse(1, impulse) will impart twice\r\n     * as much velocity as calling just ApplyLinearImpulse(0, 1,\r\n     * impulse).\r\n     *\r\n     * @param firstIndex the first particle to be modified.\r\n     * @param lastIndex the last particle to be modified.\r\n     * @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\r\n     */\r\n    ApplyLinearImpulse(firstIndex, lastIndex, impulse) {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const numParticles = (lastIndex - firstIndex);\r\n        const totalMass = numParticles * this.GetParticleMass();\r\n        ///const b2Vec2 velocityDelta = impulse / totalMass;\r\n        const velocityDelta = new b2Vec2().Copy(impulse).SelfMul(1 / totalMass);\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            ///m_velocityBuffer.data[i] += velocityDelta;\r\n            vel_data[i].SelfAdd(velocityDelta);\r\n        }\r\n    }\r\n    static IsSignificantForce(force) {\r\n        return force.x !== 0 || force.y !== 0;\r\n    }\r\n    /**\r\n     * Apply a force to the center of a particle.\r\n     *\r\n     * @param index the particle that will be modified.\r\n     * @param force the world force vector, usually in Newtons (N).\r\n     */\r\n    ParticleApplyForce(index, force) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (b2ParticleSystem.IsSignificantForce(force) &&\r\n            this.ForceCanBeApplied(this.m_flagsBuffer.data[index])) {\r\n            this.PrepareForceBuffer();\r\n            ///m_forceBuffer[index] += force;\r\n            this.m_forceBuffer[index].SelfAdd(force);\r\n        }\r\n    }\r\n    /**\r\n     * Distribute a force across several particles. The particles\r\n     * must not be wall particles. Note that the force is\r\n     * distributed across all the particles, so calling this\r\n     * function for indices 0..N is not the same as calling\r\n     * ParticleApplyForce(i, force) for i in 0..N.\r\n     *\r\n     * @param firstIndex the first particle to be modified.\r\n     * @param lastIndex the last particle to be modified.\r\n     * @param force the world force vector, usually in Newtons (N).\r\n     */\r\n    ApplyForce(firstIndex, lastIndex, force) {\r\n        // Ensure we're not trying to apply force to particles that can't move,\r\n        // such as wall particles.\r\n        // DEBUG: if (!this.m_flagsBuffer.data) { throw new Error(); }\r\n        // DEBUG: let flags = 0;\r\n        // DEBUG: for (let i = firstIndex; i < lastIndex; i++) {\r\n        // DEBUG:   flags |= this.m_flagsBuffer.data[i];\r\n        // DEBUG: }\r\n        // DEBUG: b2Assert(this.ForceCanBeApplied(flags));\r\n        // Early out if force does nothing (optimization).\r\n        ///const b2Vec2 distributedForce = force / (float32)(lastIndex - firstIndex);\r\n        const distributedForce = new b2Vec2().Copy(force).SelfMul(1 / (lastIndex - firstIndex));\r\n        if (b2ParticleSystem.IsSignificantForce(distributedForce)) {\r\n            this.PrepareForceBuffer();\r\n            // Distribute the force over all the particles.\r\n            for (let i = firstIndex; i < lastIndex; i++) {\r\n                ///m_forceBuffer[i] += distributedForce;\r\n                this.m_forceBuffer[i].SelfAdd(distributedForce);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get the next particle-system in the world's particle-system\r\n     * list.\r\n     */\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /**\r\n     * Query the particle system for all particles that potentially\r\n     * overlap the provided AABB.\r\n     * b2QueryCallback::ShouldQueryParticleSystem is ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param aabb the query box.\r\n     */\r\n    QueryAABB(callback, aabb) {\r\n        if (this.m_proxyBuffer.count === 0) {\r\n            return;\r\n        }\r\n        const beginProxy = 0;\r\n        const endProxy = this.m_proxyBuffer.count;\r\n        const firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x, this.m_inverseDiameter * aabb.lowerBound.y), b2ParticleSystem.Proxy.CompareProxyTag);\r\n        const lastProxy = std_upper_bound(this.m_proxyBuffer.data, firstProxy, endProxy, b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x, this.m_inverseDiameter * aabb.upperBound.y), b2ParticleSystem.Proxy.CompareTagProxy);\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        for (let k = firstProxy; k < lastProxy; ++k) {\r\n            const proxy = this.m_proxyBuffer.data[k];\r\n            const i = proxy.index;\r\n            const p = pos_data[i];\r\n            if (aabb.lowerBound.x < p.x && p.x < aabb.upperBound.x &&\r\n                aabb.lowerBound.y < p.y && p.y < aabb.upperBound.y) {\r\n                if (!callback.ReportParticle(this, i)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Query the particle system for all particles that potentially\r\n     * overlap the provided shape's AABB. Calls QueryAABB\r\n     * internally. b2QueryCallback::ShouldQueryParticleSystem is\r\n     * ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param shape the query shape\r\n     * @param xf the transform of the AABB\r\n     * @param childIndex\r\n     */\r\n    QueryShapeAABB(callback, shape, xf, childIndex = 0) {\r\n        const s_aabb = b2ParticleSystem.QueryShapeAABB_s_aabb;\r\n        const aabb = s_aabb;\r\n        shape.ComputeAABB(aabb, xf, childIndex);\r\n        this.QueryAABB(callback, aabb);\r\n    }\r\n    QueryPointAABB(callback, point, slop = b2_linearSlop) {\r\n        const s_aabb = b2ParticleSystem.QueryPointAABB_s_aabb;\r\n        const aabb = s_aabb;\r\n        aabb.lowerBound.Set(point.x - slop, point.y - slop);\r\n        aabb.upperBound.Set(point.x + slop, point.y + slop);\r\n        this.QueryAABB(callback, aabb);\r\n    }\r\n    /**\r\n     * Ray-cast the particle system for all particles in the path of\r\n     * the ray. Your callback controls whether you get the closest\r\n     * point, any point, or n-points. The ray-cast ignores particles\r\n     * that contain the starting point.\r\n     * b2RayCastCallback::ShouldQueryParticleSystem is ignored.\r\n     *\r\n     * @param callback a user implemented callback class.\r\n     * @param point1 the ray starting point\r\n     * @param point2 the ray ending point\r\n     */\r\n    RayCast(callback, point1, point2) {\r\n        const s_aabb = b2ParticleSystem.RayCast_s_aabb;\r\n        const s_p = b2ParticleSystem.RayCast_s_p;\r\n        const s_v = b2ParticleSystem.RayCast_s_v;\r\n        const s_n = b2ParticleSystem.RayCast_s_n;\r\n        const s_point = b2ParticleSystem.RayCast_s_point;\r\n        if (this.m_proxyBuffer.count === 0) {\r\n            return;\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const aabb = s_aabb;\r\n        b2Vec2.MinV(point1, point2, aabb.lowerBound);\r\n        b2Vec2.MaxV(point1, point2, aabb.upperBound);\r\n        let fraction = 1;\r\n        // solving the following equation:\r\n        // ((1-t)*point1+t*point2-position)^2=diameter^2\r\n        // where t is a potential fraction\r\n        ///b2Vec2 v = point2 - point1;\r\n        const v = b2Vec2.SubVV(point2, point1, s_v);\r\n        const v2 = b2Vec2.DotVV(v, v);\r\n        const enumerator = this.GetInsideBoundsEnumerator(aabb);\r\n        let i;\r\n        while ((i = enumerator.GetNext()) >= 0) {\r\n            ///b2Vec2 p = point1 - m_positionBuffer.data[i];\r\n            const p = b2Vec2.SubVV(point1, pos_data[i], s_p);\r\n            const pv = b2Vec2.DotVV(p, v);\r\n            const p2 = b2Vec2.DotVV(p, p);\r\n            const determinant = pv * pv - v2 * (p2 - this.m_squaredDiameter);\r\n            if (determinant >= 0) {\r\n                const sqrtDeterminant = b2Sqrt(determinant);\r\n                // find a solution between 0 and fraction\r\n                let t = (-pv - sqrtDeterminant) / v2;\r\n                if (t > fraction) {\r\n                    continue;\r\n                }\r\n                if (t < 0) {\r\n                    t = (-pv + sqrtDeterminant) / v2;\r\n                    if (t < 0 || t > fraction) {\r\n                        continue;\r\n                    }\r\n                }\r\n                ///b2Vec2 n = p + t * v;\r\n                const n = b2Vec2.AddVMulSV(p, t, v, s_n);\r\n                n.Normalize();\r\n                ///float32 f = callback.ReportParticle(this, i, point1 + t * v, n, t);\r\n                const f = callback.ReportParticle(this, i, b2Vec2.AddVMulSV(point1, t, v, s_point), n, t);\r\n                fraction = b2Min(fraction, f);\r\n                if (fraction <= 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Compute the axis-aligned bounding box for all particles\r\n     * contained within this particle system.\r\n     * @param aabb Returns the axis-aligned bounding box of the system.\r\n     */\r\n    ComputeAABB(aabb) {\r\n        const particleCount = this.GetParticleCount();\r\n        // DEBUG: b2Assert(aabb !== null);\r\n        aabb.lowerBound.x = +b2_maxFloat;\r\n        aabb.lowerBound.y = +b2_maxFloat;\r\n        aabb.upperBound.x = -b2_maxFloat;\r\n        aabb.upperBound.y = -b2_maxFloat;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const p = pos_data[i];\r\n            b2Vec2.MinV(aabb.lowerBound, p, aabb.lowerBound);\r\n            b2Vec2.MaxV(aabb.upperBound, p, aabb.upperBound);\r\n        }\r\n        aabb.lowerBound.x -= this.m_particleDiameter;\r\n        aabb.lowerBound.y -= this.m_particleDiameter;\r\n        aabb.upperBound.x += this.m_particleDiameter;\r\n        aabb.upperBound.y += this.m_particleDiameter;\r\n    }\r\n    FreeBuffer(b, capacity) {\r\n        if (b === null) {\r\n            return;\r\n        }\r\n        b.length = 0;\r\n    }\r\n    FreeUserOverridableBuffer(b) {\r\n        if (b.userSuppliedCapacity === 0) {\r\n            this.FreeBuffer(b.data, this.m_internalAllocatedCapacity);\r\n        }\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer3(oldBuffer, oldCapacity, newCapacity) {\r\n        // b2Assert(newCapacity > oldCapacity);\r\n        if (newCapacity <= oldCapacity) {\r\n            throw new Error();\r\n        }\r\n        const newBuffer = (oldBuffer) ? oldBuffer.slice() : [];\r\n        newBuffer.length = newCapacity;\r\n        return newBuffer;\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer5(buffer, userSuppliedCapacity, oldCapacity, newCapacity, deferred) {\r\n        // b2Assert(newCapacity > oldCapacity);\r\n        if (newCapacity <= oldCapacity) {\r\n            throw new Error();\r\n        }\r\n        // A 'deferred' buffer is reallocated only if it is not NULL.\r\n        // If 'userSuppliedCapacity' is not zero, buffer is user supplied and must\r\n        // be kept.\r\n        // b2Assert(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity);\r\n        if (!(!userSuppliedCapacity || newCapacity <= userSuppliedCapacity)) {\r\n            throw new Error();\r\n        }\r\n        if ((!deferred || buffer) && !userSuppliedCapacity) {\r\n            buffer = this.ReallocateBuffer3(buffer, oldCapacity, newCapacity);\r\n        }\r\n        return buffer; // TODO: fix this\r\n    }\r\n    /**\r\n     * Reallocate a buffer\r\n     */\r\n    ReallocateBuffer4(buffer, oldCapacity, newCapacity, deferred) {\r\n        // DEBUG: b2Assert(newCapacity > oldCapacity);\r\n        return this.ReallocateBuffer5(buffer.data, buffer.userSuppliedCapacity, oldCapacity, newCapacity, deferred);\r\n    }\r\n    RequestBuffer(buffer) {\r\n        if (!buffer) {\r\n            if (this.m_internalAllocatedCapacity === 0) {\r\n                this.ReallocateInternalAllocatedBuffers(b2_minParticleSystemBufferCapacity);\r\n            }\r\n            buffer = [];\r\n            buffer.length = this.m_internalAllocatedCapacity;\r\n        }\r\n        return buffer;\r\n    }\r\n    /**\r\n     * Reallocate the handle / index map and schedule the allocation\r\n     * of a new pool for handle allocation.\r\n     */\r\n    ReallocateHandleBuffers(newCapacity) {\r\n        // DEBUG: b2Assert(newCapacity > this.m_internalAllocatedCapacity);\r\n        // Reallocate a new handle / index map buffer, copying old handle pointers\r\n        // is fine since they're kept around.\r\n        this.m_handleIndexBuffer.data = this.ReallocateBuffer4(this.m_handleIndexBuffer, this.m_internalAllocatedCapacity, newCapacity, true);\r\n        // Set the size of the next handle allocation.\r\n        ///this.m_handleAllocator.SetItemsPerSlab(newCapacity - this.m_internalAllocatedCapacity);\r\n    }\r\n    ReallocateInternalAllocatedBuffers(capacity) {\r\n        function LimitCapacity(capacity, maxCount) {\r\n            return maxCount && capacity > maxCount ? maxCount : capacity;\r\n        }\r\n        // Don't increase capacity beyond the smallest user-supplied buffer size.\r\n        capacity = LimitCapacity(capacity, this.m_def.maxCount);\r\n        capacity = LimitCapacity(capacity, this.m_flagsBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_positionBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_velocityBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_colorBuffer.userSuppliedCapacity);\r\n        capacity = LimitCapacity(capacity, this.m_userDataBuffer.userSuppliedCapacity);\r\n        if (this.m_internalAllocatedCapacity < capacity) {\r\n            this.ReallocateHandleBuffers(capacity);\r\n            this.m_flagsBuffer.data = this.ReallocateBuffer4(this.m_flagsBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            // Conditionally defer these as they are optional if the feature is\r\n            // not enabled.\r\n            const stuck = this.m_stuckThreshold > 0;\r\n            this.m_lastBodyContactStepBuffer.data = this.ReallocateBuffer4(this.m_lastBodyContactStepBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_bodyContactCountBuffer.data = this.ReallocateBuffer4(this.m_bodyContactCountBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_consecutiveContactStepsBuffer.data = this.ReallocateBuffer4(this.m_consecutiveContactStepsBuffer, this.m_internalAllocatedCapacity, capacity, stuck);\r\n            this.m_positionBuffer.data = this.ReallocateBuffer4(this.m_positionBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_velocityBuffer.data = this.ReallocateBuffer4(this.m_velocityBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_forceBuffer = this.ReallocateBuffer5(this.m_forceBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_weightBuffer = this.ReallocateBuffer5(this.m_weightBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_staticPressureBuffer = this.ReallocateBuffer5(this.m_staticPressureBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_accumulationBuffer = this.ReallocateBuffer5(this.m_accumulationBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_accumulation2Buffer = this.ReallocateBuffer5(this.m_accumulation2Buffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_depthBuffer = this.ReallocateBuffer5(this.m_depthBuffer, 0, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_colorBuffer.data = this.ReallocateBuffer4(this.m_colorBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_groupBuffer = this.ReallocateBuffer5(this.m_groupBuffer, 0, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_userDataBuffer.data = this.ReallocateBuffer4(this.m_userDataBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_expirationTimeBuffer.data = this.ReallocateBuffer4(this.m_expirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, true);\r\n            this.m_indexByExpirationTimeBuffer.data = this.ReallocateBuffer4(this.m_indexByExpirationTimeBuffer, this.m_internalAllocatedCapacity, capacity, false);\r\n            this.m_internalAllocatedCapacity = capacity;\r\n        }\r\n    }\r\n    CreateParticleForGroup(groupDef, xf, p) {\r\n        const particleDef = new b2ParticleDef();\r\n        particleDef.flags = b2Maybe(groupDef.flags, 0);\r\n        ///particleDef.position = b2Mul(xf, p);\r\n        b2Transform.MulXV(xf, p, particleDef.position);\r\n        ///particleDef.velocity =\r\n        ///  groupDef.linearVelocity +\r\n        ///  b2Cross(groupDef.angularVelocity,\r\n        ///      particleDef.position - groupDef.position);\r\n        b2Vec2.AddVV(b2Maybe(groupDef.linearVelocity, b2Vec2.ZERO), b2Vec2.CrossSV(b2Maybe(groupDef.angularVelocity, 0), b2Vec2.SubVV(particleDef.position, b2Maybe(groupDef.position, b2Vec2.ZERO), b2Vec2.s_t0), b2Vec2.s_t0), particleDef.velocity);\r\n        particleDef.color.Copy(b2Maybe(groupDef.color, b2Color.ZERO));\r\n        particleDef.lifetime = b2Maybe(groupDef.lifetime, 0);\r\n        particleDef.userData = groupDef.userData;\r\n        this.CreateParticle(particleDef);\r\n    }\r\n    CreateParticlesStrokeShapeForGroup(shape, groupDef, xf) {\r\n        const s_edge = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge;\r\n        const s_d = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d;\r\n        const s_p = b2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p;\r\n        let stride = b2Maybe(groupDef.stride, 0);\r\n        if (stride === 0) {\r\n            stride = this.GetParticleStride();\r\n        }\r\n        let positionOnEdge = 0;\r\n        const childCount = shape.GetChildCount();\r\n        for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n            let edge = null;\r\n            if (shape.GetType() === b2ShapeType.e_edgeShape) {\r\n                edge = shape;\r\n            }\r\n            else {\r\n                // DEBUG: b2Assert(shape.GetType() === b2ShapeType.e_chainShape);\r\n                edge = s_edge;\r\n                shape.GetChildEdge(edge, childIndex);\r\n            }\r\n            const d = b2Vec2.SubVV(edge.m_vertex2, edge.m_vertex1, s_d);\r\n            const edgeLength = d.Length();\r\n            while (positionOnEdge < edgeLength) {\r\n                ///b2Vec2 p = edge.m_vertex1 + positionOnEdge / edgeLength * d;\r\n                const p = b2Vec2.AddVMulSV(edge.m_vertex1, positionOnEdge / edgeLength, d, s_p);\r\n                this.CreateParticleForGroup(groupDef, xf, p);\r\n                positionOnEdge += stride;\r\n            }\r\n            positionOnEdge -= edgeLength;\r\n        }\r\n    }\r\n    CreateParticlesFillShapeForGroup(shape, groupDef, xf) {\r\n        const s_aabb = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb;\r\n        const s_p = b2ParticleSystem.CreateParticlesFillShapeForGroup_s_p;\r\n        let stride = b2Maybe(groupDef.stride, 0);\r\n        if (stride === 0) {\r\n            stride = this.GetParticleStride();\r\n        }\r\n        ///b2Transform identity;\r\n        /// identity.SetIdentity();\r\n        const identity = b2Transform.IDENTITY;\r\n        const aabb = s_aabb;\r\n        // DEBUG: b2Assert(shape.GetChildCount() === 1);\r\n        shape.ComputeAABB(aabb, identity, 0);\r\n        for (let y = Math.floor(aabb.lowerBound.y / stride) * stride; y < aabb.upperBound.y; y += stride) {\r\n            for (let x = Math.floor(aabb.lowerBound.x / stride) * stride; x < aabb.upperBound.x; x += stride) {\r\n                const p = s_p.Set(x, y);\r\n                if (shape.TestPoint(identity, p)) {\r\n                    this.CreateParticleForGroup(groupDef, xf, p);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    CreateParticlesWithShapeForGroup(shape, groupDef, xf) {\r\n        switch (shape.GetType()) {\r\n            case b2ShapeType.e_edgeShape:\r\n            case b2ShapeType.e_chainShape:\r\n                this.CreateParticlesStrokeShapeForGroup(shape, groupDef, xf);\r\n                break;\r\n            case b2ShapeType.e_polygonShape:\r\n            case b2ShapeType.e_circleShape:\r\n                this.CreateParticlesFillShapeForGroup(shape, groupDef, xf);\r\n                break;\r\n            default:\r\n                // DEBUG: b2Assert(false);\r\n                break;\r\n        }\r\n    }\r\n    CreateParticlesWithShapesForGroup(shapes, shapeCount, groupDef, xf) {\r\n        const compositeShape = new b2ParticleSystem.CompositeShape(shapes, shapeCount);\r\n        this.CreateParticlesFillShapeForGroup(compositeShape, groupDef, xf);\r\n    }\r\n    CloneParticle(oldIndex, group) {\r\n        const def = new b2ParticleDef();\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        def.flags = this.m_flagsBuffer.data[oldIndex];\r\n        def.position.Copy(this.m_positionBuffer.data[oldIndex]);\r\n        def.velocity.Copy(this.m_velocityBuffer.data[oldIndex]);\r\n        if (this.m_colorBuffer.data) {\r\n            def.color.Copy(this.m_colorBuffer.data[oldIndex]);\r\n        }\r\n        if (this.m_userDataBuffer.data) {\r\n            def.userData = this.m_userDataBuffer.data[oldIndex];\r\n        }\r\n        def.group = group;\r\n        const newIndex = this.CreateParticle(def);\r\n        if (this.m_handleIndexBuffer.data) {\r\n            const handle = this.m_handleIndexBuffer.data[oldIndex];\r\n            if (handle) {\r\n                handle.SetIndex(newIndex);\r\n            }\r\n            this.m_handleIndexBuffer.data[newIndex] = handle;\r\n            this.m_handleIndexBuffer.data[oldIndex] = null;\r\n        }\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            this.m_lastBodyContactStepBuffer.data[newIndex] =\r\n                this.m_lastBodyContactStepBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            this.m_bodyContactCountBuffer.data[newIndex] =\r\n                this.m_bodyContactCountBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            this.m_consecutiveContactStepsBuffer.data[newIndex] =\r\n                this.m_consecutiveContactStepsBuffer.data[oldIndex];\r\n        }\r\n        if (this.m_hasForce) {\r\n            this.m_forceBuffer[newIndex].Copy(this.m_forceBuffer[oldIndex]);\r\n        }\r\n        if (this.m_staticPressureBuffer) {\r\n            this.m_staticPressureBuffer[newIndex] = this.m_staticPressureBuffer[oldIndex];\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            this.m_depthBuffer[newIndex] = this.m_depthBuffer[oldIndex];\r\n        }\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            this.m_expirationTimeBuffer.data[newIndex] =\r\n                this.m_expirationTimeBuffer.data[oldIndex];\r\n        }\r\n        return newIndex;\r\n    }\r\n    DestroyParticlesInGroup(group, callDestructionListener = false) {\r\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n            this.DestroyParticle(i, callDestructionListener);\r\n        }\r\n    }\r\n    DestroyParticleGroup(group) {\r\n        // DEBUG: b2Assert(this.m_groupCount > 0);\r\n        // DEBUG: b2Assert(group !== null);\r\n        if (this.m_world.m_destructionListener) {\r\n            this.m_world.m_destructionListener.SayGoodbyeParticleGroup(group);\r\n        }\r\n        this.SetGroupFlags(group, 0);\r\n        for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n            this.m_groupBuffer[i] = null;\r\n        }\r\n        if (group.m_prev) {\r\n            group.m_prev.m_next = group.m_next;\r\n        }\r\n        if (group.m_next) {\r\n            group.m_next.m_prev = group.m_prev;\r\n        }\r\n        if (group === this.m_groupList) {\r\n            this.m_groupList = group.m_next;\r\n        }\r\n        --this.m_groupCount;\r\n    }\r\n    static ParticleCanBeConnected(flags, group) {\r\n        return ((flags & (b2ParticleFlag.b2_wallParticle | b2ParticleFlag.b2_springParticle | b2ParticleFlag.b2_elasticParticle)) !== 0) ||\r\n            ((group !== null) && ((group.GetGroupFlags() & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0));\r\n    }\r\n    UpdatePairsAndTriads(firstIndex, lastIndex, filter) {\r\n        const s_dab = b2ParticleSystem.UpdatePairsAndTriads_s_dab;\r\n        const s_dbc = b2ParticleSystem.UpdatePairsAndTriads_s_dbc;\r\n        const s_dca = b2ParticleSystem.UpdatePairsAndTriads_s_dca;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        // Create pairs or triads.\r\n        // All particles in each pair/triad should satisfy the following:\r\n        // * firstIndex <= index < lastIndex\r\n        // * don't have b2_zombieParticle\r\n        // * ParticleCanBeConnected returns true\r\n        // * ShouldCreatePair/ShouldCreateTriad returns true\r\n        // Any particles in each pair/triad should satisfy the following:\r\n        // * filter.IsNeeded returns true\r\n        // * have one of k_pairFlags/k_triadsFlags\r\n        // DEBUG: b2Assert(firstIndex <= lastIndex);\r\n        let particleFlags = 0;\r\n        for (let i = firstIndex; i < lastIndex; i++) {\r\n            particleFlags |= this.m_flagsBuffer.data[i];\r\n        }\r\n        if (particleFlags & b2ParticleSystem.k_pairFlags) {\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                const contact = this.m_contactBuffer.data[k];\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                const af = this.m_flagsBuffer.data[a];\r\n                const bf = this.m_flagsBuffer.data[b];\r\n                const groupA = this.m_groupBuffer[a];\r\n                const groupB = this.m_groupBuffer[b];\r\n                if (a >= firstIndex && a < lastIndex &&\r\n                    b >= firstIndex && b < lastIndex &&\r\n                    !((af | bf) & b2ParticleFlag.b2_zombieParticle) &&\r\n                    ((af | bf) & b2ParticleSystem.k_pairFlags) &&\r\n                    (filter.IsNecessary(a) || filter.IsNecessary(b)) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(af, groupA) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(bf, groupB) &&\r\n                    filter.ShouldCreatePair(a, b)) {\r\n                    ///b2ParticlePair& pair = m_pairBuffer.Append();\r\n                    const pair = this.m_pairBuffer.data[this.m_pairBuffer.Append()];\r\n                    pair.indexA = a;\r\n                    pair.indexB = b;\r\n                    pair.flags = contact.flags;\r\n                    pair.strength = b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1);\r\n                    ///pair.distance = b2Distance(pos_data[a], pos_data[b]); // TODO: this was wrong!\r\n                    pair.distance = b2Vec2.DistanceVV(pos_data[a], pos_data[b]);\r\n                }\r\n                ///std::stable_sort(m_pairBuffer.Begin(), m_pairBuffer.End(), ComparePairIndices);\r\n                std_stable_sort(this.m_pairBuffer.data, 0, this.m_pairBuffer.count, b2ParticleSystem.ComparePairIndices);\r\n                ///m_pairBuffer.Unique(MatchPairIndices);\r\n                this.m_pairBuffer.Unique(b2ParticleSystem.MatchPairIndices);\r\n            }\r\n        }\r\n        if (particleFlags & b2ParticleSystem.k_triadFlags) {\r\n            const diagram = new b2VoronoiDiagram(lastIndex - firstIndex);\r\n            ///let necessary_count = 0;\r\n            for (let i = firstIndex; i < lastIndex; i++) {\r\n                const flags = this.m_flagsBuffer.data[i];\r\n                const group = this.m_groupBuffer[i];\r\n                if (!(flags & b2ParticleFlag.b2_zombieParticle) &&\r\n                    b2ParticleSystem.ParticleCanBeConnected(flags, group)) {\r\n                    ///if (filter.IsNecessary(i)) {\r\n                    ///++necessary_count;\r\n                    ///}\r\n                    diagram.AddGenerator(pos_data[i], i, filter.IsNecessary(i));\r\n                }\r\n            }\r\n            ///if (necessary_count === 0) {\r\n            /////debugger;\r\n            ///for (let i = firstIndex; i < lastIndex; i++) {\r\n            ///  filter.IsNecessary(i);\r\n            ///}\r\n            ///}\r\n            const stride = this.GetParticleStride();\r\n            diagram.Generate(stride / 2, stride * 2);\r\n            const system = this;\r\n            const callback = /*UpdateTriadsCallback*/ (a, b, c) => {\r\n                if (!system.m_flagsBuffer.data) {\r\n                    throw new Error();\r\n                }\r\n                const af = system.m_flagsBuffer.data[a];\r\n                const bf = system.m_flagsBuffer.data[b];\r\n                const cf = system.m_flagsBuffer.data[c];\r\n                if (((af | bf | cf) & b2ParticleSystem.k_triadFlags) &&\r\n                    filter.ShouldCreateTriad(a, b, c)) {\r\n                    const pa = pos_data[a];\r\n                    const pb = pos_data[b];\r\n                    const pc = pos_data[c];\r\n                    const dab = b2Vec2.SubVV(pa, pb, s_dab);\r\n                    const dbc = b2Vec2.SubVV(pb, pc, s_dbc);\r\n                    const dca = b2Vec2.SubVV(pc, pa, s_dca);\r\n                    const maxDistanceSquared = b2_maxTriadDistanceSquared * system.m_squaredDiameter;\r\n                    if (b2Vec2.DotVV(dab, dab) > maxDistanceSquared ||\r\n                        b2Vec2.DotVV(dbc, dbc) > maxDistanceSquared ||\r\n                        b2Vec2.DotVV(dca, dca) > maxDistanceSquared) {\r\n                        return;\r\n                    }\r\n                    const groupA = system.m_groupBuffer[a];\r\n                    const groupB = system.m_groupBuffer[b];\r\n                    const groupC = system.m_groupBuffer[c];\r\n                    ///b2ParticleTriad& triad = m_system.m_triadBuffer.Append();\r\n                    const triad = system.m_triadBuffer.data[system.m_triadBuffer.Append()];\r\n                    triad.indexA = a;\r\n                    triad.indexB = b;\r\n                    triad.indexC = c;\r\n                    triad.flags = af | bf | cf;\r\n                    triad.strength = b2Min(b2Min(groupA ? groupA.m_strength : 1, groupB ? groupB.m_strength : 1), groupC ? groupC.m_strength : 1);\r\n                    ///let midPoint = b2Vec2.MulSV(1.0 / 3.0, b2Vec2.AddVV(pa, b2Vec2.AddVV(pb, pc, new b2Vec2()), new b2Vec2()), new b2Vec2());\r\n                    const midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\r\n                    const midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\r\n                    ///triad.pa = b2Vec2.SubVV(pa, midPoint, new b2Vec2());\r\n                    triad.pa.x = pa.x - midPoint_x;\r\n                    triad.pa.y = pa.y - midPoint_y;\r\n                    ///triad.pb = b2Vec2.SubVV(pb, midPoint, new b2Vec2());\r\n                    triad.pb.x = pb.x - midPoint_x;\r\n                    triad.pb.y = pb.y - midPoint_y;\r\n                    ///triad.pc = b2Vec2.SubVV(pc, midPoint, new b2Vec2());\r\n                    triad.pc.x = pc.x - midPoint_x;\r\n                    triad.pc.y = pc.y - midPoint_y;\r\n                    triad.ka = -b2Vec2.DotVV(dca, dab);\r\n                    triad.kb = -b2Vec2.DotVV(dab, dbc);\r\n                    triad.kc = -b2Vec2.DotVV(dbc, dca);\r\n                    triad.s = b2Vec2.CrossVV(pa, pb) + b2Vec2.CrossVV(pb, pc) + b2Vec2.CrossVV(pc, pa);\r\n                }\r\n            };\r\n            diagram.GetNodes(callback);\r\n            ///std::stable_sort(m_triadBuffer.Begin(), m_triadBuffer.End(), CompareTriadIndices);\r\n            std_stable_sort(this.m_triadBuffer.data, 0, this.m_triadBuffer.count, b2ParticleSystem.CompareTriadIndices);\r\n            ///m_triadBuffer.Unique(MatchTriadIndices);\r\n            this.m_triadBuffer.Unique(b2ParticleSystem.MatchTriadIndices);\r\n        }\r\n    }\r\n    UpdatePairsAndTriadsWithReactiveParticles() {\r\n        const filter = new b2ParticleSystem.ReactiveFilter(this.m_flagsBuffer);\r\n        this.UpdatePairsAndTriads(0, this.m_count, filter);\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_flagsBuffer.data[i] &= ~b2ParticleFlag.b2_reactiveParticle;\r\n        }\r\n        this.m_allParticleFlags &= ~b2ParticleFlag.b2_reactiveParticle;\r\n    }\r\n    static ComparePairIndices(a, b) {\r\n        const diffA = a.indexA - b.indexA;\r\n        if (diffA !== 0) {\r\n            return diffA < 0;\r\n        }\r\n        return a.indexB < b.indexB;\r\n    }\r\n    static MatchPairIndices(a, b) {\r\n        return a.indexA === b.indexA && a.indexB === b.indexB;\r\n    }\r\n    static CompareTriadIndices(a, b) {\r\n        const diffA = a.indexA - b.indexA;\r\n        if (diffA !== 0) {\r\n            return diffA < 0;\r\n        }\r\n        const diffB = a.indexB - b.indexB;\r\n        if (diffB !== 0) {\r\n            return diffB < 0;\r\n        }\r\n        return a.indexC < b.indexC;\r\n    }\r\n    static MatchTriadIndices(a, b) {\r\n        return a.indexA === b.indexA && a.indexB === b.indexB && a.indexC === b.indexC;\r\n    }\r\n    static InitializeParticleLists(group, nodeBuffer) {\r\n        const bufferIndex = group.GetBufferIndex();\r\n        const particleCount = group.GetParticleCount();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const node = nodeBuffer[i];\r\n            node.list = node;\r\n            node.next = null;\r\n            node.count = 1;\r\n            node.index = i + bufferIndex;\r\n        }\r\n    }\r\n    MergeParticleListsInContact(group, nodeBuffer) {\r\n        const bufferIndex = group.GetBufferIndex();\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            /*const b2ParticleContact&*/\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            if (!group.ContainsParticle(a) || !group.ContainsParticle(b)) {\r\n                continue;\r\n            }\r\n            let listA = nodeBuffer[a - bufferIndex].list;\r\n            let listB = nodeBuffer[b - bufferIndex].list;\r\n            if (listA === listB) {\r\n                continue;\r\n            }\r\n            // To minimize the cost of insertion, make sure listA is longer than\r\n            // listB.\r\n            if (listA.count < listB.count) {\r\n                const _tmp = listA;\r\n                listA = listB;\r\n                listB = _tmp; ///b2Swap(listA, listB);\r\n            }\r\n            // DEBUG: b2Assert(listA.count >= listB.count);\r\n            b2ParticleSystem.MergeParticleLists(listA, listB);\r\n        }\r\n    }\r\n    static MergeParticleLists(listA, listB) {\r\n        // Insert listB between index 0 and 1 of listA\r\n        // Example:\r\n        //     listA => a1 => a2 => a3 => null\r\n        //     listB => b1 => b2 => null\r\n        // to\r\n        //     listA => listB => b1 => b2 => a1 => a2 => a3 => null\r\n        // DEBUG: b2Assert(listA !== listB);\r\n        for (let b = listB;;) {\r\n            b.list = listA;\r\n            const nextB = b.next;\r\n            if (nextB) {\r\n                b = nextB;\r\n            }\r\n            else {\r\n                b.next = listA.next;\r\n                break;\r\n            }\r\n        }\r\n        listA.next = listB;\r\n        listA.count += listB.count;\r\n        listB.count = 0;\r\n    }\r\n    static FindLongestParticleList(group, nodeBuffer) {\r\n        const particleCount = group.GetParticleCount();\r\n        let result = nodeBuffer[0];\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const node = nodeBuffer[i];\r\n            if (result.count < node.count) {\r\n                result = node;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    MergeZombieParticleListNodes(group, nodeBuffer, survivingList) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const particleCount = group.GetParticleCount();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const node = nodeBuffer[i];\r\n            if (node !== survivingList &&\r\n                (this.m_flagsBuffer.data[node.index] & b2ParticleFlag.b2_zombieParticle)) {\r\n                b2ParticleSystem.MergeParticleListAndNode(survivingList, node);\r\n            }\r\n        }\r\n    }\r\n    static MergeParticleListAndNode(list, node) {\r\n        // Insert node between index 0 and 1 of list\r\n        // Example:\r\n        //     list => a1 => a2 => a3 => null\r\n        //     node => null\r\n        // to\r\n        //     list => node => a1 => a2 => a3 => null\r\n        // DEBUG: b2Assert(node !== list);\r\n        // DEBUG: b2Assert(node.list === node);\r\n        // DEBUG: b2Assert(node.count === 1);\r\n        node.list = list;\r\n        node.next = list.next;\r\n        list.next = node;\r\n        list.count++;\r\n        node.count = 0;\r\n    }\r\n    CreateParticleGroupsFromParticleList(group, nodeBuffer, survivingList) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const particleCount = group.GetParticleCount();\r\n        const def = new b2ParticleGroupDef();\r\n        def.groupFlags = group.GetGroupFlags();\r\n        def.userData = group.GetUserData();\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const list = nodeBuffer[i];\r\n            if (!list.count || list === survivingList) {\r\n                continue;\r\n            }\r\n            // DEBUG: b2Assert(list.list === list);\r\n            const newGroup = this.CreateParticleGroup(def);\r\n            for (let node = list; node; node = node.next) {\r\n                const oldIndex = node.index;\r\n                // DEBUG: const flags = this.m_flagsBuffer.data[oldIndex];\r\n                // DEBUG: b2Assert(!(flags & b2ParticleFlag.b2_zombieParticle));\r\n                const newIndex = this.CloneParticle(oldIndex, newGroup);\r\n                this.m_flagsBuffer.data[oldIndex] |= b2ParticleFlag.b2_zombieParticle;\r\n                node.index = newIndex;\r\n            }\r\n        }\r\n    }\r\n    UpdatePairsAndTriadsWithParticleList(group, nodeBuffer) {\r\n        const bufferIndex = group.GetBufferIndex();\r\n        // Update indices in pairs and triads. If an index belongs to the group,\r\n        // replace it with the corresponding value in nodeBuffer.\r\n        // Note that nodeBuffer is allocated only for the group and the index should\r\n        // be shifted by bufferIndex.\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            const pair = this.m_pairBuffer.data[k];\r\n            const a = pair.indexA;\r\n            const b = pair.indexB;\r\n            if (group.ContainsParticle(a)) {\r\n                pair.indexA = nodeBuffer[a - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(b)) {\r\n                pair.indexB = nodeBuffer[b - bufferIndex].index;\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            const triad = this.m_triadBuffer.data[k];\r\n            const a = triad.indexA;\r\n            const b = triad.indexB;\r\n            const c = triad.indexC;\r\n            if (group.ContainsParticle(a)) {\r\n                triad.indexA = nodeBuffer[a - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(b)) {\r\n                triad.indexB = nodeBuffer[b - bufferIndex].index;\r\n            }\r\n            if (group.ContainsParticle(c)) {\r\n                triad.indexC = nodeBuffer[c - bufferIndex].index;\r\n            }\r\n        }\r\n    }\r\n    ComputeDepth() {\r\n        ///b2ParticleContact* contactGroups = (b2ParticleContact*) this.m_world.m_stackAllocator.Allocate(sizeof(b2ParticleContact) * this.m_contactBuffer.GetCount());\r\n        const contactGroups = []; // TODO: static\r\n        let contactGroupsCount = 0;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const groupA = this.m_groupBuffer[a];\r\n            const groupB = this.m_groupBuffer[b];\r\n            if (groupA && groupA === groupB &&\r\n                (groupA.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth)) {\r\n                contactGroups[contactGroupsCount++] = contact;\r\n            }\r\n        }\r\n        ///b2ParticleGroup** groupsToUpdate = (b2ParticleGroup**) this.m_world.m_stackAllocator.Allocate(sizeof(b2ParticleGroup*) * this.m_groupCount);\r\n        const groupsToUpdate = []; // TODO: static\r\n        let groupsToUpdateCount = 0;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\r\n                groupsToUpdate[groupsToUpdateCount++] = group;\r\n                this.SetGroupFlags(group, group.m_groupFlags &\r\n                    ~b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\r\n                for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                    this.m_accumulationBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        // Compute sum of weight of contacts except between different groups.\r\n        for (let k = 0; k < contactGroupsCount; k++) {\r\n            const contact = contactGroups[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const w = contact.weight;\r\n            this.m_accumulationBuffer[a] += w;\r\n            this.m_accumulationBuffer[b] += w;\r\n        }\r\n        // DEBUG: b2Assert(this.m_depthBuffer !== null);\r\n        for (let i = 0; i < groupsToUpdateCount; i++) {\r\n            const group = groupsToUpdate[i];\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                const w = this.m_accumulationBuffer[i];\r\n                this.m_depthBuffer[i] = w < 0.8 ? 0 : b2_maxFloat;\r\n            }\r\n        }\r\n        // The number of iterations is equal to particle number from the deepest\r\n        // particle to the nearest surface particle, and in general it is smaller\r\n        // than sqrt of total particle number.\r\n        ///int32 iterationCount = (int32)b2Sqrt((float)m_count);\r\n        const iterationCount = b2Sqrt(this.m_count) >> 0;\r\n        for (let t = 0; t < iterationCount; t++) {\r\n            let updated = false;\r\n            for (let k = 0; k < contactGroupsCount; k++) {\r\n                const contact = contactGroups[k];\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                const r = 1 - contact.weight;\r\n                ///float32& ap0 = m_depthBuffer[a];\r\n                const ap0 = this.m_depthBuffer[a];\r\n                ///float32& bp0 = m_depthBuffer[b];\r\n                const bp0 = this.m_depthBuffer[b];\r\n                const ap1 = bp0 + r;\r\n                const bp1 = ap0 + r;\r\n                if (ap0 > ap1) {\r\n                    ///ap0 = ap1;\r\n                    this.m_depthBuffer[a] = ap1;\r\n                    updated = true;\r\n                }\r\n                if (bp0 > bp1) {\r\n                    ///bp0 = bp1;\r\n                    this.m_depthBuffer[b] = bp1;\r\n                    updated = true;\r\n                }\r\n            }\r\n            if (!updated) {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < groupsToUpdateCount; i++) {\r\n            const group = groupsToUpdate[i];\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                if (this.m_depthBuffer[i] < b2_maxFloat) {\r\n                    this.m_depthBuffer[i] *= this.m_particleDiameter;\r\n                }\r\n                else {\r\n                    this.m_depthBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        ///this.m_world.m_stackAllocator.Free(groupsToUpdate);\r\n        ///this.m_world.m_stackAllocator.Free(contactGroups);\r\n    }\r\n    GetInsideBoundsEnumerator(aabb) {\r\n        const lowerTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.lowerBound.x - 1, this.m_inverseDiameter * aabb.lowerBound.y - 1);\r\n        const upperTag = b2ParticleSystem.computeTag(this.m_inverseDiameter * aabb.upperBound.x + 1, this.m_inverseDiameter * aabb.upperBound.y + 1);\r\n        ///const Proxy* beginProxy = m_proxyBuffer.Begin();\r\n        const beginProxy = 0;\r\n        ///const Proxy* endProxy = m_proxyBuffer.End();\r\n        const endProxy = this.m_proxyBuffer.count;\r\n        ///const Proxy* firstProxy = std::lower_bound(beginProxy, endProxy, lowerTag);\r\n        const firstProxy = std_lower_bound(this.m_proxyBuffer.data, beginProxy, endProxy, lowerTag, b2ParticleSystem.Proxy.CompareProxyTag);\r\n        ///const Proxy* lastProxy = std::upper_bound(firstProxy, endProxy, upperTag);\r\n        const lastProxy = std_upper_bound(this.m_proxyBuffer.data, beginProxy, endProxy, upperTag, b2ParticleSystem.Proxy.CompareTagProxy);\r\n        // DEBUG: b2Assert(beginProxy <= firstProxy);\r\n        // DEBUG: b2Assert(firstProxy <= lastProxy);\r\n        // DEBUG: b2Assert(lastProxy <= endProxy);\r\n        return new b2ParticleSystem.InsideBoundsEnumerator(this, lowerTag, upperTag, firstProxy, lastProxy);\r\n    }\r\n    UpdateAllParticleFlags() {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        this.m_allParticleFlags = 0;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_allParticleFlags |= this.m_flagsBuffer.data[i];\r\n        }\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n    }\r\n    UpdateAllGroupFlags() {\r\n        this.m_allGroupFlags = 0;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            this.m_allGroupFlags |= group.m_groupFlags;\r\n        }\r\n        this.m_needsUpdateAllGroupFlags = false;\r\n    }\r\n    AddContact(a, b, contacts) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const s_d = b2ParticleSystem.AddContact_s_d;\r\n        const pos_data = this.m_positionBuffer.data;\r\n        // DEBUG: b2Assert(contacts === this.m_contactBuffer);\r\n        ///b2Vec2 d = m_positionBuffer.data[b] - m_positionBuffer.data[a];\r\n        const d = b2Vec2.SubVV(pos_data[b], pos_data[a], s_d);\r\n        const distBtParticlesSq = b2Vec2.DotVV(d, d);\r\n        if (distBtParticlesSq < this.m_squaredDiameter) {\r\n            let invD = b2InvSqrt(distBtParticlesSq);\r\n            if (!isFinite(invD)) {\r\n                invD = 1.98177537e+019;\r\n            }\r\n            ///b2ParticleContact& contact = contacts.Append();\r\n            const contact = this.m_contactBuffer.data[this.m_contactBuffer.Append()];\r\n            contact.indexA = a;\r\n            contact.indexB = b;\r\n            contact.flags = this.m_flagsBuffer.data[a] | this.m_flagsBuffer.data[b];\r\n            contact.weight = 1 - distBtParticlesSq * invD * this.m_inverseDiameter;\r\n            ///contact.SetNormal(invD * d);\r\n            b2Vec2.MulSV(invD, d, contact.normal);\r\n        }\r\n    }\r\n    FindContacts_Reference(contacts) {\r\n        // DEBUG: b2Assert(contacts === this.m_contactBuffer);\r\n        const beginProxy = 0;\r\n        const endProxy = this.m_proxyBuffer.count;\r\n        this.m_contactBuffer.count = 0;\r\n        for (let a = beginProxy, c = beginProxy; a < endProxy; a++) {\r\n            const rightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 0);\r\n            for (let b = a + 1; b < endProxy; b++) {\r\n                if (rightTag < this.m_proxyBuffer.data[b].tag) {\r\n                    break;\r\n                }\r\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\r\n            }\r\n            const bottomLeftTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, -1, 1);\r\n            for (; c < endProxy; c++) {\r\n                if (bottomLeftTag <= this.m_proxyBuffer.data[c].tag) {\r\n                    break;\r\n                }\r\n            }\r\n            const bottomRightTag = b2ParticleSystem.computeRelativeTag(this.m_proxyBuffer.data[a].tag, 1, 1);\r\n            for (let b = c; b < endProxy; b++) {\r\n                if (bottomRightTag < this.m_proxyBuffer.data[b].tag) {\r\n                    break;\r\n                }\r\n                this.AddContact(this.m_proxyBuffer.data[a].index, this.m_proxyBuffer.data[b].index, this.m_contactBuffer);\r\n            }\r\n        }\r\n    }\r\n    ///void ReorderForFindContact(FindContactInput* reordered, int alignedCount) const;\r\n    ///void GatherChecksOneParticle(const uint32 bound, const int startIndex, const int particleIndex, int* nextUncheckedIndex, b2GrowableBuffer<FindContactCheck>& checks) const;\r\n    ///void GatherChecks(b2GrowableBuffer<FindContactCheck>& checks) const;\r\n    ///void FindContacts_Simd(b2GrowableBuffer<b2ParticleContact>& contacts) const;\r\n    FindContacts(contacts) {\r\n        this.FindContacts_Reference(contacts);\r\n    }\r\n    ///static void UpdateProxyTags(const uint32* const tags, b2GrowableBuffer<Proxy>& proxies);\r\n    ///static bool ProxyBufferHasIndex(int32 index, const Proxy* const a, int count);\r\n    ///static int NumProxiesWithSameTag(const Proxy* const a, const Proxy* const b, int count);\r\n    ///static bool AreProxyBuffersTheSame(const b2GrowableBuffer<Proxy>& a, const b2GrowableBuffer<Proxy>& b);\r\n    UpdateProxies_Reference(proxies) {\r\n        // DEBUG: b2Assert(proxies === this.m_proxyBuffer);\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const inv_diam = this.m_inverseDiameter;\r\n        for (let k = 0; k < this.m_proxyBuffer.count; ++k) {\r\n            const proxy = this.m_proxyBuffer.data[k];\r\n            const i = proxy.index;\r\n            const p = pos_data[i];\r\n            proxy.tag = b2ParticleSystem.computeTag(inv_diam * p.x, inv_diam * p.y);\r\n        }\r\n    }\r\n    ///void UpdateProxies_Simd(b2GrowableBuffer<Proxy>& proxies) const;\r\n    UpdateProxies(proxies) {\r\n        this.UpdateProxies_Reference(proxies);\r\n    }\r\n    SortProxies(proxies) {\r\n        // DEBUG: b2Assert(proxies === this.m_proxyBuffer);\r\n        ///std::sort(proxies.Begin(), proxies.End());\r\n        std_sort(this.m_proxyBuffer.data, 0, this.m_proxyBuffer.count, b2ParticleSystem.Proxy.CompareProxyProxy);\r\n    }\r\n    FilterContacts(contacts) {\r\n        // Optionally filter the contact.\r\n        const contactFilter = this.GetParticleContactFilter();\r\n        if (contactFilter === null) {\r\n            return;\r\n        }\r\n        /// contacts.RemoveIf(b2ParticleContactRemovePredicate(this, contactFilter));\r\n        // DEBUG: b2Assert(contacts === this.m_contactBuffer);\r\n        const system = this;\r\n        const predicate = (contact) => {\r\n            return ((contact.flags & b2ParticleFlag.b2_particleContactFilterParticle) !== 0) && !contactFilter.ShouldCollideParticleParticle(system, contact.indexA, contact.indexB);\r\n        };\r\n        this.m_contactBuffer.RemoveIf(predicate);\r\n    }\r\n    NotifyContactListenerPreContact(particlePairs) {\r\n        const contactListener = this.GetParticleContactListener();\r\n        if (contactListener === null) {\r\n            return;\r\n        }\r\n        ///particlePairs.Initialize(m_contactBuffer.Begin(), m_contactBuffer.GetCount(), GetFlagsBuffer());\r\n        particlePairs.Initialize(this.m_contactBuffer, this.m_flagsBuffer);\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    NotifyContactListenerPostContact(particlePairs) {\r\n        const contactListener = this.GetParticleContactListener();\r\n        if (contactListener === null) {\r\n            return;\r\n        }\r\n        // Loop through all new contacts, reporting any new ones, and\r\n        // \"invalidating\" the ones that still exist.\r\n        ///const b2ParticleContact* const endContact = m_contactBuffer.End();\r\n        ///for (b2ParticleContact* contact = m_contactBuffer.Begin(); contact < endContact; ++contact)\r\n        for (let k = 0; k < this.m_contactBuffer.count; ++k) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            ///ParticlePair pair;\r\n            ///pair.first = contact.GetIndexA();\r\n            ///pair.second = contact.GetIndexB();\r\n            ///const int32 itemIndex = particlePairs.Find(pair);\r\n            const itemIndex = -1; // TODO\r\n            if (itemIndex >= 0) {\r\n                // Already touching, ignore this contact.\r\n                particlePairs.Invalidate(itemIndex);\r\n            }\r\n            else {\r\n                // Just started touching, inform the listener.\r\n                contactListener.BeginContactParticleParticle(this, contact);\r\n            }\r\n        }\r\n        // Report particles that are no longer touching.\r\n        // That is, any pairs that were not invalidated above.\r\n        ///const int32 pairCount = particlePairs.GetCount();\r\n        ///const ParticlePair* const pairs = particlePairs.GetBuffer();\r\n        ///const int8* const valid = particlePairs.GetValidBuffer();\r\n        ///for (int32 i = 0; i < pairCount; ++i)\r\n        ///{\r\n        ///  if (valid[i])\r\n        ///  {\r\n        ///    contactListener.EndContactParticleParticle(this, pairs[i].first, pairs[i].second);\r\n        ///  }\r\n        ///}\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    static b2ParticleContactIsZombie(contact) {\r\n        return (contact.flags & b2ParticleFlag.b2_zombieParticle) === b2ParticleFlag.b2_zombieParticle;\r\n    }\r\n    UpdateContacts(exceptZombie) {\r\n        this.UpdateProxies(this.m_proxyBuffer);\r\n        this.SortProxies(this.m_proxyBuffer);\r\n        ///b2ParticlePairSet particlePairs(&this.m_world.m_stackAllocator);\r\n        const particlePairs = new b2ParticleSystem.b2ParticlePairSet(); // TODO: static\r\n        this.NotifyContactListenerPreContact(particlePairs);\r\n        this.FindContacts(this.m_contactBuffer);\r\n        this.FilterContacts(this.m_contactBuffer);\r\n        this.NotifyContactListenerPostContact(particlePairs);\r\n        if (exceptZombie) {\r\n            this.m_contactBuffer.RemoveIf(b2ParticleSystem.b2ParticleContactIsZombie);\r\n        }\r\n    }\r\n    NotifyBodyContactListenerPreContact(fixtureSet) {\r\n        const contactListener = this.GetFixtureContactListener();\r\n        if (contactListener === null) {\r\n            return;\r\n        }\r\n        ///fixtureSet.Initialize(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.GetCount(), GetFlagsBuffer());\r\n        fixtureSet.Initialize(this.m_bodyContactBuffer, this.m_flagsBuffer);\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    NotifyBodyContactListenerPostContact(fixtureSet) {\r\n        const contactListener = this.GetFixtureContactListener();\r\n        if (contactListener === null) {\r\n            return;\r\n        }\r\n        // Loop through all new contacts, reporting any new ones, and\r\n        // \"invalidating\" the ones that still exist.\r\n        ///for (b2ParticleBodyContact* contact = m_bodyContactBuffer.Begin(); contact !== m_bodyContactBuffer.End(); ++contact)\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            // DEBUG: b2Assert(contact !== null);\r\n            ///FixtureParticle fixtureParticleToFind;\r\n            ///fixtureParticleToFind.first = contact.fixture;\r\n            ///fixtureParticleToFind.second = contact.index;\r\n            ///const int32 index = fixtureSet.Find(fixtureParticleToFind);\r\n            const index = -1; // TODO\r\n            if (index >= 0) {\r\n                // Already touching remove this from the set.\r\n                fixtureSet.Invalidate(index);\r\n            }\r\n            else {\r\n                // Just started touching, report it!\r\n                contactListener.BeginContactFixtureParticle(this, contact);\r\n            }\r\n        }\r\n        // If the contact listener is enabled, report all fixtures that are no\r\n        // longer in contact with particles.\r\n        ///const FixtureParticle* const fixtureParticles = fixtureSet.GetBuffer();\r\n        ///const int8* const fixtureParticlesValid = fixtureSet.GetValidBuffer();\r\n        ///const int32 fixtureParticleCount = fixtureSet.GetCount();\r\n        ///for (int32 i = 0; i < fixtureParticleCount; ++i)\r\n        ///{\r\n        ///  if (fixtureParticlesValid[i])\r\n        ///  {\r\n        ///    const FixtureParticle* const fixtureParticle = &fixtureParticles[i];\r\n        ///    contactListener.EndContactFixtureParticle(fixtureParticle.first, this, fixtureParticle.second);\r\n        ///  }\r\n        ///}\r\n        throw new Error(); // TODO: notify\r\n    }\r\n    UpdateBodyContacts() {\r\n        const s_aabb = b2ParticleSystem.UpdateBodyContacts_s_aabb;\r\n        // If the particle contact listener is enabled, generate a set of\r\n        // fixture / particle contacts.\r\n        ///FixtureParticleSet fixtureSet(&m_world.m_stackAllocator);\r\n        const fixtureSet = new b2ParticleSystem.FixtureParticleSet(); // TODO: static\r\n        this.NotifyBodyContactListenerPreContact(fixtureSet);\r\n        if (this.m_stuckThreshold > 0) {\r\n            if (!this.m_bodyContactCountBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (!this.m_lastBodyContactStepBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (!this.m_consecutiveContactStepsBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const particleCount = this.GetParticleCount();\r\n            for (let i = 0; i < particleCount; i++) {\r\n                // Detect stuck particles, see comment in\r\n                // b2ParticleSystem::DetectStuckParticle()\r\n                this.m_bodyContactCountBuffer.data[i] = 0;\r\n                if (this.m_timestamp > (this.m_lastBodyContactStepBuffer.data[i] + 1)) {\r\n                    this.m_consecutiveContactStepsBuffer.data[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        this.m_bodyContactBuffer.SetCount(0);\r\n        this.m_stuckParticleBuffer.SetCount(0);\r\n        const aabb = s_aabb;\r\n        this.ComputeAABB(aabb);\r\n        const callback = new b2ParticleSystem.UpdateBodyContactsCallback(this, this.GetFixtureContactFilter());\r\n        this.m_world.QueryAABB(callback, aabb);\r\n        if (this.m_def.strictContactCheck) {\r\n            this.RemoveSpuriousBodyContacts();\r\n        }\r\n        this.NotifyBodyContactListenerPostContact(fixtureSet);\r\n    }\r\n    Solve(step) {\r\n        const s_subStep = b2ParticleSystem.Solve_s_subStep;\r\n        if (this.m_count === 0) {\r\n            return;\r\n        }\r\n        // If particle lifetimes are enabled, destroy particles that are too old.\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            this.SolveLifetimes(step);\r\n        }\r\n        if (this.m_allParticleFlags & b2ParticleFlag.b2_zombieParticle) {\r\n            this.SolveZombie();\r\n        }\r\n        if (this.m_needsUpdateAllParticleFlags) {\r\n            this.UpdateAllParticleFlags();\r\n        }\r\n        if (this.m_needsUpdateAllGroupFlags) {\r\n            this.UpdateAllGroupFlags();\r\n        }\r\n        if (this.m_paused) {\r\n            return;\r\n        }\r\n        for (this.m_iterationIndex = 0; this.m_iterationIndex < step.particleIterations; this.m_iterationIndex++) {\r\n            ++this.m_timestamp;\r\n            const subStep = s_subStep.Copy(step);\r\n            subStep.dt /= step.particleIterations;\r\n            subStep.inv_dt *= step.particleIterations;\r\n            this.UpdateContacts(false);\r\n            this.UpdateBodyContacts();\r\n            this.ComputeWeight();\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth) {\r\n                this.ComputeDepth();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_reactiveParticle) {\r\n                this.UpdatePairsAndTriadsWithReactiveParticles();\r\n            }\r\n            if (this.m_hasForce) {\r\n                this.SolveForce(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_viscousParticle) {\r\n                this.SolveViscous();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_repulsiveParticle) {\r\n                this.SolveRepulsive(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_powderParticle) {\r\n                this.SolvePowder(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_tensileParticle) {\r\n                this.SolveTensile(subStep);\r\n            }\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                this.SolveSolid(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_colorMixingParticle) {\r\n                this.SolveColorMixing();\r\n            }\r\n            this.SolveGravity(subStep);\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\r\n                this.SolveStaticPressure(subStep);\r\n            }\r\n            this.SolvePressure(subStep);\r\n            this.SolveDamping(subStep);\r\n            if (this.m_allParticleFlags & b2ParticleSystem.k_extraDampingFlags) {\r\n                this.SolveExtraDamping();\r\n            }\r\n            // SolveElastic and SolveSpring refer the current velocities for\r\n            // numerical stability, they should be called as late as possible.\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_elasticParticle) {\r\n                this.SolveElastic(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_springParticle) {\r\n                this.SolveSpring(subStep);\r\n            }\r\n            this.LimitVelocity(subStep);\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                this.SolveRigidDamping();\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_barrierParticle) {\r\n                this.SolveBarrier(subStep);\r\n            }\r\n            // SolveCollision, SolveRigid and SolveWall should be called after\r\n            // other force functions because they may require particles to have\r\n            // specific velocities.\r\n            this.SolveCollision(subStep);\r\n            if (this.m_allGroupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                this.SolveRigid(subStep);\r\n            }\r\n            if (this.m_allParticleFlags & b2ParticleFlag.b2_wallParticle) {\r\n                this.SolveWall();\r\n            }\r\n            // The particle positions can be updated only at the end of substep.\r\n            if (!this.m_positionBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (!this.m_velocityBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                ///m_positionBuffer.data[i] += subStep.dt * m_velocityBuffer.data[i];\r\n                this.m_positionBuffer.data[i].SelfMulAdd(subStep.dt, this.m_velocityBuffer.data[i]);\r\n            }\r\n        }\r\n    }\r\n    SolveCollision(step) {\r\n        const s_aabb = b2ParticleSystem.SolveCollision_s_aabb;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // This function detects particles which are crossing boundary of bodies\r\n        // and modifies velocities of them so that they will move just in front of\r\n        // boundary. This function function also applies the reaction force to\r\n        // bodies as precisely as the numerical stability is kept.\r\n        const aabb = s_aabb;\r\n        aabb.lowerBound.x = +b2_maxFloat;\r\n        aabb.lowerBound.y = +b2_maxFloat;\r\n        aabb.upperBound.x = -b2_maxFloat;\r\n        aabb.upperBound.y = -b2_maxFloat;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            const v = vel_data[i];\r\n            const p1 = pos_data[i];\r\n            ///let p2 = p1 + step.dt * v;\r\n            const p2_x = p1.x + step.dt * v.x;\r\n            const p2_y = p1.y + step.dt * v.y;\r\n            ///aabb.lowerBound = b2Min(aabb.lowerBound, b2Min(p1, p2));\r\n            aabb.lowerBound.x = b2Min(aabb.lowerBound.x, b2Min(p1.x, p2_x));\r\n            aabb.lowerBound.y = b2Min(aabb.lowerBound.y, b2Min(p1.y, p2_y));\r\n            ///aabb.upperBound = b2Max(aabb.upperBound, b2Max(p1, p2));\r\n            aabb.upperBound.x = b2Max(aabb.upperBound.x, b2Max(p1.x, p2_x));\r\n            aabb.upperBound.y = b2Max(aabb.upperBound.y, b2Max(p1.y, p2_y));\r\n        }\r\n        const callback = new b2ParticleSystem.SolveCollisionCallback(this, step);\r\n        this.m_world.QueryAABB(callback, aabb);\r\n    }\r\n    LimitVelocity(step) {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const criticalVelocitySquared = this.GetCriticalVelocitySquared(step);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            const v = vel_data[i];\r\n            const v2 = b2Vec2.DotVV(v, v);\r\n            if (v2 > criticalVelocitySquared) {\r\n                ///v *= b2Sqrt(criticalVelocitySquared / v2);\r\n                v.SelfMul(b2Sqrt(criticalVelocitySquared / v2));\r\n            }\r\n        }\r\n    }\r\n    SolveGravity(step) {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const s_gravity = b2ParticleSystem.SolveGravity_s_gravity;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        ///b2Vec2 gravity = step.dt * m_def.gravityScale * m_world.GetGravity();\r\n        const gravity = b2Vec2.MulSV(step.dt * this.m_def.gravityScale, this.m_world.GetGravity(), s_gravity);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            vel_data[i].SelfAdd(gravity);\r\n        }\r\n    }\r\n    SolveBarrier(step) {\r\n        const s_aabb = b2ParticleSystem.SolveBarrier_s_aabb;\r\n        const s_va = b2ParticleSystem.SolveBarrier_s_va;\r\n        const s_vb = b2ParticleSystem.SolveBarrier_s_vb;\r\n        const s_pba = b2ParticleSystem.SolveBarrier_s_pba;\r\n        const s_vba = b2ParticleSystem.SolveBarrier_s_vba;\r\n        const s_vc = b2ParticleSystem.SolveBarrier_s_vc;\r\n        const s_pca = b2ParticleSystem.SolveBarrier_s_pca;\r\n        const s_vca = b2ParticleSystem.SolveBarrier_s_vca;\r\n        const s_qba = b2ParticleSystem.SolveBarrier_s_qba;\r\n        const s_qca = b2ParticleSystem.SolveBarrier_s_qca;\r\n        const s_dv = b2ParticleSystem.SolveBarrier_s_dv;\r\n        const s_f = b2ParticleSystem.SolveBarrier_s_f;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // If a particle is passing between paired barrier particles,\r\n        // its velocity will be decelerated to avoid passing.\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            const flags = this.m_flagsBuffer.data[i];\r\n            ///if ((flags & b2ParticleSystem.k_barrierWallFlags) === b2ParticleSystem.k_barrierWallFlags)\r\n            if ((flags & b2ParticleSystem.k_barrierWallFlags) !== 0) {\r\n                vel_data[i].SetZero();\r\n            }\r\n        }\r\n        const tmax = b2_barrierCollisionTime * step.dt;\r\n        const mass = this.GetParticleMass();\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            const pair = this.m_pairBuffer.data[k];\r\n            if (pair.flags & b2ParticleFlag.b2_barrierParticle) {\r\n                const a = pair.indexA;\r\n                const b = pair.indexB;\r\n                const pa = pos_data[a];\r\n                const pb = pos_data[b];\r\n                /// b2AABB aabb;\r\n                const aabb = s_aabb;\r\n                ///aabb.lowerBound = b2Min(pa, pb);\r\n                b2Vec2.MinV(pa, pb, aabb.lowerBound);\r\n                ///aabb.upperBound = b2Max(pa, pb);\r\n                b2Vec2.MaxV(pa, pb, aabb.upperBound);\r\n                const aGroup = this.m_groupBuffer[a];\r\n                const bGroup = this.m_groupBuffer[b];\r\n                ///b2Vec2 va = GetLinearVelocity(aGroup, a, pa);\r\n                const va = this.GetLinearVelocity(aGroup, a, pa, s_va);\r\n                ///b2Vec2 vb = GetLinearVelocity(bGroup, b, pb);\r\n                const vb = this.GetLinearVelocity(bGroup, b, pb, s_vb);\r\n                ///b2Vec2 pba = pb - pa;\r\n                const pba = b2Vec2.SubVV(pb, pa, s_pba);\r\n                ///b2Vec2 vba = vb - va;\r\n                const vba = b2Vec2.SubVV(vb, va, s_vba);\r\n                ///InsideBoundsEnumerator enumerator = GetInsideBoundsEnumerator(aabb);\r\n                const enumerator = this.GetInsideBoundsEnumerator(aabb);\r\n                let c;\r\n                while ((c = enumerator.GetNext()) >= 0) {\r\n                    const pc = pos_data[c];\r\n                    const cGroup = this.m_groupBuffer[c];\r\n                    if (aGroup !== cGroup && bGroup !== cGroup) {\r\n                        ///b2Vec2 vc = GetLinearVelocity(cGroup, c, pc);\r\n                        const vc = this.GetLinearVelocity(cGroup, c, pc, s_vc);\r\n                        // Solve the equation below:\r\n                        //   (1-s)*(pa+t*va)+s*(pb+t*vb) = pc+t*vc\r\n                        // which expresses that the particle c will pass a line\r\n                        // connecting the particles a and b at the time of t.\r\n                        // if s is between 0 and 1, c will pass between a and b.\r\n                        ///b2Vec2 pca = pc - pa;\r\n                        const pca = b2Vec2.SubVV(pc, pa, s_pca);\r\n                        ///b2Vec2 vca = vc - va;\r\n                        const vca = b2Vec2.SubVV(vc, va, s_vca);\r\n                        const e2 = b2Vec2.CrossVV(vba, vca);\r\n                        const e1 = b2Vec2.CrossVV(pba, vca) - b2Vec2.CrossVV(pca, vba);\r\n                        const e0 = b2Vec2.CrossVV(pba, pca);\r\n                        let s, t;\r\n                        ///b2Vec2 qba, qca;\r\n                        const qba = s_qba, qca = s_qca;\r\n                        if (e2 === 0) {\r\n                            if (e1 === 0) {\r\n                                continue;\r\n                            }\r\n                            t = -e0 / e1;\r\n                            if (!(t >= 0 && t < tmax)) {\r\n                                continue;\r\n                            }\r\n                            ///qba = pba + t * vba;\r\n                            b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                            ///qca = pca + t * vca;\r\n                            b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                            s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                            if (!(s >= 0 && s <= 1)) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                        else {\r\n                            const det = e1 * e1 - 4 * e0 * e2;\r\n                            if (det < 0) {\r\n                                continue;\r\n                            }\r\n                            const sqrtDet = b2Sqrt(det);\r\n                            let t1 = (-e1 - sqrtDet) / (2 * e2);\r\n                            let t2 = (-e1 + sqrtDet) / (2 * e2);\r\n                            ///if (t1 > t2) b2Swap(t1, t2);\r\n                            if (t1 > t2) {\r\n                                const tmp = t1;\r\n                                t1 = t2;\r\n                                t2 = tmp;\r\n                            }\r\n                            t = t1;\r\n                            ///qba = pba + t * vba;\r\n                            b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                            ///qca = pca + t * vca;\r\n                            b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                            ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\r\n                            s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                            if (!(t >= 0 && t < tmax && s >= 0 && s <= 1)) {\r\n                                t = t2;\r\n                                if (!(t >= 0 && t < tmax)) {\r\n                                    continue;\r\n                                }\r\n                                ///qba = pba + t * vba;\r\n                                b2Vec2.AddVMulSV(pba, t, vba, qba);\r\n                                ///qca = pca + t * vca;\r\n                                b2Vec2.AddVMulSV(pca, t, vca, qca);\r\n                                ///s = b2Dot(qba, qca) / b2Dot(qba, qba);\r\n                                s = b2Vec2.DotVV(qba, qca) / b2Vec2.DotVV(qba, qba);\r\n                                if (!(s >= 0 && s <= 1)) {\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                        // Apply a force to particle c so that it will have the\r\n                        // interpolated velocity at the collision point on line ab.\r\n                        ///b2Vec2 dv = va + s * vba - vc;\r\n                        const dv = s_dv;\r\n                        dv.x = va.x + s * vba.x - vc.x;\r\n                        dv.y = va.y + s * vba.y - vc.y;\r\n                        ///b2Vec2 f = GetParticleMass() * dv;\r\n                        const f = b2Vec2.MulSV(mass, dv, s_f);\r\n                        if (cGroup && this.IsRigidGroup(cGroup)) {\r\n                            // If c belongs to a rigid group, the force will be\r\n                            // distributed in the group.\r\n                            const mass = cGroup.GetMass();\r\n                            const inertia = cGroup.GetInertia();\r\n                            if (mass > 0) {\r\n                                ///cGroup.m_linearVelocity += 1 / mass * f;\r\n                                cGroup.m_linearVelocity.SelfMulAdd(1 / mass, f);\r\n                            }\r\n                            if (inertia > 0) {\r\n                                ///cGroup.m_angularVelocity += b2Cross(pc - cGroup.GetCenter(), f) / inertia;\r\n                                cGroup.m_angularVelocity += b2Vec2.CrossVV(b2Vec2.SubVV(pc, cGroup.GetCenter(), b2Vec2.s_t0), f) / inertia;\r\n                            }\r\n                        }\r\n                        else {\r\n                            ///m_velocityBuffer.data[c] += dv;\r\n                            vel_data[c].SelfAdd(dv);\r\n                        }\r\n                        // Apply a reversed force to particle c after particle\r\n                        // movement so that momentum will be preserved.\r\n                        ///ParticleApplyForce(c, -step.inv_dt * f);\r\n                        this.ParticleApplyForce(c, f.SelfMul(-step.inv_dt));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveStaticPressure(step) {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        this.m_staticPressureBuffer = this.RequestBuffer(this.m_staticPressureBuffer);\r\n        const criticalPressure = this.GetCriticalPressure(step);\r\n        const pressurePerWeight = this.m_def.staticPressureStrength * criticalPressure;\r\n        const maxPressure = b2_maxParticlePressure * criticalPressure;\r\n        const relaxation = this.m_def.staticPressureRelaxation;\r\n        /// Compute pressure satisfying the modified Poisson equation:\r\n        ///   Sum_for_j((p_i - p_j) * w_ij) + relaxation * p_i =\r\n        ///   pressurePerWeight * (w_i - b2_minParticleWeight)\r\n        /// by iterating the calculation:\r\n        ///   p_i = (Sum_for_j(p_j * w_ij) + pressurePerWeight *\r\n        ///         (w_i - b2_minParticleWeight)) / (w_i + relaxation)\r\n        /// where\r\n        ///   p_i and p_j are static pressure of particle i and j\r\n        ///   w_ij is contact weight between particle i and j\r\n        ///   w_i is sum of contact weight of particle i\r\n        for (let t = 0; t < this.m_def.staticPressureIterations; t++) {\r\n            ///memset(m_accumulationBuffer, 0, sizeof(*m_accumulationBuffer) * m_count);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                this.m_accumulationBuffer[i] = 0;\r\n            }\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                const contact = this.m_contactBuffer.data[k];\r\n                if (contact.flags & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    const a = contact.indexA;\r\n                    const b = contact.indexB;\r\n                    const w = contact.weight;\r\n                    this.m_accumulationBuffer[a] += w * this.m_staticPressureBuffer[b]; // a <- b\r\n                    this.m_accumulationBuffer[b] += w * this.m_staticPressureBuffer[a]; // b <- a\r\n                }\r\n            }\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                const w = this.m_weightBuffer[i];\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    const wh = this.m_accumulationBuffer[i];\r\n                    const h = (wh + pressurePerWeight * (w - b2_minParticleWeight)) /\r\n                        (w + relaxation);\r\n                    this.m_staticPressureBuffer[i] = b2Clamp(h, 0.0, maxPressure);\r\n                }\r\n                else {\r\n                    this.m_staticPressureBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ComputeWeight() {\r\n        // calculates the sum of contact-weights for each particle\r\n        // that means dimensionless density\r\n        ///memset(m_weightBuffer, 0, sizeof(*m_weightBuffer) * m_count);\r\n        for (let k = 0; k < this.m_count; k++) {\r\n            this.m_weightBuffer[k] = 0;\r\n        }\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            const w = contact.weight;\r\n            this.m_weightBuffer[a] += w;\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const w = contact.weight;\r\n            this.m_weightBuffer[a] += w;\r\n            this.m_weightBuffer[b] += w;\r\n        }\r\n    }\r\n    SolvePressure(step) {\r\n        const s_f = b2ParticleSystem.SolvePressure_s_f;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // calculates pressure as a linear function of density\r\n        const criticalPressure = this.GetCriticalPressure(step);\r\n        const pressurePerWeight = this.m_def.pressureStrength * criticalPressure;\r\n        const maxPressure = b2_maxParticlePressure * criticalPressure;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            const w = this.m_weightBuffer[i];\r\n            const h = pressurePerWeight * b2Max(0.0, w - b2_minParticleWeight);\r\n            this.m_accumulationBuffer[i] = b2Min(h, maxPressure);\r\n        }\r\n        // ignores particles which have their own repulsive force\r\n        if (this.m_allParticleFlags & b2ParticleSystem.k_noPressureFlags) {\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleSystem.k_noPressureFlags) {\r\n                    this.m_accumulationBuffer[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        // static pressure\r\n        if (this.m_allParticleFlags & b2ParticleFlag.b2_staticPressureParticle) {\r\n            // DEBUG: b2Assert(this.m_staticPressureBuffer !== null);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_staticPressureParticle) {\r\n                    this.m_accumulationBuffer[i] += this.m_staticPressureBuffer[i];\r\n                }\r\n            }\r\n        }\r\n        // applies pressure between each particles in contact\r\n        const velocityPerPressure = step.dt / (this.m_def.density * this.m_particleDiameter);\r\n        const inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            const b = contact.body;\r\n            const w = contact.weight;\r\n            const m = contact.mass;\r\n            const n = contact.normal;\r\n            const p = pos_data[a];\r\n            const h = this.m_accumulationBuffer[a] + pressurePerWeight * w;\r\n            ///b2Vec2 f = velocityPerPressure * w * m * h * n;\r\n            const f = b2Vec2.MulSV(velocityPerPressure * w * m * h, n, s_f);\r\n            ///m_velocityBuffer.data[a] -= GetParticleInvMass() * f;\r\n            vel_data[a].SelfMulSub(inv_mass, f);\r\n            b.ApplyLinearImpulse(f, p, true);\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const w = contact.weight;\r\n            const n = contact.normal;\r\n            const h = this.m_accumulationBuffer[a] + this.m_accumulationBuffer[b];\r\n            ///b2Vec2 f = velocityPerPressure * w * h * n;\r\n            const f = b2Vec2.MulSV(velocityPerPressure * w * h, n, s_f);\r\n            ///m_velocityBuffer.data[a] -= f;\r\n            vel_data[a].SelfSub(f);\r\n            ///m_velocityBuffer.data[b] += f;\r\n            vel_data[b].SelfAdd(f);\r\n        }\r\n    }\r\n    SolveDamping(step) {\r\n        const s_v = b2ParticleSystem.SolveDamping_s_v;\r\n        const s_f = b2ParticleSystem.SolveDamping_s_f;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // reduces normal velocity of each contact\r\n        const linearDamping = this.m_def.dampingStrength;\r\n        const quadraticDamping = 1 / this.GetCriticalVelocity(step);\r\n        const inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            const b = contact.body;\r\n            const w = contact.weight;\r\n            const m = contact.mass;\r\n            const n = contact.normal;\r\n            const p = pos_data[a];\r\n            ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n            const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n            const vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                const damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\r\n                ///b2Vec2 f = damping * m * vn * n;\r\n                const f = b2Vec2.MulSV(damping * m * vn, n, s_f);\r\n                ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                vel_data[a].SelfMulAdd(inv_mass, f);\r\n                ///b.ApplyLinearImpulse(-f, p, true);\r\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const w = contact.weight;\r\n            const n = contact.normal;\r\n            ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n            const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n            const vn = b2Vec2.DotVV(v, n);\r\n            if (vn < 0) {\r\n                ///float32 damping = b2Max(linearDamping * w, b2Min(- quadraticDamping * vn, 0.5f));\r\n                const damping = b2Max(linearDamping * w, b2Min(-quadraticDamping * vn, 0.5));\r\n                ///b2Vec2 f = damping * vn * n;\r\n                const f = b2Vec2.MulSV(damping * vn, n, s_f);\r\n                ///this.m_velocityBuffer.data[a] += f;\r\n                vel_data[a].SelfAdd(f);\r\n                ///this.m_velocityBuffer.data[b] -= f;\r\n                vel_data[b].SelfSub(f);\r\n            }\r\n        }\r\n    }\r\n    SolveRigidDamping() {\r\n        const s_t0 = b2ParticleSystem.SolveRigidDamping_s_t0;\r\n        const s_t1 = b2ParticleSystem.SolveRigidDamping_s_t1;\r\n        const s_p = b2ParticleSystem.SolveRigidDamping_s_p;\r\n        const s_v = b2ParticleSystem.SolveRigidDamping_s_v;\r\n        const invMassA = [0.0], invInertiaA = [0.0], tangentDistanceA = [0.0]; // TODO: static\r\n        const invMassB = [0.0], invInertiaB = [0.0], tangentDistanceB = [0.0]; // TODO: static\r\n        // Apply impulse to rigid particle groups colliding with other objects\r\n        // to reduce relative velocity at the colliding point.\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const damping = this.m_def.dampingStrength;\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            const aGroup = this.m_groupBuffer[a];\r\n            if (aGroup && this.IsRigidGroup(aGroup)) {\r\n                const b = contact.body;\r\n                const n = contact.normal;\r\n                const w = contact.weight;\r\n                const p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - aGroup.GetLinearVelocityFromWorldPoint(p);\r\n                const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, s_t0), aGroup.GetLinearVelocityFromWorldPoint(p, s_t1), s_v);\r\n                const vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    // The group's average velocity at particle position 'p' is pushing\r\n                    // the particle into the body.\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, true, aGroup, a, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, p, n);\r\n                    // Calculate b.m_I from public functions of b2Body.\r\n                    ///this.InitDampingParameter(&invMassB, &invInertiaB, &tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\r\n                    this.InitDampingParameter(invMassB, invInertiaB, tangentDistanceB, b.GetMass(), b.GetInertia() - b.GetMass() * b.GetLocalCenter().LengthSquared(), b.GetWorldCenter(), p, n);\r\n                    ///float32 f = damping * b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\r\n                    const f = damping * b2Min(w, 1.0) * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\r\n                    ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, true, aGroup, a, f, n);\r\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], true, aGroup, a, f, n);\r\n                    ///b.ApplyLinearImpulse(-f * n, p, true);\r\n                    b.ApplyLinearImpulse(b2Vec2.MulSV(-f, n, b2Vec2.s_t0), p, true);\r\n                }\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            const n = contact.normal;\r\n            const w = contact.weight;\r\n            const aGroup = this.m_groupBuffer[a];\r\n            const bGroup = this.m_groupBuffer[b];\r\n            const aRigid = this.IsRigidGroup(aGroup);\r\n            const bRigid = this.IsRigidGroup(bGroup);\r\n            if (aGroup !== bGroup && (aRigid || bRigid)) {\r\n                ///b2Vec2 p = 0.5f * (this.m_positionBuffer.data[a] + this.m_positionBuffer.data[b]);\r\n                const p = b2Vec2.MidVV(pos_data[a], pos_data[b], s_p);\r\n                ///b2Vec2 v = GetLinearVelocity(bGroup, b, p) - GetLinearVelocity(aGroup, a, p);\r\n                const v = b2Vec2.SubVV(this.GetLinearVelocity(bGroup, b, p, s_t0), this.GetLinearVelocity(aGroup, a, p, s_t1), s_v);\r\n                const vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassA, &invInertiaA, &tangentDistanceA, aRigid, aGroup, a, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, p, n);\r\n                    ///this.InitDampingParameterWithRigidGroupOrParticle(&invMassB, &invInertiaB, &tangentDistanceB, bRigid, bGroup, b, p, n);\r\n                    this.InitDampingParameterWithRigidGroupOrParticle(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, p, n);\r\n                    ///float32 f = damping * w * this.ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, vn);\r\n                    const f = damping * w * this.ComputeDampingImpulse(invMassA[0], invInertiaA[0], tangentDistanceA[0], invMassB[0], invInertiaB[0], tangentDistanceB[0], vn);\r\n                    ///this.ApplyDamping(invMassA, invInertiaA, tangentDistanceA, aRigid, aGroup, a, f, n);\r\n                    this.ApplyDamping(invMassA[0], invInertiaA[0], tangentDistanceA[0], aRigid, aGroup, a, f, n);\r\n                    ///this.ApplyDamping(invMassB, invInertiaB, tangentDistanceB, bRigid, bGroup, b, -f, n);\r\n                    this.ApplyDamping(invMassB[0], invInertiaB[0], tangentDistanceB[0], bRigid, bGroup, b, -f, n);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveExtraDamping() {\r\n        const s_v = b2ParticleSystem.SolveExtraDamping_s_v;\r\n        const s_f = b2ParticleSystem.SolveExtraDamping_s_f;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // Applies additional damping force between bodies and particles which can\r\n        // produce strong repulsive force. Applying damping force multiple times\r\n        // is effective in suppressing vibration.\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleSystem.k_extraDampingFlags) {\r\n                const b = contact.body;\r\n                const m = contact.mass;\r\n                const n = contact.normal;\r\n                const p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n                const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n                ///float32 vn = b2Dot(v, n);\r\n                const vn = b2Vec2.DotVV(v, n);\r\n                if (vn < 0) {\r\n                    ///b2Vec2 f = 0.5f * m * vn * n;\r\n                    const f = b2Vec2.MulSV(0.5 * m * vn, n, s_f);\r\n                    ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                    vel_data[a].SelfMulAdd(inv_mass, f);\r\n                    ///b.ApplyLinearImpulse(-f, p, true);\r\n                    b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveWall() {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            if (this.m_flagsBuffer.data[i] & b2ParticleFlag.b2_wallParticle) {\r\n                vel_data[i].SetZero();\r\n            }\r\n        }\r\n    }\r\n    SolveRigid(step) {\r\n        const s_position = b2ParticleSystem.SolveRigid_s_position;\r\n        const s_rotation = b2ParticleSystem.SolveRigid_s_rotation;\r\n        const s_transform = b2ParticleSystem.SolveRigid_s_transform;\r\n        const s_velocityTransform = b2ParticleSystem.SolveRigid_s_velocityTransform;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) {\r\n                group.UpdateStatistics();\r\n                ///b2Rot rotation(step.dt * group.m_angularVelocity);\r\n                const rotation = s_rotation;\r\n                rotation.SetAngle(step.dt * group.m_angularVelocity);\r\n                ///b2Transform transform(group.m_center + step.dt * group.m_linearVelocity - b2Mul(rotation, group.m_center), rotation);\r\n                const position = b2Vec2.AddVV(group.m_center, b2Vec2.SubVV(b2Vec2.MulSV(step.dt, group.m_linearVelocity, b2Vec2.s_t0), b2Rot.MulRV(rotation, group.m_center, b2Vec2.s_t1), b2Vec2.s_t0), s_position);\r\n                const transform = s_transform;\r\n                transform.SetPositionRotation(position, rotation);\r\n                ///group.m_transform = b2Mul(transform, group.m_transform);\r\n                b2Transform.MulXX(transform, group.m_transform, group.m_transform);\r\n                const velocityTransform = s_velocityTransform;\r\n                velocityTransform.p.x = step.inv_dt * transform.p.x;\r\n                velocityTransform.p.y = step.inv_dt * transform.p.y;\r\n                velocityTransform.q.s = step.inv_dt * transform.q.s;\r\n                velocityTransform.q.c = step.inv_dt * (transform.q.c - 1);\r\n                for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                    ///m_velocityBuffer.data[i] = b2Mul(velocityTransform, m_positionBuffer.data[i]);\r\n                    b2Transform.MulXV(velocityTransform, pos_data[i], vel_data[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveElastic(step) {\r\n        const s_pa = b2ParticleSystem.SolveElastic_s_pa;\r\n        const s_pb = b2ParticleSystem.SolveElastic_s_pb;\r\n        const s_pc = b2ParticleSystem.SolveElastic_s_pc;\r\n        const s_r = b2ParticleSystem.SolveElastic_s_r;\r\n        const s_t0 = b2ParticleSystem.SolveElastic_s_t0;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const elasticStrength = step.inv_dt * this.m_def.elasticStrength;\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            const triad = this.m_triadBuffer.data[k];\r\n            if (triad.flags & b2ParticleFlag.b2_elasticParticle) {\r\n                const a = triad.indexA;\r\n                const b = triad.indexB;\r\n                const c = triad.indexC;\r\n                const oa = triad.pa;\r\n                const ob = triad.pb;\r\n                const oc = triad.pc;\r\n                ///b2Vec2 pa = m_positionBuffer.data[a];\r\n                const pa = s_pa.Copy(pos_data[a]);\r\n                ///b2Vec2 pb = m_positionBuffer.data[b];\r\n                const pb = s_pb.Copy(pos_data[b]);\r\n                ///b2Vec2 pc = m_positionBuffer.data[c];\r\n                const pc = s_pc.Copy(pos_data[c]);\r\n                const va = vel_data[a];\r\n                const vb = vel_data[b];\r\n                const vc = vel_data[c];\r\n                ///pa += step.dt * va;\r\n                pa.SelfMulAdd(step.dt, va);\r\n                ///pb += step.dt * vb;\r\n                pb.SelfMulAdd(step.dt, vb);\r\n                ///pc += step.dt * vc;\r\n                pc.SelfMulAdd(step.dt, vc);\r\n                ///b2Vec2 midPoint = (float32) 1 / 3 * (pa + pb + pc);\r\n                const midPoint_x = (pa.x + pb.x + pc.x) / 3.0;\r\n                const midPoint_y = (pa.y + pb.y + pc.y) / 3.0;\r\n                ///pa -= midPoint;\r\n                pa.x -= midPoint_x;\r\n                pa.y -= midPoint_y;\r\n                ///pb -= midPoint;\r\n                pb.x -= midPoint_x;\r\n                pb.y -= midPoint_y;\r\n                ///pc -= midPoint;\r\n                pc.x -= midPoint_x;\r\n                pc.y -= midPoint_y;\r\n                ///b2Rot r;\r\n                const r = s_r;\r\n                r.s = b2Vec2.CrossVV(oa, pa) + b2Vec2.CrossVV(ob, pb) + b2Vec2.CrossVV(oc, pc);\r\n                r.c = b2Vec2.DotVV(oa, pa) + b2Vec2.DotVV(ob, pb) + b2Vec2.DotVV(oc, pc);\r\n                const r2 = r.s * r.s + r.c * r.c;\r\n                let invR = b2InvSqrt(r2);\r\n                if (!isFinite(invR)) {\r\n                    invR = 1.98177537e+019;\r\n                }\r\n                r.s *= invR;\r\n                r.c *= invR;\r\n                ///r.angle = Math.atan2(r.s, r.c); // TODO: optimize\r\n                const strength = elasticStrength * triad.strength;\r\n                ///va += strength * (b2Mul(r, oa) - pa);\r\n                b2Rot.MulRV(r, oa, s_t0);\r\n                b2Vec2.SubVV(s_t0, pa, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                va.SelfAdd(s_t0);\r\n                ///vb += strength * (b2Mul(r, ob) - pb);\r\n                b2Rot.MulRV(r, ob, s_t0);\r\n                b2Vec2.SubVV(s_t0, pb, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                vb.SelfAdd(s_t0);\r\n                ///vc += strength * (b2Mul(r, oc) - pc);\r\n                b2Rot.MulRV(r, oc, s_t0);\r\n                b2Vec2.SubVV(s_t0, pc, s_t0);\r\n                b2Vec2.MulSV(strength, s_t0, s_t0);\r\n                vc.SelfAdd(s_t0);\r\n            }\r\n        }\r\n    }\r\n    SolveSpring(step) {\r\n        const s_pa = b2ParticleSystem.SolveSpring_s_pa;\r\n        const s_pb = b2ParticleSystem.SolveSpring_s_pb;\r\n        const s_d = b2ParticleSystem.SolveSpring_s_d;\r\n        const s_f = b2ParticleSystem.SolveSpring_s_f;\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const springStrength = step.inv_dt * this.m_def.springStrength;\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            const pair = this.m_pairBuffer.data[k];\r\n            if (pair.flags & b2ParticleFlag.b2_springParticle) {\r\n                ///int32 a = pair.indexA;\r\n                const a = pair.indexA;\r\n                ///int32 b = pair.indexB;\r\n                const b = pair.indexB;\r\n                ///b2Vec2 pa = m_positionBuffer.data[a];\r\n                const pa = s_pa.Copy(pos_data[a]);\r\n                ///b2Vec2 pb = m_positionBuffer.data[b];\r\n                const pb = s_pb.Copy(pos_data[b]);\r\n                ///b2Vec2& va = m_velocityBuffer.data[a];\r\n                const va = vel_data[a];\r\n                ///b2Vec2& vb = m_velocityBuffer.data[b];\r\n                const vb = vel_data[b];\r\n                ///pa += step.dt * va;\r\n                pa.SelfMulAdd(step.dt, va);\r\n                ///pb += step.dt * vb;\r\n                pb.SelfMulAdd(step.dt, vb);\r\n                ///b2Vec2 d = pb - pa;\r\n                const d = b2Vec2.SubVV(pb, pa, s_d);\r\n                ///float32 r0 = pair.distance;\r\n                const r0 = pair.distance;\r\n                ///float32 r1 = d.Length();\r\n                const r1 = d.Length();\r\n                ///float32 strength = springStrength * pair.strength;\r\n                const strength = springStrength * pair.strength;\r\n                ///b2Vec2 f = strength * (r0 - r1) / r1 * d;\r\n                const f = b2Vec2.MulSV(strength * (r0 - r1) / r1, d, s_f);\r\n                ///va -= f;\r\n                va.SelfSub(f);\r\n                ///vb += f;\r\n                vb.SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveTensile(step) {\r\n        const s_weightedNormal = b2ParticleSystem.SolveTensile_s_weightedNormal;\r\n        const s_s = b2ParticleSystem.SolveTensile_s_s;\r\n        const s_f = b2ParticleSystem.SolveTensile_s_f;\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // DEBUG: b2Assert(this.m_accumulation2Buffer !== null);\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            this.m_accumulation2Buffer[i] = new b2Vec2();\r\n            this.m_accumulation2Buffer[i].SetZero();\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                const w = contact.weight;\r\n                const n = contact.normal;\r\n                ///b2Vec2 weightedNormal = (1 - w) * w * n;\r\n                const weightedNormal = b2Vec2.MulSV((1 - w) * w, n, s_weightedNormal);\r\n                ///m_accumulation2Buffer[a] -= weightedNormal;\r\n                this.m_accumulation2Buffer[a].SelfSub(weightedNormal);\r\n                ///m_accumulation2Buffer[b] += weightedNormal;\r\n                this.m_accumulation2Buffer[b].SelfAdd(weightedNormal);\r\n            }\r\n        }\r\n        const criticalVelocity = this.GetCriticalVelocity(step);\r\n        const pressureStrength = this.m_def.surfaceTensionPressureStrength * criticalVelocity;\r\n        const normalStrength = this.m_def.surfaceTensionNormalStrength * criticalVelocity;\r\n        const maxVelocityVariation = b2_maxParticleForce * criticalVelocity;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_tensileParticle) {\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                const w = contact.weight;\r\n                const n = contact.normal;\r\n                const h = this.m_weightBuffer[a] + this.m_weightBuffer[b];\r\n                ///b2Vec2 s = m_accumulation2Buffer[b] - m_accumulation2Buffer[a];\r\n                const s = b2Vec2.SubVV(this.m_accumulation2Buffer[b], this.m_accumulation2Buffer[a], s_s);\r\n                const fn = b2Min(pressureStrength * (h - 2) + normalStrength * b2Vec2.DotVV(s, n), maxVelocityVariation) * w;\r\n                ///b2Vec2 f = fn * n;\r\n                const f = b2Vec2.MulSV(fn, n, s_f);\r\n                ///m_velocityBuffer.data[a] -= f;\r\n                vel_data[a].SelfSub(f);\r\n                ///m_velocityBuffer.data[b] += f;\r\n                vel_data[b].SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveViscous() {\r\n        const s_v = b2ParticleSystem.SolveViscous_s_v;\r\n        const s_f = b2ParticleSystem.SolveViscous_s_f;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const viscousStrength = this.m_def.viscousStrength;\r\n        const inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_viscousParticle) {\r\n                const b = contact.body;\r\n                const w = contact.weight;\r\n                const m = contact.mass;\r\n                const p = pos_data[a];\r\n                ///b2Vec2 v = b.GetLinearVelocityFromWorldPoint(p) - m_velocityBuffer.data[a];\r\n                const v = b2Vec2.SubVV(b.GetLinearVelocityFromWorldPoint(p, b2Vec2.s_t0), vel_data[a], s_v);\r\n                ///b2Vec2 f = viscousStrength * m * w * v;\r\n                const f = b2Vec2.MulSV(viscousStrength * m * w, v, s_f);\r\n                ///m_velocityBuffer.data[a] += GetParticleInvMass() * f;\r\n                vel_data[a].SelfMulAdd(inv_mass, f);\r\n                ///b.ApplyLinearImpulse(-f, p, true);\r\n                b.ApplyLinearImpulse(f.SelfNeg(), p, true);\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_viscousParticle) {\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                const w = contact.weight;\r\n                ///b2Vec2 v = m_velocityBuffer.data[b] - m_velocityBuffer.data[a];\r\n                const v = b2Vec2.SubVV(vel_data[b], vel_data[a], s_v);\r\n                ///b2Vec2 f = viscousStrength * w * v;\r\n                const f = b2Vec2.MulSV(viscousStrength * w, v, s_f);\r\n                ///m_velocityBuffer.data[a] += f;\r\n                vel_data[a].SelfAdd(f);\r\n                ///m_velocityBuffer.data[b] -= f;\r\n                vel_data[b].SelfSub(f);\r\n            }\r\n        }\r\n    }\r\n    SolveRepulsive(step) {\r\n        const s_f = b2ParticleSystem.SolveRepulsive_s_f;\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const repulsiveStrength = this.m_def.repulsiveStrength * this.GetCriticalVelocity(step);\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_repulsiveParticle) {\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\r\n                    const w = contact.weight;\r\n                    const n = contact.normal;\r\n                    ///b2Vec2 f = repulsiveStrength * w * n;\r\n                    const f = b2Vec2.MulSV(repulsiveStrength * w, n, s_f);\r\n                    ///m_velocityBuffer.data[a] -= f;\r\n                    vel_data[a].SelfSub(f);\r\n                    ///m_velocityBuffer.data[b] += f;\r\n                    vel_data[b].SelfAdd(f);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolvePowder(step) {\r\n        const s_f = b2ParticleSystem.SolvePowder_s_f;\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const pos_data = this.m_positionBuffer.data;\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const powderStrength = this.m_def.powderStrength * this.GetCriticalVelocity(step);\r\n        const minWeight = 1.0 - b2_particleStride;\r\n        const inv_mass = this.GetParticleInvMass();\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            const a = contact.index;\r\n            if (this.m_flagsBuffer.data[a] & b2ParticleFlag.b2_powderParticle) {\r\n                const w = contact.weight;\r\n                if (w > minWeight) {\r\n                    const b = contact.body;\r\n                    const m = contact.mass;\r\n                    const p = pos_data[a];\r\n                    const n = contact.normal;\r\n                    const f = b2Vec2.MulSV(powderStrength * m * (w - minWeight), n, s_f);\r\n                    vel_data[a].SelfMulSub(inv_mass, f);\r\n                    b.ApplyLinearImpulse(f, p, true);\r\n                }\r\n            }\r\n        }\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            if (contact.flags & b2ParticleFlag.b2_powderParticle) {\r\n                const w = contact.weight;\r\n                if (w > minWeight) {\r\n                    const a = contact.indexA;\r\n                    const b = contact.indexB;\r\n                    const n = contact.normal;\r\n                    const f = b2Vec2.MulSV(powderStrength * (w - minWeight), n, s_f);\r\n                    vel_data[a].SelfSub(f);\r\n                    vel_data[b].SelfAdd(f);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveSolid(step) {\r\n        const s_f = b2ParticleSystem.SolveSolid_s_f;\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        // applies extra repulsive force from solid particle groups\r\n        this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\r\n        const ejectionStrength = step.inv_dt * this.m_def.ejectionStrength;\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            const a = contact.indexA;\r\n            const b = contact.indexB;\r\n            if (this.m_groupBuffer[a] !== this.m_groupBuffer[b]) {\r\n                const w = contact.weight;\r\n                const n = contact.normal;\r\n                const h = this.m_depthBuffer[a] + this.m_depthBuffer[b];\r\n                const f = b2Vec2.MulSV(ejectionStrength * h * w, n, s_f);\r\n                vel_data[a].SelfSub(f);\r\n                vel_data[b].SelfAdd(f);\r\n            }\r\n        }\r\n    }\r\n    SolveForce(step) {\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const vel_data = this.m_velocityBuffer.data;\r\n        const velocityPerForce = step.dt * this.GetParticleInvMass();\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            ///m_velocityBuffer.data[i] += velocityPerForce * m_forceBuffer[i];\r\n            vel_data[i].SelfMulAdd(velocityPerForce, this.m_forceBuffer[i]);\r\n        }\r\n        this.m_hasForce = false;\r\n    }\r\n    SolveColorMixing() {\r\n        // mixes color between contacting particles\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_colorBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        const colorMixing = 0.5 * this.m_def.colorMixingStrength;\r\n        if (colorMixing) {\r\n            for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n                const contact = this.m_contactBuffer.data[k];\r\n                const a = contact.indexA;\r\n                const b = contact.indexB;\r\n                if (this.m_flagsBuffer.data[a] & this.m_flagsBuffer.data[b] &\r\n                    b2ParticleFlag.b2_colorMixingParticle) {\r\n                    const colorA = this.m_colorBuffer.data[a];\r\n                    const colorB = this.m_colorBuffer.data[b];\r\n                    // Use the static method to ensure certain compilers inline\r\n                    // this correctly.\r\n                    b2Color.MixColors(colorA, colorB, colorMixing);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SolveZombie() {\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        // removes particles with zombie flag\r\n        let newCount = 0;\r\n        ///int32* newIndices = (int32*) this.m_world.m_stackAllocator.Allocate(sizeof(int32) * this.m_count);\r\n        const newIndices = []; // TODO: static\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            newIndices[i] = b2_invalidParticleIndex;\r\n        }\r\n        // DEBUG: b2Assert(newIndices.length === this.m_count);\r\n        let allParticleFlags = 0;\r\n        for (let i = 0; i < this.m_count; i++) {\r\n            const flags = this.m_flagsBuffer.data[i];\r\n            if (flags & b2ParticleFlag.b2_zombieParticle) {\r\n                const destructionListener = this.m_world.m_destructionListener;\r\n                if ((flags & b2ParticleFlag.b2_destructionListenerParticle) && destructionListener) {\r\n                    destructionListener.SayGoodbyeParticle(this, i);\r\n                }\r\n                // Destroy particle handle.\r\n                if (this.m_handleIndexBuffer.data) {\r\n                    const handle = this.m_handleIndexBuffer.data[i];\r\n                    if (handle) {\r\n                        handle.SetIndex(b2_invalidParticleIndex);\r\n                        this.m_handleIndexBuffer.data[i] = null;\r\n                        ///m_handleAllocator.Free(handle);\r\n                    }\r\n                }\r\n                newIndices[i] = b2_invalidParticleIndex;\r\n            }\r\n            else {\r\n                newIndices[i] = newCount;\r\n                if (i !== newCount) {\r\n                    // Update handle to reference new particle index.\r\n                    if (this.m_handleIndexBuffer.data) {\r\n                        const handle = this.m_handleIndexBuffer.data[i];\r\n                        if (handle) {\r\n                            handle.SetIndex(newCount);\r\n                        }\r\n                        this.m_handleIndexBuffer.data[newCount] = handle;\r\n                    }\r\n                    this.m_flagsBuffer.data[newCount] = this.m_flagsBuffer.data[i];\r\n                    if (this.m_lastBodyContactStepBuffer.data) {\r\n                        this.m_lastBodyContactStepBuffer.data[newCount] = this.m_lastBodyContactStepBuffer.data[i];\r\n                    }\r\n                    if (this.m_bodyContactCountBuffer.data) {\r\n                        this.m_bodyContactCountBuffer.data[newCount] = this.m_bodyContactCountBuffer.data[i];\r\n                    }\r\n                    if (this.m_consecutiveContactStepsBuffer.data) {\r\n                        this.m_consecutiveContactStepsBuffer.data[newCount] = this.m_consecutiveContactStepsBuffer.data[i];\r\n                    }\r\n                    this.m_positionBuffer.data[newCount].Copy(this.m_positionBuffer.data[i]);\r\n                    this.m_velocityBuffer.data[newCount].Copy(this.m_velocityBuffer.data[i]);\r\n                    this.m_groupBuffer[newCount] = this.m_groupBuffer[i];\r\n                    if (this.m_hasForce) {\r\n                        this.m_forceBuffer[newCount].Copy(this.m_forceBuffer[i]);\r\n                    }\r\n                    if (this.m_staticPressureBuffer) {\r\n                        this.m_staticPressureBuffer[newCount] = this.m_staticPressureBuffer[i];\r\n                    }\r\n                    if (this.m_depthBuffer) {\r\n                        this.m_depthBuffer[newCount] = this.m_depthBuffer[i];\r\n                    }\r\n                    if (this.m_colorBuffer.data) {\r\n                        this.m_colorBuffer.data[newCount].Copy(this.m_colorBuffer.data[i]);\r\n                    }\r\n                    if (this.m_userDataBuffer.data) {\r\n                        this.m_userDataBuffer.data[newCount] = this.m_userDataBuffer.data[i];\r\n                    }\r\n                    if (this.m_expirationTimeBuffer.data) {\r\n                        this.m_expirationTimeBuffer.data[newCount] = this.m_expirationTimeBuffer.data[i];\r\n                    }\r\n                }\r\n                newCount++;\r\n                allParticleFlags |= flags;\r\n            }\r\n        }\r\n        // predicate functions\r\n        const Test = {\r\n            ///static bool IsProxyInvalid(const Proxy& proxy)\r\n            IsProxyInvalid: (proxy) => {\r\n                return proxy.index < 0;\r\n            },\r\n            ///static bool IsContactInvalid(const b2ParticleContact& contact)\r\n            IsContactInvalid: (contact) => {\r\n                return contact.indexA < 0 || contact.indexB < 0;\r\n            },\r\n            ///static bool IsBodyContactInvalid(const b2ParticleBodyContact& contact)\r\n            IsBodyContactInvalid: (contact) => {\r\n                return contact.index < 0;\r\n            },\r\n            ///static bool IsPairInvalid(const b2ParticlePair& pair)\r\n            IsPairInvalid: (pair) => {\r\n                return pair.indexA < 0 || pair.indexB < 0;\r\n            },\r\n            ///static bool IsTriadInvalid(const b2ParticleTriad& triad)\r\n            IsTriadInvalid: (triad) => {\r\n                return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0;\r\n            },\r\n        };\r\n        // update proxies\r\n        for (let k = 0; k < this.m_proxyBuffer.count; k++) {\r\n            const proxy = this.m_proxyBuffer.data[k];\r\n            proxy.index = newIndices[proxy.index];\r\n        }\r\n        this.m_proxyBuffer.RemoveIf(Test.IsProxyInvalid);\r\n        // update contacts\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            contact.indexA = newIndices[contact.indexA];\r\n            contact.indexB = newIndices[contact.indexB];\r\n        }\r\n        this.m_contactBuffer.RemoveIf(Test.IsContactInvalid);\r\n        // update particle-body contacts\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            contact.index = newIndices[contact.index];\r\n        }\r\n        this.m_bodyContactBuffer.RemoveIf(Test.IsBodyContactInvalid);\r\n        // update pairs\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            const pair = this.m_pairBuffer.data[k];\r\n            pair.indexA = newIndices[pair.indexA];\r\n            pair.indexB = newIndices[pair.indexB];\r\n        }\r\n        this.m_pairBuffer.RemoveIf(Test.IsPairInvalid);\r\n        // update triads\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            const triad = this.m_triadBuffer.data[k];\r\n            triad.indexA = newIndices[triad.indexA];\r\n            triad.indexB = newIndices[triad.indexB];\r\n            triad.indexC = newIndices[triad.indexC];\r\n        }\r\n        this.m_triadBuffer.RemoveIf(Test.IsTriadInvalid);\r\n        // Update lifetime indices.\r\n        if (this.m_indexByExpirationTimeBuffer.data) {\r\n            let writeOffset = 0;\r\n            for (let readOffset = 0; readOffset < this.m_count; readOffset++) {\r\n                const newIndex = newIndices[this.m_indexByExpirationTimeBuffer.data[readOffset]];\r\n                if (newIndex !== b2_invalidParticleIndex) {\r\n                    this.m_indexByExpirationTimeBuffer.data[writeOffset++] = newIndex;\r\n                }\r\n            }\r\n        }\r\n        // update groups\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            let firstIndex = newCount;\r\n            let lastIndex = 0;\r\n            let modified = false;\r\n            for (let i = group.m_firstIndex; i < group.m_lastIndex; i++) {\r\n                const j = newIndices[i];\r\n                if (j >= 0) {\r\n                    firstIndex = b2Min(firstIndex, j);\r\n                    lastIndex = b2Max(lastIndex, j + 1);\r\n                }\r\n                else {\r\n                    modified = true;\r\n                }\r\n            }\r\n            if (firstIndex < lastIndex) {\r\n                group.m_firstIndex = firstIndex;\r\n                group.m_lastIndex = lastIndex;\r\n                if (modified) {\r\n                    if (group.m_groupFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                        this.SetGroupFlags(group, group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                group.m_firstIndex = 0;\r\n                group.m_lastIndex = 0;\r\n                if (!(group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupCanBeEmpty)) {\r\n                    this.SetGroupFlags(group, group.m_groupFlags | b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed);\r\n                }\r\n            }\r\n        }\r\n        // update particle count\r\n        this.m_count = newCount;\r\n        ///m_world.m_stackAllocator.Free(newIndices);\r\n        this.m_allParticleFlags = allParticleFlags;\r\n        this.m_needsUpdateAllParticleFlags = false;\r\n        // destroy bodies with no particles\r\n        for (let group = this.m_groupList; group;) {\r\n            const next = group.GetNext();\r\n            if (group.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupWillBeDestroyed) {\r\n                this.DestroyParticleGroup(group);\r\n            }\r\n            group = next;\r\n        }\r\n    }\r\n    /**\r\n     * Destroy all particles which have outlived their lifetimes set\r\n     * by SetParticleLifetime().\r\n     */\r\n    SolveLifetimes(step) {\r\n        if (!this.m_expirationTimeBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_indexByExpirationTimeBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        // Update the time elapsed.\r\n        this.m_timeElapsed = this.LifetimeToExpirationTime(step.dt);\r\n        // Get the floor (non-fractional component) of the elapsed time.\r\n        const quantizedTimeElapsed = this.GetQuantizedTimeElapsed();\r\n        const expirationTimes = this.m_expirationTimeBuffer.data;\r\n        const expirationTimeIndices = this.m_indexByExpirationTimeBuffer.data;\r\n        const particleCount = this.GetParticleCount();\r\n        // Sort the lifetime buffer if it's required.\r\n        if (this.m_expirationTimeBufferRequiresSorting) {\r\n            ///const ExpirationTimeComparator expirationTimeComparator(expirationTimes);\r\n            ///std::sort(expirationTimeIndices, expirationTimeIndices + particleCount, expirationTimeComparator);\r\n            /**\r\n             * Compare the lifetime of particleIndexA and particleIndexB\r\n             * returning true if the lifetime of A is greater than B for\r\n             * particles that will expire.  If either particle's lifetime is\r\n             * infinite (<= 0.0f) this function return true if the lifetime\r\n             * of A is lesser than B. When used with std::sort() this\r\n             * results in an array of particle indicies sorted in reverse\r\n             * order by particle lifetime.\r\n             *\r\n             * For example, the set of lifetimes\r\n             * (1.0, 0.7, 0.3, 0.0, -1.0, 2.0)\r\n             * would be sorted as\r\n             * (0.0, 1.0, -2.0, 1.0, 0.7, 0.3)\r\n             */\r\n            const ExpirationTimeComparator = (particleIndexA, particleIndexB) => {\r\n                const expirationTimeA = expirationTimes[particleIndexA];\r\n                const expirationTimeB = expirationTimes[particleIndexB];\r\n                const infiniteExpirationTimeA = expirationTimeA <= 0.0;\r\n                const infiniteExpirationTimeB = expirationTimeB <= 0.0;\r\n                return infiniteExpirationTimeA === infiniteExpirationTimeB ?\r\n                    expirationTimeA > expirationTimeB : infiniteExpirationTimeA;\r\n            };\r\n            std_sort(expirationTimeIndices, 0, particleCount, ExpirationTimeComparator);\r\n            this.m_expirationTimeBufferRequiresSorting = false;\r\n        }\r\n        // Destroy particles which have expired.\r\n        for (let i = particleCount - 1; i >= 0; --i) {\r\n            const particleIndex = expirationTimeIndices[i];\r\n            const expirationTime = expirationTimes[particleIndex];\r\n            // If no particles need to be destroyed, skip this.\r\n            if (quantizedTimeElapsed < expirationTime || expirationTime <= 0) {\r\n                break;\r\n            }\r\n            // Destroy this particle.\r\n            this.DestroyParticle(particleIndex);\r\n        }\r\n    }\r\n    RotateBuffer(start, mid, end) {\r\n        // move the particles assigned to the given group toward the end of array\r\n        if (start === mid || mid === end) {\r\n            return;\r\n        }\r\n        // DEBUG: b2Assert(mid >= start && mid <= end);\r\n        function newIndices(i) {\r\n            if (i < start) {\r\n                return i;\r\n            }\r\n            else if (i < mid) {\r\n                return i + end - mid;\r\n            }\r\n            else if (i < end) {\r\n                return i + start - mid;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        if (!this.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        ///std::rotate(m_flagsBuffer.data + start, m_flagsBuffer.data + mid, m_flagsBuffer.data + end);\r\n        std_rotate(this.m_flagsBuffer.data, start, mid, end);\r\n        if (this.m_lastBodyContactStepBuffer.data) {\r\n            ///std::rotate(m_lastBodyContactStepBuffer.data + start, m_lastBodyContactStepBuffer.data + mid, m_lastBodyContactStepBuffer.data + end);\r\n            std_rotate(this.m_lastBodyContactStepBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_bodyContactCountBuffer.data) {\r\n            ///std::rotate(m_bodyContactCountBuffer.data + start, m_bodyContactCountBuffer.data + mid, m_bodyContactCountBuffer.data + end);\r\n            std_rotate(this.m_bodyContactCountBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_consecutiveContactStepsBuffer.data) {\r\n            ///std::rotate(m_consecutiveContactStepsBuffer.data + start, m_consecutiveContactStepsBuffer.data + mid, m_consecutiveContactStepsBuffer.data + end);\r\n            std_rotate(this.m_consecutiveContactStepsBuffer.data, start, mid, end);\r\n        }\r\n        ///std::rotate(m_positionBuffer.data + start, m_positionBuffer.data + mid, m_positionBuffer.data + end);\r\n        std_rotate(this.m_positionBuffer.data, start, mid, end);\r\n        ///std::rotate(m_velocityBuffer.data + start, m_velocityBuffer.data + mid, m_velocityBuffer.data + end);\r\n        std_rotate(this.m_velocityBuffer.data, start, mid, end);\r\n        ///std::rotate(m_groupBuffer + start, m_groupBuffer + mid, m_groupBuffer + end);\r\n        std_rotate(this.m_groupBuffer, start, mid, end);\r\n        if (this.m_hasForce) {\r\n            ///std::rotate(m_forceBuffer + start, m_forceBuffer + mid, m_forceBuffer + end);\r\n            std_rotate(this.m_forceBuffer, start, mid, end);\r\n        }\r\n        if (this.m_staticPressureBuffer) {\r\n            ///std::rotate(m_staticPressureBuffer + start, m_staticPressureBuffer + mid, m_staticPressureBuffer + end);\r\n            std_rotate(this.m_staticPressureBuffer, start, mid, end);\r\n        }\r\n        if (this.m_depthBuffer) {\r\n            ///std::rotate(m_depthBuffer + start, m_depthBuffer + mid, m_depthBuffer + end);\r\n            std_rotate(this.m_depthBuffer, start, mid, end);\r\n        }\r\n        if (this.m_colorBuffer.data) {\r\n            ///std::rotate(m_colorBuffer.data + start, m_colorBuffer.data + mid, m_colorBuffer.data + end);\r\n            std_rotate(this.m_colorBuffer.data, start, mid, end);\r\n        }\r\n        if (this.m_userDataBuffer.data) {\r\n            ///std::rotate(m_userDataBuffer.data + start, m_userDataBuffer.data + mid, m_userDataBuffer.data + end);\r\n            std_rotate(this.m_userDataBuffer.data, start, mid, end);\r\n        }\r\n        // Update handle indices.\r\n        if (this.m_handleIndexBuffer.data) {\r\n            ///std::rotate(m_handleIndexBuffer.data + start, m_handleIndexBuffer.data + mid, m_handleIndexBuffer.data + end);\r\n            std_rotate(this.m_handleIndexBuffer.data, start, mid, end);\r\n            for (let i = start; i < end; ++i) {\r\n                const handle = this.m_handleIndexBuffer.data[i];\r\n                if (handle) {\r\n                    handle.SetIndex(newIndices(handle.GetIndex()));\r\n                }\r\n            }\r\n        }\r\n        if (this.m_expirationTimeBuffer.data) {\r\n            ///std::rotate(m_expirationTimeBuffer.data + start, m_expirationTimeBuffer.data + mid, m_expirationTimeBuffer.data + end);\r\n            std_rotate(this.m_expirationTimeBuffer.data, start, mid, end);\r\n            // Update expiration time buffer indices.\r\n            const particleCount = this.GetParticleCount();\r\n            if (!this.m_indexByExpirationTimeBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const indexByExpirationTime = this.m_indexByExpirationTimeBuffer.data;\r\n            for (let i = 0; i < particleCount; ++i) {\r\n                indexByExpirationTime[i] = newIndices(indexByExpirationTime[i]);\r\n            }\r\n        }\r\n        // update proxies\r\n        for (let k = 0; k < this.m_proxyBuffer.count; k++) {\r\n            const proxy = this.m_proxyBuffer.data[k];\r\n            proxy.index = newIndices(proxy.index);\r\n        }\r\n        // update contacts\r\n        for (let k = 0; k < this.m_contactBuffer.count; k++) {\r\n            const contact = this.m_contactBuffer.data[k];\r\n            contact.indexA = newIndices(contact.indexA);\r\n            contact.indexB = newIndices(contact.indexB);\r\n        }\r\n        // update particle-body contacts\r\n        for (let k = 0; k < this.m_bodyContactBuffer.count; k++) {\r\n            const contact = this.m_bodyContactBuffer.data[k];\r\n            contact.index = newIndices(contact.index);\r\n        }\r\n        // update pairs\r\n        for (let k = 0; k < this.m_pairBuffer.count; k++) {\r\n            const pair = this.m_pairBuffer.data[k];\r\n            pair.indexA = newIndices(pair.indexA);\r\n            pair.indexB = newIndices(pair.indexB);\r\n        }\r\n        // update triads\r\n        for (let k = 0; k < this.m_triadBuffer.count; k++) {\r\n            const triad = this.m_triadBuffer.data[k];\r\n            triad.indexA = newIndices(triad.indexA);\r\n            triad.indexB = newIndices(triad.indexB);\r\n            triad.indexC = newIndices(triad.indexC);\r\n        }\r\n        // update groups\r\n        for (let group = this.m_groupList; group; group = group.GetNext()) {\r\n            group.m_firstIndex = newIndices(group.m_firstIndex);\r\n            group.m_lastIndex = newIndices(group.m_lastIndex - 1) + 1;\r\n        }\r\n    }\r\n    GetCriticalVelocity(step) {\r\n        return this.m_particleDiameter * step.inv_dt;\r\n    }\r\n    GetCriticalVelocitySquared(step) {\r\n        const velocity = this.GetCriticalVelocity(step);\r\n        return velocity * velocity;\r\n    }\r\n    GetCriticalPressure(step) {\r\n        return this.m_def.density * this.GetCriticalVelocitySquared(step);\r\n    }\r\n    GetParticleStride() {\r\n        return b2_particleStride * this.m_particleDiameter;\r\n    }\r\n    GetParticleMass() {\r\n        const stride = this.GetParticleStride();\r\n        return this.m_def.density * stride * stride;\r\n    }\r\n    GetParticleInvMass() {\r\n        ///return 1.777777 * this.m_inverseDensity * this.m_inverseDiameter * this.m_inverseDiameter;\r\n        // mass = density * stride^2, so we take the inverse of this.\r\n        const inverseStride = this.m_inverseDiameter * (1.0 / b2_particleStride);\r\n        return this.m_inverseDensity * inverseStride * inverseStride;\r\n    }\r\n    /**\r\n     * Get the world's contact filter if any particles with the\r\n     * b2_contactFilterParticle flag are present in the system.\r\n     */\r\n    GetFixtureContactFilter() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactFilterParticle) ?\r\n            this.m_world.m_contactManager.m_contactFilter : null;\r\n    }\r\n    /**\r\n     * Get the world's contact filter if any particles with the\r\n     * b2_particleContactFilterParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetParticleContactFilter() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_particleContactFilterParticle) ?\r\n            this.m_world.m_contactManager.m_contactFilter : null;\r\n    }\r\n    /**\r\n     * Get the world's contact listener if any particles with the\r\n     * b2_fixtureContactListenerParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetFixtureContactListener() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_fixtureContactListenerParticle) ?\r\n            this.m_world.m_contactManager.m_contactListener : null;\r\n    }\r\n    /**\r\n     * Get the world's contact listener if any particles with the\r\n     * b2_particleContactListenerParticle flag are present in the\r\n     * system.\r\n     */\r\n    GetParticleContactListener() {\r\n        return (this.m_allParticleFlags & b2ParticleFlag.b2_particleContactListenerParticle) ?\r\n            this.m_world.m_contactManager.m_contactListener : null;\r\n    }\r\n    SetUserOverridableBuffer(buffer, newData, newCapacity) {\r\n        // DEBUG: b2Assert(((newData !== null) && (newCapacity > 0)) || ((newData === null) && (newCapacity === 0)));\r\n        ///if (!buffer.userSuppliedCapacity)\r\n        ///{\r\n        ///this.m_world.m_blockAllocator.Free(buffer.data, sizeof(T) * m_internalAllocatedCapacity);\r\n        ///}\r\n        buffer.data = newData;\r\n        buffer.userSuppliedCapacity = newCapacity;\r\n    }\r\n    SetGroupFlags(group, newFlags) {\r\n        const oldFlags = group.m_groupFlags;\r\n        if ((oldFlags ^ newFlags) & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n            // If the b2_solidParticleGroup flag changed schedule depth update.\r\n            newFlags |= b2ParticleGroupFlag.b2_particleGroupNeedsUpdateDepth;\r\n        }\r\n        if (oldFlags & ~newFlags) {\r\n            // If any flags might be removed\r\n            this.m_needsUpdateAllGroupFlags = true;\r\n        }\r\n        if (~this.m_allGroupFlags & newFlags) {\r\n            // If any flags were added\r\n            if (newFlags & b2ParticleGroupFlag.b2_solidParticleGroup) {\r\n                this.m_depthBuffer = this.RequestBuffer(this.m_depthBuffer);\r\n            }\r\n            this.m_allGroupFlags |= newFlags;\r\n        }\r\n        group.m_groupFlags = newFlags;\r\n    }\r\n    static BodyContactCompare(lhs, rhs) {\r\n        if (lhs.index === rhs.index) {\r\n            // Subsort by weight, decreasing.\r\n            return lhs.weight > rhs.weight;\r\n        }\r\n        return lhs.index < rhs.index;\r\n    }\r\n    RemoveSpuriousBodyContacts() {\r\n        // At this point we have a list of contact candidates based on AABB\r\n        // overlap.The AABB query that  generated this returns all collidable\r\n        // fixtures overlapping particle bounding boxes.  This breaks down around\r\n        // vertices where two shapes intersect, such as a \"ground\" surface made\r\n        // of multiple b2PolygonShapes; it potentially applies a lot of spurious\r\n        // impulses from normals that should not actually contribute.  See the\r\n        // Ramp example in Testbed.\r\n        //\r\n        // To correct for this, we apply this algorithm:\r\n        //   * sort contacts by particle and subsort by weight (nearest to farthest)\r\n        //   * for each contact per particle:\r\n        //      - project a point at the contact distance along the inverse of the\r\n        //        contact normal\r\n        //      - if this intersects the fixture that generated the contact, apply\r\n        //         it, otherwise discard as impossible\r\n        //      - repeat for up to n nearest contacts, currently we get good results\r\n        //        from n=3.\r\n        ///std::sort(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleSystem::BodyContactCompare);\r\n        std_sort(this.m_bodyContactBuffer.data, 0, this.m_bodyContactBuffer.count, b2ParticleSystem.BodyContactCompare);\r\n        ///int32 discarded = 0;\r\n        ///std::remove_if(m_bodyContactBuffer.Begin(), m_bodyContactBuffer.End(), b2ParticleBodyContactRemovePredicate(this, &discarded));\r\n        ///\r\n        ///m_bodyContactBuffer.SetCount(m_bodyContactBuffer.GetCount() - discarded);\r\n        const s_n = b2ParticleSystem.RemoveSpuriousBodyContacts_s_n;\r\n        const s_pos = b2ParticleSystem.RemoveSpuriousBodyContacts_s_pos;\r\n        const s_normal = b2ParticleSystem.RemoveSpuriousBodyContacts_s_normal;\r\n        // Max number of contacts processed per particle, from nearest to farthest.\r\n        // This must be at least 2 for correctness with concave shapes; 3 was\r\n        // experimentally arrived at as looking reasonable.\r\n        const k_maxContactsPerPoint = 3;\r\n        const system = this;\r\n        // Index of last particle processed.\r\n        let lastIndex = -1;\r\n        // Number of contacts processed for the current particle.\r\n        let currentContacts = 0;\r\n        // Output the number of discarded contacts.\r\n        // let discarded = 0;\r\n        const b2ParticleBodyContactRemovePredicate = (contact) => {\r\n            // This implements the selection criteria described in\r\n            // RemoveSpuriousBodyContacts().\r\n            // This functor is iterating through a list of Body contacts per\r\n            // Particle, ordered from near to far.  For up to the maximum number of\r\n            // contacts we allow per point per step, we verify that the contact\r\n            // normal of the Body that genenerated the contact makes physical sense\r\n            // by projecting a point back along that normal and seeing if it\r\n            // intersects the fixture generating the contact.\r\n            if (contact.index !== lastIndex) {\r\n                currentContacts = 0;\r\n                lastIndex = contact.index;\r\n            }\r\n            if (currentContacts++ > k_maxContactsPerPoint) {\r\n                // ++discarded;\r\n                return true;\r\n            }\r\n            // Project along inverse normal (as returned in the contact) to get the\r\n            // point to check.\r\n            ///b2Vec2 n = contact.normal;\r\n            const n = s_n.Copy(contact.normal);\r\n            // weight is 1-(inv(diameter) * distance)\r\n            ///n *= system.m_particleDiameter * (1 - contact.weight);\r\n            n.SelfMul(system.m_particleDiameter * (1 - contact.weight));\r\n            ///b2Vec2 pos = system.m_positionBuffer.data[contact.index] + n;\r\n            if (!system.m_positionBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const pos = b2Vec2.AddVV(system.m_positionBuffer.data[contact.index], n, s_pos);\r\n            // pos is now a point projected back along the contact normal to the\r\n            // contact distance. If the surface makes sense for a contact, pos will\r\n            // now lie on or in the fixture generating\r\n            if (!contact.fixture.TestPoint(pos)) {\r\n                const childCount = contact.fixture.GetShape().GetChildCount();\r\n                for (let childIndex = 0; childIndex < childCount; childIndex++) {\r\n                    const normal = s_normal;\r\n                    const distance = contact.fixture.ComputeDistance(pos, normal, childIndex);\r\n                    if (distance < b2_linearSlop) {\r\n                        return false;\r\n                    }\r\n                }\r\n                // ++discarded;\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.m_bodyContactBuffer.count = std_remove_if(this.m_bodyContactBuffer.data, b2ParticleBodyContactRemovePredicate, this.m_bodyContactBuffer.count);\r\n    }\r\n    DetectStuckParticle(particle) {\r\n        // Detect stuck particles\r\n        //\r\n        // The basic algorithm is to allow the user to specify an optional\r\n        // threshold where we detect whenever a particle is contacting\r\n        // more than one fixture for more than threshold consecutive\r\n        // steps. This is considered to be \"stuck\", and these are put\r\n        // in a list the user can query per step, if enabled, to deal with\r\n        // such particles.\r\n        if (this.m_stuckThreshold <= 0) {\r\n            return;\r\n        }\r\n        if (!this.m_bodyContactCountBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_consecutiveContactStepsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_lastBodyContactStepBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        // Get the state variables for this particle.\r\n        ///int32 * const consecutiveCount = &m_consecutiveContactStepsBuffer.data[particle];\r\n        ///int32 * const lastStep = &m_lastBodyContactStepBuffer.data[particle];\r\n        ///int32 * const bodyCount = &m_bodyContactCountBuffer.data[particle];\r\n        // This is only called when there is a body contact for this particle.\r\n        ///++(*bodyCount);\r\n        ++this.m_bodyContactCountBuffer.data[particle];\r\n        // We want to only trigger detection once per step, the first time we\r\n        // contact more than one fixture in a step for a given particle.\r\n        ///if (*bodyCount === 2)\r\n        if (this.m_bodyContactCountBuffer.data[particle] === 2) {\r\n            ///++(*consecutiveCount);\r\n            ++this.m_consecutiveContactStepsBuffer.data[particle];\r\n            ///if (*consecutiveCount > m_stuckThreshold)\r\n            if (this.m_consecutiveContactStepsBuffer.data[particle] > this.m_stuckThreshold) {\r\n                ///int32& newStuckParticle = m_stuckParticleBuffer.Append();\r\n                ///newStuckParticle = particle;\r\n                this.m_stuckParticleBuffer.data[this.m_stuckParticleBuffer.Append()] = particle;\r\n            }\r\n        }\r\n        ///*lastStep = m_timestamp;\r\n        this.m_lastBodyContactStepBuffer.data[particle] = this.m_timestamp;\r\n    }\r\n    /**\r\n     * Determine whether a particle index is valid.\r\n     */\r\n    ValidateParticleIndex(index) {\r\n        return index >= 0 && index < this.GetParticleCount() &&\r\n            index !== b2_invalidParticleIndex;\r\n    }\r\n    /**\r\n     * Get the time elapsed in\r\n     * b2ParticleSystemDef::lifetimeGranularity.\r\n     */\r\n    GetQuantizedTimeElapsed() {\r\n        ///return (int32)(m_timeElapsed >> 32);\r\n        return Math.floor(this.m_timeElapsed / 0x100000000);\r\n    }\r\n    /**\r\n     * Convert a lifetime in seconds to an expiration time.\r\n     */\r\n    LifetimeToExpirationTime(lifetime) {\r\n        ///return m_timeElapsed + (int64)((lifetime / m_def.lifetimeGranularity) * (float32)(1LL << 32));\r\n        return this.m_timeElapsed + Math.floor(((lifetime / this.m_def.lifetimeGranularity) * 0x100000000));\r\n    }\r\n    ForceCanBeApplied(flags) {\r\n        return !(flags & b2ParticleFlag.b2_wallParticle);\r\n    }\r\n    PrepareForceBuffer() {\r\n        if (!this.m_hasForce) {\r\n            ///memset(m_forceBuffer, 0, sizeof(*m_forceBuffer) * m_count);\r\n            for (let i = 0; i < this.m_count; i++) {\r\n                this.m_forceBuffer[i].SetZero();\r\n            }\r\n            this.m_hasForce = true;\r\n        }\r\n    }\r\n    IsRigidGroup(group) {\r\n        return (group !== null) && ((group.m_groupFlags & b2ParticleGroupFlag.b2_rigidParticleGroup) !== 0);\r\n    }\r\n    GetLinearVelocity(group, particleIndex, point, out) {\r\n        if (group && this.IsRigidGroup(group)) {\r\n            return group.GetLinearVelocityFromWorldPoint(point, out);\r\n        }\r\n        else {\r\n            if (!this.m_velocityBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            ///return m_velocityBuffer.data[particleIndex];\r\n            return out.Copy(this.m_velocityBuffer.data[particleIndex]);\r\n        }\r\n    }\r\n    InitDampingParameter(invMass, invInertia, tangentDistance, mass, inertia, center, point, normal) {\r\n        ///*invMass = mass > 0 ? 1 / mass : 0;\r\n        invMass[0] = mass > 0 ? 1 / mass : 0;\r\n        ///*invInertia = inertia > 0 ? 1 / inertia : 0;\r\n        invInertia[0] = inertia > 0 ? 1 / inertia : 0;\r\n        ///*tangentDistance = b2Cross(point - center, normal);\r\n        tangentDistance[0] = b2Vec2.CrossVV(b2Vec2.SubVV(point, center, b2Vec2.s_t0), normal);\r\n    }\r\n    InitDampingParameterWithRigidGroupOrParticle(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, point, normal) {\r\n        if (group && isRigidGroup) {\r\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, group.GetMass(), group.GetInertia(), group.GetCenter(), point, normal);\r\n        }\r\n        else {\r\n            if (!this.m_flagsBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const flags = this.m_flagsBuffer.data[particleIndex];\r\n            this.InitDampingParameter(invMass, invInertia, tangentDistance, flags & b2ParticleFlag.b2_wallParticle ? 0 : this.GetParticleMass(), 0, point, point, normal);\r\n        }\r\n    }\r\n    ComputeDampingImpulse(invMassA, invInertiaA, tangentDistanceA, invMassB, invInertiaB, tangentDistanceB, normalVelocity) {\r\n        const invMass = invMassA + invInertiaA * tangentDistanceA * tangentDistanceA +\r\n            invMassB + invInertiaB * tangentDistanceB * tangentDistanceB;\r\n        return invMass > 0 ? normalVelocity / invMass : 0;\r\n    }\r\n    ApplyDamping(invMass, invInertia, tangentDistance, isRigidGroup, group, particleIndex, impulse, normal) {\r\n        if (group && isRigidGroup) {\r\n            ///group.m_linearVelocity += impulse * invMass * normal;\r\n            group.m_linearVelocity.SelfMulAdd(impulse * invMass, normal);\r\n            ///group.m_angularVelocity += impulse * tangentDistance * invInertia;\r\n            group.m_angularVelocity += impulse * tangentDistance * invInertia;\r\n        }\r\n        else {\r\n            if (!this.m_velocityBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            ///m_velocityBuffer.data[particleIndex] += impulse * invMass * normal;\r\n            this.m_velocityBuffer.data[particleIndex].SelfMulAdd(impulse * invMass, normal);\r\n        }\r\n    }\r\n}\r\nb2ParticleSystem.xTruncBits = 12;\r\nb2ParticleSystem.yTruncBits = 12;\r\nb2ParticleSystem.tagBits = 8 * 4; // 8u * sizeof(uint32);\r\nb2ParticleSystem.yOffset = 1 << (b2ParticleSystem.yTruncBits - 1);\r\nb2ParticleSystem.yShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits;\r\nb2ParticleSystem.xShift = b2ParticleSystem.tagBits - b2ParticleSystem.yTruncBits - b2ParticleSystem.xTruncBits;\r\nb2ParticleSystem.xScale = 1 << b2ParticleSystem.xShift;\r\nb2ParticleSystem.xOffset = b2ParticleSystem.xScale * (1 << (b2ParticleSystem.xTruncBits - 1));\r\nb2ParticleSystem.yMask = ((1 << b2ParticleSystem.yTruncBits) - 1) << b2ParticleSystem.yShift;\r\nb2ParticleSystem.xMask = ~b2ParticleSystem.yMask;\r\nb2ParticleSystem.DestroyParticlesInShape_s_aabb = new b2AABB();\r\nb2ParticleSystem.CreateParticleGroup_s_transform = new b2Transform();\r\nb2ParticleSystem.ComputeCollisionEnergy_s_v = new b2Vec2();\r\nb2ParticleSystem.QueryShapeAABB_s_aabb = new b2AABB();\r\nb2ParticleSystem.QueryPointAABB_s_aabb = new b2AABB();\r\nb2ParticleSystem.RayCast_s_aabb = new b2AABB();\r\nb2ParticleSystem.RayCast_s_p = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_v = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_n = new b2Vec2();\r\nb2ParticleSystem.RayCast_s_point = new b2Vec2();\r\n/**\r\n * All particle types that require creating pairs\r\n */\r\nb2ParticleSystem.k_pairFlags = b2ParticleFlag.b2_springParticle;\r\n/**\r\n * All particle types that require creating triads\r\n */\r\nb2ParticleSystem.k_triadFlags = b2ParticleFlag.b2_elasticParticle;\r\n/**\r\n * All particle types that do not produce dynamic pressure\r\n */\r\nb2ParticleSystem.k_noPressureFlags = b2ParticleFlag.b2_powderParticle | b2ParticleFlag.b2_tensileParticle;\r\n/**\r\n * All particle types that apply extra damping force with bodies\r\n */\r\nb2ParticleSystem.k_extraDampingFlags = b2ParticleFlag.b2_staticPressureParticle;\r\nb2ParticleSystem.k_barrierWallFlags = b2ParticleFlag.b2_barrierParticle | b2ParticleFlag.b2_wallParticle;\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_edge = new b2EdgeShape();\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_d = new b2Vec2();\r\nb2ParticleSystem.CreateParticlesStrokeShapeForGroup_s_p = new b2Vec2();\r\nb2ParticleSystem.CreateParticlesFillShapeForGroup_s_aabb = new b2AABB();\r\nb2ParticleSystem.CreateParticlesFillShapeForGroup_s_p = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dab = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dbc = new b2Vec2();\r\nb2ParticleSystem.UpdatePairsAndTriads_s_dca = new b2Vec2();\r\nb2ParticleSystem.AddContact_s_d = new b2Vec2();\r\nb2ParticleSystem.UpdateBodyContacts_s_aabb = new b2AABB();\r\nb2ParticleSystem.Solve_s_subStep = new b2TimeStep();\r\nb2ParticleSystem.SolveCollision_s_aabb = new b2AABB();\r\nb2ParticleSystem.SolveGravity_s_gravity = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_aabb = new b2AABB();\r\nb2ParticleSystem.SolveBarrier_s_va = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vb = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_pba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vc = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_pca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_vca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_qba = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_qca = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_dv = new b2Vec2();\r\nb2ParticleSystem.SolveBarrier_s_f = new b2Vec2();\r\nb2ParticleSystem.SolvePressure_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveDamping_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_t0 = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_t1 = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_p = new b2Vec2();\r\nb2ParticleSystem.SolveRigidDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveExtraDamping_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveExtraDamping_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRigid_s_position = new b2Vec2();\r\nb2ParticleSystem.SolveRigid_s_rotation = new b2Rot();\r\nb2ParticleSystem.SolveRigid_s_transform = new b2Transform();\r\nb2ParticleSystem.SolveRigid_s_velocityTransform = new b2Transform();\r\nb2ParticleSystem.SolveElastic_s_pa = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_pb = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_pc = new b2Vec2();\r\nb2ParticleSystem.SolveElastic_s_r = new b2Rot();\r\nb2ParticleSystem.SolveElastic_s_t0 = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_pa = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_pb = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_d = new b2Vec2();\r\nb2ParticleSystem.SolveSpring_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_weightedNormal = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_s = new b2Vec2();\r\nb2ParticleSystem.SolveTensile_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveViscous_s_v = new b2Vec2();\r\nb2ParticleSystem.SolveViscous_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveRepulsive_s_f = new b2Vec2();\r\nb2ParticleSystem.SolvePowder_s_f = new b2Vec2();\r\nb2ParticleSystem.SolveSolid_s_f = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_n = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_pos = new b2Vec2();\r\nb2ParticleSystem.RemoveSpuriousBodyContacts_s_normal = new b2Vec2();\r\n(function (b2ParticleSystem) {\r\n    class UserOverridableBuffer {\r\n        constructor() {\r\n            this.data = null;\r\n            this.userSuppliedCapacity = 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.UserOverridableBuffer = UserOverridableBuffer;\r\n    class Proxy {\r\n        constructor() {\r\n            this.index = b2_invalidParticleIndex;\r\n            this.tag = 0;\r\n        }\r\n        static CompareProxyProxy(a, b) {\r\n            return a.tag < b.tag;\r\n        }\r\n        static CompareTagProxy(a, b) {\r\n            return a < b.tag;\r\n        }\r\n        static CompareProxyTag(a, b) {\r\n            return a.tag < b;\r\n        }\r\n    }\r\n    b2ParticleSystem.Proxy = Proxy;\r\n    class InsideBoundsEnumerator {\r\n        /**\r\n         * InsideBoundsEnumerator enumerates all particles inside the\r\n         * given bounds.\r\n         *\r\n         * Construct an enumerator with bounds of tags and a range of\r\n         * proxies.\r\n         */\r\n        constructor(system, lower, upper, first, last) {\r\n            this.m_system = system;\r\n            this.m_xLower = (lower & b2ParticleSystem.xMask) >>> 0;\r\n            this.m_xUpper = (upper & b2ParticleSystem.xMask) >>> 0;\r\n            this.m_yLower = (lower & b2ParticleSystem.yMask) >>> 0;\r\n            this.m_yUpper = (upper & b2ParticleSystem.yMask) >>> 0;\r\n            this.m_first = first;\r\n            this.m_last = last;\r\n            // DEBUG: b2Assert(this.m_first <= this.m_last);\r\n        }\r\n        /**\r\n         * Get index of the next particle. Returns\r\n         * b2_invalidParticleIndex if there are no more particles.\r\n         */\r\n        GetNext() {\r\n            while (this.m_first < this.m_last) {\r\n                const xTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.xMask) >>> 0;\r\n                // #if B2_ASSERT_ENABLED\r\n                // DEBUG: const yTag = (this.m_system.m_proxyBuffer.data[this.m_first].tag & b2ParticleSystem.yMask) >>> 0;\r\n                // DEBUG: b2Assert(yTag >= this.m_yLower);\r\n                // DEBUG: b2Assert(yTag <= this.m_yUpper);\r\n                // #endif\r\n                if (xTag >= this.m_xLower && xTag <= this.m_xUpper) {\r\n                    return (this.m_system.m_proxyBuffer.data[this.m_first++]).index;\r\n                }\r\n                this.m_first++;\r\n            }\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.InsideBoundsEnumerator = InsideBoundsEnumerator;\r\n    class ParticleListNode {\r\n        constructor() {\r\n            /**\r\n             * The next node in the list.\r\n             */\r\n            this.next = null;\r\n            /**\r\n             * Number of entries in the list. Valid only for the node at the\r\n             * head of the list.\r\n             */\r\n            this.count = 0;\r\n            /**\r\n             * Particle index.\r\n             */\r\n            this.index = 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.ParticleListNode = ParticleListNode;\r\n    /**\r\n     * @constructor\r\n     */\r\n    class FixedSetAllocator {\r\n        Allocate(itemSize, count) {\r\n            // TODO\r\n            return count;\r\n        }\r\n        Clear() {\r\n            // TODO\r\n        }\r\n        GetCount() {\r\n            // TODO\r\n            return 0;\r\n        }\r\n        Invalidate(itemIndex) {\r\n            // TODO\r\n        }\r\n        GetValidBuffer() {\r\n            // TODO\r\n            return [];\r\n        }\r\n        GetBuffer() {\r\n            // TODO\r\n            return [];\r\n        }\r\n        SetCount(count) {\r\n            // TODO\r\n        }\r\n    }\r\n    b2ParticleSystem.FixedSetAllocator = FixedSetAllocator;\r\n    class FixtureParticle {\r\n        constructor(fixture, particle) {\r\n            this.second = b2_invalidParticleIndex;\r\n            this.first = fixture;\r\n            this.second = particle;\r\n        }\r\n    }\r\n    b2ParticleSystem.FixtureParticle = FixtureParticle;\r\n    class FixtureParticleSet extends b2ParticleSystem.FixedSetAllocator {\r\n        Initialize(bodyContactBuffer, flagsBuffer) {\r\n            // TODO\r\n        }\r\n        Find(pair) {\r\n            // TODO\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.FixtureParticleSet = FixtureParticleSet;\r\n    class ParticlePair {\r\n        constructor(particleA, particleB) {\r\n            this.first = b2_invalidParticleIndex;\r\n            this.second = b2_invalidParticleIndex;\r\n            this.first = particleA;\r\n            this.second = particleB;\r\n        }\r\n    }\r\n    b2ParticleSystem.ParticlePair = ParticlePair;\r\n    class b2ParticlePairSet extends b2ParticleSystem.FixedSetAllocator {\r\n        Initialize(contactBuffer, flagsBuffer) {\r\n            // TODO\r\n        }\r\n        Find(pair) {\r\n            // TODO\r\n            return b2_invalidParticleIndex;\r\n        }\r\n    }\r\n    b2ParticleSystem.b2ParticlePairSet = b2ParticlePairSet;\r\n    class ConnectionFilter {\r\n        /**\r\n         * Is the particle necessary for connection?\r\n         * A pair or a triad should contain at least one 'necessary'\r\n         * particle.\r\n         */\r\n        IsNecessary(index) {\r\n            return true;\r\n        }\r\n        /**\r\n         * An additional condition for creating a pair.\r\n         */\r\n        ShouldCreatePair(a, b) {\r\n            return true;\r\n        }\r\n        /**\r\n         * An additional condition for creating a triad.\r\n         */\r\n        ShouldCreateTriad(a, b, c) {\r\n            return true;\r\n        }\r\n    }\r\n    b2ParticleSystem.ConnectionFilter = ConnectionFilter;\r\n    class DestroyParticlesInShapeCallback extends b2QueryCallback {\r\n        constructor(system, shape, xf, callDestructionListener) {\r\n            super();\r\n            this.m_callDestructionListener = false;\r\n            this.m_destroyed = 0;\r\n            this.m_system = system;\r\n            this.m_shape = shape;\r\n            this.m_xf = xf;\r\n            this.m_callDestructionListener = callDestructionListener;\r\n            this.m_destroyed = 0;\r\n        }\r\n        ReportFixture(fixture) {\r\n            return false;\r\n        }\r\n        ReportParticle(particleSystem, index) {\r\n            if (particleSystem !== this.m_system) {\r\n                return false;\r\n            }\r\n            // DEBUG: b2Assert(index >= 0 && index < this.m_system.m_count);\r\n            if (!this.m_system.m_positionBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (this.m_shape.TestPoint(this.m_xf, this.m_system.m_positionBuffer.data[index])) {\r\n                this.m_system.DestroyParticle(index, this.m_callDestructionListener);\r\n                this.m_destroyed++;\r\n            }\r\n            return true;\r\n        }\r\n        Destroyed() {\r\n            return this.m_destroyed;\r\n        }\r\n    }\r\n    b2ParticleSystem.DestroyParticlesInShapeCallback = DestroyParticlesInShapeCallback;\r\n    class JoinParticleGroupsFilter extends b2ParticleSystem.ConnectionFilter {\r\n        constructor(threshold) {\r\n            super();\r\n            this.m_threshold = 0;\r\n            this.m_threshold = threshold;\r\n        }\r\n        /**\r\n         * An additional condition for creating a pair.\r\n         */\r\n        ShouldCreatePair(a, b) {\r\n            return (a < this.m_threshold && this.m_threshold <= b) ||\r\n                (b < this.m_threshold && this.m_threshold <= a);\r\n        }\r\n        /**\r\n         * An additional condition for creating a triad.\r\n         */\r\n        ShouldCreateTriad(a, b, c) {\r\n            return (a < this.m_threshold || b < this.m_threshold || c < this.m_threshold) &&\r\n                (this.m_threshold <= a || this.m_threshold <= b || this.m_threshold <= c);\r\n        }\r\n    }\r\n    b2ParticleSystem.JoinParticleGroupsFilter = JoinParticleGroupsFilter;\r\n    class CompositeShape extends b2Shape {\r\n        constructor(shapes, shapeCount = shapes.length) {\r\n            super(b2ShapeType.e_unknown, 0);\r\n            this.m_shapeCount = 0;\r\n            this.m_shapes = shapes;\r\n            this.m_shapeCount = shapeCount;\r\n        }\r\n        Clone() {\r\n            // DEBUG: b2Assert(false);\r\n            throw new Error();\r\n        }\r\n        GetChildCount() {\r\n            return 1;\r\n        }\r\n        /**\r\n         * @see b2Shape::TestPoint\r\n         */\r\n        TestPoint(xf, p) {\r\n            for (let i = 0; i < this.m_shapeCount; i++) {\r\n                if (this.m_shapes[i].TestPoint(xf, p)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeDistance\r\n         */\r\n        ComputeDistance(xf, p, normal, childIndex) {\r\n            // DEBUG: b2Assert(false);\r\n            return 0;\r\n        }\r\n        /**\r\n         * Implement b2Shape.\r\n         */\r\n        RayCast(output, input, xf, childIndex) {\r\n            // DEBUG: b2Assert(false);\r\n            return false;\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeAABB\r\n         */\r\n        ComputeAABB(aabb, xf, childIndex) {\r\n            const s_subaabb = new b2AABB();\r\n            aabb.lowerBound.x = +b2_maxFloat;\r\n            aabb.lowerBound.y = +b2_maxFloat;\r\n            aabb.upperBound.x = -b2_maxFloat;\r\n            aabb.upperBound.y = -b2_maxFloat;\r\n            // DEBUG: b2Assert(childIndex === 0);\r\n            for (let i = 0; i < this.m_shapeCount; i++) {\r\n                const childCount = this.m_shapes[i].GetChildCount();\r\n                for (let j = 0; j < childCount; j++) {\r\n                    const subaabb = s_subaabb;\r\n                    this.m_shapes[i].ComputeAABB(subaabb, xf, j);\r\n                    aabb.Combine1(subaabb);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * @see b2Shape::ComputeMass\r\n         */\r\n        ComputeMass(massData, density) {\r\n            // DEBUG: b2Assert(false);\r\n        }\r\n        SetupDistanceProxy(proxy, index) {\r\n            // DEBUG: b2Assert(false);\r\n        }\r\n        ComputeSubmergedArea(normal, offset, xf, c) {\r\n            // DEBUG: b2Assert(false);\r\n            return 0;\r\n        }\r\n        Dump(log) {\r\n            // DEBUG: b2Assert(false);\r\n        }\r\n    }\r\n    b2ParticleSystem.CompositeShape = CompositeShape;\r\n    class ReactiveFilter extends b2ParticleSystem.ConnectionFilter {\r\n        constructor(flagsBuffer) {\r\n            super();\r\n            this.m_flagsBuffer = flagsBuffer;\r\n        }\r\n        IsNecessary(index) {\r\n            if (!this.m_flagsBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            return (this.m_flagsBuffer.data[index] & b2ParticleFlag.b2_reactiveParticle) !== 0;\r\n        }\r\n    }\r\n    b2ParticleSystem.ReactiveFilter = ReactiveFilter;\r\n    class UpdateBodyContactsCallback extends b2FixtureParticleQueryCallback {\r\n        constructor(system, contactFilter) {\r\n            super(system); // base class constructor\r\n            this.m_contactFilter = contactFilter;\r\n        }\r\n        ShouldCollideFixtureParticle(fixture, particleSystem, particleIndex) {\r\n            // Call the contact filter if it's set, to determine whether to\r\n            // filter this contact.  Returns true if contact calculations should\r\n            // be performed, false otherwise.\r\n            if (this.m_contactFilter) {\r\n                const flags = this.m_system.GetFlagsBuffer();\r\n                if (flags[particleIndex] & b2ParticleFlag.b2_fixtureContactFilterParticle) {\r\n                    return this.m_contactFilter.ShouldCollideFixtureParticle(fixture, this.m_system, particleIndex);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        ReportFixtureAndParticle(fixture, childIndex, a) {\r\n            const s_n = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n;\r\n            const s_rp = b2ParticleSystem.UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp;\r\n            if (!this.m_system.m_flagsBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (!this.m_system.m_positionBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const ap = this.m_system.m_positionBuffer.data[a];\r\n            const n = s_n;\r\n            const d = fixture.ComputeDistance(ap, n, childIndex);\r\n            if (d < this.m_system.m_particleDiameter && this.ShouldCollideFixtureParticle(fixture, this.m_system, a)) {\r\n                const b = fixture.GetBody();\r\n                const bp = b.GetWorldCenter();\r\n                const bm = b.GetMass();\r\n                const bI = b.GetInertia() - bm * b.GetLocalCenter().LengthSquared();\r\n                const invBm = bm > 0 ? 1 / bm : 0;\r\n                const invBI = bI > 0 ? 1 / bI : 0;\r\n                const invAm = this.m_system.m_flagsBuffer.data[a] &\r\n                    b2ParticleFlag.b2_wallParticle ? 0 : this.m_system.GetParticleInvMass();\r\n                ///b2Vec2 rp = ap - bp;\r\n                const rp = b2Vec2.SubVV(ap, bp, s_rp);\r\n                const rpn = b2Vec2.CrossVV(rp, n);\r\n                const invM = invAm + invBm + invBI * rpn * rpn;\r\n                ///b2ParticleBodyContact& contact = m_system.m_bodyContactBuffer.Append();\r\n                const contact = this.m_system.m_bodyContactBuffer.data[this.m_system.m_bodyContactBuffer.Append()];\r\n                contact.index = a;\r\n                contact.body = b;\r\n                contact.fixture = fixture;\r\n                contact.weight = 1 - d * this.m_system.m_inverseDiameter;\r\n                ///contact.normal = -n;\r\n                contact.normal.Copy(n.SelfNeg());\r\n                contact.mass = invM > 0 ? 1 / invM : 0;\r\n                this.m_system.DetectStuckParticle(a);\r\n            }\r\n        }\r\n    }\r\n    UpdateBodyContactsCallback.ReportFixtureAndParticle_s_n = new b2Vec2();\r\n    UpdateBodyContactsCallback.ReportFixtureAndParticle_s_rp = new b2Vec2();\r\n    b2ParticleSystem.UpdateBodyContactsCallback = UpdateBodyContactsCallback;\r\n    class SolveCollisionCallback extends b2FixtureParticleQueryCallback {\r\n        constructor(system, step) {\r\n            super(system); // base class constructor\r\n            this.m_step = step;\r\n        }\r\n        ReportFixtureAndParticle(fixture, childIndex, a) {\r\n            const s_p1 = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p1;\r\n            const s_output = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_output;\r\n            const s_input = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_input;\r\n            const s_p = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_p;\r\n            const s_v = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_v;\r\n            const s_f = b2ParticleSystem.SolveCollisionCallback.ReportFixtureAndParticle_s_f;\r\n            const body = fixture.GetBody();\r\n            if (!this.m_system.m_positionBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            if (!this.m_system.m_velocityBuffer.data) {\r\n                throw new Error();\r\n            }\r\n            const ap = this.m_system.m_positionBuffer.data[a];\r\n            const av = this.m_system.m_velocityBuffer.data[a];\r\n            const output = s_output;\r\n            const input = s_input;\r\n            if (this.m_system.m_iterationIndex === 0) {\r\n                // Put 'ap' in the local space of the previous frame\r\n                ///b2Vec2 p1 = b2MulT(body.m_xf0, ap);\r\n                const p1 = b2Transform.MulTXV(body.m_xf0, ap, s_p1);\r\n                if (fixture.GetShape().GetType() === b2ShapeType.e_circleShape) {\r\n                    // Make relative to the center of the circle\r\n                    ///p1 -= body.GetLocalCenter();\r\n                    p1.SelfSub(body.GetLocalCenter());\r\n                    // Re-apply rotation about the center of the circle\r\n                    ///p1 = b2Mul(body.m_xf0.q, p1);\r\n                    b2Rot.MulRV(body.m_xf0.q, p1, p1);\r\n                    // Subtract rotation of the current frame\r\n                    ///p1 = b2MulT(body.m_xf.q, p1);\r\n                    b2Rot.MulTRV(body.m_xf.q, p1, p1);\r\n                    // Return to local space\r\n                    ///p1 += body.GetLocalCenter();\r\n                    p1.SelfAdd(body.GetLocalCenter());\r\n                }\r\n                // Return to global space and apply rotation of current frame\r\n                ///input.p1 = b2Mul(body.m_xf, p1);\r\n                b2Transform.MulXV(body.m_xf, p1, input.p1);\r\n            }\r\n            else {\r\n                ///input.p1 = ap;\r\n                input.p1.Copy(ap);\r\n            }\r\n            ///input.p2 = ap + m_step.dt * av;\r\n            b2Vec2.AddVMulSV(ap, this.m_step.dt, av, input.p2);\r\n            input.maxFraction = 1;\r\n            if (fixture.RayCast(output, input, childIndex)) {\r\n                const n = output.normal;\r\n                ///b2Vec2 p = (1 - output.fraction) * input.p1 + output.fraction * input.p2 + b2_linearSlop * n;\r\n                const p = s_p;\r\n                p.x = (1 - output.fraction) * input.p1.x + output.fraction * input.p2.x + b2_linearSlop * n.x;\r\n                p.y = (1 - output.fraction) * input.p1.y + output.fraction * input.p2.y + b2_linearSlop * n.y;\r\n                ///b2Vec2 v = m_step.inv_dt * (p - ap);\r\n                const v = s_v;\r\n                v.x = this.m_step.inv_dt * (p.x - ap.x);\r\n                v.y = this.m_step.inv_dt * (p.y - ap.y);\r\n                ///m_system.m_velocityBuffer.data[a] = v;\r\n                this.m_system.m_velocityBuffer.data[a].Copy(v);\r\n                ///b2Vec2 f = m_step.inv_dt * m_system.GetParticleMass() * (av - v);\r\n                const f = s_f;\r\n                f.x = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.x - v.x);\r\n                f.y = this.m_step.inv_dt * this.m_system.GetParticleMass() * (av.y - v.y);\r\n                this.m_system.ParticleApplyForce(a, f);\r\n            }\r\n        }\r\n        ReportParticle(system, index) {\r\n            return false;\r\n        }\r\n    }\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_p1 = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_output = new b2RayCastOutput();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_input = new b2RayCastInput();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_p = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_v = new b2Vec2();\r\n    SolveCollisionCallback.ReportFixtureAndParticle_s_f = new b2Vec2();\r\n    b2ParticleSystem.SolveCollisionCallback = SolveCollisionCallback;\r\n})(b2ParticleSystem || (b2ParticleSystem = {}));\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_epsilon, b2_maxSubSteps, b2_maxTOIContacts } from \"../Common/b2Settings\";\r\nimport { b2Min, b2Vec2, b2Transform, b2Sweep } from \"../Common/b2Math\";\r\nimport { b2Timer } from \"../Common/b2Timer\";\r\nimport { b2Color, b2DrawFlags } from \"../Common/b2Draw\";\r\nimport { b2AABB, b2RayCastInput, b2RayCastOutput, b2TestOverlapShape } from \"../Collision/b2Collision\";\r\nimport { b2TimeOfImpact, b2TOIInput, b2TOIOutput, b2TOIOutputState } from \"../Collision/b2TimeOfImpact\";\r\nimport { b2ShapeType } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2JointType } from \"./Joints/b2Joint\";\r\nimport { b2AreaJoint } from \"./Joints/b2AreaJoint\";\r\nimport { b2DistanceJoint } from \"./Joints/b2DistanceJoint\";\r\nimport { b2FrictionJoint } from \"./Joints/b2FrictionJoint\";\r\nimport { b2GearJoint } from \"./Joints/b2GearJoint\";\r\nimport { b2MotorJoint } from \"./Joints/b2MotorJoint\";\r\nimport { b2MouseJoint } from \"./Joints/b2MouseJoint\";\r\nimport { b2PrismaticJoint } from \"./Joints/b2PrismaticJoint\";\r\nimport { b2PulleyJoint } from \"./Joints/b2PulleyJoint\";\r\nimport { b2RevoluteJoint } from \"./Joints/b2RevoluteJoint\";\r\nimport { b2RopeJoint } from \"./Joints/b2RopeJoint\";\r\nimport { b2WeldJoint } from \"./Joints/b2WeldJoint\";\r\nimport { b2WheelJoint } from \"./Joints/b2WheelJoint\";\r\nimport { b2Body, b2BodyType } from \"./b2Body\";\r\nimport { b2ContactManager } from \"./b2ContactManager\";\r\nimport { b2Island } from \"./b2Island\";\r\nimport { b2Profile, b2TimeStep } from \"./b2TimeStep\";\r\nimport { b2QueryCallback } from \"./b2WorldCallbacks\";\r\n// #if B2_ENABLE_PARTICLE\r\nimport { b2_maxFloat } from \"../Common/b2Settings\";\r\nimport { b2CalculateParticleIterations } from \"../Particle/b2Particle\";\r\nimport { b2ParticleSystem } from \"../Particle/b2ParticleSystem\";\r\n// #endif\r\n/// The world class manages all physics entities, dynamic simulation,\r\n/// and asynchronous queries. The world also contains efficient memory\r\n/// management facilities.\r\nexport class b2World {\r\n    // #endif\r\n    /// Construct a world object.\r\n    /// @param gravity the world gravity vector.\r\n    constructor(gravity) {\r\n        // b2BlockAllocator m_blockAllocator;\r\n        // b2StackAllocator m_stackAllocator;\r\n        this.m_newFixture = false;\r\n        this.m_locked = false;\r\n        this.m_clearForces = true;\r\n        this.m_contactManager = new b2ContactManager();\r\n        this.m_bodyList = null;\r\n        this.m_jointList = null;\r\n        // #if B2_ENABLE_PARTICLE\r\n        this.m_particleSystemList = null;\r\n        // #endif\r\n        this.m_bodyCount = 0;\r\n        this.m_jointCount = 0;\r\n        this.m_gravity = new b2Vec2();\r\n        this.m_allowSleep = true;\r\n        this.m_destructionListener = null;\r\n        this.m_debugDraw = null;\r\n        // This is used to compute the time step ratio to\r\n        // support a variable time step.\r\n        this.m_inv_dt0 = 0;\r\n        // These are for debugging the solver.\r\n        this.m_warmStarting = true;\r\n        this.m_continuousPhysics = true;\r\n        this.m_subStepping = false;\r\n        this.m_stepComplete = true;\r\n        this.m_profile = new b2Profile();\r\n        this.m_island = new b2Island();\r\n        this.s_stack = [];\r\n        // #if B2_ENABLE_CONTROLLER\r\n        this.m_controllerList = null;\r\n        this.m_controllerCount = 0;\r\n        this.m_gravity.Copy(gravity);\r\n    }\r\n    /// Register a destruction listener. The listener is owned by you and must\r\n    /// remain in scope.\r\n    SetDestructionListener(listener) {\r\n        this.m_destructionListener = listener;\r\n    }\r\n    /// Register a contact filter to provide specific control over collision.\r\n    /// Otherwise the default filter is used (b2_defaultFilter). The listener is\r\n    /// owned by you and must remain in scope.\r\n    SetContactFilter(filter) {\r\n        this.m_contactManager.m_contactFilter = filter;\r\n    }\r\n    /// Register a contact event listener. The listener is owned by you and must\r\n    /// remain in scope.\r\n    SetContactListener(listener) {\r\n        this.m_contactManager.m_contactListener = listener;\r\n    }\r\n    /// Register a routine for debug drawing. The debug draw functions are called\r\n    /// inside with b2World::DrawDebugData method. The debug draw object is owned\r\n    /// by you and must remain in scope.\r\n    SetDebugDraw(debugDraw) {\r\n        this.m_debugDraw = debugDraw;\r\n    }\r\n    /// Create a rigid body given a definition. No reference to the definition\r\n    /// is retained.\r\n    /// @warning This function is locked during callbacks.\r\n    CreateBody(def = {}) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const b = new b2Body(def, this);\r\n        // Add to world doubly linked list.\r\n        b.m_prev = null;\r\n        b.m_next = this.m_bodyList;\r\n        if (this.m_bodyList) {\r\n            this.m_bodyList.m_prev = b;\r\n        }\r\n        this.m_bodyList = b;\r\n        ++this.m_bodyCount;\r\n        return b;\r\n    }\r\n    /// Destroy a rigid body given a definition. No reference to the definition\r\n    /// is retained. This function is locked during callbacks.\r\n    /// @warning This automatically deletes all associated shapes and joints.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyBody(b) {\r\n        // DEBUG: b2Assert(this.m_bodyCount > 0);\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        // Delete the attached joints.\r\n        let je = b.m_jointList;\r\n        while (je) {\r\n            const je0 = je;\r\n            je = je.next;\r\n            if (this.m_destructionListener) {\r\n                this.m_destructionListener.SayGoodbyeJoint(je0.joint);\r\n            }\r\n            this.DestroyJoint(je0.joint);\r\n            b.m_jointList = je;\r\n        }\r\n        b.m_jointList = null;\r\n        // #if B2_ENABLE_CONTROLLER\r\n        // @see b2Controller list\r\n        let coe = b.m_controllerList;\r\n        while (coe) {\r\n            const coe0 = coe;\r\n            coe = coe.nextController;\r\n            coe0.controller.RemoveBody(b);\r\n        }\r\n        // #endif\r\n        // Delete the attached contacts.\r\n        let ce = b.m_contactList;\r\n        while (ce) {\r\n            const ce0 = ce;\r\n            ce = ce.next;\r\n            this.m_contactManager.Destroy(ce0.contact);\r\n        }\r\n        b.m_contactList = null;\r\n        // Delete the attached fixtures. This destroys broad-phase proxies.\r\n        let f = b.m_fixtureList;\r\n        while (f) {\r\n            const f0 = f;\r\n            f = f.m_next;\r\n            if (this.m_destructionListener) {\r\n                this.m_destructionListener.SayGoodbyeFixture(f0);\r\n            }\r\n            f0.DestroyProxies();\r\n            f0.Destroy();\r\n            b.m_fixtureList = f;\r\n            b.m_fixtureCount -= 1;\r\n        }\r\n        b.m_fixtureList = null;\r\n        b.m_fixtureCount = 0;\r\n        // Remove world body list.\r\n        if (b.m_prev) {\r\n            b.m_prev.m_next = b.m_next;\r\n        }\r\n        if (b.m_next) {\r\n            b.m_next.m_prev = b.m_prev;\r\n        }\r\n        if (b === this.m_bodyList) {\r\n            this.m_bodyList = b.m_next;\r\n        }\r\n        --this.m_bodyCount;\r\n    }\r\n    static _Joint_Create(def, allocator) {\r\n        switch (def.type) {\r\n            case b2JointType.e_distanceJoint: return new b2DistanceJoint(def);\r\n            case b2JointType.e_mouseJoint: return new b2MouseJoint(def);\r\n            case b2JointType.e_prismaticJoint: return new b2PrismaticJoint(def);\r\n            case b2JointType.e_revoluteJoint: return new b2RevoluteJoint(def);\r\n            case b2JointType.e_pulleyJoint: return new b2PulleyJoint(def);\r\n            case b2JointType.e_gearJoint: return new b2GearJoint(def);\r\n            case b2JointType.e_wheelJoint: return new b2WheelJoint(def);\r\n            case b2JointType.e_weldJoint: return new b2WeldJoint(def);\r\n            case b2JointType.e_frictionJoint: return new b2FrictionJoint(def);\r\n            case b2JointType.e_ropeJoint: return new b2RopeJoint(def);\r\n            case b2JointType.e_motorJoint: return new b2MotorJoint(def);\r\n            case b2JointType.e_areaJoint: return new b2AreaJoint(def);\r\n        }\r\n        throw new Error();\r\n    }\r\n    static _Joint_Destroy(joint, allocator) {\r\n    }\r\n    CreateJoint(def) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const j = b2World._Joint_Create(def, null);\r\n        // Connect to the world list.\r\n        j.m_prev = null;\r\n        j.m_next = this.m_jointList;\r\n        if (this.m_jointList) {\r\n            this.m_jointList.m_prev = j;\r\n        }\r\n        this.m_jointList = j;\r\n        ++this.m_jointCount;\r\n        // Connect to the bodies' doubly linked lists.\r\n        // j.m_edgeA.joint = j;\r\n        // j.m_edgeA.other = j.m_bodyB;\r\n        j.m_edgeA.prev = null;\r\n        j.m_edgeA.next = j.m_bodyA.m_jointList;\r\n        if (j.m_bodyA.m_jointList) {\r\n            j.m_bodyA.m_jointList.prev = j.m_edgeA;\r\n        }\r\n        j.m_bodyA.m_jointList = j.m_edgeA;\r\n        // j.m_edgeB.joint = j;\r\n        // j.m_edgeB.other = j.m_bodyA;\r\n        j.m_edgeB.prev = null;\r\n        j.m_edgeB.next = j.m_bodyB.m_jointList;\r\n        if (j.m_bodyB.m_jointList) {\r\n            j.m_bodyB.m_jointList.prev = j.m_edgeB;\r\n        }\r\n        j.m_bodyB.m_jointList = j.m_edgeB;\r\n        const bodyA = def.bodyA;\r\n        const bodyB = def.bodyB;\r\n        // If the joint prevents collisions, then flag any contacts for filtering.\r\n        if (!def.collideConnected) {\r\n            let edge = bodyB.GetContactList();\r\n            while (edge) {\r\n                if (edge.other === bodyA) {\r\n                    // Flag the contact for filtering at the next time step (where either\r\n                    // body is awake).\r\n                    edge.contact.FlagForFiltering();\r\n                }\r\n                edge = edge.next;\r\n            }\r\n        }\r\n        // Note: creating a joint doesn't wake the bodies.\r\n        return j;\r\n    }\r\n    /// Destroy a joint. This may cause the connected bodies to begin colliding.\r\n    /// @warning This function is locked during callbacks.\r\n    DestroyJoint(j) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const collideConnected = j.m_collideConnected;\r\n        // Remove from the doubly linked list.\r\n        if (j.m_prev) {\r\n            j.m_prev.m_next = j.m_next;\r\n        }\r\n        if (j.m_next) {\r\n            j.m_next.m_prev = j.m_prev;\r\n        }\r\n        if (j === this.m_jointList) {\r\n            this.m_jointList = j.m_next;\r\n        }\r\n        // Disconnect from island graph.\r\n        const bodyA = j.m_bodyA;\r\n        const bodyB = j.m_bodyB;\r\n        // Wake up connected bodies.\r\n        bodyA.SetAwake(true);\r\n        bodyB.SetAwake(true);\r\n        // Remove from body 1.\r\n        if (j.m_edgeA.prev) {\r\n            j.m_edgeA.prev.next = j.m_edgeA.next;\r\n        }\r\n        if (j.m_edgeA.next) {\r\n            j.m_edgeA.next.prev = j.m_edgeA.prev;\r\n        }\r\n        if (j.m_edgeA === bodyA.m_jointList) {\r\n            bodyA.m_jointList = j.m_edgeA.next;\r\n        }\r\n        j.m_edgeA.prev = null;\r\n        j.m_edgeA.next = null;\r\n        // Remove from body 2\r\n        if (j.m_edgeB.prev) {\r\n            j.m_edgeB.prev.next = j.m_edgeB.next;\r\n        }\r\n        if (j.m_edgeB.next) {\r\n            j.m_edgeB.next.prev = j.m_edgeB.prev;\r\n        }\r\n        if (j.m_edgeB === bodyB.m_jointList) {\r\n            bodyB.m_jointList = j.m_edgeB.next;\r\n        }\r\n        j.m_edgeB.prev = null;\r\n        j.m_edgeB.next = null;\r\n        b2World._Joint_Destroy(j, null);\r\n        // DEBUG: b2Assert(this.m_jointCount > 0);\r\n        --this.m_jointCount;\r\n        // If the joint prevents collisions, then flag any contacts for filtering.\r\n        if (!collideConnected) {\r\n            let edge = bodyB.GetContactList();\r\n            while (edge) {\r\n                if (edge.other === bodyA) {\r\n                    // Flag the contact for filtering at the next time step (where either\r\n                    // body is awake).\r\n                    edge.contact.FlagForFiltering();\r\n                }\r\n                edge = edge.next;\r\n            }\r\n        }\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    CreateParticleSystem(def) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        const p = new b2ParticleSystem(def, this);\r\n        // Add to world doubly linked list.\r\n        p.m_prev = null;\r\n        p.m_next = this.m_particleSystemList;\r\n        if (this.m_particleSystemList) {\r\n            this.m_particleSystemList.m_prev = p;\r\n        }\r\n        this.m_particleSystemList = p;\r\n        return p;\r\n    }\r\n    DestroyParticleSystem(p) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        // Remove world particleSystem list.\r\n        if (p.m_prev) {\r\n            p.m_prev.m_next = p.m_next;\r\n        }\r\n        if (p.m_next) {\r\n            p.m_next.m_prev = p.m_prev;\r\n        }\r\n        if (p === this.m_particleSystemList) {\r\n            this.m_particleSystemList = p.m_next;\r\n        }\r\n    }\r\n    CalculateReasonableParticleIterations(timeStep) {\r\n        if (this.m_particleSystemList === null) {\r\n            return 1;\r\n        }\r\n        function GetSmallestRadius(world) {\r\n            let smallestRadius = b2_maxFloat;\r\n            for (let system = world.GetParticleSystemList(); system !== null; system = system.m_next) {\r\n                smallestRadius = b2Min(smallestRadius, system.GetRadius());\r\n            }\r\n            return smallestRadius;\r\n        }\r\n        // Use the smallest radius, since that represents the worst-case.\r\n        return b2CalculateParticleIterations(this.m_gravity.Length(), GetSmallestRadius(this), timeStep);\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    Step(dt, velocityIterations, positionIterations, particleIterations = this.CalculateReasonableParticleIterations(dt)) {\r\n        // #else\r\n        // public Step(dt: number, velocityIterations: number, positionIterations: number): void {\r\n        // #endif\r\n        const stepTimer = b2World.Step_s_stepTimer.Reset();\r\n        // If new fixtures were added, we need to find the new contacts.\r\n        if (this.m_newFixture) {\r\n            this.m_contactManager.FindNewContacts();\r\n            this.m_newFixture = false;\r\n        }\r\n        this.m_locked = true;\r\n        const step = b2World.Step_s_step;\r\n        step.dt = dt;\r\n        step.velocityIterations = velocityIterations;\r\n        step.positionIterations = positionIterations;\r\n        // #if B2_ENABLE_PARTICLE\r\n        step.particleIterations = particleIterations;\r\n        // #endif\r\n        if (dt > 0) {\r\n            step.inv_dt = 1 / dt;\r\n        }\r\n        else {\r\n            step.inv_dt = 0;\r\n        }\r\n        step.dtRatio = this.m_inv_dt0 * dt;\r\n        step.warmStarting = this.m_warmStarting;\r\n        // Update contacts. This is where some contacts are destroyed.\r\n        const timer = b2World.Step_s_timer.Reset();\r\n        this.m_contactManager.Collide();\r\n        this.m_profile.collide = timer.GetMilliseconds();\r\n        // Integrate velocities, solve velocity constraints, and integrate positions.\r\n        if (this.m_stepComplete && step.dt > 0) {\r\n            const timer = b2World.Step_s_timer.Reset();\r\n            // #if B2_ENABLE_PARTICLE\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                p.Solve(step); // Particle Simulation\r\n            }\r\n            // #endif\r\n            this.Solve(step);\r\n            this.m_profile.solve = timer.GetMilliseconds();\r\n        }\r\n        // Handle TOI events.\r\n        if (this.m_continuousPhysics && step.dt > 0) {\r\n            const timer = b2World.Step_s_timer.Reset();\r\n            this.SolveTOI(step);\r\n            this.m_profile.solveTOI = timer.GetMilliseconds();\r\n        }\r\n        if (step.dt > 0) {\r\n            this.m_inv_dt0 = step.inv_dt;\r\n        }\r\n        if (this.m_clearForces) {\r\n            this.ClearForces();\r\n        }\r\n        this.m_locked = false;\r\n        this.m_profile.step = stepTimer.GetMilliseconds();\r\n    }\r\n    /// Manually clear the force buffer on all bodies. By default, forces are cleared automatically\r\n    /// after each call to Step. The default behavior is modified by calling SetAutoClearForces.\r\n    /// The purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain\r\n    /// a fixed sized time step under a variable frame-rate.\r\n    /// When you perform sub-stepping you will disable auto clearing of forces and instead call\r\n    /// ClearForces after all sub-steps are complete in one pass of your game loop.\r\n    /// @see SetAutoClearForces\r\n    ClearForces() {\r\n        for (let body = this.m_bodyList; body; body = body.m_next) {\r\n            body.m_force.SetZero();\r\n            body.m_torque = 0;\r\n        }\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    DrawParticleSystem(system) {\r\n        if (this.m_debugDraw === null) {\r\n            return;\r\n        }\r\n        const particleCount = system.GetParticleCount();\r\n        if (particleCount) {\r\n            const radius = system.GetRadius();\r\n            const positionBuffer = system.GetPositionBuffer();\r\n            if (system.m_colorBuffer.data) {\r\n                const colorBuffer = system.GetColorBuffer();\r\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, colorBuffer, particleCount);\r\n            }\r\n            else {\r\n                this.m_debugDraw.DrawParticles(positionBuffer, radius, null, particleCount);\r\n            }\r\n        }\r\n    }\r\n    DrawDebugData() {\r\n        if (this.m_debugDraw === null) {\r\n            return;\r\n        }\r\n        const flags = this.m_debugDraw.GetFlags();\r\n        const color = b2World.DrawDebugData_s_color.SetRGB(0, 0, 0);\r\n        if (flags & b2DrawFlags.e_shapeBit) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                const xf = b.m_xf;\r\n                this.m_debugDraw.PushTransform(xf);\r\n                for (let f = b.GetFixtureList(); f; f = f.m_next) {\r\n                    if (!b.IsActive()) {\r\n                        color.SetRGB(0.5, 0.5, 0.3);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                        color.SetRGB(0.5, 0.9, 0.5);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (b.GetType() === b2BodyType.b2_kinematicBody) {\r\n                        color.SetRGB(0.5, 0.5, 0.9);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else if (!b.IsAwake()) {\r\n                        color.SetRGB(0.6, 0.6, 0.6);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                    else {\r\n                        color.SetRGB(0.9, 0.7, 0.7);\r\n                        this.DrawShape(f, color);\r\n                    }\r\n                }\r\n                this.m_debugDraw.PopTransform(xf);\r\n            }\r\n        }\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (flags & b2DrawFlags.e_particleBit) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                this.DrawParticleSystem(p);\r\n            }\r\n        }\r\n        // #endif\r\n        if (flags & b2DrawFlags.e_jointBit) {\r\n            for (let j = this.m_jointList; j; j = j.m_next) {\r\n                this.DrawJoint(j);\r\n            }\r\n        }\r\n        /*\r\n        if (flags & b2DrawFlags.e_pairBit) {\r\n          color.SetRGB(0.3, 0.9, 0.9);\r\n          for (let contact = this.m_contactManager.m_contactList; contact; contact = contact.m_next) {\r\n            const fixtureA = contact.GetFixtureA();\r\n            const fixtureB = contact.GetFixtureB();\r\n    \r\n            const cA = fixtureA.GetAABB().GetCenter();\r\n            const cB = fixtureB.GetAABB().GetCenter();\r\n    \r\n            this.m_debugDraw.DrawSegment(cA, cB, color);\r\n          }\r\n        }\r\n        */\r\n        if (flags & b2DrawFlags.e_aabbBit) {\r\n            color.SetRGB(0.9, 0.3, 0.9);\r\n            const vs = b2World.DrawDebugData_s_vs;\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                if (!b.IsActive()) {\r\n                    continue;\r\n                }\r\n                for (let f = b.GetFixtureList(); f; f = f.m_next) {\r\n                    for (let i = 0; i < f.m_proxyCount; ++i) {\r\n                        const proxy = f.m_proxies[i];\r\n                        const aabb = proxy.treeNode.aabb;\r\n                        vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);\r\n                        vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);\r\n                        vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);\r\n                        vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);\r\n                        this.m_debugDraw.DrawPolygon(vs, 4, color);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (flags & b2DrawFlags.e_centerOfMassBit) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                const xf = b2World.DrawDebugData_s_xf;\r\n                xf.q.Copy(b.m_xf.q);\r\n                xf.p.Copy(b.GetWorldCenter());\r\n                this.m_debugDraw.DrawTransform(xf);\r\n            }\r\n        }\r\n        // #if B2_ENABLE_CONTROLLER\r\n        // @see b2Controller list\r\n        if (flags & b2DrawFlags.e_controllerBit) {\r\n            for (let c = this.m_controllerList; c; c = c.m_next) {\r\n                c.Draw(this.m_debugDraw);\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    /// Query the world for all fixtures that potentially overlap the\r\n    /// provided AABB.\r\n    /// @param callback a user implemented callback class.\r\n    /// @param aabb the query box.\r\n    QueryAABB(callback, aabb, fn) {\r\n        this.m_contactManager.m_broadPhase.Query(aabb, (proxy) => {\r\n            const fixture_proxy = proxy.userData;\r\n            // DEBUG: b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            if (callback) {\r\n                return callback.ReportFixture(fixture);\r\n            }\r\n            else if (fn) {\r\n                return fn(fixture);\r\n            }\r\n            return true;\r\n        });\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryAABB(callback, aabb);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryAllAABB(aabb, out = []) {\r\n        this.QueryAABB(null, aabb, (fixture) => { out.push(fixture); return true; });\r\n        return out;\r\n    }\r\n    /// Query the world for all fixtures that potentially overlap the\r\n    /// provided point.\r\n    /// @param callback a user implemented callback class.\r\n    /// @param point the query point.\r\n    QueryPointAABB(callback, point, fn) {\r\n        this.m_contactManager.m_broadPhase.QueryPoint(point, (proxy) => {\r\n            const fixture_proxy = proxy.userData;\r\n            // DEBUG: b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            if (callback) {\r\n                return callback.ReportFixture(fixture);\r\n            }\r\n            else if (fn) {\r\n                return fn(fixture);\r\n            }\r\n            return true;\r\n        });\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryPointAABB(callback, point);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryAllPointAABB(point, out = []) {\r\n        this.QueryPointAABB(null, point, (fixture) => { out.push(fixture); return true; });\r\n        return out;\r\n    }\r\n    QueryFixtureShape(callback, shape, index, transform, fn) {\r\n        const aabb = b2World.QueryFixtureShape_s_aabb;\r\n        shape.ComputeAABB(aabb, transform, index);\r\n        this.m_contactManager.m_broadPhase.Query(aabb, (proxy) => {\r\n            const fixture_proxy = proxy.userData;\r\n            // DEBUG: b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            if (b2TestOverlapShape(shape, index, fixture.GetShape(), fixture_proxy.childIndex, transform, fixture.GetBody().GetTransform())) {\r\n                if (callback) {\r\n                    return callback.ReportFixture(fixture);\r\n                }\r\n                else if (fn) {\r\n                    return fn(fixture);\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback instanceof b2QueryCallback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryAABB(callback, aabb);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryAllFixtureShape(shape, index, transform, out = []) {\r\n        this.QueryFixtureShape(null, shape, index, transform, (fixture) => { out.push(fixture); return true; });\r\n        return out;\r\n    }\r\n    QueryFixturePoint(callback, point, fn) {\r\n        this.m_contactManager.m_broadPhase.QueryPoint(point, (proxy) => {\r\n            const fixture_proxy = proxy.userData;\r\n            // DEBUG: b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            if (fixture.TestPoint(point)) {\r\n                if (callback) {\r\n                    return callback.ReportFixture(fixture);\r\n                }\r\n                else if (fn) {\r\n                    return fn(fixture);\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.QueryPointAABB(callback, point);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    QueryAllFixturePoint(point, out = []) {\r\n        this.QueryFixturePoint(null, point, (fixture) => { out.push(fixture); return true; });\r\n        return out;\r\n    }\r\n    RayCast(callback, point1, point2, fn) {\r\n        const input = b2World.RayCast_s_input;\r\n        input.maxFraction = 1;\r\n        input.p1.Copy(point1);\r\n        input.p2.Copy(point2);\r\n        this.m_contactManager.m_broadPhase.RayCast(input, (input, proxy) => {\r\n            const fixture_proxy = proxy.userData;\r\n            // DEBUG: b2Assert(fixture_proxy instanceof b2FixtureProxy);\r\n            const fixture = fixture_proxy.fixture;\r\n            const index = fixture_proxy.childIndex;\r\n            const output = b2World.RayCast_s_output;\r\n            const hit = fixture.RayCast(output, input, index);\r\n            if (hit) {\r\n                const fraction = output.fraction;\r\n                const point = b2World.RayCast_s_point;\r\n                point.Set((1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y);\r\n                if (callback) {\r\n                    return callback.ReportFixture(fixture, point, output.normal, fraction);\r\n                }\r\n                else if (fn) {\r\n                    return fn(fixture, point, output.normal, fraction);\r\n                }\r\n            }\r\n            return input.maxFraction;\r\n        });\r\n        // #if B2_ENABLE_PARTICLE\r\n        if (callback) {\r\n            for (let p = this.m_particleSystemList; p; p = p.m_next) {\r\n                if (callback.ShouldQueryParticleSystem(p)) {\r\n                    p.RayCast(callback, point1, point2);\r\n                }\r\n            }\r\n        }\r\n        // #endif\r\n    }\r\n    RayCastOne(point1, point2) {\r\n        let result = null;\r\n        let min_fraction = 1;\r\n        this.RayCast(null, point1, point2, (fixture, point, normal, fraction) => {\r\n            if (fraction < min_fraction) {\r\n                min_fraction = fraction;\r\n                result = fixture;\r\n            }\r\n            return min_fraction;\r\n        });\r\n        return result;\r\n    }\r\n    RayCastAll(point1, point2, out = []) {\r\n        this.RayCast(null, point1, point2, (fixture, point, normal, fraction) => {\r\n            out.push(fixture);\r\n            return 1;\r\n        });\r\n        return out;\r\n    }\r\n    /// Get the world body list. With the returned body, use b2Body::GetNext to get\r\n    /// the next body in the world list. A NULL body indicates the end of the list.\r\n    /// @return the head of the world body list.\r\n    GetBodyList() {\r\n        return this.m_bodyList;\r\n    }\r\n    /// Get the world joint list. With the returned joint, use b2Joint::GetNext to get\r\n    /// the next joint in the world list. A NULL joint indicates the end of the list.\r\n    /// @return the head of the world joint list.\r\n    GetJointList() {\r\n        return this.m_jointList;\r\n    }\r\n    // #if B2_ENABLE_PARTICLE\r\n    GetParticleSystemList() {\r\n        return this.m_particleSystemList;\r\n    }\r\n    // #endif\r\n    /// Get the world contact list. With the returned contact, use b2Contact::GetNext to get\r\n    /// the next contact in the world list. A NULL contact indicates the end of the list.\r\n    /// @return the head of the world contact list.\r\n    /// @warning contacts are created and destroyed in the middle of a time step.\r\n    /// Use b2ContactListener to avoid missing contacts.\r\n    GetContactList() {\r\n        return this.m_contactManager.m_contactList;\r\n    }\r\n    /// Enable/disable sleep.\r\n    SetAllowSleeping(flag) {\r\n        if (flag === this.m_allowSleep) {\r\n            return;\r\n        }\r\n        this.m_allowSleep = flag;\r\n        if (!this.m_allowSleep) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                b.SetAwake(true);\r\n            }\r\n        }\r\n    }\r\n    GetAllowSleeping() {\r\n        return this.m_allowSleep;\r\n    }\r\n    /// Enable/disable warm starting. For testing.\r\n    SetWarmStarting(flag) {\r\n        this.m_warmStarting = flag;\r\n    }\r\n    GetWarmStarting() {\r\n        return this.m_warmStarting;\r\n    }\r\n    /// Enable/disable continuous physics. For testing.\r\n    SetContinuousPhysics(flag) {\r\n        this.m_continuousPhysics = flag;\r\n    }\r\n    GetContinuousPhysics() {\r\n        return this.m_continuousPhysics;\r\n    }\r\n    /// Enable/disable single stepped continuous physics. For testing.\r\n    SetSubStepping(flag) {\r\n        this.m_subStepping = flag;\r\n    }\r\n    GetSubStepping() {\r\n        return this.m_subStepping;\r\n    }\r\n    /// Get the number of broad-phase proxies.\r\n    GetProxyCount() {\r\n        return this.m_contactManager.m_broadPhase.GetProxyCount();\r\n    }\r\n    /// Get the number of bodies.\r\n    GetBodyCount() {\r\n        return this.m_bodyCount;\r\n    }\r\n    /// Get the number of joints.\r\n    GetJointCount() {\r\n        return this.m_jointCount;\r\n    }\r\n    /// Get the number of contacts (each may have 0 or more contact points).\r\n    GetContactCount() {\r\n        return this.m_contactManager.m_contactCount;\r\n    }\r\n    /// Get the height of the dynamic tree.\r\n    GetTreeHeight() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeHeight();\r\n    }\r\n    /// Get the balance of the dynamic tree.\r\n    GetTreeBalance() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeBalance();\r\n    }\r\n    /// Get the quality metric of the dynamic tree. The smaller the better.\r\n    /// The minimum is 1.\r\n    GetTreeQuality() {\r\n        return this.m_contactManager.m_broadPhase.GetTreeQuality();\r\n    }\r\n    /// Change the global gravity vector.\r\n    SetGravity(gravity, wake = true) {\r\n        if (!b2Vec2.IsEqualToV(this.m_gravity, gravity)) {\r\n            this.m_gravity.Copy(gravity);\r\n            if (wake) {\r\n                for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                    b.SetAwake(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /// Get the global gravity vector.\r\n    GetGravity() {\r\n        return this.m_gravity;\r\n    }\r\n    /// Is the world locked (in the middle of a time step).\r\n    IsLocked() {\r\n        return this.m_locked;\r\n    }\r\n    /// Set flag to control automatic clearing of forces after each time step.\r\n    SetAutoClearForces(flag) {\r\n        this.m_clearForces = flag;\r\n    }\r\n    /// Get the flag that controls automatic clearing of forces after each time step.\r\n    GetAutoClearForces() {\r\n        return this.m_clearForces;\r\n    }\r\n    /// Shift the world origin. Useful for large worlds.\r\n    /// The body shift formula is: position -= newOrigin\r\n    /// @param newOrigin the new origin with respect to the old origin\r\n    ShiftOrigin(newOrigin) {\r\n        if (this.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_xf.p.SelfSub(newOrigin);\r\n            b.m_sweep.c0.SelfSub(newOrigin);\r\n            b.m_sweep.c.SelfSub(newOrigin);\r\n        }\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.ShiftOrigin(newOrigin);\r\n        }\r\n        this.m_contactManager.m_broadPhase.ShiftOrigin(newOrigin);\r\n    }\r\n    /// Get the contact manager for testing.\r\n    GetContactManager() {\r\n        return this.m_contactManager;\r\n    }\r\n    /// Get the current profile.\r\n    GetProfile() {\r\n        return this.m_profile;\r\n    }\r\n    /// Dump the world into the log file.\r\n    /// @warning this should be called outside of a time step.\r\n    Dump(log) {\r\n        if (this.m_locked) {\r\n            return;\r\n        }\r\n        log(\"const g: b2Vec2 = new b2Vec2(%.15f, %.15f);\\n\", this.m_gravity.x, this.m_gravity.y);\r\n        log(\"this.m_world.SetGravity(g);\\n\");\r\n        log(\"const bodies: b2Body[] = [];\\n\");\r\n        log(\"const joints: b2Joint[] = [];\\n\");\r\n        let i = 0;\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_islandIndex = i;\r\n            b.Dump(log);\r\n            ++i;\r\n        }\r\n        i = 0;\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.m_index = i;\r\n            ++i;\r\n        }\r\n        // First pass on joints, skip gear joints.\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            if (j.m_type === b2JointType.e_gearJoint) {\r\n                continue;\r\n            }\r\n            log(\"{\\n\");\r\n            j.Dump(log);\r\n            log(\"}\\n\");\r\n        }\r\n        // Second pass on joints, only gear joints.\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            if (j.m_type !== b2JointType.e_gearJoint) {\r\n                continue;\r\n            }\r\n            log(\"{\\n\");\r\n            j.Dump(log);\r\n            log(\"}\\n\");\r\n        }\r\n    }\r\n    DrawJoint(joint) {\r\n        if (this.m_debugDraw === null) {\r\n            return;\r\n        }\r\n        const bodyA = joint.GetBodyA();\r\n        const bodyB = joint.GetBodyB();\r\n        const xf1 = bodyA.m_xf;\r\n        const xf2 = bodyB.m_xf;\r\n        const x1 = xf1.p;\r\n        const x2 = xf2.p;\r\n        const p1 = joint.GetAnchorA(b2World.DrawJoint_s_p1);\r\n        const p2 = joint.GetAnchorB(b2World.DrawJoint_s_p2);\r\n        const color = b2World.DrawJoint_s_color.SetRGB(0.5, 0.8, 0.8);\r\n        switch (joint.m_type) {\r\n            case b2JointType.e_distanceJoint:\r\n                this.m_debugDraw.DrawSegment(p1, p2, color);\r\n                break;\r\n            case b2JointType.e_pulleyJoint: {\r\n                const pulley = joint;\r\n                const s1 = pulley.GetGroundAnchorA();\r\n                const s2 = pulley.GetGroundAnchorB();\r\n                this.m_debugDraw.DrawSegment(s1, p1, color);\r\n                this.m_debugDraw.DrawSegment(s2, p2, color);\r\n                this.m_debugDraw.DrawSegment(s1, s2, color);\r\n                break;\r\n            }\r\n            case b2JointType.e_mouseJoint: {\r\n                const c = b2World.DrawJoint_s_c;\r\n                c.Set(0.0, 1.0, 0.0);\r\n                this.m_debugDraw.DrawPoint(p1, 4.0, c);\r\n                this.m_debugDraw.DrawPoint(p2, 4.0, c);\r\n                c.Set(0.8, 0.8, 0.8);\r\n                this.m_debugDraw.DrawSegment(p1, p2, c);\r\n                break;\r\n            }\r\n            default:\r\n                this.m_debugDraw.DrawSegment(x1, p1, color);\r\n                this.m_debugDraw.DrawSegment(p1, p2, color);\r\n                this.m_debugDraw.DrawSegment(x2, p2, color);\r\n        }\r\n    }\r\n    DrawShape(fixture, color) {\r\n        if (this.m_debugDraw === null) {\r\n            return;\r\n        }\r\n        const shape = fixture.GetShape();\r\n        switch (shape.m_type) {\r\n            case b2ShapeType.e_circleShape: {\r\n                const circle = shape;\r\n                const center = circle.m_p;\r\n                const radius = circle.m_radius;\r\n                const axis = b2Vec2.UNITX;\r\n                this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);\r\n                break;\r\n            }\r\n            case b2ShapeType.e_edgeShape: {\r\n                const edge = shape;\r\n                const v1 = edge.m_vertex1;\r\n                const v2 = edge.m_vertex2;\r\n                this.m_debugDraw.DrawSegment(v1, v2, color);\r\n                break;\r\n            }\r\n            case b2ShapeType.e_chainShape: {\r\n                const chain = shape;\r\n                const count = chain.m_count;\r\n                const vertices = chain.m_vertices;\r\n                const ghostColor = b2World.DrawShape_s_ghostColor.SetRGBA(0.75 * color.r, 0.75 * color.g, 0.75 * color.b, color.a);\r\n                let v1 = vertices[0];\r\n                this.m_debugDraw.DrawPoint(v1, 4.0, color);\r\n                if (chain.m_hasPrevVertex) {\r\n                    const vp = chain.m_prevVertex;\r\n                    this.m_debugDraw.DrawSegment(vp, v1, ghostColor);\r\n                    this.m_debugDraw.DrawCircle(vp, 0.1, ghostColor);\r\n                }\r\n                for (let i = 1; i < count; ++i) {\r\n                    const v2 = vertices[i];\r\n                    this.m_debugDraw.DrawSegment(v1, v2, color);\r\n                    this.m_debugDraw.DrawPoint(v2, 4.0, color);\r\n                    v1 = v2;\r\n                }\r\n                if (chain.m_hasNextVertex) {\r\n                    const vn = chain.m_nextVertex;\r\n                    this.m_debugDraw.DrawSegment(vn, v1, ghostColor);\r\n                    this.m_debugDraw.DrawCircle(vn, 0.1, ghostColor);\r\n                }\r\n                break;\r\n            }\r\n            case b2ShapeType.e_polygonShape: {\r\n                const poly = shape;\r\n                const vertexCount = poly.m_count;\r\n                const vertices = poly.m_vertices;\r\n                this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    Solve(step) {\r\n        // #if B2_ENABLE_PARTICLE\r\n        // update previous transforms\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_xf0.Copy(b.m_xf);\r\n        }\r\n        // #endif\r\n        // #if B2_ENABLE_CONTROLLER\r\n        // @see b2Controller list\r\n        for (let controller = this.m_controllerList; controller; controller = controller.m_next) {\r\n            controller.Step(step);\r\n        }\r\n        // #endif\r\n        this.m_profile.solveInit = 0;\r\n        this.m_profile.solveVelocity = 0;\r\n        this.m_profile.solvePosition = 0;\r\n        // Size the island for the worst case.\r\n        const island = this.m_island;\r\n        island.Initialize(this.m_bodyCount, this.m_contactManager.m_contactCount, this.m_jointCount, null, // this.m_stackAllocator,\r\n        this.m_contactManager.m_contactListener);\r\n        // Clear all the island flags.\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            b.m_islandFlag = false;\r\n        }\r\n        for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n            c.m_islandFlag = false;\r\n        }\r\n        for (let j = this.m_jointList; j; j = j.m_next) {\r\n            j.m_islandFlag = false;\r\n        }\r\n        // Build and simulate all awake islands.\r\n        // DEBUG: const stackSize: number = this.m_bodyCount;\r\n        const stack = this.s_stack;\r\n        for (let seed = this.m_bodyList; seed; seed = seed.m_next) {\r\n            if (seed.m_islandFlag) {\r\n                continue;\r\n            }\r\n            if (!seed.IsAwake() || !seed.IsActive()) {\r\n                continue;\r\n            }\r\n            // The seed can be dynamic or kinematic.\r\n            if (seed.GetType() === b2BodyType.b2_staticBody) {\r\n                continue;\r\n            }\r\n            // Reset island and stack.\r\n            island.Clear();\r\n            let stackCount = 0;\r\n            stack[stackCount++] = seed;\r\n            seed.m_islandFlag = true;\r\n            // Perform a depth first search (DFS) on the constraint graph.\r\n            while (stackCount > 0) {\r\n                // Grab the next body off the stack and add it to the island.\r\n                const b = stack[--stackCount];\r\n                if (!b) {\r\n                    throw new Error();\r\n                }\r\n                // DEBUG: b2Assert(b.IsActive());\r\n                island.AddBody(b);\r\n                // Make sure the body is awake. (without resetting sleep timer).\r\n                b.m_awakeFlag = true;\r\n                // To keep islands as small as possible, we don't\r\n                // propagate islands across static bodies.\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    continue;\r\n                }\r\n                // Search all contacts connected to this body.\r\n                for (let ce = b.m_contactList; ce; ce = ce.next) {\r\n                    const contact = ce.contact;\r\n                    // Has this contact already been added to an island?\r\n                    if (contact.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    // Is this contact solid and touching?\r\n                    if (!contact.IsEnabled() || !contact.IsTouching()) {\r\n                        continue;\r\n                    }\r\n                    // Skip sensors.\r\n                    const sensorA = contact.m_fixtureA.m_isSensor;\r\n                    const sensorB = contact.m_fixtureB.m_isSensor;\r\n                    if (sensorA || sensorB) {\r\n                        continue;\r\n                    }\r\n                    island.AddContact(contact);\r\n                    contact.m_islandFlag = true;\r\n                    const other = ce.other;\r\n                    if (!other) {\r\n                        throw new Error();\r\n                    }\r\n                    // Was the other body already added to this island?\r\n                    if (other.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    // DEBUG: b2Assert(stackCount < stackSize);\r\n                    stack[stackCount++] = other;\r\n                    other.m_islandFlag = true;\r\n                }\r\n                // Search all joints connect to this body.\r\n                for (let je = b.m_jointList; je; je = je.next) {\r\n                    if (je.joint.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    const other = je.other;\r\n                    // Don't simulate joints connected to inactive bodies.\r\n                    if (!other.IsActive()) {\r\n                        continue;\r\n                    }\r\n                    island.AddJoint(je.joint);\r\n                    je.joint.m_islandFlag = true;\r\n                    if (other.m_islandFlag) {\r\n                        continue;\r\n                    }\r\n                    // DEBUG: b2Assert(stackCount < stackSize);\r\n                    stack[stackCount++] = other;\r\n                    other.m_islandFlag = true;\r\n                }\r\n            }\r\n            const profile = new b2Profile();\r\n            island.Solve(profile, step, this.m_gravity, this.m_allowSleep);\r\n            this.m_profile.solveInit += profile.solveInit;\r\n            this.m_profile.solveVelocity += profile.solveVelocity;\r\n            this.m_profile.solvePosition += profile.solvePosition;\r\n            // Post solve cleanup.\r\n            for (let i = 0; i < island.m_bodyCount; ++i) {\r\n                // Allow static bodies to participate in other islands.\r\n                const b = island.m_bodies[i];\r\n                if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                    b.m_islandFlag = false;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < stack.length; ++i) {\r\n            if (!stack[i]) {\r\n                break;\r\n            }\r\n            stack[i] = null;\r\n        }\r\n        const timer = new b2Timer();\r\n        // Synchronize fixtures, check for out of range bodies.\r\n        for (let b = this.m_bodyList; b; b = b.m_next) {\r\n            // If a body was not in an island then it did not move.\r\n            if (!b.m_islandFlag) {\r\n                continue;\r\n            }\r\n            if (b.GetType() === b2BodyType.b2_staticBody) {\r\n                continue;\r\n            }\r\n            // Update fixtures (for broad-phase).\r\n            b.SynchronizeFixtures();\r\n        }\r\n        // Look for new contacts.\r\n        this.m_contactManager.FindNewContacts();\r\n        this.m_profile.broadphase = timer.GetMilliseconds();\r\n    }\r\n    SolveTOI(step) {\r\n        // b2Island island(2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, &m_stackAllocator, m_contactManager.m_contactListener);\r\n        const island = this.m_island;\r\n        island.Initialize(2 * b2_maxTOIContacts, b2_maxTOIContacts, 0, null, this.m_contactManager.m_contactListener);\r\n        if (this.m_stepComplete) {\r\n            for (let b = this.m_bodyList; b; b = b.m_next) {\r\n                b.m_islandFlag = false;\r\n                b.m_sweep.alpha0 = 0;\r\n            }\r\n            for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n                // Invalidate TOI\r\n                c.m_toiFlag = false;\r\n                c.m_islandFlag = false;\r\n                c.m_toiCount = 0;\r\n                c.m_toi = 1;\r\n            }\r\n        }\r\n        // Find TOI events and solve them.\r\n        for (;;) {\r\n            // Find the first TOI.\r\n            let minContact = null;\r\n            let minAlpha = 1;\r\n            for (let c = this.m_contactManager.m_contactList; c; c = c.m_next) {\r\n                // Is this contact disabled?\r\n                if (!c.IsEnabled()) {\r\n                    continue;\r\n                }\r\n                // Prevent excessive sub-stepping.\r\n                if (c.m_toiCount > b2_maxSubSteps) {\r\n                    continue;\r\n                }\r\n                let alpha = 1;\r\n                if (c.m_toiFlag) {\r\n                    // This contact has a valid cached TOI.\r\n                    alpha = c.m_toi;\r\n                }\r\n                else {\r\n                    const fA = c.GetFixtureA();\r\n                    const fB = c.GetFixtureB();\r\n                    // Is there a sensor?\r\n                    if (fA.IsSensor() || fB.IsSensor()) {\r\n                        continue;\r\n                    }\r\n                    const bA = fA.GetBody();\r\n                    const bB = fB.GetBody();\r\n                    const typeA = bA.m_type;\r\n                    const typeB = bB.m_type;\r\n                    // DEBUG: b2Assert(typeA !== b2BodyType.b2_staticBody || typeB !== b2BodyType.b2_staticBody);\r\n                    const activeA = bA.IsAwake() && typeA !== b2BodyType.b2_staticBody;\r\n                    const activeB = bB.IsAwake() && typeB !== b2BodyType.b2_staticBody;\r\n                    // Is at least one body active (awake and dynamic or kinematic)?\r\n                    if (!activeA && !activeB) {\r\n                        continue;\r\n                    }\r\n                    const collideA = bA.IsBullet() || typeA !== b2BodyType.b2_dynamicBody;\r\n                    const collideB = bB.IsBullet() || typeB !== b2BodyType.b2_dynamicBody;\r\n                    // Are these two non-bullet dynamic bodies?\r\n                    if (!collideA && !collideB) {\r\n                        continue;\r\n                    }\r\n                    // Compute the TOI for this contact.\r\n                    // Put the sweeps onto the same time interval.\r\n                    let alpha0 = bA.m_sweep.alpha0;\r\n                    if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\r\n                        alpha0 = bB.m_sweep.alpha0;\r\n                        bA.m_sweep.Advance(alpha0);\r\n                    }\r\n                    else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\r\n                        alpha0 = bA.m_sweep.alpha0;\r\n                        bB.m_sweep.Advance(alpha0);\r\n                    }\r\n                    // DEBUG: b2Assert(alpha0 < 1);\r\n                    const indexA = c.GetChildIndexA();\r\n                    const indexB = c.GetChildIndexB();\r\n                    // Compute the time of impact in interval [0, minTOI]\r\n                    const input = b2World.SolveTOI_s_toi_input;\r\n                    input.proxyA.SetShape(fA.GetShape(), indexA);\r\n                    input.proxyB.SetShape(fB.GetShape(), indexB);\r\n                    input.sweepA.Copy(bA.m_sweep);\r\n                    input.sweepB.Copy(bB.m_sweep);\r\n                    input.tMax = 1;\r\n                    const output = b2World.SolveTOI_s_toi_output;\r\n                    b2TimeOfImpact(output, input);\r\n                    // Beta is the fraction of the remaining portion of the .\r\n                    const beta = output.t;\r\n                    if (output.state === b2TOIOutputState.e_touching) {\r\n                        alpha = b2Min(alpha0 + (1 - alpha0) * beta, 1);\r\n                    }\r\n                    else {\r\n                        alpha = 1;\r\n                    }\r\n                    c.m_toi = alpha;\r\n                    c.m_toiFlag = true;\r\n                }\r\n                if (alpha < minAlpha) {\r\n                    // This is the minimum TOI found so far.\r\n                    minContact = c;\r\n                    minAlpha = alpha;\r\n                }\r\n            }\r\n            if (minContact === null || 1 - 10 * b2_epsilon < minAlpha) {\r\n                // No more TOI events. Done!\r\n                this.m_stepComplete = true;\r\n                break;\r\n            }\r\n            // Advance the bodies to the TOI.\r\n            const fA = minContact.GetFixtureA();\r\n            const fB = minContact.GetFixtureB();\r\n            const bA = fA.GetBody();\r\n            const bB = fB.GetBody();\r\n            const backup1 = b2World.SolveTOI_s_backup1.Copy(bA.m_sweep);\r\n            const backup2 = b2World.SolveTOI_s_backup2.Copy(bB.m_sweep);\r\n            bA.Advance(minAlpha);\r\n            bB.Advance(minAlpha);\r\n            // The TOI contact likely has some new contact points.\r\n            minContact.Update(this.m_contactManager.m_contactListener);\r\n            minContact.m_toiFlag = false;\r\n            ++minContact.m_toiCount;\r\n            // Is the contact solid?\r\n            if (!minContact.IsEnabled() || !minContact.IsTouching()) {\r\n                // Restore the sweeps.\r\n                minContact.SetEnabled(false);\r\n                bA.m_sweep.Copy(backup1);\r\n                bB.m_sweep.Copy(backup2);\r\n                bA.SynchronizeTransform();\r\n                bB.SynchronizeTransform();\r\n                continue;\r\n            }\r\n            bA.SetAwake(true);\r\n            bB.SetAwake(true);\r\n            // Build the island\r\n            island.Clear();\r\n            island.AddBody(bA);\r\n            island.AddBody(bB);\r\n            island.AddContact(minContact);\r\n            bA.m_islandFlag = true;\r\n            bB.m_islandFlag = true;\r\n            minContact.m_islandFlag = true;\r\n            // Get contacts on bodyA and bodyB.\r\n            // const bodies: b2Body[] = [bA, bB];\r\n            for (let i = 0; i < 2; ++i) {\r\n                const body = (i === 0) ? (bA) : (bB); // bodies[i];\r\n                if (body.m_type === b2BodyType.b2_dynamicBody) {\r\n                    for (let ce = body.m_contactList; ce; ce = ce.next) {\r\n                        if (island.m_bodyCount === island.m_bodyCapacity) {\r\n                            break;\r\n                        }\r\n                        if (island.m_contactCount === island.m_contactCapacity) {\r\n                            break;\r\n                        }\r\n                        const contact = ce.contact;\r\n                        // Has this contact already been added to the island?\r\n                        if (contact.m_islandFlag) {\r\n                            continue;\r\n                        }\r\n                        // Only add static, kinematic, or bullet bodies.\r\n                        const other = ce.other;\r\n                        if (other.m_type === b2BodyType.b2_dynamicBody &&\r\n                            !body.IsBullet() && !other.IsBullet()) {\r\n                            continue;\r\n                        }\r\n                        // Skip sensors.\r\n                        const sensorA = contact.m_fixtureA.m_isSensor;\r\n                        const sensorB = contact.m_fixtureB.m_isSensor;\r\n                        if (sensorA || sensorB) {\r\n                            continue;\r\n                        }\r\n                        // Tentatively advance the body to the TOI.\r\n                        const backup = b2World.SolveTOI_s_backup.Copy(other.m_sweep);\r\n                        if (!other.m_islandFlag) {\r\n                            other.Advance(minAlpha);\r\n                        }\r\n                        // Update the contact points\r\n                        contact.Update(this.m_contactManager.m_contactListener);\r\n                        // Was the contact disabled by the user?\r\n                        if (!contact.IsEnabled()) {\r\n                            other.m_sweep.Copy(backup);\r\n                            other.SynchronizeTransform();\r\n                            continue;\r\n                        }\r\n                        // Are there contact points?\r\n                        if (!contact.IsTouching()) {\r\n                            other.m_sweep.Copy(backup);\r\n                            other.SynchronizeTransform();\r\n                            continue;\r\n                        }\r\n                        // Add the contact to the island\r\n                        contact.m_islandFlag = true;\r\n                        island.AddContact(contact);\r\n                        // Has the other body already been added to the island?\r\n                        if (other.m_islandFlag) {\r\n                            continue;\r\n                        }\r\n                        // Add the other body to the island.\r\n                        other.m_islandFlag = true;\r\n                        if (other.m_type !== b2BodyType.b2_staticBody) {\r\n                            other.SetAwake(true);\r\n                        }\r\n                        island.AddBody(other);\r\n                    }\r\n                }\r\n            }\r\n            const subStep = b2World.SolveTOI_s_subStep;\r\n            subStep.dt = (1 - minAlpha) * step.dt;\r\n            subStep.inv_dt = 1 / subStep.dt;\r\n            subStep.dtRatio = 1;\r\n            subStep.positionIterations = 20;\r\n            subStep.velocityIterations = step.velocityIterations;\r\n            // #if B2_ENABLE_PARTICLE\r\n            subStep.particleIterations = step.particleIterations;\r\n            // #endif\r\n            subStep.warmStarting = false;\r\n            island.SolveTOI(subStep, bA.m_islandIndex, bB.m_islandIndex);\r\n            // Reset island flags and synchronize broad-phase proxies.\r\n            for (let i = 0; i < island.m_bodyCount; ++i) {\r\n                const body = island.m_bodies[i];\r\n                body.m_islandFlag = false;\r\n                if (body.m_type !== b2BodyType.b2_dynamicBody) {\r\n                    continue;\r\n                }\r\n                body.SynchronizeFixtures();\r\n                // Invalidate all contact TOIs on this displaced body.\r\n                for (let ce = body.m_contactList; ce; ce = ce.next) {\r\n                    ce.contact.m_toiFlag = false;\r\n                    ce.contact.m_islandFlag = false;\r\n                }\r\n            }\r\n            // Commit fixture proxy movements to the broad-phase so that new contacts are created.\r\n            // Also, some contacts can be destroyed.\r\n            this.m_contactManager.FindNewContacts();\r\n            if (this.m_subStepping) {\r\n                this.m_stepComplete = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // #if B2_ENABLE_CONTROLLER\r\n    AddController(controller) {\r\n        // b2Assert(controller.m_world === null, \"Controller can only be a member of one world\");\r\n        // controller.m_world = this;\r\n        controller.m_next = this.m_controllerList;\r\n        controller.m_prev = null;\r\n        if (this.m_controllerList) {\r\n            this.m_controllerList.m_prev = controller;\r\n        }\r\n        this.m_controllerList = controller;\r\n        ++this.m_controllerCount;\r\n        return controller;\r\n    }\r\n    RemoveController(controller) {\r\n        // b2Assert(controller.m_world === this, \"Controller is not a member of this world\");\r\n        if (controller.m_prev) {\r\n            controller.m_prev.m_next = controller.m_next;\r\n        }\r\n        if (controller.m_next) {\r\n            controller.m_next.m_prev = controller.m_prev;\r\n        }\r\n        if (this.m_controllerList === controller) {\r\n            this.m_controllerList = controller.m_next;\r\n        }\r\n        --this.m_controllerCount;\r\n        controller.m_prev = null;\r\n        controller.m_next = null;\r\n        // delete controller.m_world; // = null;\r\n        return controller;\r\n    }\r\n}\r\n// #endif\r\n/// Take a time step. This performs collision detection, integration,\r\n/// and constraint solution.\r\n/// @param timeStep the amount of time to simulate, this should not vary.\r\n/// @param velocityIterations for the velocity constraint solver.\r\n/// @param positionIterations for the position constraint solver.\r\nb2World.Step_s_step = new b2TimeStep();\r\nb2World.Step_s_stepTimer = new b2Timer();\r\nb2World.Step_s_timer = new b2Timer();\r\n// #endif\r\n/// Call this to draw shapes and other debug draw data.\r\nb2World.DrawDebugData_s_color = new b2Color(0, 0, 0);\r\nb2World.DrawDebugData_s_vs = b2Vec2.MakeArray(4);\r\nb2World.DrawDebugData_s_xf = new b2Transform();\r\nb2World.QueryFixtureShape_s_aabb = new b2AABB();\r\n/// Ray-cast the world for all fixtures in the path of the ray. Your callback\r\n/// controls whether you get the closest point, any point, or n-points.\r\n/// The ray-cast ignores shapes that contain the starting point.\r\n/// @param callback a user implemented callback class.\r\n/// @param point1 the ray starting point\r\n/// @param point2 the ray ending point\r\nb2World.RayCast_s_input = new b2RayCastInput();\r\nb2World.RayCast_s_output = new b2RayCastOutput();\r\nb2World.RayCast_s_point = new b2Vec2();\r\nb2World.DrawJoint_s_p1 = new b2Vec2();\r\nb2World.DrawJoint_s_p2 = new b2Vec2();\r\nb2World.DrawJoint_s_color = new b2Color(0.5, 0.8, 0.8);\r\nb2World.DrawJoint_s_c = new b2Color();\r\nb2World.DrawShape_s_ghostColor = new b2Color();\r\nb2World.SolveTOI_s_subStep = new b2TimeStep();\r\nb2World.SolveTOI_s_backup = new b2Sweep();\r\nb2World.SolveTOI_s_backup1 = new b2Sweep();\r\nb2World.SolveTOI_s_backup2 = new b2Sweep();\r\nb2World.SolveTOI_s_toi_input = new b2TOIInput();\r\nb2World.SolveTOI_s_toi_output = new b2TOIOutput();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n/**\r\n * A controller edge is used to connect bodies and controllers\r\n * together in a bipartite graph.\r\n */\r\nexport class b2ControllerEdge {\r\n    constructor(controller, body) {\r\n        this.prevBody = null; ///< the previous controller edge in the controllers's joint list\r\n        this.nextBody = null; ///< the next controller edge in the controllers's joint list\r\n        this.prevController = null; ///< the previous controller edge in the body's joint list\r\n        this.nextController = null; ///< the next controller edge in the body's joint list\r\n        this.controller = controller;\r\n        this.body = body;\r\n    }\r\n}\r\n/**\r\n * Base class for controllers. Controllers are a convience for\r\n * encapsulating common per-step functionality.\r\n */\r\nexport class b2Controller {\r\n    constructor() {\r\n        // m_world: b2World;\r\n        this.m_bodyList = null;\r\n        this.m_bodyCount = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n    }\r\n    /**\r\n     * Get the next controller in the world's body list.\r\n     */\r\n    GetNext() {\r\n        return this.m_next;\r\n    }\r\n    /**\r\n     * Get the previous controller in the world's body list.\r\n     */\r\n    GetPrev() {\r\n        return this.m_prev;\r\n    }\r\n    /**\r\n     * Get the parent world of this body.\r\n     */\r\n    // GetWorld() {\r\n    //   return this.m_world;\r\n    // }\r\n    /**\r\n     * Get the attached body list\r\n     */\r\n    GetBodyList() {\r\n        return this.m_bodyList;\r\n    }\r\n    /**\r\n     * Adds a body to the controller list.\r\n     */\r\n    AddBody(body) {\r\n        const edge = new b2ControllerEdge(this, body);\r\n        //Add edge to controller list\r\n        edge.nextBody = this.m_bodyList;\r\n        edge.prevBody = null;\r\n        if (this.m_bodyList) {\r\n            this.m_bodyList.prevBody = edge;\r\n        }\r\n        this.m_bodyList = edge;\r\n        ++this.m_bodyCount;\r\n        //Add edge to body list\r\n        edge.nextController = body.m_controllerList;\r\n        edge.prevController = null;\r\n        if (body.m_controllerList) {\r\n            body.m_controllerList.prevController = edge;\r\n        }\r\n        body.m_controllerList = edge;\r\n        ++body.m_controllerCount;\r\n    }\r\n    /**\r\n     * Removes a body from the controller list.\r\n     */\r\n    RemoveBody(body) {\r\n        //Assert that the controller is not empty\r\n        if (this.m_bodyCount <= 0) {\r\n            throw new Error();\r\n        }\r\n        //Find the corresponding edge\r\n        /*b2ControllerEdge*/\r\n        let edge = this.m_bodyList;\r\n        while (edge && edge.body !== body) {\r\n            edge = edge.nextBody;\r\n        }\r\n        //Assert that we are removing a body that is currently attached to the controller\r\n        if (edge === null) {\r\n            throw new Error();\r\n        }\r\n        //Remove edge from controller list\r\n        if (edge.prevBody) {\r\n            edge.prevBody.nextBody = edge.nextBody;\r\n        }\r\n        if (edge.nextBody) {\r\n            edge.nextBody.prevBody = edge.prevBody;\r\n        }\r\n        if (this.m_bodyList === edge) {\r\n            this.m_bodyList = edge.nextBody;\r\n        }\r\n        --this.m_bodyCount;\r\n        //Remove edge from body list\r\n        if (edge.nextController) {\r\n            edge.nextController.prevController = edge.prevController;\r\n        }\r\n        if (edge.prevController) {\r\n            edge.prevController.nextController = edge.nextController;\r\n        }\r\n        if (body.m_controllerList === edge) {\r\n            body.m_controllerList = edge.nextController;\r\n        }\r\n        --body.m_controllerCount;\r\n    }\r\n    /**\r\n     * Removes all bodies from the controller list.\r\n     */\r\n    Clear() {\r\n        while (this.m_bodyList) {\r\n            this.RemoveBody(this.m_bodyList.body);\r\n        }\r\n        this.m_bodyCount = 0;\r\n    }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vQm94MkQvQ29udHJvbGxlcnMvYjJDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBUUg7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGdCQUFnQjtJQU8zQixZQUFZLFVBQXdCLEVBQUUsSUFBWTtRQUozQyxhQUFRLEdBQTRCLElBQUksQ0FBQyxDQUFDLGlFQUFpRTtRQUMzRyxhQUFRLEdBQTRCLElBQUksQ0FBQyxDQUFDLDZEQUE2RDtRQUN2RyxtQkFBYyxHQUE0QixJQUFJLENBQUMsQ0FBQywwREFBMEQ7UUFDMUcsbUJBQWMsR0FBNEIsSUFBSSxDQUFDLENBQUMsc0RBQXNEO1FBRTNHLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQUVEOzs7R0FHRztBQUNILE1BQU0sT0FBZ0IsWUFBWTtJQUFsQztRQUNFLG9CQUFvQjtRQUNiLGVBQVUsR0FBNEIsSUFBSSxDQUFDO1FBQzNDLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBQ3hCLFdBQU0sR0FBd0IsSUFBSSxDQUFDO1FBQ25DLFdBQU0sR0FBd0IsSUFBSSxDQUFDO0lBcUg1QyxDQUFDO0lBekdDOztPQUVHO0lBQ0ksT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7SUFDZix5QkFBeUI7SUFDekIsSUFBSTtJQUVKOztPQUVHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTyxDQUFDLElBQVk7UUFDekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFOUMsNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDO1FBRW5CLHVCQUF1QjtRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUM1QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM3QztRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLElBQVk7UUFDNUIseUNBQXlDO1FBQ3pDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLEVBQUU7WUFBRSxNQUFNLElBQUksS0FBSyxFQUFFLENBQUM7U0FBRTtRQUVqRCw2QkFBNkI7UUFDN0Isb0JBQW9CO1FBQ3BCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDM0IsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDakMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdEI7UUFFRCxpRkFBaUY7UUFDakYsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQUUsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO1NBQUU7UUFFekMsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDeEM7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUNqQztRQUNELEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUVuQiw0QkFBNEI7UUFDNUIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7U0FDMUQ7UUFDRCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUMxRDtRQUNELElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLElBQUksRUFBRTtZQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUM3QztRQUNELEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUs7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBRUQsU0FBUyJ9","/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_CONTROLLER\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\n/**\r\n * Calculates buoyancy forces for fluids in the form of a half\r\n * plane.\r\n */\r\nexport class b2BuoyancyController extends b2Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The outer surface normal\r\n         */\r\n        this.normal = new b2Vec2(0, 1);\r\n        /**\r\n         * The height of the fluid surface along the normal\r\n         */\r\n        this.offset = 0;\r\n        /**\r\n         * The fluid density\r\n         */\r\n        this.density = 0;\r\n        /**\r\n         * Fluid velocity, for drag calculations\r\n         */\r\n        this.velocity = new b2Vec2(0, 0);\r\n        /**\r\n         * Linear drag co-efficient\r\n         */\r\n        this.linearDrag = 0;\r\n        /**\r\n         * Angular drag co-efficient\r\n         */\r\n        this.angularDrag = 0;\r\n        /**\r\n         * If false, bodies are assumed to be uniformly dense, otherwise\r\n         * use the shapes densities\r\n         */\r\n        this.useDensity = false; //False by default to prevent a gotcha\r\n        /**\r\n         * If true, gravity is taken from the world instead of the\r\n         */\r\n        this.useWorldGravity = true;\r\n        /**\r\n         * Gravity vector, if the world's gravity is not used\r\n         */\r\n        this.gravity = new b2Vec2(0, 0);\r\n    }\r\n    Step(step) {\r\n        if (!this.m_bodyList) {\r\n            return;\r\n        }\r\n        if (this.useWorldGravity) {\r\n            this.gravity.Copy(this.m_bodyList.body.GetWorld().GetGravity());\r\n        }\r\n        for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n            const body = i.body;\r\n            if (!body.IsAwake()) {\r\n                //Buoyancy force is just a function of position,\r\n                //so unlike most forces, it is safe to ignore sleeping bodes\r\n                continue;\r\n            }\r\n            const areac = new b2Vec2();\r\n            const massc = new b2Vec2();\r\n            let area = 0;\r\n            let mass = 0;\r\n            for (let fixture = body.GetFixtureList(); fixture; fixture = fixture.m_next) {\r\n                const sc = new b2Vec2();\r\n                const sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);\r\n                area += sarea;\r\n                areac.x += sarea * sc.x;\r\n                areac.y += sarea * sc.y;\r\n                let shapeDensity = 0;\r\n                if (this.useDensity) {\r\n                    //TODO: Expose density publicly\r\n                    shapeDensity = fixture.GetDensity();\r\n                }\r\n                else {\r\n                    shapeDensity = 1;\r\n                }\r\n                mass += sarea * shapeDensity;\r\n                massc.x += sarea * sc.x * shapeDensity;\r\n                massc.y += sarea * sc.y * shapeDensity;\r\n            }\r\n            areac.x /= area;\r\n            areac.y /= area;\r\n            //    b2Vec2 localCentroid = b2MulT(body->GetXForm(),areac);\r\n            massc.x /= mass;\r\n            massc.y /= mass;\r\n            if (area < b2_epsilon) {\r\n                continue;\r\n            }\r\n            //Buoyancy\r\n            const buoyancyForce = this.gravity.Clone().SelfNeg();\r\n            buoyancyForce.SelfMul(this.density * area);\r\n            body.ApplyForce(buoyancyForce, massc);\r\n            //Linear drag\r\n            const dragForce = body.GetLinearVelocityFromWorldPoint(areac, new b2Vec2());\r\n            dragForce.SelfSub(this.velocity);\r\n            dragForce.SelfMul((-this.linearDrag * area));\r\n            body.ApplyForce(dragForce, areac);\r\n            //Angular drag\r\n            //TODO: Something that makes more physical sense?\r\n            body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));\r\n        }\r\n    }\r\n    Draw(debugDraw) {\r\n        const r = 100;\r\n        const p1 = new b2Vec2();\r\n        const p2 = new b2Vec2();\r\n        p1.x = this.normal.x * this.offset + this.normal.y * r;\r\n        p1.y = this.normal.y * this.offset - this.normal.x * r;\r\n        p2.x = this.normal.x * this.offset - this.normal.y * r;\r\n        p2.y = this.normal.y * this.offset + this.normal.x * r;\r\n        const color = new b2Color(0, 0, 0.8);\r\n        debugDraw.DrawSegment(p1, p2, color);\r\n    }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJCdW95YW5jeUNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9Cb3gyRC9Db250cm9sbGVycy9iMkJ1b3lhbmN5Q29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUVILDJCQUEyQjtBQUUzQixPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFVLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRW5EOzs7R0FHRztBQUNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxZQUFZO0lBQXREOztRQUNFOztXQUVHO1FBQ2EsV0FBTSxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQzs7V0FFRztRQUNJLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDbEI7O1dBRUc7UUFDSSxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ25COztXQUVHO1FBQ2EsYUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1Qzs7V0FFRztRQUNJLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDdEI7O1dBRUc7UUFDSSxnQkFBVyxHQUFHLENBQUMsQ0FBQztRQUN2Qjs7O1dBR0c7UUFDSSxlQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsc0NBQXNDO1FBQ2pFOztXQUVHO1FBQ0ksb0JBQWUsR0FBRyxJQUFJLENBQUM7UUFDOUI7O1dBRUc7UUFDYSxZQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBeUU3QyxDQUFDO0lBdkVRLElBQUksQ0FBQyxJQUFnQjtRQUMxQixJQUFJLENBQUMsSUFB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","/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_CONTROLLER\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\n/**\r\n * Applies a force every frame\r\n */\r\nexport class b2ConstantAccelController extends b2Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The acceleration to apply\r\n         */\r\n        this.A = new b2Vec2(0, 0);\r\n    }\r\n    Step(step) {\r\n        const dtA = b2Vec2.MulSV(step.dt, this.A, b2ConstantAccelController.Step_s_dtA);\r\n        for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n            const body = i.body;\r\n            if (!body.IsAwake()) {\r\n                continue;\r\n            }\r\n            body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(), dtA, b2Vec2.s_t0));\r\n        }\r\n    }\r\n    Draw(draw) { }\r\n}\r\nb2ConstantAccelController.Step_s_dtA = new b2Vec2();\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb25zdGFudEFjY2VsQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbnRyb2xsZXJzL2IyQ29uc3RhbnRBY2NlbENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwyQkFBMkI7QUFFM0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUkxQzs7R0FFRztBQUNILE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxZQUFZO0lBQTNEOztRQUNFOztXQUVHO1FBQ2EsTUFBQyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQWV2QyxDQUFDO0lBYlEsSUFBSSxDQUFDLElBQWdCO1FBQzFCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hGLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDL0MsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNuQixTQUFTO2FBQ1Y7WUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDbEY7SUFDSCxDQUFDO0lBR00sSUFBSSxDQUFDLElBQVksSUFBRyxDQUFDOztBQUZiLG9DQUFVLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUszQyxTQUFTIn0=","/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_CONTROLLER\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2Vec2 } from \"../Common/b2Math\";\r\n/**\r\n * Applies a force every frame\r\n */\r\nexport class b2ConstantForceController extends b2Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * The force to apply\r\n         */\r\n        this.F = new b2Vec2(0, 0);\r\n    }\r\n    Step(step) {\r\n        for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n            const body = i.body;\r\n            if (!body.IsAwake()) {\r\n                continue;\r\n            }\r\n            body.ApplyForce(this.F, body.GetWorldCenter());\r\n        }\r\n    }\r\n    Draw(draw) { }\r\n}\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJDb25zdGFudEZvcmNlQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbnRyb2xsZXJzL2IyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwyQkFBMkI7QUFFM0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUkxQzs7R0FFRztBQUNILE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxZQUFZO0lBQTNEOztRQUNFOztXQUVHO1FBQ2EsTUFBQyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQWF2QyxDQUFDO0lBWFEsSUFBSSxDQUFDLElBQWdCO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDL0MsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNuQixTQUFTO2FBQ1Y7WUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVksSUFBRyxDQUFDO0NBQzdCO0FBRUQsU0FBUyJ9","/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_CONTROLLER\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Sqrt, b2Vec2 } from \"../Common/b2Math\";\r\n/**\r\n * Applies simplified gravity between every pair of bodies\r\n */\r\nexport class b2GravityController extends b2Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Specifies the strength of the gravitiation force\r\n         */\r\n        this.G = 1;\r\n        /**\r\n         * If true, gravity is proportional to r^-2, otherwise r^-1\r\n         */\r\n        this.invSqr = true;\r\n    }\r\n    /**\r\n     * @see b2Controller::Step\r\n     */\r\n    Step(step) {\r\n        if (this.invSqr) {\r\n            for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n                const body1 = i.body;\r\n                const p1 = body1.GetWorldCenter();\r\n                const mass1 = body1.GetMass();\r\n                for (let j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n                    const body2 = j.body;\r\n                    const p2 = body2.GetWorldCenter();\r\n                    const mass2 = body2.GetMass();\r\n                    const dx = p2.x - p1.x;\r\n                    const dy = p2.y - p1.y;\r\n                    const r2 = dx * dx + dy * dy;\r\n                    if (r2 < b2_epsilon) {\r\n                        continue;\r\n                    }\r\n                    const f = b2GravityController.Step_s_f.Set(dx, dy);\r\n                    f.SelfMul(this.G / r2 / b2Sqrt(r2) * mass1 * mass2);\r\n                    if (body1.IsAwake()) {\r\n                        body1.ApplyForce(f, p1);\r\n                    }\r\n                    if (body2.IsAwake()) {\r\n                        body2.ApplyForce(f.SelfMul(-1), p2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n                const body1 = i.body;\r\n                const p1 = body1.GetWorldCenter();\r\n                const mass1 = body1.GetMass();\r\n                for (let j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n                    const body2 = j.body;\r\n                    const p2 = body2.GetWorldCenter();\r\n                    const mass2 = body2.GetMass();\r\n                    const dx = p2.x - p1.x;\r\n                    const dy = p2.y - p1.y;\r\n                    const r2 = dx * dx + dy * dy;\r\n                    if (r2 < b2_epsilon) {\r\n                        continue;\r\n                    }\r\n                    const f = b2GravityController.Step_s_f.Set(dx, dy);\r\n                    f.SelfMul(this.G / r2 * mass1 * mass2);\r\n                    if (body1.IsAwake()) {\r\n                        body1.ApplyForce(f, p1);\r\n                    }\r\n                    if (body2.IsAwake()) {\r\n                        body2.ApplyForce(f.SelfMul(-1), p2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Draw(draw) { }\r\n}\r\nb2GravityController.Step_s_f = new b2Vec2();\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJHcmF2aXR5Q29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbnRyb2xsZXJzL2IyR3Jhdml0eUNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwyQkFBMkI7QUFFM0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2xEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLFlBQVk7SUFBckQ7O1FBQ0U7O1dBRUc7UUFDSSxNQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2I7O1dBRUc7UUFDSSxXQUFNLEdBQUcsSUFBSSxDQUFDO0lBNkR2QixDQUFDO0lBM0RDOztPQUVHO0lBQ0ksSUFBSSxDQUFDLElBQWdCO1FBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7Z0JBQy9DLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDbEMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7b0JBQzFELE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3JCLE1B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","/*\r\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n// #if B2_ENABLE_CONTROLLER\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2Mat22, b2Vec2, b2Max } from \"../Common/b2Math\";\r\nimport { b2_epsilon } from \"../Common/b2Settings\";\r\n/**\r\n * Applies top down linear damping to the controlled bodies\r\n * The damping is calculated by multiplying velocity by a matrix\r\n * in local co-ordinates.\r\n */\r\nexport class b2TensorDampingController extends b2Controller {\r\n    constructor() {\r\n        super(...arguments);\r\n        /// Tensor to use in damping model\r\n        this.T = new b2Mat22();\r\n        /*Some examples (matrixes in format (row1; row2))\r\n        (-a 0; 0 -a)    Standard isotropic damping with strength a\r\n        ( 0 a; -a 0)    Electron in fixed field - a force at right angles to velocity with proportional magnitude\r\n        (-a 0; 0 -b)    Differing x and y damping. Useful e.g. for top-down wheels.\r\n        */\r\n        //By the way, tensor in this case just means matrix, don't let the terminology get you down.\r\n        /// Set this to a positive number to clamp the maximum amount of damping done.\r\n        this.maxTimestep = 0;\r\n    }\r\n    // Typically one wants maxTimestep to be 1/(max eigenvalue of T), so that damping will never cause something to reverse direction\r\n    /**\r\n     * @see b2Controller::Step\r\n     */\r\n    Step(step) {\r\n        let timestep = step.dt;\r\n        if (timestep <= b2_epsilon) {\r\n            return;\r\n        }\r\n        if (timestep > this.maxTimestep && this.maxTimestep > 0) {\r\n            timestep = this.maxTimestep;\r\n        }\r\n        for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n            const body = i.body;\r\n            if (!body.IsAwake()) {\r\n                continue;\r\n            }\r\n            const damping = body.GetWorldVector(b2Mat22.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity(), b2Vec2.s_t0), b2Vec2.s_t1), b2TensorDampingController.Step_s_damping);\r\n            //    body->SetLinearVelocity(body->GetLinearVelocity() + timestep * damping);\r\n            body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(), b2Vec2.MulSV(timestep, damping, b2Vec2.s_t0), b2Vec2.s_t1));\r\n        }\r\n    }\r\n    Draw(draw) { }\r\n    /**\r\n     * Sets damping independantly along the x and y axes\r\n     */\r\n    SetAxisAligned(xDamping, yDamping) {\r\n        this.T.ex.x = (-xDamping);\r\n        this.T.ex.y = 0;\r\n        this.T.ey.x = 0;\r\n        this.T.ey.y = (-yDamping);\r\n        if (xDamping > 0 || yDamping > 0) {\r\n            this.maxTimestep = 1 / b2Max(xDamping, yDamping);\r\n        }\r\n        else {\r\n            this.maxTimestep = 0;\r\n        }\r\n    }\r\n}\r\nb2TensorDampingController.Step_s_damping = new b2Vec2();\r\n// #endif\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYjJUZW5zb3JEYW1waW5nQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL0JveDJEL0NvbnRyb2xsZXJzL2IyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwyQkFBMkI7QUFFM0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFlBQVk7SUFBM0Q7O1FBQ0ksa0NBQWtDO1FBQ2xCLE1BQUMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2xDOzs7O1VBSUU7UUFDRiw0RkFBNEY7UUFFNUYsOEVBQThFO1FBQ3ZFLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO0lBaUQzQixDQUFDO0lBaERHLGlJQUFpSTtJQUVqSTs7T0FFRztJQUNJLElBQUksQ0FBQyxJQUFnQjtRQUN4QixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksUUFBUSxJQUFJLFVBQVUsRUFBRTtZQUN4QixPQUFPO1NBQ1Y7UUFDRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFFO1lBQ3JELFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQy9CO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUM3QyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2pCLFNBQVM7YUFDWjtZQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQ1QsSUFBSSxDQUFDLENBQUMsRUFDTixJQUFJLENBQUMsY0FBYyxDQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDaEIseUJBQXlCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDMUMsOEVBQThFO1lBQzlFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDN0g7SUFDTCxDQUFDO0lBR00sSUFBSSxDQUFDLElBQVksSUFBRyxDQUFDO0lBRTVCOztPQUVHO0lBQ0ksY0FBYyxDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7UUFDdEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQixJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7O0FBakJjLHdDQUFjLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQW9CakQsU0FBUyJ9","/*\r\n* Copyright (c) 2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2_pi, b2MakeNumberArray } from \"../Common/b2Settings\";\r\nimport { b2Atan2, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Color } from \"../Common/b2Draw\";\r\n///\r\nexport class b2RopeDef {\r\n    constructor() {\r\n        ///\r\n        this.vertices = [];\r\n        ///\r\n        this.count = 0;\r\n        ///\r\n        this.masses = [];\r\n        ///\r\n        this.gravity = new b2Vec2(0, 0);\r\n        ///\r\n        this.damping = 0.1;\r\n        /// Stretching stiffness\r\n        this.k2 = 0.9;\r\n        /// Bending stiffness. Values above 0.5 can make the simulation blow up.\r\n        this.k3 = 0.1;\r\n    }\r\n}\r\n///\r\nexport class b2Rope {\r\n    constructor() {\r\n        this.m_count = 0;\r\n        this.m_ps = [];\r\n        this.m_p0s = [];\r\n        this.m_vs = [];\r\n        this.m_ims = [];\r\n        this.m_Ls = [];\r\n        this.m_as = [];\r\n        this.m_gravity = new b2Vec2();\r\n        this.m_damping = 0;\r\n        this.m_k2 = 1;\r\n        this.m_k3 = 0.1;\r\n    }\r\n    GetVertexCount() {\r\n        return this.m_count;\r\n    }\r\n    GetVertices() {\r\n        return this.m_ps;\r\n    }\r\n    ///\r\n    Initialize(def) {\r\n        // DEBUG: b2Assert(def.count >= 3);\r\n        this.m_count = def.count;\r\n        // this.m_ps = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_ps = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_p0s = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_p0s = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_vs = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));\r\n        this.m_vs = b2Vec2.MakeArray(this.m_count);\r\n        // this.m_ims = (float32*)b2Alloc(this.m_count * sizeof(float32));\r\n        this.m_ims = b2MakeNumberArray(this.m_count);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_ps[i].Copy(def.vertices[i]);\r\n            this.m_p0s[i].Copy(def.vertices[i]);\r\n            this.m_vs[i].SetZero();\r\n            const m = def.masses[i];\r\n            if (m > 0) {\r\n                this.m_ims[i] = 1 / m;\r\n            }\r\n            else {\r\n                this.m_ims[i] = 0;\r\n            }\r\n        }\r\n        const count2 = this.m_count - 1;\r\n        const count3 = this.m_count - 2;\r\n        // this.m_Ls = (float32*)be2Alloc(count2 * sizeof(float32));\r\n        this.m_Ls = b2MakeNumberArray(count2);\r\n        // this.m_as = (float32*)b2Alloc(count3 * sizeof(float32));\r\n        this.m_as = b2MakeNumberArray(count3);\r\n        for (let i = 0; i < count2; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            this.m_Ls[i] = b2Vec2.DistanceVV(p1, p2);\r\n        }\r\n        for (let i = 0; i < count3; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const p3 = this.m_ps[i + 2];\r\n            const d1 = b2Vec2.SubVV(p2, p1, b2Vec2.s_t0);\r\n            const d2 = b2Vec2.SubVV(p3, p2, b2Vec2.s_t1);\r\n            const a = b2Vec2.CrossVV(d1, d2);\r\n            const b = b2Vec2.DotVV(d1, d2);\r\n            this.m_as[i] = b2Atan2(a, b);\r\n        }\r\n        this.m_gravity.Copy(def.gravity);\r\n        this.m_damping = def.damping;\r\n        this.m_k2 = def.k2;\r\n        this.m_k3 = def.k3;\r\n    }\r\n    ///\r\n    Step(h, iterations) {\r\n        if (h === 0) {\r\n            return;\r\n        }\r\n        const d = Math.exp(-h * this.m_damping);\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            this.m_p0s[i].Copy(this.m_ps[i]);\r\n            if (this.m_ims[i] > 0) {\r\n                this.m_vs[i].SelfMulAdd(h, this.m_gravity);\r\n            }\r\n            this.m_vs[i].SelfMul(d);\r\n            this.m_ps[i].SelfMulAdd(h, this.m_vs[i]);\r\n        }\r\n        for (let i = 0; i < iterations; ++i) {\r\n            this.SolveC2();\r\n            this.SolveC3();\r\n            this.SolveC2();\r\n        }\r\n        const inv_h = 1 / h;\r\n        for (let i = 0; i < this.m_count; ++i) {\r\n            b2Vec2.MulSV(inv_h, b2Vec2.SubVV(this.m_ps[i], this.m_p0s[i], b2Vec2.s_t0), this.m_vs[i]);\r\n        }\r\n    }\r\n    SolveC2() {\r\n        const count2 = this.m_count - 1;\r\n        for (let i = 0; i < count2; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const d = b2Vec2.SubVV(p2, p1, b2Rope.s_d);\r\n            const L = d.Normalize();\r\n            const im1 = this.m_ims[i];\r\n            const im2 = this.m_ims[i + 1];\r\n            if (im1 + im2 === 0) {\r\n                continue;\r\n            }\r\n            const s1 = im1 / (im1 + im2);\r\n            const s2 = im2 / (im1 + im2);\r\n            p1.SelfMulSub(this.m_k2 * s1 * (this.m_Ls[i] - L), d);\r\n            p2.SelfMulAdd(this.m_k2 * s2 * (this.m_Ls[i] - L), d);\r\n            // this.m_ps[i] = p1;\r\n            // this.m_ps[i + 1] = p2;\r\n        }\r\n    }\r\n    SetAngle(angle) {\r\n        const count3 = this.m_count - 2;\r\n        for (let i = 0; i < count3; ++i) {\r\n            this.m_as[i] = angle;\r\n        }\r\n    }\r\n    SolveC3() {\r\n        const count3 = this.m_count - 2;\r\n        for (let i = 0; i < count3; ++i) {\r\n            const p1 = this.m_ps[i];\r\n            const p2 = this.m_ps[i + 1];\r\n            const p3 = this.m_ps[i + 2];\r\n            const m1 = this.m_ims[i];\r\n            const m2 = this.m_ims[i + 1];\r\n            const m3 = this.m_ims[i + 2];\r\n            const d1 = b2Vec2.SubVV(p2, p1, b2Rope.s_d1);\r\n            const d2 = b2Vec2.SubVV(p3, p2, b2Rope.s_d2);\r\n            const L1sqr = d1.LengthSquared();\r\n            const L2sqr = d2.LengthSquared();\r\n            if (L1sqr * L2sqr === 0) {\r\n                continue;\r\n            }\r\n            const a = b2Vec2.CrossVV(d1, d2);\r\n            const b = b2Vec2.DotVV(d1, d2);\r\n            let angle = b2Atan2(a, b);\r\n            const Jd1 = b2Vec2.MulSV((-1 / L1sqr), d1.SelfSkew(), b2Rope.s_Jd1);\r\n            const Jd2 = b2Vec2.MulSV((1 / L2sqr), d2.SelfSkew(), b2Rope.s_Jd2);\r\n            const J1 = b2Vec2.NegV(Jd1, b2Rope.s_J1);\r\n            const J2 = b2Vec2.SubVV(Jd1, Jd2, b2Rope.s_J2);\r\n            const J3 = Jd2;\r\n            let mass = m1 * b2Vec2.DotVV(J1, J1) + m2 * b2Vec2.DotVV(J2, J2) + m3 * b2Vec2.DotVV(J3, J3);\r\n            if (mass === 0) {\r\n                continue;\r\n            }\r\n            mass = 1 / mass;\r\n            let C = angle - this.m_as[i];\r\n            while (C > b2_pi) {\r\n                angle -= 2 * b2_pi;\r\n                C = angle - this.m_as[i];\r\n            }\r\n            while (C < -b2_pi) {\r\n                angle += 2 * b2_pi;\r\n                C = angle - this.m_as[i];\r\n            }\r\n            const impulse = -this.m_k3 * mass * C;\r\n            p1.SelfMulAdd((m1 * impulse), J1);\r\n            p2.SelfMulAdd((m2 * impulse), J2);\r\n            p3.SelfMulAdd((m3 * impulse), J3);\r\n            // this.m_ps[i] = p1;\r\n            // this.m_ps[i + 1] = p2;\r\n            // this.m_ps[i + 2] = p3;\r\n        }\r\n    }\r\n    Draw(draw) {\r\n        const c = new b2Color(0.4, 0.5, 0.7);\r\n        for (let i = 0; i < this.m_count - 1; ++i) {\r\n            draw.DrawSegment(this.m_ps[i], this.m_ps[i + 1], c);\r\n        }\r\n    }\r\n}\r\n///\r\nb2Rope.s_d = new b2Vec2();\r\nb2Rope.s_d1 = new b2Vec2();\r\nb2Rope.s_d2 = new b2Vec2();\r\nb2Rope.s_Jd1 = new b2Vec2();\r\nb2Rope.s_Jd2 = new b2Vec2();\r\nb2Rope.s_J1 = new b2Vec2();\r\nb2Rope.s_J2 = new b2Vec2();\r\n//# sourceMappingURL=data:application/json;base64,","/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n/**\r\n * \\mainpage Box2D API Documentation\r\n * \\section intro_sec Getting Started\r\n * For documentation please see http://box2d.org/documentation.html\r\n * For discussion please visit http://box2d.org/forum\r\n */\r\n// These include files constitute the main Box2D API\r\nexport * from \"./Common/b2Settings\";\r\nexport * from \"./Common/b2Math\";\r\nexport * from \"./Common/b2Draw\";\r\nexport * from \"./Common/b2Timer\";\r\nexport * from \"./Common/b2GrowableStack\";\r\nexport * from \"./Common/b2BlockAllocator\";\r\nexport * from \"./Common/b2StackAllocator\";\r\nexport * from \"./Collision/b2Collision\";\r\nexport * from \"./Collision/b2Distance\";\r\nexport * from \"./Collision/b2BroadPhase\";\r\nexport * from \"./Collision/b2DynamicTree\";\r\nexport * from \"./Collision/b2TimeOfImpact\";\r\nexport * from \"./Collision/b2CollideCircle\";\r\nexport * from \"./Collision/b2CollidePolygon\";\r\nexport * from \"./Collision/b2CollideEdge\";\r\nexport * from \"./Collision/Shapes/b2Shape\";\r\nexport * from \"./Collision/Shapes/b2CircleShape\";\r\nexport * from \"./Collision/Shapes/b2PolygonShape\";\r\nexport * from \"./Collision/Shapes/b2EdgeShape\";\r\nexport * from \"./Collision/Shapes/b2ChainShape\";\r\nexport * from \"./Dynamics/b2Fixture\";\r\nexport * from \"./Dynamics/b2Body\";\r\nexport * from \"./Dynamics/b2World\";\r\nexport * from \"./Dynamics/b2WorldCallbacks\";\r\nexport * from \"./Dynamics/b2Island\";\r\nexport * from \"./Dynamics/b2TimeStep\";\r\nexport * from \"./Dynamics/b2ContactManager\";\r\nexport * from \"./Dynamics/Contacts/b2Contact\";\r\nexport * from \"./Dynamics/Contacts/b2ContactFactory\";\r\nexport * from \"./Dynamics/Contacts/b2ContactSolver\";\r\nexport * from \"./Dynamics/Contacts/b2CircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2PolygonContact\";\r\nexport * from \"./Dynamics/Contacts/b2PolygonAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2EdgeAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2EdgeAndPolygonContact\";\r\nexport * from \"./Dynamics/Contacts/b2ChainAndCircleContact\";\r\nexport * from \"./Dynamics/Contacts/b2ChainAndPolygonContact\";\r\nexport * from \"./Dynamics/Joints/b2Joint\";\r\nexport * from \"./Dynamics/Joints/b2AreaJoint\";\r\nexport * from \"./Dynamics/Joints/b2DistanceJoint\";\r\nexport * from \"./Dynamics/Joints/b2FrictionJoint\";\r\nexport * from \"./Dynamics/Joints/b2GearJoint\";\r\nexport * from \"./Dynamics/Joints/b2MotorJoint\";\r\nexport * from \"./Dynamics/Joints/b2MouseJoint\";\r\nexport * from \"./Dynamics/Joints/b2PrismaticJoint\";\r\nexport * from \"./Dynamics/Joints/b2PulleyJoint\";\r\nexport * from \"./Dynamics/Joints/b2RevoluteJoint\";\r\nexport * from \"./Dynamics/Joints/b2RopeJoint\";\r\nexport * from \"./Dynamics/Joints/b2WeldJoint\";\r\nexport * from \"./Dynamics/Joints/b2WheelJoint\";\r\n// #if B2_ENABLE_CONTROLLER\r\nexport * from \"./Controllers/b2Controller\";\r\nexport * from \"./Controllers/b2BuoyancyController\";\r\nexport * from \"./Controllers/b2ConstantAccelController\";\r\nexport * from \"./Controllers/b2ConstantForceController\";\r\nexport * from \"./Controllers/b2GravityController\";\r\nexport * from \"./Controllers/b2TensorDampingController\";\r\n// #endif\r\n// #if B2_ENABLE_PARTICLE\r\nexport * from \"./Particle/b2Particle\";\r\nexport * from \"./Particle/b2ParticleGroup\";\r\nexport * from \"./Particle/b2ParticleSystem\";\r\n// #endif\r\nexport * from \"./Rope/b2Rope\";\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm94MkQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9Cb3gyRC9Cb3gyRC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztFQWdCRTtBQUVGOzs7OztHQUtHO0FBRUgsb0RBQW9EO0FBRXBELGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyxpQkFBaUIsQ0FBQztBQUNoQyxjQUFjLGlCQUFpQixDQUFDO0FBQ2hDLGNBQWMsa0JBQWtCLENBQUM7QUFDakMsY0FBYywwQkFBMEIsQ0FBQztBQUN6QyxjQUFjLDJCQUEyQixDQUFDO0FBQzFDLGNBQWMsMkJBQTJCLENBQUM7QUFFMUMsY0FBYyx5QkFBeUIsQ0FBQztBQUN4QyxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsMEJBQTBCLENBQUM7QUFDekMsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLDRCQUE0QixDQUFDO0FBQzNDLGNBQWMsNkJBQTZCLENBQUM7QUFDNUMsY0FBYyw4QkFBOEIsQ0FBQztBQUM3QyxjQUFjLDJCQUEyQixDQUFDO0FBRTFDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYyxrQ0FBa0MsQ0FBQztBQUNqRCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMsZ0NBQWdDLENBQUM7QUFDL0MsY0FBYyxpQ0FBaUMsQ0FBQztBQUVoRCxjQUFjLHNCQUFzQixDQUFDO0FBQ3JDLGNBQWMsbUJBQW1CLENBQUM7QUFDbEMsY0FBYyxvQkFBb0IsQ0FBQztBQUNuQyxjQUFjLDZCQUE2QixDQUFDO0FBQzVDLGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLDZCQUE2QixDQUFDO0FBRTVDLGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxzQ0FBc0MsQ0FBQztBQUNyRCxjQUFjLHFDQUFxQyxDQUFDO0FBQ3BELGNBQWMscUNBQXFDLENBQUM7QUFDcEQsY0FBYyxzQ0FBc0MsQ0FBQztBQUNyRCxjQUFjLCtDQUErQyxDQUFDO0FBQzlELGNBQWMsNENBQTRDLENBQUM7QUFDM0QsY0FBYyw2Q0FBNkMsQ0FBQztBQUM1RCxjQUFjLDZDQUE2QyxDQUFDO0FBQzVELGNBQWMsOENBQThDLENBQUM7QUFFN0QsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLCtCQUErQixDQUFDO0FBQzlDLGNBQWMsbUNBQW1DLENBQUM7QUFDbEQsY0FBYyxtQ0FBbUMsQ0FBQztBQUNsRCxjQUFjLCtCQUErQixDQUFDO0FBQzlDLGNBQWMsZ0NBQWdDLENBQUM7QUFDL0MsY0FBYyxnQ0FBZ0MsQ0FBQztBQUMvQyxjQUFjLG9DQUFvQyxDQUFDO0FBQ25ELGNBQWMsaUNBQWlDLENBQUM7QUFDaEQsY0FBYyxtQ0FBbUMsQ0FBQztBQUNsRCxjQUFjLCtCQUErQixDQUFDO0FBQzlDLGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyxnQ0FBZ0MsQ0FBQztBQUUvQywyQkFBMkI7QUFDM0IsY0FBYyw0QkFBNEIsQ0FBQztBQUMzQyxjQUFjLG9DQUFvQyxDQUFDO0FBQ25ELGNBQWMseUNBQXlDLENBQUM7QUFDeEQsY0FBYyx5Q0FBeUMsQ0FBQztBQUN4RCxjQUFjLG1DQUFtQyxDQUFDO0FBQ2xELGNBQWMseUNBQXlDLENBQUM7QUFDeEQsU0FBUztBQUVULHlCQUF5QjtBQUN6QixjQUFjLHVCQUF1QixDQUFDO0FBQ3RDLGNBQWMsNEJBQTRCLENBQUM7QUFDM0MsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxTQUFTO0FBRVQsY0FBYyxlQUFlLENBQUMifQ==","﻿/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\nimport {\r\n\tb2_pi,\r\n\tb2Vec2, b2Rot, b2DegToRad, b2Transform, b2AABB,\r\n\tb2Color, b2Draw, b2DrawFlags,\r\n\tb2Body, b2Fixture,\r\n\tb2Joint,\r\n} from \"./Physics.js\";\r\nimport { Rectangle } from \"../math.js\";\r\n\r\n\r\nfunction setFlags(flags, bit, flag) {\r\n\treturn flag ? (flags | bit):(flags & ~bit);\r\n}\r\n\r\nclass DebugDraw extends b2Draw {\r\n\t/**\r\n\t * This class implements debug drawing callbacks that are\r\n\t * invoked inside b2World::Step.\r\n\t * @export\r\n\t * @constructor\r\n\t * @extends {b2Draw}\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t */\r\n\tconstructor(ctx) {\r\n\t\tsuper(...arguments);\r\n\r\n\t\t/**\r\n\t\t * @type {CanvasRenderingContext2D}\r\n\t\t */\r\n\t\tthis.m_ctx = ctx;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.axis_length = 1;\r\n\r\n\t\t/**\r\n\t\t * @type {b2Rot}\r\n\t\t */\r\n\t\tthis.viewRotation = new b2Rot(b2DegToRad(0));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.viewZoom = 1;\r\n\t\t\r\n\t\tthis.flag_drawShape = true;\r\n\t\tthis.flag_drawJoint = true;\r\n\t\tthis.flag_drawAabb = false;\r\n\t\tthis.flag_drawCenterOfMass = true;\r\n\t\tthis.flag_drawController = true;\r\n\t\tthis.flag_drawParticle = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tget canvasScale() {\r\n\t\treturn $gv.CANVAS_SCALE;\r\n\t}\r\n\tset canvasScale(value) {\r\n\t\t$gv.CANVAS_SCALE = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Rectangle}\r\n\t */\r\n\tget viewRect() {\r\n\t\treturn $gv.m_viewRect;\r\n\t}\r\n\r\n\tset flag_drawAll(flag) { this.m_drawFlags = flag ? b2DrawFlags.e_all : b2DrawFlags.e_none;  }\r\n\tset flag_drawShape(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_shapeBit, flag); }\r\n\tset flag_drawJoint(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_jointBit, flag); }\r\n\tset flag_drawAabb(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_aabbBit, flag); }\r\n\tset flag_drawPair(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_pairBit, flag); }\r\n\tset flag_drawCenterOfMass(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_centerOfMassBit, flag); }\r\n\tset flag_drawParticle(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_particleBit, flag); }\r\n\tset flag_drawController(flag) { this.m_drawFlags = setFlags(this.m_drawFlags, b2DrawFlags.e_controllerBit, flag); }\r\n\t\r\n\tget flag_drawAll() { this.m_drawFlags; }\r\n\tget flag_drawShape() { return this.m_drawFlags & b2DrawFlags.e_shapeBit; }\r\n\tget flag_drawJoint() { return this.m_drawFlags & b2DrawFlags.e_jointBit; }\r\n\tget flag_drawAabb() { return this.m_drawFlags & b2DrawFlags.e_aabbBit; }\r\n\tget flag_drawPair() { return this.m_drawFlags & b2DrawFlags.e_pairBit; }\r\n\tget flag_drawCenterOfMass() { return this.m_drawFlags & b2DrawFlags.e_centerOfMassBit; }\r\n\tget flag_drawParticle() { return this.m_drawFlags & b2DrawFlags.e_particleBit; }\r\n\tget flag_drawController() { return this.m_drawFlags & b2DrawFlags.e_controllerBit; }\r\n\r\n\tget flagNames() {\r\n\t\treturn [\r\n\t\t\t\"flag_drawAll\",\r\n\t\t\t\"flag_drawShape\",\r\n\t\t\t\"flag_drawJoint\",\r\n\t\t\t\"flag_drawAabb\",\r\n\t\t\t\"flag_drawPair\",\r\n\t\t\t\"flag_drawCenterOfMass\",\r\n\t\t\t\"flag_drawParticle\",\r\n\t\t\t\"flag_drawController\",\r\n\t\t];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.PushTransform = function (xf)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tctx.save();\r\n\t//ctx.translate(xf.p.x, xf.p.y);\r\n\t//ctx.rotate(xf.q.GetAngle());\r\n\tctx.transform(xf.q.c, xf.q.s, -xf.q.s, xf.q.c, xf.p.x, xf.p.y);\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.PopTransform = function (xf)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tctx.restore();\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2[]} vertices\r\n * @param {number} vertexCount\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color)\r\n{\r\n\tif (!vertexCount) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(vertices[0].x, vertices[0].y);\r\n\tfor (let i = 1; i < vertexCount; i++)\r\n\t{\r\n\t\tctx.lineTo(vertices[i].x, vertices[i].y);\r\n\t}\r\n\tctx.closePath();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} vertices\r\n * @param {number} vertexCount\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color)\r\n{\r\n\tif (!vertexCount) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(vertices[0].x, vertices[0].y);\r\n\tfor (let i = 1; i < vertexCount; i++)\r\n\t{\r\n\t\tctx.lineTo(vertices[i].x, vertices[i].y);\r\n\t}\r\n\tctx.closePath();\r\n\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\tctx.fill();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} center\r\n * @param {number} radius\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawCircle = function (center, radius, color)\r\n{\r\n\tif (!radius) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.arc(center.x, center.y, radius, 0, b2_pi * 2, true);\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} center\r\n * @param {number} radius\r\n * @param {b2Vec2} axis\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color)\r\n{\r\n\tif (!radius) return;\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tlet cx = center.x;\r\n\tlet cy = center.y;\r\n\tctx.beginPath();\r\n\tctx.arc(cx, cy, radius, 0, b2_pi * 2, true);\r\n\tctx.moveTo(cx, cy);\r\n\tctx.lineTo((cx + axis.x * radius), (cy + axis.y * radius));\r\n\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\tctx.fill();\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} centers\r\n * @param {number} radius\r\n * @param {b2Color} colors\r\n * @param {number} count\r\n */\r\nDebugDraw.prototype.DrawParticles = function (centers, radius, colors, count) {\r\n\tconst ctx = this.m_ctx;\r\n\tif (ctx) {\r\n\t\tif (colors !== null) {\r\n\t\t\tfor (let i = 0; i < count; ++i) {\r\n\t\t\t\tlet center = centers[i];\r\n\t\t\t\t/** @type {b2Color} */let color = colors[i];\r\n\t\t\t\tctx.fillStyle = color.MakeStyleString(0.5);\r\n\t\t\t\tctx.fillRect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\r\n\t\t\t\t///ctx.beginPath(); ctx.arc(center.x, center.y, radius, 0, box2d.b2_pi * 2, true); ctx.fill();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tctx.fillStyle = \"rgba(255,255,255,0.5)\";\r\n\t\t\tctx.beginPath();\r\n\t\t\tfor (let i = 0; i < count; ++i) {\r\n\t\t\t\tlet center = centers[i];\r\n\t\t\t\tctx.rect(center.x - radius, center.y - radius, 2 * radius, 2 * radius);\r\n\t\t\t\t///ctx.beginPath(); ctx.arc(center.x, center.y, radius, 0, box2d.b2_pi * 2, true); ctx.fill();\r\n\t\t\t}\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} p1\r\n * @param {b2Vec2} p2\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawSegment = function (p1, p2, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(p1.x, p1.y);\r\n\tctx.lineTo(p2.x, p2.y);\r\n\tctx.strokeStyle = color.MakeStyleString(1);\r\n\tctx.stroke();\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Transform} xf\r\n */\r\nDebugDraw.prototype.DrawTransform = function (xf)\r\n{\r\n\tif (this.axis_length == 0) {\r\n\t\treturn;\r\n\t}\r\n\t// viewport -> canvas\r\n\tlet cs = this.canvasScale;\r\n\tif (!this.viewRect.collide4f2(xf.p.x * cs, xf.p.y * cs, this.axis_length * cs, this.axis_length * cs)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tthis.PushTransform(xf);\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(0, 0);\r\n\tctx.lineTo(this.axis_length, 0);\r\n\tctx.strokeStyle = b2Color.RED.MakeStyleString(1);\r\n\tctx.stroke();\r\n\r\n\tctx.beginPath();\r\n\tctx.moveTo(0, 0);\r\n\tctx.lineTo(0, this.axis_length);\r\n\tctx.strokeStyle = b2Color.GREEN.MakeStyleString(1);\r\n\tctx.stroke();\r\n\r\n\tthis.PopTransform(xf);\r\n};\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2Vec2} p\r\n * @param {number} size\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawPoint = function (p, size, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.fillStyle = color.MakeStyleString();\r\n\tsize /= this.viewZoom;\r\n\tsize /= this.canvasScale;\r\n\tlet hsize = size / 2;\r\n\tctx.fillRect(p.x - hsize, p.y - hsize, size, size);\r\n}\r\n\r\n/**\r\n * @export\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {string} format\r\n * @param {...string|number} var_args\r\n */\r\nDebugDraw.prototype.DrawString = function (x, y, format, var_args)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\tconst font = ctx.font;\r\n\r\n\tlet args = Array.prototype.slice.call(arguments);\r\n\tlet string = goog.string.format.apply(null, args.slice(2));\r\n\r\n\tctx.save();\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.font = '18pt helvetica';//'9pt lucida console';\r\n\t\tlet color = DebugDraw.prototype.DrawString.s_color;\r\n\t\tctx.fillStyle = color.MakeStyleString();\r\n\t\tctx.fillText(string, x, y);\r\n\tctx.restore();\r\n\r\n\tctx.font = font;\r\n}\r\nDebugDraw.prototype.DrawString.s_color = new b2Color(0.9, 0.6, 0.6);\r\n\r\n/**\r\n * @export\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {string} format\r\n * @param {...string|number} var_args\r\n */\r\nDebugDraw.prototype.DrawStringWorld = function (x, y, format, var_args)\r\n{\r\n\tlet p = DebugDraw.prototype.DrawStringWorld.s_p.Set(x, y);\r\n\r\n\t// world -> viewport\r\n\tlet vt = this.viewCenter;\r\n\tb2Vec2.SubVV(p, vt, p);\r\n\tlet vr = this.viewRotation;\r\n\tb2Rot.MulTRV(vr, p, p);\r\n\tlet vs = this.viewZoom;\r\n\tb2Vec2.MulSV(vs, p, p);\r\n\r\n\t// viewport -> canvas\r\n\tlet cs = this.canvasScale;\r\n\tb2Vec2.MulSV(cs, p, p);\r\n\tp.y *= -1;\r\n\tlet cc = DebugDraw.prototype.DrawStringWorld.s_cc.Set(0.5 * this.m_canvas.width, 0.5 * this.m_canvas.height);\r\n\tb2Vec2.AddVV(p, cc, p);\r\n\r\n\tlet ctx = this.m_ctx;\r\n\tconst font = ctx.font;\r\n\r\n\tlet args = Array.prototype.slice.call(arguments);\r\n\tlet string = goog.string.format.apply(null, args.slice(2));\r\n\r\n\tctx.save();\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.font = '18pt helvetica';//'9pt lucida console';\r\n\t\tlet color = DebugDraw.prototype.DrawStringWorld.s_color;\r\n\t\tctx.fillStyle = color.MakeStyleString();\r\n\t\tctx.fillText(string, p.x, p.y);\r\n\tctx.restore();\r\n\r\n\tctx.font = font;\r\n}\r\nDebugDraw.prototype.DrawStringWorld.s_p = new b2Vec2();\r\nDebugDraw.prototype.DrawStringWorld.s_cc = new b2Vec2();\r\nDebugDraw.prototype.DrawStringWorld.s_color = new b2Color(0.5, 0.9, 0.5);\r\n\r\n/**\r\n * @export\r\n * @return {void}\r\n * @param {b2AABB} aabb\r\n * @param {b2Color} color\r\n */\r\nDebugDraw.prototype.DrawAABB = function (aabb, color)\r\n{\r\n\tlet ctx = this.m_ctx;\r\n\r\n\tctx.strokeStyle = color.MakeStyleString();\r\n\tlet x = aabb.lowerBound.x;\r\n\tlet y = aabb.lowerBound.y;\r\n\tlet w = aabb.upperBound.x - aabb.lowerBound.x;\r\n\tlet h = aabb.upperBound.y - aabb.lowerBound.y;\r\n\tctx.strokeRect(x, y, w, h);\r\n}\r\n\r\nexport default DebugDraw;\r\n"],"sourceRoot":""}